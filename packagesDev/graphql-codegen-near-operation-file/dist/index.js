"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.preset = exports.resolveDocumentImports = void 0;
const add_1 = __importDefault(require("@graphql-codegen/add"));
const path_1 = require("path");
const graphql_1 = require("graphql");
const utils_1 = require("./utils");
const resolve_document_imports_1 = require("./resolve-document-imports");
Object.defineProperty(exports, "resolveDocumentImports", { enumerable: true, get: function () { return resolve_document_imports_1.resolveDocumentImports; } });
exports.preset = {
    buildGeneratesSection: options => {
        var _a;
        const schemaObject = options.schemaAst
            ? options.schemaAst
            : graphql_1.buildASTSchema(options.schema, options.config);
        const baseDir = options.presetConfig.cwd || process.cwd();
        const extension = options.presetConfig.extension || '.generated.ts';
        const folder = options.presetConfig.folder || '';
        const importTypesNamespace = options.presetConfig.importTypesNamespace || 'Types';
        const importAllFragmentsFrom = options.presetConfig.importAllFragmentsFrom || null;
        const baseTypesPath = options.presetConfig.baseTypesPath;
        if (!baseTypesPath) {
            throw new Error(`Preset "near-operation-file" requires you to specify "baseTypesPath" configuration and point it to your base types file (generated by "typescript" plugin)!`);
        }
        const shouldAbsolute = !baseTypesPath.startsWith('~');
        const pluginMap = {
            ...options.pluginMap,
            add: add_1.default,
        };
        const sources = resolve_document_imports_1.resolveDocumentImports(options, schemaObject, {
            baseDir,
            generateFilePath(location) {
                const newFilePath = utils_1.defineFilepathSubfolder(location, folder);
                return utils_1.appendExtensionToFilePath(newFilePath, extension);
            },
            schemaTypesSource: {
                path: shouldAbsolute ? path_1.join(options.baseOutputDir, baseTypesPath) : baseTypesPath,
                namespace: importTypesNamespace,
            },
            typesImport: (_a = options.config.useTypeImports) !== null && _a !== void 0 ? _a : false,
        });
        return sources.map(({ importStatements, externalFragments, fragmentImports, ...source }) => {
            let fragmentImportsArr = fragmentImports;
            if (importAllFragmentsFrom) {
                fragmentImportsArr = fragmentImports.map(t => {
                    const newImportSource = typeof importAllFragmentsFrom === 'string'
                        ? { ...t.importSource, path: importAllFragmentsFrom }
                        : importAllFragmentsFrom(t.importSource, source.filename);
                    return {
                        ...t,
                        importSource: newImportSource || t.importSource,
                    };
                });
            }
            const plugins = [
                // TODO/NOTE I made globalNamespace include schema types - is that correct?
                ...(options.config.globalNamespace
                    ? []
                    : importStatements.map(importStatement => ({ add: { content: importStatement } }))),
                ...options.plugins,
            ];
            const config = {
                ...options.config,
                // This is set here in order to make sure the fragment spreads sub types
                // are exported from operations file
                exportFragmentSpreadSubTypes: true,
                namespacedImportName: importTypesNamespace,
                externalFragments,
                fragmentImports: fragmentImportsArr,
            };
            return {
                ...source,
                plugins,
                pluginMap,
                config,
                schema: options.schema,
                schemaAst: schemaObject,
                skipDocumentsValidation: true,
            };
        });
    },
};
exports.default = exports.preset;
