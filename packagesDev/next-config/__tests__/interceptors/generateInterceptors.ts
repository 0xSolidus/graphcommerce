import { generateInterceptors } from '../../src/interceptors/generateInterceptors'
import { resolveDependency } from '../../src/utils/resolveDependency'

const projectRoot = `${process.cwd()}/examples/magento-graphcms`

it('it replaces paths and creates a relative path', () => {
  const resolver = resolveDependency(projectRoot)
  const resolved = resolver('@graphcommerce/magento-cart-payment-method')
  expect(resolved.fromRoot).toMatchInlineSnapshot(`"packages/magento-cart-payment-method/index"`)
  expect(resolved.fromModule).toBe('.')
  expect(resolved.root).toBe('packages/magento-cart-payment-method')

  const resolved2 = resolver(
    '@graphcommerce/magento-cart-payment-method/PaymentMethodContext/PaymentMethodContext',
  )
  expect(resolved2.fromRoot).toMatchInlineSnapshot(
    `"packages/magento-cart-payment-method/PaymentMethodContext/PaymentMethodContext"`,
  )
  expect(resolved2.fromModule).toBe('./PaymentMethodContext')
  expect(resolved2.root).toBe('packages/magento-cart-payment-method')
})

it('it generates an interceptor', () => {
  const resolve = resolveDependency(projectRoot)
  const interceptors = generateInterceptors(
    [
      {
        component: 'PaymentMethodContextProvider',
        exported: '@graphcommerce/magento-cart-payment-method/index',
        plugin: '@graphcommerce/mollie-magento-payment/plugins/AddMollieMethods',
      },
      {
        component: 'PaymentMethodContextProvider',
        exported: '@graphcommerce/magento-cart-payment-method/index',
        plugin: '@graphcommerce/magento-payment-braintree/plugins/AddBraintreeMethods',
      },
    ],
    resolve,
  )

  expect(Object.keys(interceptors)[0]).toBe('packages/magento-cart-payment-method/index')

  expect(interceptors['packages/magento-cart-payment-method/index']?.template)
    .toMatchInlineSnapshot(`
    "/* This file is automatically generated. */

    /* eslint-disable import/no-extraneous-dependencies */
    /* eslint-disable import/export */

    import { Plugin as AddBraintreeMethods } from '@graphcommerce/magento-payment-braintree/plugins/AddBraintreeMethods'
    import { Plugin as AddMollieMethods } from '@graphcommerce/mollie-magento-payment/plugins/AddMollieMethods'
    import { PaymentMethodContextProvider as PaymentMethodContextProviderBase } from './index'

    export * from './index'

    type PaymentMethodContextProviderBaseProps = React.ComponentProps<typeof PaymentMethodContextProviderBase>

    const AddMollieMethodsInterceptor = (props: PaymentMethodContextProviderBaseProps) => (
      <AddMollieMethods {...props} Prev={PaymentMethodContextProviderBase} />
    )
    const AddBraintreeMethodsInterceptor = (props: PaymentMethodContextProviderBaseProps) => (
      <AddBraintreeMethods {...props} Prev={AddMollieMethodsInterceptor} />
    )
    export const PaymentMethodContextProvider = AddBraintreeMethodsInterceptor
    "
  `)
})

it('resolves a root plugin to be relative to the interceptor', () => {
  const interceptors = generateInterceptors(
    [
      {
        component: 'PaymentMethodContextProvider',
        exported: '@graphcommerce/magento-cart-payment-method',
        plugin: '@graphcommerce/magento-graphcms/plugins/AddPaymentMethodEnhancer',
      },
    ],
    resolveDependency(projectRoot),
  )
  expect(interceptors['packages/magento-cart-payment-method/index']?.template)
    .toMatchInlineSnapshot(`
    "/* This file is automatically generated. */

    /* eslint-disable import/no-extraneous-dependencies */
    /* eslint-disable import/export */

    import { Plugin as AddPaymentMethodEnhancer } from '@graphcommerce/magento-graphcms/plugins/AddPaymentMethodEnhancer'
    import { PaymentMethodContextProvider as PaymentMethodContextProviderBase } from '.'

    export * from '.'

    type PaymentMethodContextProviderBaseProps = React.ComponentProps<typeof PaymentMethodContextProviderBase>

    const AddPaymentMethodEnhancerInterceptor = (props: PaymentMethodContextProviderBaseProps) => (
      <AddPaymentMethodEnhancer {...props} Prev={PaymentMethodContextProviderBase} />
    )
    export const PaymentMethodContextProvider = AddPaymentMethodEnhancerInterceptor
    "
  `)
})

it('it can apply multiple plugins to a single export', () => {
  const plugins = [
    {
      component: 'PaymentMethodContextProvider',
      exported:
        '@graphcommerce/magento-cart-payment-method/PaymentMethodContext/PaymentMethodContext',
      plugin: '@graphcommerce/mollie-magento-payment/plugins/AddMollieMethods',
    },
    {
      component: 'OneMoreComponent',
      exported:
        '@graphcommerce/magento-cart-payment-method/PaymentMethodContext/PaymentMethodContext',
      plugin: '@graphcommerce/magento-payment-braintree/plugins/AddOneMore',
    },
  ]

  const resolve = resolveDependency(projectRoot)
  const interceptors = generateInterceptors(plugins, resolve)
  expect(
    interceptors['packages/magento-cart-payment-method/PaymentMethodContext/PaymentMethodContext']
      ?.template,
  ).toMatchInlineSnapshot(`
    "/* This file is automatically generated. */

    /* eslint-disable import/no-extraneous-dependencies */
    /* eslint-disable import/export */

    import { Plugin as AddMollieMethods } from '@graphcommerce/mollie-magento-payment/plugins/AddMollieMethods'
    import { Plugin as AddOneMore } from '@graphcommerce/magento-payment-braintree/plugins/AddOneMore'
    import { PaymentMethodContextProvider as PaymentMethodContextProviderBase, OneMoreComponent as OneMoreComponentBase } from './PaymentMethodContext'

    export * from './PaymentMethodContext'

    type PaymentMethodContextProviderBaseProps = React.ComponentProps<typeof PaymentMethodContextProviderBase>

    const AddMollieMethodsInterceptor = (props: PaymentMethodContextProviderBaseProps) => (
      <AddMollieMethods {...props} Prev={PaymentMethodContextProviderBase} />
    )
    export const PaymentMethodContextProvider = AddMollieMethodsInterceptor
    type OneMoreComponentBaseProps = React.ComponentProps<typeof OneMoreComponentBase>

    const AddOneMoreInterceptor = (props: OneMoreComponentBaseProps) => (
      <AddOneMore {...props} Prev={OneMoreComponentBase} />
    )
    export const OneMoreComponent = AddOneMoreInterceptor
    "
  `)
})

it('it handles on duplicates gracefully', () => {
  const plugins = [
    {
      component: 'PaymentMethodContextProvider',
      exported:
        '@graphcommerce/magento-cart-payment-method/PaymentMethodContext/PaymentMethodContext',
      plugin: '@graphcommerce/magento-payment-braintree/plugins/AddBraintreeMethods',
    },
    {
      component: 'PaymentMethodContextProvider',
      exported:
        '@graphcommerce/magento-cart-payment-method/PaymentMethodContext/PaymentMethodContext',
      plugin: '@graphcommerce/magento-payment-braintree/plugins/AddBraintreeMethods',
    },
  ]

  const resolve = resolveDependency(projectRoot)
  const interceptors = generateInterceptors(plugins, resolve)
  expect(
    interceptors['packages/magento-cart-payment-method/PaymentMethodContext/PaymentMethodContext']
      ?.template,
  ).toMatchInlineSnapshot(`
    "/* This file is automatically generated. */

    /* eslint-disable import/no-extraneous-dependencies */
    /* eslint-disable import/export */

    import { Plugin as AddBraintreeMethods } from '@graphcommerce/magento-payment-braintree/plugins/AddBraintreeMethods'
    import { PaymentMethodContextProvider as PaymentMethodContextProviderBase } from './PaymentMethodContext'

    export * from './PaymentMethodContext'

    type PaymentMethodContextProviderBaseProps = React.ComponentProps<typeof PaymentMethodContextProviderBase>

    const AddBraintreeMethodsInterceptor = (props: PaymentMethodContextProviderBaseProps) => (
      <AddBraintreeMethods {...props} Prev={PaymentMethodContextProviderBase} />
    )
    export const PaymentMethodContextProvider = AddBraintreeMethodsInterceptor
    "
  `)
})

it('it handles root plugins', () => {
  const plugins = [
    {
      component: 'PaymentMethodContextProvider',
      exported:
        '@graphcommerce/magento-cart-payment-method/PaymentMethodContext/PaymentMethodContext',
      plugin: '@graphcommerce/magento-graphcms/plugins/AddMyMethods',
    },
  ]
  const resolve = resolveDependency(projectRoot)
  const interceptors = generateInterceptors(plugins, resolve)

  expect(
    interceptors['packages/magento-cart-payment-method/PaymentMethodContext/PaymentMethodContext']
      ?.template,
  ).toMatchInlineSnapshot(`
    "/* This file is automatically generated. */

    /* eslint-disable import/no-extraneous-dependencies */
    /* eslint-disable import/export */

    import { Plugin as AddMyMethods } from '@graphcommerce/magento-graphcms/plugins/AddMyMethods'
    import { PaymentMethodContextProvider as PaymentMethodContextProviderBase } from './PaymentMethodContext'

    export * from './PaymentMethodContext'

    type PaymentMethodContextProviderBaseProps = React.ComponentProps<typeof PaymentMethodContextProviderBase>

    const AddMyMethodsInterceptor = (props: PaymentMethodContextProviderBaseProps) => (
      <AddMyMethods {...props} Prev={PaymentMethodContextProviderBase} />
    )
    export const PaymentMethodContextProvider = AddMyMethodsInterceptor
    "
  `)
})
