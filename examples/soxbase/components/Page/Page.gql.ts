// Do not edit this file: autogenerated by graphql-code-generator
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'
import * as Types from '../../generated/types'

import { RowColumnOneFragment, RowColumnOneFragmentDoc } from '../RowColumnOne/RowColumnOne.gql'
import {
  RowColumnThreeFragment,
  RowColumnThreeFragmentDoc,
} from '../RowColumnThree/RowColumnThree.gql'
import { RowColumnTwoFragment, RowColumnTwoFragmentDoc } from '../RowColumnTwo/RowColumnTwo.gql'

export const PageFragmentDoc: DocumentNode<PageFragment, unknown> = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'Page' },
      typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Page' } },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'content' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'InlineFragment',
                  typeCondition: { kind: 'NamedType', name: { kind: 'Name', value: 'Node' } },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [{ kind: 'Field', name: { kind: 'Name', value: 'id' } }],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: '__typename' } },
                { kind: 'FragmentSpread', name: { kind: 'Name', value: 'RowColumnOne' } },
                { kind: 'FragmentSpread', name: { kind: 'Name', value: 'RowColumnTwo' } },
                { kind: 'FragmentSpread', name: { kind: 'Name', value: 'RowColumnThree' } },
              ],
            },
          },
        ],
      },
    },
    ...RowColumnOneFragmentDoc.definitions,
    ...RowColumnTwoFragmentDoc.definitions,
    ...RowColumnThreeFragmentDoc.definitions,
  ],
}
export type PageFragment = {
  content: Array<
    | ({ __typename: 'RowColumnOne' } & Pick<Types.RowColumnOne, 'id'> & RowColumnOneFragment)
    | ({ __typename: 'RowColumnTwo' } & Pick<Types.RowColumnTwo, 'id'> & RowColumnTwoFragment)
    | ({ __typename: 'RowColumnThree' } & Pick<Types.RowColumnThree, 'id'> & RowColumnThreeFragment)
    | ({ __typename: 'RowHeroBanner' } & Pick<Types.RowHeroBanner, 'id'>)
    | ({ __typename: 'RowProductGrid' } & Pick<Types.RowProductGrid, 'id'>)
  >
}
