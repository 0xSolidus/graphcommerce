diff --git a/node_modules/@graphql-mesh/graphql/cjs/index.js b/node_modules/@graphql-mesh/graphql/cjs/index.js
index 5913393..9500b20 100644
--- a/node_modules/@graphql-mesh/graphql/cjs/index.js
+++ b/node_modules/@graphql-mesh/graphql/cjs/index.js
@@ -70,6 +70,14 @@ class GraphQLHandler {
         Object.keys(httpSourceConfig.schemaHeaders || {}).forEach(headerName => {
             this.interpolationStringSet.add(headerName.toString());
         });
+
+        if(!httpSourceConfig.source && httpSourceConfig.useGETForQueries) {
+            const introspectionGET = new URL(httpSourceConfig.endpoint)
+            introspectionGET.searchParams.set('query',graphql_1.stripIgnoredCharacters(graphql_1.getIntrospectionQuery()));
+            introspectionGET.searchParams.set('ext','.graphql');
+            httpSourceConfig.source = introspectionGET.toString();
+        }
+
         const schemaHeadersFactory = (0, string_interpolation_1.getInterpolatedHeadersFactory)(httpSourceConfig.schemaHeaders || {});
         if (httpSourceConfig.source) {
             const headers = schemaHeadersFactory({
@@ -83,6 +91,7 @@ class GraphQLHandler {
                 logger: this.logger,
                 headers,
             });
+
             if (typeof sdlOrIntrospection === 'string') {
                 return (0, graphql_1.buildSchema)(sdlOrIntrospection);
             }
@@ -92,6 +101,9 @@ class GraphQLHandler {
             else if (sdlOrIntrospection.__schema) {
                 return (0, graphql_1.buildClientSchema)(sdlOrIntrospection);
             }
+            else if (sdlOrIntrospection.data.__schema) {
+                return (0, graphql_1.buildClientSchema)(sdlOrIntrospection.data);
+            }
             throw new Error(`Invalid introspection data: ${cross_helpers_1.util.inspect(sdlOrIntrospection)}`);
         }
         return this.nonExecutableSchema.getWithSet(() => {
diff --git a/node_modules/@graphql-mesh/graphql/esm/index.js b/node_modules/@graphql-mesh/graphql/esm/index.js
index 751e25a..c7fb862 100644
--- a/node_modules/@graphql-mesh/graphql/esm/index.js
+++ b/node_modules/@graphql-mesh/graphql/esm/index.js
@@ -1,5 +1,5 @@
 import { UrlLoader } from '@graphql-tools/url-loader';
-import { GraphQLSchema, buildSchema, Kind, buildASTSchema, buildClientSchema, } from 'graphql';
+import { GraphQLSchema, buildSchema, Kind, buildASTSchema, buildClientSchema, getIntrospectionQuery, stripIgnoredCharacters } from 'graphql';
 import { introspectSchema } from '@graphql-tools/wrap';
 import { loadFromModuleExportExpression, readFileOrUrl } from '@graphql-mesh/utils';
 import { isDocumentNode, memoize1, getOperationASTFromRequest, parseSelectionSet, isAsyncIterable, } from '@graphql-tools/utils';
@@ -67,6 +67,14 @@ export default class GraphQLHandler {
         Object.keys(httpSourceConfig.schemaHeaders || {}).forEach(headerName => {
             this.interpolationStringSet.add(headerName.toString());
         });
+
+        if(!httpSourceConfig.source && httpSourceConfig.useGETForQueries) {
+            const introspectionGET = new URL(httpSourceConfig.endpoint)
+            introspectionGET.searchParams.set('query',stripIgnoredCharacters(getIntrospectionQuery()));
+            introspectionGET.searchParams.set('ext','.graphql');
+            httpSourceConfig.source = introspectionGET.toString();
+        }
+
         const schemaHeadersFactory = getInterpolatedHeadersFactory(httpSourceConfig.schemaHeaders || {});
         if (httpSourceConfig.source) {
             const headers = schemaHeadersFactory({
@@ -89,6 +97,9 @@ export default class GraphQLHandler {
             else if (sdlOrIntrospection.__schema) {
                 return buildClientSchema(sdlOrIntrospection);
             }
+            else if (sdlOrIntrospection.data.__schema) {
+                return buildClientSchema(sdlOrIntrospection.data);
+            }
             throw new Error(`Invalid introspection data: ${util.inspect(sdlOrIntrospection)}`);
         }
         return this.nonExecutableSchema.getWithSet(() => {
