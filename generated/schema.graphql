schema {
  query: Query
  mutation: Mutation
}
type Query {
  node(id: ID!, stage: Stage! = PUBLISHED, locales: [Locale!]! = [nl]): Node
  assets(
    where: AssetWhereInput
    orderBy: AssetOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
    locales: [Locale!]! = [nl]
  ): [Asset!]!
  asset(where: AssetWhereUniqueInput!, stage: Stage! = PUBLISHED, locales: [Locale!]! = [nl]): Asset
  assetsConnection(
    where: AssetWhereInput
    orderBy: AssetOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
    locales: [Locale!]! = [nl]
  ): AssetConnection!
  companies(
    where: CompanyWhereInput
    orderBy: CompanyOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
  ): [Company!]!
  company(where: CompanyWhereUniqueInput!, stage: Stage! = PUBLISHED): Company
  companiesConnection(
    where: CompanyWhereInput
    orderBy: CompanyOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
  ): CompanyConnection!
  heroBanners(
    where: HeroBannerWhereInput
    orderBy: HeroBannerOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
  ): [HeroBanner!]!
  heroBanner(where: HeroBannerWhereUniqueInput!, stage: Stage! = PUBLISHED): HeroBanner
  heroBannersConnection(
    where: HeroBannerWhereInput
    orderBy: HeroBannerOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
  ): HeroBannerConnection!
  links(
    where: LinkWhereInput
    orderBy: LinkOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
  ): [Link!]!
  link(where: LinkWhereUniqueInput!, stage: Stage! = PUBLISHED): Link
  linksConnection(
    where: LinkWhereInput
    orderBy: LinkOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
  ): LinkConnection!
  lists(
    where: ListWhereInput
    orderBy: ListOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
  ): [List!]!
  list(where: ListWhereUniqueInput!, stage: Stage! = PUBLISHED): List
  listsConnection(
    where: ListWhereInput
    orderBy: ListOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
  ): ListConnection!
  pages(
    where: PageWhereInput
    orderBy: PageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
    locales: [Locale!]! = [nl]
  ): [Page!]!
  page(where: PageWhereUniqueInput!, stage: Stage! = PUBLISHED, locales: [Locale!]! = [nl]): Page
  pagesConnection(
    where: PageWhereInput
    orderBy: PageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
    locales: [Locale!]! = [nl]
  ): PageConnection!
  people(
    where: PersonWhereInput
    orderBy: PersonOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
  ): [Person!]!
  person(where: PersonWhereUniqueInput!, stage: Stage! = PUBLISHED): Person
  peopleConnection(
    where: PersonWhereInput
    orderBy: PersonOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
  ): PersonConnection!
}
enum Stage {
  PUBLISHED
  DRAFT
}
enum Locale {
  nl
  en
}
interface Node {
  id: ID!
  stage: Stage!
}
input AssetWhereInput {
  _search: String
  AND: [AssetWhereInput!]
  OR: [AssetWhereInput!]
  NOT: [AssetWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  handle: String
  handle_not: String
  handle_in: [String!]
  handle_not_in: [String!]
  handle_contains: String
  handle_not_contains: String
  handle_starts_with: String
  handle_not_starts_with: String
  handle_ends_with: String
  handle_not_ends_with: String
  fileName: String
  fileName_not: String
  fileName_in: [String!]
  fileName_not_in: [String!]
  fileName_contains: String
  fileName_not_contains: String
  fileName_starts_with: String
  fileName_not_starts_with: String
  fileName_ends_with: String
  fileName_not_ends_with: String
  height: Float
  height_not: Float
  height_in: [Float!]
  height_not_in: [Float!]
  height_lt: Float
  height_lte: Float
  height_gt: Float
  height_gte: Float
  width: Float
  width_not: Float
  width_in: [Float!]
  width_not_in: [Float!]
  width_lt: Float
  width_lte: Float
  width_gt: Float
  width_gte: Float
  size: Float
  size_not: Float
  size_in: [Float!]
  size_not_in: [Float!]
  size_lt: Float
  size_lte: Float
  size_gt: Float
  size_gte: Float
  mimeType: String
  mimeType_not: String
  mimeType_in: [String!]
  mimeType_not_in: [String!]
  mimeType_contains: String
  mimeType_not_contains: String
  mimeType_starts_with: String
  mimeType_not_starts_with: String
  mimeType_ends_with: String
  mimeType_not_ends_with: String
  heroBannerVideo_every: HeroBannerWhereInput
  heroBannerVideo_some: HeroBannerWhereInput
  heroBannerVideo_none: HeroBannerWhereInput
  personAvatar_every: PersonWhereInput
  personAvatar_some: PersonWhereInput
  personAvatar_none: PersonWhereInput
  companyLogo_every: CompanyWhereInput
  companyLogo_some: CompanyWhereInput
  companyLogo_none: CompanyWhereInput
}
scalar DateTime
input HeroBannerWhereInput {
  _search: String
  AND: [HeroBannerWhereInput!]
  OR: [HeroBannerWhereInput!]
  NOT: [HeroBannerWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  video: AssetWhereInput
  link_every: LinkWhereInput
  link_some: LinkWhereInput
  link_none: LinkWhereInput
}
input LinkWhereInput {
  _search: String
  AND: [LinkWhereInput!]
  OR: [LinkWhereInput!]
  NOT: [LinkWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  page_every: PageWhereInput
  page_some: PageWhereInput
  page_none: PageWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  heroBanner_every: HeroBannerWhereInput
  heroBanner_some: HeroBannerWhereInput
  heroBanner_none: HeroBannerWhereInput
}
input PageWhereInput {
  _search: String
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  metaTitle: String
  metaTitle_not: String
  metaTitle_in: [String!]
  metaTitle_not_in: [String!]
  metaTitle_contains: String
  metaTitle_not_contains: String
  metaTitle_starts_with: String
  metaTitle_not_starts_with: String
  metaTitle_ends_with: String
  metaTitle_not_ends_with: String
  metaDescription: String
  metaDescription_not: String
  metaDescription_in: [String!]
  metaDescription_not_in: [String!]
  metaDescription_contains: String
  metaDescription_not_contains: String
  metaDescription_starts_with: String
  metaDescription_not_starts_with: String
  metaDescription_ends_with: String
  metaDescription_not_ends_with: String
  metaRobots: MetaRobots
  metaRobots_not: MetaRobots
  metaRobots_in: [MetaRobots!]
  metaRobots_not_in: [MetaRobots!]
  link_every: LinkWhereInput
  link_some: LinkWhereInput
  link_none: LinkWhereInput
}
enum MetaRobots {
  INDEX_FOLLOW
  INDEX_NOFOLLOW
  NOINDEX_FOLLOW
  NOINDEX_NOFOLLOW
}
input PersonWhereInput {
  _search: String
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  avatar: AssetWhereInput
}
input CompanyWhereInput {
  _search: String
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  logo: AssetWhereInput
}
enum AssetOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  handle_ASC
  handle_DESC
  fileName_ASC
  fileName_DESC
  height_ASC
  height_DESC
  width_ASC
  width_DESC
  size_ASC
  size_DESC
  mimeType_ASC
  mimeType_DESC
}
type Asset implements Node {
  stage: Stage!
  locale: Locale!
  localizations(locales: [Locale!]! = [nl, en], includeCurrent: Boolean! = false): [Asset!]!
  documentInStages(
    stages: [Stage!]! = [PUBLISHED, DRAFT]
    includeCurrent: Boolean! = false
    inheritLocale: Boolean! = false
  ): [Asset!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  handle: String!
  fileName: String!
  height: Float
  width: Float
  size: Float
  mimeType: String
  heroBannerVideo(
    where: HeroBannerWhereInput
    orderBy: HeroBannerOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [HeroBanner!]!
  personAvatar(
    where: PersonWhereInput
    orderBy: PersonOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Person!]!
  companyLogo(
    where: CompanyWhereInput
    orderBy: CompanyOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Company!]!
  url(transformation: AssetTransformationInput): String!
}
enum HeroBannerOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
}
type HeroBanner implements Node {
  stage: Stage!
  documentInStages(
    stages: [Stage!]! = [PUBLISHED, DRAFT]
    includeCurrent: Boolean! = false
    inheritLocale: Boolean! = false
  ): [HeroBanner!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  list(skip: Int, after: String, before: String, first: Int, last: Int): [List!]!
  title: RichText!
  page(skip: Int, after: String, before: String, first: Int, last: Int): [Page!]!
  content: RichText!
  video: Asset
  link(
    where: LinkWhereInput
    orderBy: LinkOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Link!]!
}
type List implements Node {
  stage: Stage!
  documentInStages(
    stages: [Stage!]! = [PUBLISHED, DRAFT]
    includeCurrent: Boolean! = false
    inheritLocale: Boolean! = false
  ): [List!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  items(skip: Int, after: String, before: String, first: Int, last: Int): [ListItems!]!
}
union ListItems = Page | Person | Company | HeroBanner | Link
type Page implements Node {
  stage: Stage!
  locale: Locale!
  localizations(locales: [Locale!]! = [nl, en], includeCurrent: Boolean! = false): [Page!]!
  documentInStages(
    stages: [Stage!]! = [PUBLISHED, DRAFT]
    includeCurrent: Boolean! = false
    inheritLocale: Boolean! = false
  ): [Page!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  url: String!
  title: String!
  metaTitle: String!
  metaDescription: String!
  content(skip: Int, after: String, before: String, first: Int, last: Int): [PageContent!]!
  metaRobots: MetaRobots
  list(skip: Int, after: String, before: String, first: Int, last: Int): [List!]!
  link(
    where: LinkWhereInput
    orderBy: LinkOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Link!]!
}
union PageContent = HeroBanner
enum LinkOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  title_ASC
  title_DESC
}
type Link implements Node {
  stage: Stage!
  documentInStages(
    stages: [Stage!]! = [PUBLISHED, DRAFT]
    includeCurrent: Boolean! = false
    inheritLocale: Boolean! = false
  ): [Link!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  list(skip: Int, after: String, before: String, first: Int, last: Int): [List!]!
  page(
    where: PageWhereInput
    orderBy: PageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Page!]!
  title: String
  description: RichText
  heroBanner(
    where: HeroBannerWhereInput
    orderBy: HeroBannerOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [HeroBanner!]!
}
enum PageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  url_ASC
  url_DESC
  title_ASC
  title_DESC
  metaTitle_ASC
  metaTitle_DESC
  metaDescription_ASC
  metaDescription_DESC
  metaRobots_ASC
  metaRobots_DESC
}
type RichText {
  raw: RichTextAST!
  html: String!
  markdown: String!
  text: String!
}
scalar RichTextAST
type Person implements Node {
  stage: Stage!
  documentInStages(
    stages: [Stage!]! = [PUBLISHED, DRAFT]
    includeCurrent: Boolean! = false
    inheritLocale: Boolean! = false
  ): [Person!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  name: String
  list(skip: Int, after: String, before: String, first: Int, last: Int): [List!]!
  avatar: Asset!
}
type Company implements Node {
  stage: Stage!
  documentInStages(
    stages: [Stage!]! = [PUBLISHED, DRAFT]
    includeCurrent: Boolean! = false
    inheritLocale: Boolean! = false
  ): [Company!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  name: String!
  list(skip: Int, after: String, before: String, first: Int, last: Int): [List!]!
  logo: Asset!
}
enum PersonOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  name_ASC
  name_DESC
}
enum CompanyOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  name_ASC
  name_DESC
}
input AssetTransformationInput {
  image: ImageTransformationInput
  document: DocumentTransformationInput
  validateOptions: Boolean = false
}
input ImageTransformationInput {
  resize: ImageResizeInput
}
input ImageResizeInput {
  width: Int
  height: Int
  fit: ImageFit
}
enum ImageFit {
  clip
  crop
  scale
  max
}
input DocumentTransformationInput {
  output: DocumentOutputInput
}
input DocumentOutputInput {
  format: DocumentFileTypes
}
enum DocumentFileTypes {
  jpg
  odp
  ods
  odt
  png
  svg
  txt
  webp
  docx
  pdf
  html
  doc
  xlsx
  xls
  pptx
  ppt
}
input AssetWhereUniqueInput {
  id: ID
}
type AssetConnection {
  pageInfo: PageInfo!
  edges: [AssetEdge!]!
  aggregate: Aggregate!
}
type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}
type AssetEdge {
  node: Asset!
  cursor: String!
}
type Aggregate {
  count: Int!
}
input CompanyWhereUniqueInput {
  id: ID
  name: String
}
type CompanyConnection {
  pageInfo: PageInfo!
  edges: [CompanyEdge!]!
  aggregate: Aggregate!
}
type CompanyEdge {
  node: Company!
  cursor: String!
}
input HeroBannerWhereUniqueInput {
  id: ID
}
type HeroBannerConnection {
  pageInfo: PageInfo!
  edges: [HeroBannerEdge!]!
  aggregate: Aggregate!
}
type HeroBannerEdge {
  node: HeroBanner!
  cursor: String!
}
input LinkWhereUniqueInput {
  id: ID
}
type LinkConnection {
  pageInfo: PageInfo!
  edges: [LinkEdge!]!
  aggregate: Aggregate!
}
type LinkEdge {
  node: Link!
  cursor: String!
}
input ListWhereInput {
  _search: String
  AND: [ListWhereInput!]
  OR: [ListWhereInput!]
  NOT: [ListWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
}
enum ListOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
}
input ListWhereUniqueInput {
  id: ID
}
type ListConnection {
  pageInfo: PageInfo!
  edges: [ListEdge!]!
  aggregate: Aggregate!
}
type ListEdge {
  node: List!
  cursor: String!
}
input PageWhereUniqueInput {
  id: ID
}
type PageConnection {
  pageInfo: PageInfo!
  edges: [PageEdge!]!
  aggregate: Aggregate!
}
type PageEdge {
  node: Page!
  cursor: String!
}
input PersonWhereUniqueInput {
  id: ID
}
type PersonConnection {
  pageInfo: PageInfo!
  edges: [PersonEdge!]!
  aggregate: Aggregate!
}
type PersonEdge {
  node: Person!
  cursor: String!
}
type Mutation {
  createAsset(data: AssetCreateInput!): Asset
    @deprecated(reason: "Asset mutations will be overhauled soon")
  updateAsset(where: AssetWhereUniqueInput!, data: AssetUpdateInput!): Asset
  deleteAsset(where: AssetWhereUniqueInput!): Asset
  upsertAsset(where: AssetWhereUniqueInput!, upsert: AssetUpsertInput!): Asset
  publishAsset(
    where: AssetWhereUniqueInput!
    locales: [Locale!]
    publishBase: Boolean = true
    to: [Stage!]! = [PUBLISHED]
  ): Asset
  unpublishAsset(
    where: AssetWhereUniqueInput!
    from: [Stage!]!
    locales: [Locale!]
    unpublishBase: Boolean = true
  ): Asset
  updateManyAssets(where: AssetManyWhereInput, data: AssetUpdateManyInput!): BatchPayload!
  deleteManyAssets(where: AssetManyWhereInput): BatchPayload!
  publishManyAssets(
    where: AssetManyWhereInput!
    to: [Stage!]!
    locales: [Locale!]
    publishBase: Boolean = true
  ): BatchPayload!
  unpublishManyAssets(
    where: AssetManyWhereInput!
    from: [Stage!]!
    locales: [Locale!]
    unpublishBase: Boolean = true
  ): BatchPayload!
  createCompany(data: CompanyCreateInput!): Company
  updateCompany(where: CompanyWhereUniqueInput!, data: CompanyUpdateInput!): Company
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  upsertCompany(where: CompanyWhereUniqueInput!, upsert: CompanyUpsertInput!): Company
  publishCompany(where: CompanyWhereUniqueInput!, to: [Stage!]! = [PUBLISHED]): Company
  unpublishCompany(where: CompanyWhereUniqueInput!, from: [Stage!]!): Company
  updateManyCompanies(where: CompanyManyWhereInput, data: CompanyUpdateManyInput!): BatchPayload!
  deleteManyCompanies(where: CompanyManyWhereInput): BatchPayload!
  publishManyCompanies(where: CompanyManyWhereInput!, to: [Stage!]!): BatchPayload!
  unpublishManyCompanies(where: CompanyManyWhereInput!, from: [Stage!]!): BatchPayload!
  createHeroBanner(data: HeroBannerCreateInput!): HeroBanner
  updateHeroBanner(where: HeroBannerWhereUniqueInput!, data: HeroBannerUpdateInput!): HeroBanner
  deleteHeroBanner(where: HeroBannerWhereUniqueInput!): HeroBanner
  upsertHeroBanner(where: HeroBannerWhereUniqueInput!, upsert: HeroBannerUpsertInput!): HeroBanner
  publishHeroBanner(where: HeroBannerWhereUniqueInput!, to: [Stage!]! = [PUBLISHED]): HeroBanner
  unpublishHeroBanner(where: HeroBannerWhereUniqueInput!, from: [Stage!]!): HeroBanner
  updateManyHeroBanners(
    where: HeroBannerManyWhereInput
    data: HeroBannerUpdateManyInput!
  ): BatchPayload!
  deleteManyHeroBanners(where: HeroBannerManyWhereInput): BatchPayload!
  publishManyHeroBanners(where: HeroBannerManyWhereInput!, to: [Stage!]!): BatchPayload!
  unpublishManyHeroBanners(where: HeroBannerManyWhereInput!, from: [Stage!]!): BatchPayload!
  createLink(data: LinkCreateInput!): Link
  updateLink(where: LinkWhereUniqueInput!, data: LinkUpdateInput!): Link
  deleteLink(where: LinkWhereUniqueInput!): Link
  upsertLink(where: LinkWhereUniqueInput!, upsert: LinkUpsertInput!): Link
  publishLink(where: LinkWhereUniqueInput!, to: [Stage!]! = [PUBLISHED]): Link
  unpublishLink(where: LinkWhereUniqueInput!, from: [Stage!]!): Link
  updateManyLinks(where: LinkManyWhereInput, data: LinkUpdateManyInput!): BatchPayload!
  deleteManyLinks(where: LinkManyWhereInput): BatchPayload!
  publishManyLinks(where: LinkManyWhereInput!, to: [Stage!]!): BatchPayload!
  unpublishManyLinks(where: LinkManyWhereInput!, from: [Stage!]!): BatchPayload!
  createList(data: ListCreateInput!): List
  updateList(where: ListWhereUniqueInput!, data: ListUpdateInput!): List
  deleteList(where: ListWhereUniqueInput!): List
  upsertList(where: ListWhereUniqueInput!, upsert: ListUpsertInput!): List
  publishList(where: ListWhereUniqueInput!, to: [Stage!]! = [PUBLISHED]): List
  unpublishList(where: ListWhereUniqueInput!, from: [Stage!]!): List
  updateManyLists(where: ListManyWhereInput, data: ListUpdateManyInput!): BatchPayload!
  deleteManyLists(where: ListManyWhereInput): BatchPayload!
  publishManyLists(where: ListManyWhereInput!, to: [Stage!]!): BatchPayload!
  unpublishManyLists(where: ListManyWhereInput!, from: [Stage!]!): BatchPayload!
  createPage(data: PageCreateInput!): Page
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  deletePage(where: PageWhereUniqueInput!): Page
  upsertPage(where: PageWhereUniqueInput!, upsert: PageUpsertInput!): Page
  publishPage(
    where: PageWhereUniqueInput!
    locales: [Locale!]
    publishBase: Boolean = true
    to: [Stage!]! = [PUBLISHED]
  ): Page
  unpublishPage(
    where: PageWhereUniqueInput!
    from: [Stage!]!
    locales: [Locale!]
    unpublishBase: Boolean = true
  ): Page
  updateManyPages(where: PageManyWhereInput, data: PageUpdateManyInput!): BatchPayload!
  deleteManyPages(where: PageManyWhereInput): BatchPayload!
  publishManyPages(
    where: PageManyWhereInput!
    to: [Stage!]!
    locales: [Locale!]
    publishBase: Boolean = true
  ): BatchPayload!
  unpublishManyPages(
    where: PageManyWhereInput!
    from: [Stage!]!
    locales: [Locale!]
    unpublishBase: Boolean = true
  ): BatchPayload!
  createPerson(data: PersonCreateInput!): Person
  updatePerson(where: PersonWhereUniqueInput!, data: PersonUpdateInput!): Person
  deletePerson(where: PersonWhereUniqueInput!): Person
  upsertPerson(where: PersonWhereUniqueInput!, upsert: PersonUpsertInput!): Person
  publishPerson(where: PersonWhereUniqueInput!, to: [Stage!]! = [PUBLISHED]): Person
  unpublishPerson(where: PersonWhereUniqueInput!, from: [Stage!]!): Person
  updateManyPeople(where: PersonManyWhereInput, data: PersonUpdateManyInput!): BatchPayload!
  deleteManyPeople(where: PersonManyWhereInput): BatchPayload!
  publishManyPeople(where: PersonManyWhereInput!, to: [Stage!]!): BatchPayload!
  unpublishManyPeople(where: PersonManyWhereInput!, from: [Stage!]!): BatchPayload!
}
input AssetCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  handle: String!
  fileName: String!
  height: Float
  width: Float
  size: Float
  mimeType: String
  heroBannerVideo: HeroBannerCreateManyInlineInput
  personAvatar: PersonCreateManyInlineInput
  companyLogo: CompanyCreateManyInlineInput
  localizations: AssetCreateLocalizationsInput
}
input HeroBannerCreateManyInlineInput {
  create: [HeroBannerCreateInput!]
  connect: [HeroBannerWhereUniqueInput!]
}
input HeroBannerCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  list: ListCreateManyInlineInput
  title: RichTextAST!
  page: PageCreateManyInlineInput
  content: RichTextAST!
  video: AssetCreateOneInlineInput
  link: LinkCreateManyInlineInput
}
input ListCreateManyInlineInput {
  create: [ListCreateInput!]
  connect: [ListWhereUniqueInput!]
}
input ListCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  items: ListItemsCreateManyInlineInput
}
input ListItemsCreateManyInlineInput {
  create: [ListItemsCreateInput!]
  connect: [ListItemsWhereUniqueInput!]
}
input ListItemsCreateInput {
  Page: PageCreateInput
  Person: PersonCreateInput
  Company: CompanyCreateInput
  HeroBanner: HeroBannerCreateInput
  Link: LinkCreateInput
}
input PageCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  url: String!
  title: String!
  metaTitle: String!
  metaDescription: String!
  content: PageContentCreateManyInlineInput
  metaRobots: MetaRobots
  list: ListCreateManyInlineInput
  link: LinkCreateManyInlineInput
  localizations: PageCreateLocalizationsInput
}
input PageContentCreateManyInlineInput {
  create: [PageContentCreateInput!]
  connect: [PageContentWhereUniqueInput!]
}
input PageContentCreateInput {
  HeroBanner: HeroBannerCreateInput
}
input PageContentWhereUniqueInput {
  HeroBanner: HeroBannerWhereUniqueInput
}
input LinkCreateManyInlineInput {
  create: [LinkCreateInput!]
  connect: [LinkWhereUniqueInput!]
}
input LinkCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  list: ListCreateManyInlineInput
  page: PageCreateManyInlineInput
  title: String
  description: RichTextAST
  heroBanner: HeroBannerCreateManyInlineInput
}
input PageCreateManyInlineInput {
  create: [PageCreateInput!]
  connect: [PageWhereUniqueInput!]
}
input PageCreateLocalizationsInput {
  create: [PageCreateLocalizationInput!]
}
input PageCreateLocalizationInput {
  data: PageCreateLocalizationDataInput!
  locale: Locale!
}
input PageCreateLocalizationDataInput {
  createdAt: DateTime
  updatedAt: DateTime
  url: String!
  title: String!
  metaTitle: String!
  metaDescription: String!
}
input PersonCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  list: ListCreateManyInlineInput
  avatar: AssetCreateOneInlineInput!
}
input AssetCreateOneInlineInput {
  create: AssetCreateInput
  connect: AssetWhereUniqueInput
}
input CompanyCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  list: ListCreateManyInlineInput
  logo: AssetCreateOneInlineInput!
}
input ListItemsWhereUniqueInput {
  Page: PageWhereUniqueInput
  Person: PersonWhereUniqueInput
  Company: CompanyWhereUniqueInput
  HeroBanner: HeroBannerWhereUniqueInput
  Link: LinkWhereUniqueInput
}
input PersonCreateManyInlineInput {
  create: [PersonCreateInput!]
  connect: [PersonWhereUniqueInput!]
}
input CompanyCreateManyInlineInput {
  create: [CompanyCreateInput!]
  connect: [CompanyWhereUniqueInput!]
}
input AssetCreateLocalizationsInput {
  create: [AssetCreateLocalizationInput!]
}
input AssetCreateLocalizationInput {
  data: AssetCreateLocalizationDataInput!
  locale: Locale!
}
input AssetCreateLocalizationDataInput {
  createdAt: DateTime
  updatedAt: DateTime
  handle: String!
  fileName: String!
  height: Float
  width: Float
  size: Float
  mimeType: String
}
input AssetUpdateInput {
  handle: String
  fileName: String
  height: Float
  width: Float
  size: Float
  mimeType: String
  heroBannerVideo: HeroBannerUpdateManyInlineInput
  personAvatar: PersonUpdateManyInlineInput
  companyLogo: CompanyUpdateManyInlineInput
  localizations: AssetUpdateLocalizationsInput
}
input HeroBannerUpdateManyInlineInput {
  create: [HeroBannerCreateInput!]
  connect: [HeroBannerConnectInput!]
  set: [HeroBannerWhereUniqueInput!]
  update: [HeroBannerUpdateWithNestedWhereUniqueInput!]
  upsert: [HeroBannerUpsertWithNestedWhereUniqueInput!]
  disconnect: [HeroBannerWhereUniqueInput!]
  delete: [HeroBannerWhereUniqueInput!]
}
input HeroBannerConnectInput {
  where: HeroBannerWhereUniqueInput!
  position: ConnectPositionInput
}
input ConnectPositionInput {
  after: ID
  before: ID
  start: Boolean
  end: Boolean
}
input HeroBannerUpdateWithNestedWhereUniqueInput {
  where: HeroBannerWhereUniqueInput!
  data: HeroBannerUpdateInput!
}
input HeroBannerUpdateInput {
  list: ListUpdateManyInlineInput
  title: RichTextAST
  page: PageUpdateManyInlineInput
  content: RichTextAST
  video: AssetUpdateOneInlineInput
  link: LinkUpdateManyInlineInput
}
input ListUpdateManyInlineInput {
  create: [ListCreateInput!]
  connect: [ListConnectInput!]
  set: [ListWhereUniqueInput!]
  update: [ListUpdateWithNestedWhereUniqueInput!]
  upsert: [ListUpsertWithNestedWhereUniqueInput!]
  disconnect: [ListWhereUniqueInput!]
  delete: [ListWhereUniqueInput!]
}
input ListConnectInput {
  where: ListWhereUniqueInput!
  position: ConnectPositionInput
}
input ListUpdateWithNestedWhereUniqueInput {
  where: ListWhereUniqueInput!
  data: ListUpdateInput!
}
input ListUpdateInput {
  items: ListItemsUpdateManyInlineInput
}
input ListItemsUpdateManyInlineInput {
  create: [ListItemsCreateInput!]
  connect: [ListItemsConnectInput!]
  set: [ListItemsWhereUniqueInput!]
  update: [ListItemsUpdateWithNestedWhereUniqueInput!]
  upsert: [ListItemsUpsertWithNestedWhereUniqueInput!]
  disconnect: [ListItemsWhereUniqueInput!]
  delete: [ListItemsWhereUniqueInput!]
}
input ListItemsConnectInput {
  Page: PageConnectInput
  Person: PersonConnectInput
  Company: CompanyConnectInput
  HeroBanner: HeroBannerConnectInput
  Link: LinkConnectInput
}
input PageConnectInput {
  where: PageWhereUniqueInput!
  position: ConnectPositionInput
}
input PersonConnectInput {
  where: PersonWhereUniqueInput!
  position: ConnectPositionInput
}
input CompanyConnectInput {
  where: CompanyWhereUniqueInput!
  position: ConnectPositionInput
}
input LinkConnectInput {
  where: LinkWhereUniqueInput!
  position: ConnectPositionInput
}
input ListItemsUpdateWithNestedWhereUniqueInput {
  Page: PageUpdateWithNestedWhereUniqueInput
  Person: PersonUpdateWithNestedWhereUniqueInput
  Company: CompanyUpdateWithNestedWhereUniqueInput
  HeroBanner: HeroBannerUpdateWithNestedWhereUniqueInput
  Link: LinkUpdateWithNestedWhereUniqueInput
}
input PageUpdateWithNestedWhereUniqueInput {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}
input PageUpdateInput {
  url: String
  title: String
  metaTitle: String
  metaDescription: String
  content: PageContentUpdateManyInlineInput
  metaRobots: MetaRobots
  list: ListUpdateManyInlineInput
  link: LinkUpdateManyInlineInput
  localizations: PageUpdateLocalizationsInput
}
input PageContentUpdateManyInlineInput {
  create: [PageContentCreateInput!]
  connect: [PageContentConnectInput!]
  set: [PageContentWhereUniqueInput!]
  update: [PageContentUpdateWithNestedWhereUniqueInput!]
  upsert: [PageContentUpsertWithNestedWhereUniqueInput!]
  disconnect: [PageContentWhereUniqueInput!]
  delete: [PageContentWhereUniqueInput!]
}
input PageContentConnectInput {
  HeroBanner: HeroBannerConnectInput
}
input PageContentUpdateWithNestedWhereUniqueInput {
  HeroBanner: HeroBannerUpdateWithNestedWhereUniqueInput
}
input PageContentUpsertWithNestedWhereUniqueInput {
  HeroBanner: HeroBannerUpsertWithNestedWhereUniqueInput
}
input HeroBannerUpsertWithNestedWhereUniqueInput {
  where: HeroBannerWhereUniqueInput!
  data: HeroBannerUpsertInput!
}
input HeroBannerUpsertInput {
  create: HeroBannerCreateInput!
  update: HeroBannerUpdateInput!
}
input LinkUpdateManyInlineInput {
  create: [LinkCreateInput!]
  connect: [LinkConnectInput!]
  set: [LinkWhereUniqueInput!]
  update: [LinkUpdateWithNestedWhereUniqueInput!]
  upsert: [LinkUpsertWithNestedWhereUniqueInput!]
  disconnect: [LinkWhereUniqueInput!]
  delete: [LinkWhereUniqueInput!]
}
input LinkUpdateWithNestedWhereUniqueInput {
  where: LinkWhereUniqueInput!
  data: LinkUpdateInput!
}
input LinkUpdateInput {
  list: ListUpdateManyInlineInput
  page: PageUpdateManyInlineInput
  title: String
  description: RichTextAST
  heroBanner: HeroBannerUpdateManyInlineInput
}
input PageUpdateManyInlineInput {
  create: [PageCreateInput!]
  connect: [PageConnectInput!]
  set: [PageWhereUniqueInput!]
  update: [PageUpdateWithNestedWhereUniqueInput!]
  upsert: [PageUpsertWithNestedWhereUniqueInput!]
  disconnect: [PageWhereUniqueInput!]
  delete: [PageWhereUniqueInput!]
}
input PageUpsertWithNestedWhereUniqueInput {
  where: PageWhereUniqueInput!
  data: PageUpsertInput!
}
input PageUpsertInput {
  create: PageCreateInput!
  update: PageUpdateInput!
}
input LinkUpsertWithNestedWhereUniqueInput {
  where: LinkWhereUniqueInput!
  data: LinkUpsertInput!
}
input LinkUpsertInput {
  create: LinkCreateInput!
  update: LinkUpdateInput!
}
input PageUpdateLocalizationsInput {
  create: [PageCreateLocalizationInput!]
  update: [PageUpdateLocalizationInput!]
  upsert: [PageUpsertLocalizationInput!]
  delete: [Locale!]
}
input PageUpdateLocalizationInput {
  data: PageUpdateLocalizationDataInput!
  locale: Locale!
}
input PageUpdateLocalizationDataInput {
  url: String!
  title: String!
  metaTitle: String!
  metaDescription: String!
}
input PageUpsertLocalizationInput {
  update: PageUpdateLocalizationDataInput!
  create: PageCreateLocalizationDataInput!
  locale: Locale!
}
input PersonUpdateWithNestedWhereUniqueInput {
  where: PersonWhereUniqueInput!
  data: PersonUpdateInput!
}
input PersonUpdateInput {
  name: String
  list: ListUpdateManyInlineInput
  avatar: AssetUpdateOneInlineInput
}
input AssetUpdateOneInlineInput {
  create: AssetCreateInput
  update: AssetUpdateWithNestedWhereUniqueInput
  upsert: AssetUpsertWithNestedWhereUniqueInput
  connect: AssetWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}
input AssetUpdateWithNestedWhereUniqueInput {
  where: AssetWhereUniqueInput!
  data: AssetUpdateInput!
}
input AssetUpsertWithNestedWhereUniqueInput {
  where: AssetWhereUniqueInput!
  data: AssetUpsertInput!
}
input AssetUpsertInput {
  create: AssetCreateInput!
  update: AssetUpdateInput!
}
input CompanyUpdateWithNestedWhereUniqueInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateInput!
}
input CompanyUpdateInput {
  name: String
  list: ListUpdateManyInlineInput
  logo: AssetUpdateOneInlineInput
}
input ListItemsUpsertWithNestedWhereUniqueInput {
  Page: PageUpsertWithNestedWhereUniqueInput
  Person: PersonUpsertWithNestedWhereUniqueInput
  Company: CompanyUpsertWithNestedWhereUniqueInput
  HeroBanner: HeroBannerUpsertWithNestedWhereUniqueInput
  Link: LinkUpsertWithNestedWhereUniqueInput
}
input PersonUpsertWithNestedWhereUniqueInput {
  where: PersonWhereUniqueInput!
  data: PersonUpsertInput!
}
input PersonUpsertInput {
  create: PersonCreateInput!
  update: PersonUpdateInput!
}
input CompanyUpsertWithNestedWhereUniqueInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpsertInput!
}
input CompanyUpsertInput {
  create: CompanyCreateInput!
  update: CompanyUpdateInput!
}
input ListUpsertWithNestedWhereUniqueInput {
  where: ListWhereUniqueInput!
  data: ListUpsertInput!
}
input ListUpsertInput {
  create: ListCreateInput!
  update: ListUpdateInput!
}
input PersonUpdateManyInlineInput {
  create: [PersonCreateInput!]
  connect: [PersonConnectInput!]
  set: [PersonWhereUniqueInput!]
  update: [PersonUpdateWithNestedWhereUniqueInput!]
  upsert: [PersonUpsertWithNestedWhereUniqueInput!]
  disconnect: [PersonWhereUniqueInput!]
  delete: [PersonWhereUniqueInput!]
}
input CompanyUpdateManyInlineInput {
  create: [CompanyCreateInput!]
  connect: [CompanyConnectInput!]
  set: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithNestedWhereUniqueInput!]
  upsert: [CompanyUpsertWithNestedWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  delete: [CompanyWhereUniqueInput!]
}
input AssetUpdateLocalizationsInput {
  create: [AssetCreateLocalizationInput!]
  update: [AssetUpdateLocalizationInput!]
  upsert: [AssetUpsertLocalizationInput!]
  delete: [Locale!]
}
input AssetUpdateLocalizationInput {
  data: AssetUpdateLocalizationDataInput!
  locale: Locale!
}
input AssetUpdateLocalizationDataInput {
  handle: String!
  fileName: String!
  height: Float
  width: Float
  size: Float
  mimeType: String
}
input AssetUpsertLocalizationInput {
  update: AssetUpdateLocalizationDataInput!
  create: AssetCreateLocalizationDataInput!
  locale: Locale!
}
input AssetManyWhereInput {
  _search: String
  AND: [AssetWhereInput!]
  OR: [AssetWhereInput!]
  NOT: [AssetWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  heroBannerVideo_every: HeroBannerWhereInput
  heroBannerVideo_some: HeroBannerWhereInput
  heroBannerVideo_none: HeroBannerWhereInput
  personAvatar_every: PersonWhereInput
  personAvatar_some: PersonWhereInput
  personAvatar_none: PersonWhereInput
  companyLogo_every: CompanyWhereInput
  companyLogo_some: CompanyWhereInput
  companyLogo_none: CompanyWhereInput
}
input AssetUpdateManyInput {
  createdAt: DateTime
  updatedAt: DateTime
  localizations: [AssetUpdateManyLocalizationInput!]
}
input AssetUpdateManyLocalizationInput {
  fileName: String!
  height: Float
  width: Float
  size: Float
  mimeType: String
}
type BatchPayload {
  count: Long!
}
scalar Long
input CompanyManyWhereInput {
  _search: String
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  logo: AssetWhereInput
}
input CompanyUpdateManyInput {
  createdAt: DateTime
  updatedAt: DateTime
}
input HeroBannerManyWhereInput {
  _search: String
  AND: [HeroBannerWhereInput!]
  OR: [HeroBannerWhereInput!]
  NOT: [HeroBannerWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  video: AssetWhereInput
  link_every: LinkWhereInput
  link_some: LinkWhereInput
  link_none: LinkWhereInput
}
input HeroBannerUpdateManyInput {
  createdAt: DateTime
  updatedAt: DateTime
  title: RichTextAST!
  content: RichTextAST!
}
input LinkManyWhereInput {
  _search: String
  AND: [LinkWhereInput!]
  OR: [LinkWhereInput!]
  NOT: [LinkWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  page_every: PageWhereInput
  page_some: PageWhereInput
  page_none: PageWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  heroBanner_every: HeroBannerWhereInput
  heroBanner_some: HeroBannerWhereInput
  heroBanner_none: HeroBannerWhereInput
}
input LinkUpdateManyInput {
  createdAt: DateTime
  updatedAt: DateTime
  title: String
  description: RichTextAST
}
input ListManyWhereInput {
  _search: String
  AND: [ListWhereInput!]
  OR: [ListWhereInput!]
  NOT: [ListWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
}
input ListUpdateManyInput {
  createdAt: DateTime
  updatedAt: DateTime
}
input PageManyWhereInput {
  _search: String
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  metaRobots: MetaRobots
  metaRobots_not: MetaRobots
  metaRobots_in: [MetaRobots!]
  metaRobots_not_in: [MetaRobots!]
  link_every: LinkWhereInput
  link_some: LinkWhereInput
  link_none: LinkWhereInput
}
input PageUpdateManyInput {
  createdAt: DateTime
  updatedAt: DateTime
  metaRobots: MetaRobots
  localizations: [PageUpdateManyLocalizationInput!]
}
input PageUpdateManyLocalizationInput {
  title: String!
  metaTitle: String!
  metaDescription: String!
}
input PersonManyWhereInput {
  _search: String
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  avatar: AssetWhereInput
}
input PersonUpdateManyInput {
  createdAt: DateTime
  updatedAt: DateTime
  name: String
}
input AssetUpdateManyWithNestedWhereInput {
  where: AssetWhereInput!
  data: AssetUpdateManyInput!
}
input ListUpdateManyWithNestedWhereInput {
  where: ListWhereInput!
  data: ListUpdateManyInput!
}
input ColorInput {
  hex: Hex
  rgba: RGBAInput
}
scalar Hex
input RGBAInput {
  r: RGBAHue!
  g: RGBAHue!
  b: RGBAHue!
  a: RGBATransparency!
}
scalar RGBAHue
scalar RGBATransparency
enum _MutationInputFieldKind {
  scalar
  richText
  enum
  relation
  union
  virtual
}
enum _RelationInputCardinality {
  one
  many
}
scalar Date
enum _OrderDirection {
  asc
  desc
}
input HeroBannerUpdateManyWithNestedWhereInput {
  where: HeroBannerWhereInput!
  data: HeroBannerUpdateManyInput!
}
input PageUpdateManyWithNestedWhereInput {
  where: PageWhereInput!
  data: PageUpdateManyInput!
}
input ListItemsWhereInput {
  Page: PageWhereInput
  Person: PersonWhereInput
  Company: CompanyWhereInput
  HeroBanner: HeroBannerWhereInput
  Link: LinkWhereInput
}
input LinkCreateOneInlineInput {
  create: LinkCreateInput
  connect: LinkWhereUniqueInput
}
type Location {
  latitude: Float!
  longitude: Float!
  distance(from: LocationInput!): Float!
}
input LocationInput {
  latitude: Float!
  longitude: Float!
}
input ListItemsCreateOneInlineInput {
  create: ListItemsCreateInput
  connect: ListItemsWhereUniqueInput
}
input CompanyUpdateOneInlineInput {
  create: CompanyCreateInput
  update: CompanyUpdateWithNestedWhereUniqueInput
  upsert: CompanyUpsertWithNestedWhereUniqueInput
  connect: CompanyWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}
input LinkUpdateManyWithNestedWhereInput {
  where: LinkWhereInput!
  data: LinkUpdateManyInput!
}
input PageContentCreateOneInlineInput {
  create: PageContentCreateInput
  connect: PageContentWhereUniqueInput
}
input PublishLocaleInput {
  locale: Locale!
  stages: [Stage!]!
}
input ListCreateOneInlineInput {
  create: ListCreateInput
  connect: ListWhereUniqueInput
}
enum _MutationKind {
  create
  publish
  unpublish
  update
  upsert
  delete
  updateMany
  publishMany
  unpublishMany
  deleteMany
}
input CompanyUpdateManyWithNestedWhereInput {
  where: CompanyWhereInput!
  data: CompanyUpdateManyInput!
}
input PersonUpdateOneInlineInput {
  create: PersonCreateInput
  update: PersonUpdateWithNestedWhereUniqueInput
  upsert: PersonUpsertWithNestedWhereUniqueInput
  connect: PersonWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}
input PageUpdateOneInlineInput {
  create: PageCreateInput
  update: PageUpdateWithNestedWhereUniqueInput
  upsert: PageUpsertWithNestedWhereUniqueInput
  connect: PageWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}
input ListItemsUpdateManyWithNestedWhereInput {
  Page: PageUpdateManyWithNestedWhereInput
  Person: PersonUpdateManyWithNestedWhereInput
  Company: CompanyUpdateManyWithNestedWhereInput
  HeroBanner: HeroBannerUpdateManyWithNestedWhereInput
  Link: LinkUpdateManyWithNestedWhereInput
}
input PersonUpdateManyWithNestedWhereInput {
  where: PersonWhereInput!
  data: PersonUpdateManyInput!
}
input AssetConnectInput {
  where: AssetWhereUniqueInput!
  position: ConnectPositionInput
}
scalar Json
input AssetCreateManyInlineInput {
  create: [AssetCreateInput!]
  connect: [AssetWhereUniqueInput!]
}
input PageContentUpdateInput {
  HeroBanner: HeroBannerUpdateInput
}
input PageContentUpdateManyWithNestedWhereInput {
  HeroBanner: HeroBannerUpdateManyWithNestedWhereInput
}
type Color {
  hex: Hex!
  rgba: RGBA!
  css: String!
}
type RGBA {
  r: RGBAHue!
  g: RGBAHue!
  b: RGBAHue!
  a: RGBATransparency!
}
input LinkUpdateOneInlineInput {
  create: LinkCreateInput
  update: LinkUpdateWithNestedWhereUniqueInput
  upsert: LinkUpsertWithNestedWhereUniqueInput
  connect: LinkWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}
enum _RelationInputKind {
  create
  update
}
input PageContentWhereInput {
  HeroBanner: HeroBannerWhereInput
}
enum _FilterKind {
  search
  AND
  OR
  NOT
  eq
  eq_not
  in
  not_in
  lt
  lte
  gt
  gte
  contains
  not_contains
  starts_with
  not_starts_with
  ends_with
  not_ends_with
  contains_all
  contains_some
  contains_none
  relational_single
  relational_every
  relational_some
  relational_none
}
input UnpublishLocaleInput {
  locale: Locale!
  stages: [Stage!]!
}
input ListItemsUpdateOneInlineInput {
  create: ListItemsCreateInput
  update: ListItemsUpdateWithNestedWhereUniqueInput
  upsert: ListItemsUpsertWithNestedWhereUniqueInput
  connect: ListItemsWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}
enum _RelationKind {
  regular
  union
}
input HeroBannerUpdateOneInlineInput {
  create: HeroBannerCreateInput
  update: HeroBannerUpdateWithNestedWhereUniqueInput
  upsert: HeroBannerUpsertWithNestedWhereUniqueInput
  connect: HeroBannerWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}
input PersonCreateOneInlineInput {
  create: PersonCreateInput
  connect: PersonWhereUniqueInput
}
input ListUpdateOneInlineInput {
  create: ListCreateInput
  update: ListUpdateWithNestedWhereUniqueInput
  upsert: ListUpsertWithNestedWhereUniqueInput
  connect: ListWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}
input ListItemsUpdateInput {
  Page: PageUpdateInput
  Person: PersonUpdateInput
  Company: CompanyUpdateInput
  HeroBanner: HeroBannerUpdateInput
  Link: LinkUpdateInput
}
input AssetUpdateManyInlineInput {
  create: [AssetCreateInput!]
  connect: [AssetConnectInput!]
  set: [AssetWhereUniqueInput!]
  update: [AssetUpdateWithNestedWhereUniqueInput!]
  upsert: [AssetUpsertWithNestedWhereUniqueInput!]
  disconnect: [AssetWhereUniqueInput!]
  delete: [AssetWhereUniqueInput!]
}
input CompanyCreateOneInlineInput {
  create: CompanyCreateInput
  connect: CompanyWhereUniqueInput
}
input PageContentUpdateOneInlineInput {
  create: PageContentCreateInput
  update: PageContentUpdateWithNestedWhereUniqueInput
  upsert: PageContentUpsertWithNestedWhereUniqueInput
  connect: PageContentWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}
input HeroBannerCreateOneInlineInput {
  create: HeroBannerCreateInput
  connect: HeroBannerWhereUniqueInput
}
input PageCreateOneInlineInput {
  create: PageCreateInput
  connect: PageWhereUniqueInput
}
