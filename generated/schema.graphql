schema {
  query: Query
  mutation: Mutation
}
type Query {
  node(id: ID!, stage: Stage! = PUBLISHED, locales: [Locale!]! = [nl]): Node
  assets(
    where: AssetWhereInput
    orderBy: AssetOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
    locales: [Locale!]! = [nl]
  ): [Asset!]!
  asset(where: AssetWhereUniqueInput!, stage: Stage! = PUBLISHED, locales: [Locale!]! = [nl]): Asset
  assetsConnection(
    where: AssetWhereInput
    orderBy: AssetOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
    locales: [Locale!]! = [nl]
  ): AssetConnection!
  companies(
    where: CompanyWhereInput
    orderBy: CompanyOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
  ): [Company!]!
  company(where: CompanyWhereUniqueInput!, stage: Stage! = PUBLISHED): Company
  companiesConnection(
    where: CompanyWhereInput
    orderBy: CompanyOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
  ): CompanyConnection!
  linkExternals(
    where: LinkExternalWhereInput
    orderBy: LinkExternalOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
    locales: [Locale!]! = [nl]
  ): [LinkExternal!]!
  linkExternal(
    where: LinkExternalWhereUniqueInput!
    stage: Stage! = PUBLISHED
    locales: [Locale!]! = [nl]
  ): LinkExternal
  linkExternalsConnection(
    where: LinkExternalWhereInput
    orderBy: LinkExternalOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
    locales: [Locale!]! = [nl]
  ): LinkExternalConnection!
  linkInternals(
    where: LinkInternalWhereInput
    orderBy: LinkInternalOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
    locales: [Locale!]! = [nl]
  ): [LinkInternal!]!
  linkInternal(
    where: LinkInternalWhereUniqueInput!
    stage: Stage! = PUBLISHED
    locales: [Locale!]! = [nl]
  ): LinkInternal
  linkInternalsConnection(
    where: LinkInternalWhereInput
    orderBy: LinkInternalOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
    locales: [Locale!]! = [nl]
  ): LinkInternalConnection!
  pages(
    where: PageWhereInput
    orderBy: PageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
    locales: [Locale!]! = [nl]
  ): [Page!]!
  page(where: PageWhereUniqueInput!, stage: Stage! = PUBLISHED, locales: [Locale!]! = [nl]): Page
  pagesConnection(
    where: PageWhereInput
    orderBy: PageOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
    locales: [Locale!]! = [nl]
  ): PageConnection!
  people(
    where: PersonWhereInput
    orderBy: PersonOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
  ): [Person!]!
  person(where: PersonWhereUniqueInput!, stage: Stage! = PUBLISHED): Person
  peopleConnection(
    where: PersonWhereInput
    orderBy: PersonOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
  ): PersonConnection!
  personLists(
    where: PersonListWhereInput
    orderBy: PersonListOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
  ): [PersonList!]!
  personList(where: PersonListWhereUniqueInput!, stage: Stage! = PUBLISHED): PersonList
  personListsConnection(
    where: PersonListWhereInput
    orderBy: PersonListOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
  ): PersonListConnection!
  rowColumnOnes(
    where: RowColumnOneWhereInput
    orderBy: RowColumnOneOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
  ): [RowColumnOne!]!
  rowColumnOne(where: RowColumnOneWhereUniqueInput!, stage: Stage! = PUBLISHED): RowColumnOne
  rowColumnOnesConnection(
    where: RowColumnOneWhereInput
    orderBy: RowColumnOneOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
  ): RowColumnOneConnection!
  rowColumnThrees(
    where: RowColumnThreeWhereInput
    orderBy: RowColumnThreeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
    locales: [Locale!]! = [nl]
  ): [RowColumnThree!]!
  rowColumnThree(
    where: RowColumnThreeWhereUniqueInput!
    stage: Stage! = PUBLISHED
    locales: [Locale!]! = [nl]
  ): RowColumnThree
  rowColumnThreesConnection(
    where: RowColumnThreeWhereInput
    orderBy: RowColumnThreeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
    locales: [Locale!]! = [nl]
  ): RowColumnThreeConnection!
  rowColumnTwos(
    where: RowColumnTwoWhereInput
    orderBy: RowColumnTwoOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
    locales: [Locale!]! = [nl]
  ): [RowColumnTwo!]!
  rowColumnTwo(
    where: RowColumnTwoWhereUniqueInput!
    stage: Stage! = PUBLISHED
    locales: [Locale!]! = [nl]
  ): RowColumnTwo
  rowColumnTwosConnection(
    where: RowColumnTwoWhereInput
    orderBy: RowColumnTwoOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
    locales: [Locale!]! = [nl]
  ): RowColumnTwoConnection!
  rowCompanySliders(
    where: RowCompanySliderWhereInput
    orderBy: RowCompanySliderOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
  ): [RowCompanySlider!]!
  rowCompanySlider(
    where: RowCompanySliderWhereUniqueInput!
    stage: Stage! = PUBLISHED
  ): RowCompanySlider
  rowCompanySlidersConnection(
    where: RowCompanySliderWhereInput
    orderBy: RowCompanySliderOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
  ): RowCompanySliderConnection!
  rowHeroVideos(
    where: RowHeroVideoWhereInput
    orderBy: RowHeroVideoOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
  ): [RowHeroVideo!]!
  rowHeroVideo(where: RowHeroVideoWhereUniqueInput!, stage: Stage! = PUBLISHED): RowHeroVideo
  rowHeroVideosConnection(
    where: RowHeroVideoWhereInput
    orderBy: RowHeroVideoOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
  ): RowHeroVideoConnection!
  rowPeopleWithTexts(
    where: RowPeopleWithTextWhereInput
    orderBy: RowPeopleWithTextOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
    locales: [Locale!]! = [nl]
  ): [RowPeopleWithText!]!
  rowPeopleWithText(
    where: RowPeopleWithTextWhereUniqueInput!
    stage: Stage! = PUBLISHED
    locales: [Locale!]! = [nl]
  ): RowPeopleWithText
  rowPeopleWithTextsConnection(
    where: RowPeopleWithTextWhereInput
    orderBy: RowPeopleWithTextOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
    locales: [Locale!]! = [nl]
  ): RowPeopleWithTextConnection!
  rowRecentBlogPosts(
    where: RowRecentBlogPostWhereInput
    orderBy: RowRecentBlogPostOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
  ): [RowRecentBlogPost!]!
  rowRecentBlogPost(
    where: RowRecentBlogPostWhereUniqueInput!
    stage: Stage! = PUBLISHED
  ): RowRecentBlogPost
  rowRecentBlogPostsConnection(
    where: RowRecentBlogPostWhereInput
    orderBy: RowRecentBlogPostOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
  ): RowRecentBlogPostConnection!
  rowServicesWithTexts(
    where: RowServicesWithTextWhereInput
    orderBy: RowServicesWithTextOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
    locales: [Locale!]! = [nl]
  ): [RowServicesWithText!]!
  rowServicesWithText(
    where: RowServicesWithTextWhereUniqueInput!
    stage: Stage! = PUBLISHED
    locales: [Locale!]! = [nl]
  ): RowServicesWithText
  rowServicesWithTextsConnection(
    where: RowServicesWithTextWhereInput
    orderBy: RowServicesWithTextOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
    locales: [Locale!]! = [nl]
  ): RowServicesWithTextConnection!
  zzDeleteLists(
    where: ZzDeleteListWhereInput
    orderBy: ZzDeleteListOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
  ): [ZzDeleteList!]!
  zzDeleteList(where: ZzDeleteListWhereUniqueInput!, stage: Stage! = PUBLISHED): ZzDeleteList
  zzDeleteListsConnection(
    where: ZzDeleteListWhereInput
    orderBy: ZzDeleteListOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
    stage: Stage! = PUBLISHED
  ): ZzDeleteListConnection!
}
enum Stage {
  PUBLISHED
  DRAFT
}
enum Locale {
  nl
  en
}
interface Node {
  id: ID!
  stage: Stage!
}
input AssetWhereInput {
  _search: String
  AND: [AssetWhereInput!]
  OR: [AssetWhereInput!]
  NOT: [AssetWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  handle: String
  handle_not: String
  handle_in: [String!]
  handle_not_in: [String!]
  handle_contains: String
  handle_not_contains: String
  handle_starts_with: String
  handle_not_starts_with: String
  handle_ends_with: String
  handle_not_ends_with: String
  fileName: String
  fileName_not: String
  fileName_in: [String!]
  fileName_not_in: [String!]
  fileName_contains: String
  fileName_not_contains: String
  fileName_starts_with: String
  fileName_not_starts_with: String
  fileName_ends_with: String
  fileName_not_ends_with: String
  height: Float
  height_not: Float
  height_in: [Float!]
  height_not_in: [Float!]
  height_lt: Float
  height_lte: Float
  height_gt: Float
  height_gte: Float
  width: Float
  width_not: Float
  width_in: [Float!]
  width_not_in: [Float!]
  width_lt: Float
  width_lte: Float
  width_gt: Float
  width_gte: Float
  size: Float
  size_not: Float
  size_in: [Float!]
  size_not_in: [Float!]
  size_lt: Float
  size_lte: Float
  size_gt: Float
  size_gte: Float
  mimeType: String
  mimeType_not: String
  mimeType_in: [String!]
  mimeType_not_in: [String!]
  mimeType_contains: String
  mimeType_not_contains: String
  mimeType_starts_with: String
  mimeType_not_starts_with: String
  mimeType_ends_with: String
  mimeType_not_ends_with: String
  videoRowHeroVideo_every: RowHeroVideoWhereInput
  videoRowHeroVideo_some: RowHeroVideoWhereInput
  videoRowHeroVideo_none: RowHeroVideoWhereInput
  personAvatar_every: PersonWhereInput
  personAvatar_some: PersonWhereInput
  personAvatar_none: PersonWhereInput
  companyLogo_every: CompanyWhereInput
  companyLogo_some: CompanyWhereInput
  companyLogo_none: CompanyWhereInput
  colOneIconRowColumnTwo_every: RowColumnTwoWhereInput
  colOneIconRowColumnTwo_some: RowColumnTwoWhereInput
  colOneIconRowColumnTwo_none: RowColumnTwoWhereInput
  colTwoIconRowColumnTwo_every: RowColumnTwoWhereInput
  colTwoIconRowColumnTwo_some: RowColumnTwoWhereInput
  colTwoIconRowColumnTwo_none: RowColumnTwoWhereInput
  rowColumnThreeColOneIcon_every: RowColumnThreeWhereInput
  rowColumnThreeColOneIcon_some: RowColumnThreeWhereInput
  rowColumnThreeColOneIcon_none: RowColumnThreeWhereInput
  rowColumnThreeColTwoIcon_every: RowColumnThreeWhereInput
  rowColumnThreeColTwoIcon_some: RowColumnThreeWhereInput
  rowColumnThreeColTwoIcon_none: RowColumnThreeWhereInput
  rowColumnThreeColThreeIcon_every: RowColumnThreeWhereInput
  rowColumnThreeColThreeIcon_some: RowColumnThreeWhereInput
  rowColumnThreeColThreeIcon_none: RowColumnThreeWhereInput
  rowColumnOneColOneIcon_every: RowColumnOneWhereInput
  rowColumnOneColOneIcon_some: RowColumnOneWhereInput
  rowColumnOneColOneIcon_none: RowColumnOneWhereInput
}
scalar DateTime
input RowHeroVideoWhereInput {
  _search: String
  AND: [RowHeroVideoWhereInput!]
  OR: [RowHeroVideoWhereInput!]
  NOT: [RowHeroVideoWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  video: AssetWhereInput
}
input PersonWhereInput {
  _search: String
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  avatar: AssetWhereInput
  personList_every: PersonListWhereInput
  personList_some: PersonListWhereInput
  personList_none: PersonListWhereInput
}
input PersonListWhereInput {
  _search: String
  AND: [PersonListWhereInput!]
  OR: [PersonListWhereInput!]
  NOT: [PersonListWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  persons_every: PersonWhereInput
  persons_some: PersonWhereInput
  persons_none: PersonWhereInput
}
input CompanyWhereInput {
  _search: String
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  logo: AssetWhereInput
  rowCompanySlider_every: RowCompanySliderWhereInput
  rowCompanySlider_some: RowCompanySliderWhereInput
  rowCompanySlider_none: RowCompanySliderWhereInput
}
input RowCompanySliderWhereInput {
  _search: String
  AND: [RowCompanySliderWhereInput!]
  OR: [RowCompanySliderWhereInput!]
  NOT: [RowCompanySliderWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  companies_every: CompanyWhereInput
  companies_some: CompanyWhereInput
  companies_none: CompanyWhereInput
}
input RowColumnTwoWhereInput {
  _search: String
  AND: [RowColumnTwoWhereInput!]
  OR: [RowColumnTwoWhereInput!]
  NOT: [RowColumnTwoWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  colOneIcon: AssetWhereInput
  colTwoIcon: AssetWhereInput
}
input RowColumnThreeWhereInput {
  _search: String
  AND: [RowColumnThreeWhereInput!]
  OR: [RowColumnThreeWhereInput!]
  NOT: [RowColumnThreeWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  colOneIcon: AssetWhereInput
  colTwoIcon: AssetWhereInput
  colThreeIcon: AssetWhereInput
}
input RowColumnOneWhereInput {
  _search: String
  AND: [RowColumnOneWhereInput!]
  OR: [RowColumnOneWhereInput!]
  NOT: [RowColumnOneWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  colOneIcon: AssetWhereInput
}
enum AssetOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  handle_ASC
  handle_DESC
  fileName_ASC
  fileName_DESC
  height_ASC
  height_DESC
  width_ASC
  width_DESC
  size_ASC
  size_DESC
  mimeType_ASC
  mimeType_DESC
}
type Asset implements Node {
  stage: Stage!
  locale: Locale!
  localizations(locales: [Locale!]! = [nl, en], includeCurrent: Boolean! = false): [Asset!]!
  documentInStages(
    stages: [Stage!]! = [PUBLISHED, DRAFT]
    includeCurrent: Boolean! = false
    inheritLocale: Boolean! = false
  ): [Asset!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  handle: String!
  fileName: String!
  height: Float
  width: Float
  size: Float
  mimeType: String
  videoRowHeroVideo(
    where: RowHeroVideoWhereInput
    orderBy: RowHeroVideoOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [RowHeroVideo!]!
  personAvatar(
    where: PersonWhereInput
    orderBy: PersonOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Person!]!
  companyLogo(
    where: CompanyWhereInput
    orderBy: CompanyOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Company!]!
  colOneIconRowColumnTwo(
    where: RowColumnTwoWhereInput
    orderBy: RowColumnTwoOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [RowColumnTwo!]!
  colTwoIconRowColumnTwo(
    where: RowColumnTwoWhereInput
    orderBy: RowColumnTwoOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [RowColumnTwo!]!
  rowColumnThreeColOneIcon(
    where: RowColumnThreeWhereInput
    orderBy: RowColumnThreeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [RowColumnThree!]!
  rowColumnThreeColTwoIcon(
    where: RowColumnThreeWhereInput
    orderBy: RowColumnThreeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [RowColumnThree!]!
  rowColumnThreeColThreeIcon(
    where: RowColumnThreeWhereInput
    orderBy: RowColumnThreeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [RowColumnThree!]!
  rowColumnOneColOneIcon(
    where: RowColumnOneWhereInput
    orderBy: RowColumnOneOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [RowColumnOne!]!
  url(transformation: AssetTransformationInput): String!
}
enum RowHeroVideoOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
}
type RowHeroVideo implements Node {
  stage: Stage!
  documentInStages(
    stages: [Stage!]! = [PUBLISHED, DRAFT]
    includeCurrent: Boolean! = false
    inheritLocale: Boolean! = false
  ): [RowHeroVideo!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  content: RichText!
  title: RichText!
  video: Asset
  links(skip: Int, after: String, before: String, first: Int, last: Int): [RowHeroVideoLinks!]!
  page(skip: Int, after: String, before: String, first: Int, last: Int): [Page!]!
  list(skip: Int, after: String, before: String, first: Int, last: Int): [ZzDeleteList!]!
}
type RichText {
  raw: RichTextAST!
  html: String!
  markdown: String!
  text: String!
}
scalar RichTextAST
union RowHeroVideoLinks = LinkExternal | LinkInternal
type LinkExternal implements Node {
  stage: Stage!
  locale: Locale!
  localizations(locales: [Locale!]! = [nl, en], includeCurrent: Boolean! = false): [LinkExternal!]!
  documentInStages(
    stages: [Stage!]! = [PUBLISHED, DRAFT]
    includeCurrent: Boolean! = false
    inheritLocale: Boolean! = false
  ): [LinkExternal!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  description: RichText
  rowHeroVideo(skip: Int, after: String, before: String, first: Int, last: Int): [RowHeroVideo!]!
  url: String!
  title: String!
}
type LinkInternal implements Node {
  stage: Stage!
  locale: Locale!
  localizations(locales: [Locale!]! = [nl, en], includeCurrent: Boolean! = false): [LinkInternal!]!
  documentInStages(
    stages: [Stage!]! = [PUBLISHED, DRAFT]
    includeCurrent: Boolean! = false
    inheritLocale: Boolean! = false
  ): [LinkInternal!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  title: String
  list(skip: Int, after: String, before: String, first: Int, last: Int): [ZzDeleteList!]!
  description: RichText
  page: Page
  rowPeopleWithText(
    where: RowPeopleWithTextWhereInput
    orderBy: RowPeopleWithTextOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [RowPeopleWithText!]!
  rowServicesWithText(
    where: RowServicesWithTextWhereInput
    orderBy: RowServicesWithTextOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [RowServicesWithText!]!
  rowHeroVideo(skip: Int, after: String, before: String, first: Int, last: Int): [RowHeroVideo!]!
}
type ZzDeleteList implements Node {
  stage: Stage!
  documentInStages(
    stages: [Stage!]! = [PUBLISHED, DRAFT]
    includeCurrent: Boolean! = false
    inheritLocale: Boolean! = false
  ): [ZzDeleteList!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  identifier: String!
  items(skip: Int, after: String, before: String, first: Int, last: Int): [ListItems!]!
}
union ListItems = Page | Person | Company | RowHeroVideo | LinkInternal
type Page implements Node {
  stage: Stage!
  locale: Locale!
  localizations(locales: [Locale!]! = [nl, en], includeCurrent: Boolean! = false): [Page!]!
  documentInStages(
    stages: [Stage!]! = [PUBLISHED, DRAFT]
    includeCurrent: Boolean! = false
    inheritLocale: Boolean! = false
  ): [Page!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  url: String!
  title: String!
  metaTitle: String!
  metaDescription: String!
  content(skip: Int, after: String, before: String, first: Int, last: Int): [PageContent!]!
  metaRobots: MetaRobots
  list(skip: Int, after: String, before: String, first: Int, last: Int): [ZzDeleteList!]!
  internalLink(
    where: LinkInternalWhereInput
    orderBy: LinkInternalOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [LinkInternal!]!
}
union PageContent = RowHeroVideo
enum MetaRobots {
  INDEX_FOLLOW
  INDEX_NOFOLLOW
  NOINDEX_FOLLOW
  NOINDEX_NOFOLLOW
}
input LinkInternalWhereInput {
  _search: String
  AND: [LinkInternalWhereInput!]
  OR: [LinkInternalWhereInput!]
  NOT: [LinkInternalWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  page: PageWhereInput
  rowPeopleWithText_every: RowPeopleWithTextWhereInput
  rowPeopleWithText_some: RowPeopleWithTextWhereInput
  rowPeopleWithText_none: RowPeopleWithTextWhereInput
  rowServicesWithText_every: RowServicesWithTextWhereInput
  rowServicesWithText_some: RowServicesWithTextWhereInput
  rowServicesWithText_none: RowServicesWithTextWhereInput
}
input PageWhereInput {
  _search: String
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  metaTitle: String
  metaTitle_not: String
  metaTitle_in: [String!]
  metaTitle_not_in: [String!]
  metaTitle_contains: String
  metaTitle_not_contains: String
  metaTitle_starts_with: String
  metaTitle_not_starts_with: String
  metaTitle_ends_with: String
  metaTitle_not_ends_with: String
  metaDescription: String
  metaDescription_not: String
  metaDescription_in: [String!]
  metaDescription_not_in: [String!]
  metaDescription_contains: String
  metaDescription_not_contains: String
  metaDescription_starts_with: String
  metaDescription_not_starts_with: String
  metaDescription_ends_with: String
  metaDescription_not_ends_with: String
  metaRobots: MetaRobots
  metaRobots_not: MetaRobots
  metaRobots_in: [MetaRobots!]
  metaRobots_not_in: [MetaRobots!]
  internalLink_every: LinkInternalWhereInput
  internalLink_some: LinkInternalWhereInput
  internalLink_none: LinkInternalWhereInput
}
input RowPeopleWithTextWhereInput {
  _search: String
  AND: [RowPeopleWithTextWhereInput!]
  OR: [RowPeopleWithTextWhereInput!]
  NOT: [RowPeopleWithTextWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  links_every: LinkInternalWhereInput
  links_some: LinkInternalWhereInput
  links_none: LinkInternalWhereInput
}
input RowServicesWithTextWhereInput {
  _search: String
  AND: [RowServicesWithTextWhereInput!]
  OR: [RowServicesWithTextWhereInput!]
  NOT: [RowServicesWithTextWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  links_every: LinkInternalWhereInput
  links_some: LinkInternalWhereInput
  links_none: LinkInternalWhereInput
}
enum LinkInternalOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  title_ASC
  title_DESC
}
type Person implements Node {
  stage: Stage!
  documentInStages(
    stages: [Stage!]! = [PUBLISHED, DRAFT]
    includeCurrent: Boolean! = false
    inheritLocale: Boolean! = false
  ): [Person!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  list(skip: Int, after: String, before: String, first: Int, last: Int): [ZzDeleteList!]!
  name: String
  avatar: Asset!
  personList(
    where: PersonListWhereInput
    orderBy: PersonListOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [PersonList!]!
}
enum PersonListOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
}
type PersonList implements Node {
  stage: Stage!
  documentInStages(
    stages: [Stage!]! = [PUBLISHED, DRAFT]
    includeCurrent: Boolean! = false
    inheritLocale: Boolean! = false
  ): [PersonList!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  persons(
    where: PersonWhereInput
    orderBy: PersonOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Person!]!
}
enum PersonOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  name_ASC
  name_DESC
}
type Company implements Node {
  stage: Stage!
  documentInStages(
    stages: [Stage!]! = [PUBLISHED, DRAFT]
    includeCurrent: Boolean! = false
    inheritLocale: Boolean! = false
  ): [Company!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  name: String!
  list(skip: Int, after: String, before: String, first: Int, last: Int): [ZzDeleteList!]!
  logo: Asset!
  rowCompanySlider(
    where: RowCompanySliderWhereInput
    orderBy: RowCompanySliderOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [RowCompanySlider!]!
}
enum RowCompanySliderOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
}
type RowCompanySlider implements Node {
  stage: Stage!
  documentInStages(
    stages: [Stage!]! = [PUBLISHED, DRAFT]
    includeCurrent: Boolean! = false
    inheritLocale: Boolean! = false
  ): [RowCompanySlider!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  companies(
    where: CompanyWhereInput
    orderBy: CompanyOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Company!]!
}
enum CompanyOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  name_ASC
  name_DESC
}
enum RowPeopleWithTextOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
}
type RowPeopleWithText implements Node {
  stage: Stage!
  locale: Locale!
  localizations(
    locales: [Locale!]! = [nl, en]
    includeCurrent: Boolean! = false
  ): [RowPeopleWithText!]!
  documentInStages(
    stages: [Stage!]! = [PUBLISHED, DRAFT]
    includeCurrent: Boolean! = false
    inheritLocale: Boolean! = false
  ): [RowPeopleWithText!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  text: RichText!
  links(
    where: LinkInternalWhereInput
    orderBy: LinkInternalOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [LinkInternal!]!
}
enum RowServicesWithTextOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  text_ASC
  text_DESC
}
type RowServicesWithText implements Node {
  stage: Stage!
  locale: Locale!
  localizations(
    locales: [Locale!]! = [nl, en]
    includeCurrent: Boolean! = false
  ): [RowServicesWithText!]!
  documentInStages(
    stages: [Stage!]! = [PUBLISHED, DRAFT]
    includeCurrent: Boolean! = false
    inheritLocale: Boolean! = false
  ): [RowServicesWithText!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  text: String!
  links(
    where: LinkInternalWhereInput
    orderBy: LinkInternalOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [LinkInternal!]!
}
enum RowColumnTwoOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
}
type RowColumnTwo implements Node {
  stage: Stage!
  locale: Locale!
  localizations(locales: [Locale!]! = [nl, en], includeCurrent: Boolean! = false): [RowColumnTwo!]!
  documentInStages(
    stages: [Stage!]! = [PUBLISHED, DRAFT]
    includeCurrent: Boolean! = false
    inheritLocale: Boolean! = false
  ): [RowColumnTwo!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  colOne: RichText!
  colOneIcon: Asset!
  colTwo: RichText!
  colTwoIcon: Asset!
}
enum RowColumnThreeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
}
type RowColumnThree implements Node {
  stage: Stage!
  locale: Locale!
  localizations(
    locales: [Locale!]! = [nl, en]
    includeCurrent: Boolean! = false
  ): [RowColumnThree!]!
  documentInStages(
    stages: [Stage!]! = [PUBLISHED, DRAFT]
    includeCurrent: Boolean! = false
    inheritLocale: Boolean! = false
  ): [RowColumnThree!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  colOne: RichText!
  colOneIcon: Asset
  colTwo: RichText!
  colTwoIcon: Asset
  colThree: RichText!
  colThreeIcon: Asset
}
enum RowColumnOneOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
}
type RowColumnOne implements Node {
  stage: Stage!
  documentInStages(
    stages: [Stage!]! = [PUBLISHED, DRAFT]
    includeCurrent: Boolean! = false
    inheritLocale: Boolean! = false
  ): [RowColumnOne!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  colOne: RichText
  colOneIcon: Asset
}
input AssetTransformationInput {
  image: ImageTransformationInput
  document: DocumentTransformationInput
  validateOptions: Boolean = false
}
input ImageTransformationInput {
  resize: ImageResizeInput
}
input ImageResizeInput {
  width: Int
  height: Int
  fit: ImageFit
}
enum ImageFit {
  clip
  crop
  scale
  max
}
input DocumentTransformationInput {
  output: DocumentOutputInput
}
input DocumentOutputInput {
  format: DocumentFileTypes
}
enum DocumentFileTypes {
  jpg
  odp
  ods
  odt
  png
  svg
  txt
  webp
  docx
  pdf
  html
  doc
  xlsx
  xls
  pptx
  ppt
}
input AssetWhereUniqueInput {
  id: ID
}
type AssetConnection {
  pageInfo: PageInfo!
  edges: [AssetEdge!]!
  aggregate: Aggregate!
}
type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}
type AssetEdge {
  node: Asset!
  cursor: String!
}
type Aggregate {
  count: Int!
}
input CompanyWhereUniqueInput {
  id: ID
  name: String
}
type CompanyConnection {
  pageInfo: PageInfo!
  edges: [CompanyEdge!]!
  aggregate: Aggregate!
}
type CompanyEdge {
  node: Company!
  cursor: String!
}
input LinkExternalWhereInput {
  _search: String
  AND: [LinkExternalWhereInput!]
  OR: [LinkExternalWhereInput!]
  NOT: [LinkExternalWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
}
enum LinkExternalOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  url_ASC
  url_DESC
  title_ASC
  title_DESC
}
input LinkExternalWhereUniqueInput {
  id: ID
}
type LinkExternalConnection {
  pageInfo: PageInfo!
  edges: [LinkExternalEdge!]!
  aggregate: Aggregate!
}
type LinkExternalEdge {
  node: LinkExternal!
  cursor: String!
}
input LinkInternalWhereUniqueInput {
  id: ID
}
type LinkInternalConnection {
  pageInfo: PageInfo!
  edges: [LinkInternalEdge!]!
  aggregate: Aggregate!
}
type LinkInternalEdge {
  node: LinkInternal!
  cursor: String!
}
enum PageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  url_ASC
  url_DESC
  title_ASC
  title_DESC
  metaTitle_ASC
  metaTitle_DESC
  metaDescription_ASC
  metaDescription_DESC
  metaRobots_ASC
  metaRobots_DESC
}
input PageWhereUniqueInput {
  id: ID
}
type PageConnection {
  pageInfo: PageInfo!
  edges: [PageEdge!]!
  aggregate: Aggregate!
}
type PageEdge {
  node: Page!
  cursor: String!
}
input PersonWhereUniqueInput {
  id: ID
}
type PersonConnection {
  pageInfo: PageInfo!
  edges: [PersonEdge!]!
  aggregate: Aggregate!
}
type PersonEdge {
  node: Person!
  cursor: String!
}
input PersonListWhereUniqueInput {
  id: ID
}
type PersonListConnection {
  pageInfo: PageInfo!
  edges: [PersonListEdge!]!
  aggregate: Aggregate!
}
type PersonListEdge {
  node: PersonList!
  cursor: String!
}
input RowColumnOneWhereUniqueInput {
  id: ID
}
type RowColumnOneConnection {
  pageInfo: PageInfo!
  edges: [RowColumnOneEdge!]!
  aggregate: Aggregate!
}
type RowColumnOneEdge {
  node: RowColumnOne!
  cursor: String!
}
input RowColumnThreeWhereUniqueInput {
  id: ID
}
type RowColumnThreeConnection {
  pageInfo: PageInfo!
  edges: [RowColumnThreeEdge!]!
  aggregate: Aggregate!
}
type RowColumnThreeEdge {
  node: RowColumnThree!
  cursor: String!
}
input RowColumnTwoWhereUniqueInput {
  id: ID
}
type RowColumnTwoConnection {
  pageInfo: PageInfo!
  edges: [RowColumnTwoEdge!]!
  aggregate: Aggregate!
}
type RowColumnTwoEdge {
  node: RowColumnTwo!
  cursor: String!
}
input RowCompanySliderWhereUniqueInput {
  id: ID
}
type RowCompanySliderConnection {
  pageInfo: PageInfo!
  edges: [RowCompanySliderEdge!]!
  aggregate: Aggregate!
}
type RowCompanySliderEdge {
  node: RowCompanySlider!
  cursor: String!
}
input RowHeroVideoWhereUniqueInput {
  id: ID
}
type RowHeroVideoConnection {
  pageInfo: PageInfo!
  edges: [RowHeroVideoEdge!]!
  aggregate: Aggregate!
}
type RowHeroVideoEdge {
  node: RowHeroVideo!
  cursor: String!
}
input RowPeopleWithTextWhereUniqueInput {
  id: ID
}
type RowPeopleWithTextConnection {
  pageInfo: PageInfo!
  edges: [RowPeopleWithTextEdge!]!
  aggregate: Aggregate!
}
type RowPeopleWithTextEdge {
  node: RowPeopleWithText!
  cursor: String!
}
input RowRecentBlogPostWhereInput {
  _search: String
  AND: [RowRecentBlogPostWhereInput!]
  OR: [RowRecentBlogPostWhereInput!]
  NOT: [RowRecentBlogPostWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  limit: Int
  limit_not: Int
  limit_in: [Int!]
  limit_not_in: [Int!]
  limit_lt: Int
  limit_lte: Int
  limit_gt: Int
  limit_gte: Int
}
enum RowRecentBlogPostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  limit_ASC
  limit_DESC
}
type RowRecentBlogPost implements Node {
  stage: Stage!
  documentInStages(
    stages: [Stage!]! = [PUBLISHED, DRAFT]
    includeCurrent: Boolean! = false
    inheritLocale: Boolean! = false
  ): [RowRecentBlogPost!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  limit: Int
}
input RowRecentBlogPostWhereUniqueInput {
  id: ID
}
type RowRecentBlogPostConnection {
  pageInfo: PageInfo!
  edges: [RowRecentBlogPostEdge!]!
  aggregate: Aggregate!
}
type RowRecentBlogPostEdge {
  node: RowRecentBlogPost!
  cursor: String!
}
input RowServicesWithTextWhereUniqueInput {
  id: ID
}
type RowServicesWithTextConnection {
  pageInfo: PageInfo!
  edges: [RowServicesWithTextEdge!]!
  aggregate: Aggregate!
}
type RowServicesWithTextEdge {
  node: RowServicesWithText!
  cursor: String!
}
input ZzDeleteListWhereInput {
  _search: String
  AND: [ZzDeleteListWhereInput!]
  OR: [ZzDeleteListWhereInput!]
  NOT: [ZzDeleteListWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  identifier: String
  identifier_not: String
  identifier_in: [String!]
  identifier_not_in: [String!]
  identifier_contains: String
  identifier_not_contains: String
  identifier_starts_with: String
  identifier_not_starts_with: String
  identifier_ends_with: String
  identifier_not_ends_with: String
}
enum ZzDeleteListOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  publishedAt_ASC
  publishedAt_DESC
  identifier_ASC
  identifier_DESC
}
input ZzDeleteListWhereUniqueInput {
  id: ID
  identifier: String
}
type ZzDeleteListConnection {
  pageInfo: PageInfo!
  edges: [ZzDeleteListEdge!]!
  aggregate: Aggregate!
}
type ZzDeleteListEdge {
  node: ZzDeleteList!
  cursor: String!
}
type Mutation {
  createAsset(data: AssetCreateInput!): Asset
    @deprecated(reason: "Asset mutations will be overhauled soon")
  updateAsset(where: AssetWhereUniqueInput!, data: AssetUpdateInput!): Asset
  deleteAsset(where: AssetWhereUniqueInput!): Asset
  upsertAsset(where: AssetWhereUniqueInput!, upsert: AssetUpsertInput!): Asset
  publishAsset(
    where: AssetWhereUniqueInput!
    locales: [Locale!]
    publishBase: Boolean = true
    to: [Stage!]! = [PUBLISHED]
  ): Asset
  unpublishAsset(
    where: AssetWhereUniqueInput!
    from: [Stage!]! = [PUBLISHED]
    locales: [Locale!]
    unpublishBase: Boolean = true
  ): Asset
  updateManyAssets(where: AssetManyWhereInput, data: AssetUpdateManyInput!): BatchPayload!
  deleteManyAssets(where: AssetManyWhereInput): BatchPayload!
  publishManyAssets(
    where: AssetManyWhereInput
    to: [Stage!]! = [PUBLISHED]
    locales: [Locale!]
    publishBase: Boolean = true
  ): BatchPayload!
  unpublishManyAssets(
    where: AssetManyWhereInput
    from: [Stage!]! = [PUBLISHED]
    locales: [Locale!]
    unpublishBase: Boolean = true
  ): BatchPayload!
  createCompany(data: CompanyCreateInput!): Company
  updateCompany(where: CompanyWhereUniqueInput!, data: CompanyUpdateInput!): Company
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  upsertCompany(where: CompanyWhereUniqueInput!, upsert: CompanyUpsertInput!): Company
  publishCompany(where: CompanyWhereUniqueInput!, to: [Stage!]! = [PUBLISHED]): Company
  unpublishCompany(where: CompanyWhereUniqueInput!, from: [Stage!]! = [PUBLISHED]): Company
  updateManyCompanies(where: CompanyManyWhereInput, data: CompanyUpdateManyInput!): BatchPayload!
  deleteManyCompanies(where: CompanyManyWhereInput): BatchPayload!
  publishManyCompanies(where: CompanyManyWhereInput, to: [Stage!]! = [PUBLISHED]): BatchPayload!
  unpublishManyCompanies(where: CompanyManyWhereInput, from: [Stage!]! = [PUBLISHED]): BatchPayload!
  createLinkExternal(data: LinkExternalCreateInput!): LinkExternal
  updateLinkExternal(
    where: LinkExternalWhereUniqueInput!
    data: LinkExternalUpdateInput!
  ): LinkExternal
  deleteLinkExternal(where: LinkExternalWhereUniqueInput!): LinkExternal
  upsertLinkExternal(
    where: LinkExternalWhereUniqueInput!
    upsert: LinkExternalUpsertInput!
  ): LinkExternal
  publishLinkExternal(
    where: LinkExternalWhereUniqueInput!
    locales: [Locale!]
    publishBase: Boolean = true
    to: [Stage!]! = [PUBLISHED]
  ): LinkExternal
  unpublishLinkExternal(
    where: LinkExternalWhereUniqueInput!
    from: [Stage!]! = [PUBLISHED]
    locales: [Locale!]
    unpublishBase: Boolean = true
  ): LinkExternal
  updateManyLinkExternals(
    where: LinkExternalManyWhereInput
    data: LinkExternalUpdateManyInput!
  ): BatchPayload!
  deleteManyLinkExternals(where: LinkExternalManyWhereInput): BatchPayload!
  publishManyLinkExternals(
    where: LinkExternalManyWhereInput
    to: [Stage!]! = [PUBLISHED]
    locales: [Locale!]
    publishBase: Boolean = true
  ): BatchPayload!
  unpublishManyLinkExternals(
    where: LinkExternalManyWhereInput
    from: [Stage!]! = [PUBLISHED]
    locales: [Locale!]
    unpublishBase: Boolean = true
  ): BatchPayload!
  createLinkInternal(data: LinkInternalCreateInput!): LinkInternal
  updateLinkInternal(
    where: LinkInternalWhereUniqueInput!
    data: LinkInternalUpdateInput!
  ): LinkInternal
  deleteLinkInternal(where: LinkInternalWhereUniqueInput!): LinkInternal
  upsertLinkInternal(
    where: LinkInternalWhereUniqueInput!
    upsert: LinkInternalUpsertInput!
  ): LinkInternal
  publishLinkInternal(
    where: LinkInternalWhereUniqueInput!
    locales: [Locale!]
    publishBase: Boolean = true
    to: [Stage!]! = [PUBLISHED]
  ): LinkInternal
  unpublishLinkInternal(
    where: LinkInternalWhereUniqueInput!
    from: [Stage!]! = [PUBLISHED]
    locales: [Locale!]
    unpublishBase: Boolean = true
  ): LinkInternal
  updateManyLinkInternals(
    where: LinkInternalManyWhereInput
    data: LinkInternalUpdateManyInput!
  ): BatchPayload!
  deleteManyLinkInternals(where: LinkInternalManyWhereInput): BatchPayload!
  publishManyLinkInternals(
    where: LinkInternalManyWhereInput
    to: [Stage!]! = [PUBLISHED]
    locales: [Locale!]
    publishBase: Boolean = true
  ): BatchPayload!
  unpublishManyLinkInternals(
    where: LinkInternalManyWhereInput
    from: [Stage!]! = [PUBLISHED]
    locales: [Locale!]
    unpublishBase: Boolean = true
  ): BatchPayload!
  createPage(data: PageCreateInput!): Page
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  deletePage(where: PageWhereUniqueInput!): Page
  upsertPage(where: PageWhereUniqueInput!, upsert: PageUpsertInput!): Page
  publishPage(
    where: PageWhereUniqueInput!
    locales: [Locale!]
    publishBase: Boolean = true
    to: [Stage!]! = [PUBLISHED]
  ): Page
  unpublishPage(
    where: PageWhereUniqueInput!
    from: [Stage!]! = [PUBLISHED]
    locales: [Locale!]
    unpublishBase: Boolean = true
  ): Page
  updateManyPages(where: PageManyWhereInput, data: PageUpdateManyInput!): BatchPayload!
  deleteManyPages(where: PageManyWhereInput): BatchPayload!
  publishManyPages(
    where: PageManyWhereInput
    to: [Stage!]! = [PUBLISHED]
    locales: [Locale!]
    publishBase: Boolean = true
  ): BatchPayload!
  unpublishManyPages(
    where: PageManyWhereInput
    from: [Stage!]! = [PUBLISHED]
    locales: [Locale!]
    unpublishBase: Boolean = true
  ): BatchPayload!
  createPerson(data: PersonCreateInput!): Person
  updatePerson(where: PersonWhereUniqueInput!, data: PersonUpdateInput!): Person
  deletePerson(where: PersonWhereUniqueInput!): Person
  upsertPerson(where: PersonWhereUniqueInput!, upsert: PersonUpsertInput!): Person
  publishPerson(where: PersonWhereUniqueInput!, to: [Stage!]! = [PUBLISHED]): Person
  unpublishPerson(where: PersonWhereUniqueInput!, from: [Stage!]! = [PUBLISHED]): Person
  updateManyPeople(where: PersonManyWhereInput, data: PersonUpdateManyInput!): BatchPayload!
  deleteManyPeople(where: PersonManyWhereInput): BatchPayload!
  publishManyPeople(where: PersonManyWhereInput, to: [Stage!]! = [PUBLISHED]): BatchPayload!
  unpublishManyPeople(where: PersonManyWhereInput, from: [Stage!]! = [PUBLISHED]): BatchPayload!
  createPersonList(data: PersonListCreateInput!): PersonList
  updatePersonList(where: PersonListWhereUniqueInput!, data: PersonListUpdateInput!): PersonList
  deletePersonList(where: PersonListWhereUniqueInput!): PersonList
  upsertPersonList(where: PersonListWhereUniqueInput!, upsert: PersonListUpsertInput!): PersonList
  publishPersonList(where: PersonListWhereUniqueInput!, to: [Stage!]! = [PUBLISHED]): PersonList
  unpublishPersonList(where: PersonListWhereUniqueInput!, from: [Stage!]! = [PUBLISHED]): PersonList
  updateManyPersonLists(
    where: PersonListManyWhereInput
    data: PersonListUpdateManyInput!
  ): BatchPayload!
  deleteManyPersonLists(where: PersonListManyWhereInput): BatchPayload!
  publishManyPersonLists(
    where: PersonListManyWhereInput
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload!
  unpublishManyPersonLists(
    where: PersonListManyWhereInput
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload!
  createRowColumnOne(data: RowColumnOneCreateInput!): RowColumnOne
  updateRowColumnOne(
    where: RowColumnOneWhereUniqueInput!
    data: RowColumnOneUpdateInput!
  ): RowColumnOne
  deleteRowColumnOne(where: RowColumnOneWhereUniqueInput!): RowColumnOne
  upsertRowColumnOne(
    where: RowColumnOneWhereUniqueInput!
    upsert: RowColumnOneUpsertInput!
  ): RowColumnOne
  publishRowColumnOne(
    where: RowColumnOneWhereUniqueInput!
    to: [Stage!]! = [PUBLISHED]
  ): RowColumnOne
  unpublishRowColumnOne(
    where: RowColumnOneWhereUniqueInput!
    from: [Stage!]! = [PUBLISHED]
  ): RowColumnOne
  updateManyRowColumnOnes(
    where: RowColumnOneManyWhereInput
    data: RowColumnOneUpdateManyInput!
  ): BatchPayload!
  deleteManyRowColumnOnes(where: RowColumnOneManyWhereInput): BatchPayload!
  publishManyRowColumnOnes(
    where: RowColumnOneManyWhereInput
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload!
  unpublishManyRowColumnOnes(
    where: RowColumnOneManyWhereInput
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload!
  createRowColumnThree(data: RowColumnThreeCreateInput!): RowColumnThree
  updateRowColumnThree(
    where: RowColumnThreeWhereUniqueInput!
    data: RowColumnThreeUpdateInput!
  ): RowColumnThree
  deleteRowColumnThree(where: RowColumnThreeWhereUniqueInput!): RowColumnThree
  upsertRowColumnThree(
    where: RowColumnThreeWhereUniqueInput!
    upsert: RowColumnThreeUpsertInput!
  ): RowColumnThree
  publishRowColumnThree(
    where: RowColumnThreeWhereUniqueInput!
    locales: [Locale!]
    publishBase: Boolean = true
    to: [Stage!]! = [PUBLISHED]
  ): RowColumnThree
  unpublishRowColumnThree(
    where: RowColumnThreeWhereUniqueInput!
    from: [Stage!]! = [PUBLISHED]
    locales: [Locale!]
    unpublishBase: Boolean = true
  ): RowColumnThree
  updateManyRowColumnThrees(
    where: RowColumnThreeManyWhereInput
    data: RowColumnThreeUpdateManyInput!
  ): BatchPayload!
  deleteManyRowColumnThrees(where: RowColumnThreeManyWhereInput): BatchPayload!
  publishManyRowColumnThrees(
    where: RowColumnThreeManyWhereInput
    to: [Stage!]! = [PUBLISHED]
    locales: [Locale!]
    publishBase: Boolean = true
  ): BatchPayload!
  unpublishManyRowColumnThrees(
    where: RowColumnThreeManyWhereInput
    from: [Stage!]! = [PUBLISHED]
    locales: [Locale!]
    unpublishBase: Boolean = true
  ): BatchPayload!
  createRowColumnTwo(data: RowColumnTwoCreateInput!): RowColumnTwo
  updateRowColumnTwo(
    where: RowColumnTwoWhereUniqueInput!
    data: RowColumnTwoUpdateInput!
  ): RowColumnTwo
  deleteRowColumnTwo(where: RowColumnTwoWhereUniqueInput!): RowColumnTwo
  upsertRowColumnTwo(
    where: RowColumnTwoWhereUniqueInput!
    upsert: RowColumnTwoUpsertInput!
  ): RowColumnTwo
  publishRowColumnTwo(
    where: RowColumnTwoWhereUniqueInput!
    locales: [Locale!]
    publishBase: Boolean = true
    to: [Stage!]! = [PUBLISHED]
  ): RowColumnTwo
  unpublishRowColumnTwo(
    where: RowColumnTwoWhereUniqueInput!
    from: [Stage!]! = [PUBLISHED]
    locales: [Locale!]
    unpublishBase: Boolean = true
  ): RowColumnTwo
  updateManyRowColumnTwos(
    where: RowColumnTwoManyWhereInput
    data: RowColumnTwoUpdateManyInput!
  ): BatchPayload!
  deleteManyRowColumnTwos(where: RowColumnTwoManyWhereInput): BatchPayload!
  publishManyRowColumnTwos(
    where: RowColumnTwoManyWhereInput
    to: [Stage!]! = [PUBLISHED]
    locales: [Locale!]
    publishBase: Boolean = true
  ): BatchPayload!
  unpublishManyRowColumnTwos(
    where: RowColumnTwoManyWhereInput
    from: [Stage!]! = [PUBLISHED]
    locales: [Locale!]
    unpublishBase: Boolean = true
  ): BatchPayload!
  createRowCompanySlider(data: RowCompanySliderCreateInput!): RowCompanySlider
  updateRowCompanySlider(
    where: RowCompanySliderWhereUniqueInput!
    data: RowCompanySliderUpdateInput!
  ): RowCompanySlider
  deleteRowCompanySlider(where: RowCompanySliderWhereUniqueInput!): RowCompanySlider
  upsertRowCompanySlider(
    where: RowCompanySliderWhereUniqueInput!
    upsert: RowCompanySliderUpsertInput!
  ): RowCompanySlider
  publishRowCompanySlider(
    where: RowCompanySliderWhereUniqueInput!
    to: [Stage!]! = [PUBLISHED]
  ): RowCompanySlider
  unpublishRowCompanySlider(
    where: RowCompanySliderWhereUniqueInput!
    from: [Stage!]! = [PUBLISHED]
  ): RowCompanySlider
  updateManyRowCompanySliders(
    where: RowCompanySliderManyWhereInput
    data: RowCompanySliderUpdateManyInput!
  ): BatchPayload!
  deleteManyRowCompanySliders(where: RowCompanySliderManyWhereInput): BatchPayload!
  publishManyRowCompanySliders(
    where: RowCompanySliderManyWhereInput
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload!
  unpublishManyRowCompanySliders(
    where: RowCompanySliderManyWhereInput
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload!
  createRowHeroVideo(data: RowHeroVideoCreateInput!): RowHeroVideo
  updateRowHeroVideo(
    where: RowHeroVideoWhereUniqueInput!
    data: RowHeroVideoUpdateInput!
  ): RowHeroVideo
  deleteRowHeroVideo(where: RowHeroVideoWhereUniqueInput!): RowHeroVideo
  upsertRowHeroVideo(
    where: RowHeroVideoWhereUniqueInput!
    upsert: RowHeroVideoUpsertInput!
  ): RowHeroVideo
  publishRowHeroVideo(
    where: RowHeroVideoWhereUniqueInput!
    to: [Stage!]! = [PUBLISHED]
  ): RowHeroVideo
  unpublishRowHeroVideo(
    where: RowHeroVideoWhereUniqueInput!
    from: [Stage!]! = [PUBLISHED]
  ): RowHeroVideo
  updateManyRowHeroVideos(
    where: RowHeroVideoManyWhereInput
    data: RowHeroVideoUpdateManyInput!
  ): BatchPayload!
  deleteManyRowHeroVideos(where: RowHeroVideoManyWhereInput): BatchPayload!
  publishManyRowHeroVideos(
    where: RowHeroVideoManyWhereInput
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload!
  unpublishManyRowHeroVideos(
    where: RowHeroVideoManyWhereInput
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload!
  createRowPeopleWithText(data: RowPeopleWithTextCreateInput!): RowPeopleWithText
  updateRowPeopleWithText(
    where: RowPeopleWithTextWhereUniqueInput!
    data: RowPeopleWithTextUpdateInput!
  ): RowPeopleWithText
  deleteRowPeopleWithText(where: RowPeopleWithTextWhereUniqueInput!): RowPeopleWithText
  upsertRowPeopleWithText(
    where: RowPeopleWithTextWhereUniqueInput!
    upsert: RowPeopleWithTextUpsertInput!
  ): RowPeopleWithText
  publishRowPeopleWithText(
    where: RowPeopleWithTextWhereUniqueInput!
    locales: [Locale!]
    publishBase: Boolean = true
    to: [Stage!]! = [PUBLISHED]
  ): RowPeopleWithText
  unpublishRowPeopleWithText(
    where: RowPeopleWithTextWhereUniqueInput!
    from: [Stage!]! = [PUBLISHED]
    locales: [Locale!]
    unpublishBase: Boolean = true
  ): RowPeopleWithText
  updateManyRowPeopleWithTexts(
    where: RowPeopleWithTextManyWhereInput
    data: RowPeopleWithTextUpdateManyInput!
  ): BatchPayload!
  deleteManyRowPeopleWithTexts(where: RowPeopleWithTextManyWhereInput): BatchPayload!
  publishManyRowPeopleWithTexts(
    where: RowPeopleWithTextManyWhereInput
    to: [Stage!]! = [PUBLISHED]
    locales: [Locale!]
    publishBase: Boolean = true
  ): BatchPayload!
  unpublishManyRowPeopleWithTexts(
    where: RowPeopleWithTextManyWhereInput
    from: [Stage!]! = [PUBLISHED]
    locales: [Locale!]
    unpublishBase: Boolean = true
  ): BatchPayload!
  createRowRecentBlogPost(data: RowRecentBlogPostCreateInput!): RowRecentBlogPost
  updateRowRecentBlogPost(
    where: RowRecentBlogPostWhereUniqueInput!
    data: RowRecentBlogPostUpdateInput!
  ): RowRecentBlogPost
  deleteRowRecentBlogPost(where: RowRecentBlogPostWhereUniqueInput!): RowRecentBlogPost
  upsertRowRecentBlogPost(
    where: RowRecentBlogPostWhereUniqueInput!
    upsert: RowRecentBlogPostUpsertInput!
  ): RowRecentBlogPost
  publishRowRecentBlogPost(
    where: RowRecentBlogPostWhereUniqueInput!
    to: [Stage!]! = [PUBLISHED]
  ): RowRecentBlogPost
  unpublishRowRecentBlogPost(
    where: RowRecentBlogPostWhereUniqueInput!
    from: [Stage!]! = [PUBLISHED]
  ): RowRecentBlogPost
  updateManyRowRecentBlogPosts(
    where: RowRecentBlogPostManyWhereInput
    data: RowRecentBlogPostUpdateManyInput!
  ): BatchPayload!
  deleteManyRowRecentBlogPosts(where: RowRecentBlogPostManyWhereInput): BatchPayload!
  publishManyRowRecentBlogPosts(
    where: RowRecentBlogPostManyWhereInput
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload!
  unpublishManyRowRecentBlogPosts(
    where: RowRecentBlogPostManyWhereInput
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload!
  createRowServicesWithText(data: RowServicesWithTextCreateInput!): RowServicesWithText
  updateRowServicesWithText(
    where: RowServicesWithTextWhereUniqueInput!
    data: RowServicesWithTextUpdateInput!
  ): RowServicesWithText
  deleteRowServicesWithText(where: RowServicesWithTextWhereUniqueInput!): RowServicesWithText
  upsertRowServicesWithText(
    where: RowServicesWithTextWhereUniqueInput!
    upsert: RowServicesWithTextUpsertInput!
  ): RowServicesWithText
  publishRowServicesWithText(
    where: RowServicesWithTextWhereUniqueInput!
    locales: [Locale!]
    publishBase: Boolean = true
    to: [Stage!]! = [PUBLISHED]
  ): RowServicesWithText
  unpublishRowServicesWithText(
    where: RowServicesWithTextWhereUniqueInput!
    from: [Stage!]! = [PUBLISHED]
    locales: [Locale!]
    unpublishBase: Boolean = true
  ): RowServicesWithText
  updateManyRowServicesWithTexts(
    where: RowServicesWithTextManyWhereInput
    data: RowServicesWithTextUpdateManyInput!
  ): BatchPayload!
  deleteManyRowServicesWithTexts(where: RowServicesWithTextManyWhereInput): BatchPayload!
  publishManyRowServicesWithTexts(
    where: RowServicesWithTextManyWhereInput
    to: [Stage!]! = [PUBLISHED]
    locales: [Locale!]
    publishBase: Boolean = true
  ): BatchPayload!
  unpublishManyRowServicesWithTexts(
    where: RowServicesWithTextManyWhereInput
    from: [Stage!]! = [PUBLISHED]
    locales: [Locale!]
    unpublishBase: Boolean = true
  ): BatchPayload!
  createZzDeleteList(data: ZzDeleteListCreateInput!): ZzDeleteList
  updateZzDeleteList(
    where: ZzDeleteListWhereUniqueInput!
    data: ZzDeleteListUpdateInput!
  ): ZzDeleteList
  deleteZzDeleteList(where: ZzDeleteListWhereUniqueInput!): ZzDeleteList
  upsertZzDeleteList(
    where: ZzDeleteListWhereUniqueInput!
    upsert: ZzDeleteListUpsertInput!
  ): ZzDeleteList
  publishZzDeleteList(
    where: ZzDeleteListWhereUniqueInput!
    to: [Stage!]! = [PUBLISHED]
  ): ZzDeleteList
  unpublishZzDeleteList(
    where: ZzDeleteListWhereUniqueInput!
    from: [Stage!]! = [PUBLISHED]
  ): ZzDeleteList
  updateManyZzDeleteLists(
    where: ZzDeleteListManyWhereInput
    data: ZzDeleteListUpdateManyInput!
  ): BatchPayload!
  deleteManyZzDeleteLists(where: ZzDeleteListManyWhereInput): BatchPayload!
  publishManyZzDeleteLists(
    where: ZzDeleteListManyWhereInput
    to: [Stage!]! = [PUBLISHED]
  ): BatchPayload!
  unpublishManyZzDeleteLists(
    where: ZzDeleteListManyWhereInput
    from: [Stage!]! = [PUBLISHED]
  ): BatchPayload!
}
input AssetCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  handle: String!
  fileName: String!
  height: Float
  width: Float
  size: Float
  mimeType: String
  videoRowHeroVideo: RowHeroVideoCreateManyInlineInput
  personAvatar: PersonCreateManyInlineInput
  companyLogo: CompanyCreateManyInlineInput
  colOneIconRowColumnTwo: RowColumnTwoCreateManyInlineInput
  colTwoIconRowColumnTwo: RowColumnTwoCreateManyInlineInput
  rowColumnThreeColOneIcon: RowColumnThreeCreateManyInlineInput
  rowColumnThreeColTwoIcon: RowColumnThreeCreateManyInlineInput
  rowColumnThreeColThreeIcon: RowColumnThreeCreateManyInlineInput
  rowColumnOneColOneIcon: RowColumnOneCreateManyInlineInput
  localizations: AssetCreateLocalizationsInput
}
input RowHeroVideoCreateManyInlineInput {
  create: [RowHeroVideoCreateInput!]
  connect: [RowHeroVideoWhereUniqueInput!]
}
input RowHeroVideoCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  content: RichTextAST!
  title: RichTextAST!
  video: AssetCreateOneInlineInput
  links: RowHeroVideoLinksCreateManyInlineInput
  page: PageCreateManyInlineInput
  list: ZzDeleteListCreateManyInlineInput
}
input AssetCreateOneInlineInput {
  create: AssetCreateInput
  connect: AssetWhereUniqueInput
}
input RowHeroVideoLinksCreateManyInlineInput {
  create: [RowHeroVideoLinksCreateInput!]
  connect: [RowHeroVideoLinksWhereUniqueInput!]
}
input RowHeroVideoLinksCreateInput {
  LinkExternal: LinkExternalCreateInput
  LinkInternal: LinkInternalCreateInput
}
input LinkExternalCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  description: RichTextAST
  rowHeroVideo: RowHeroVideoCreateManyInlineInput
  url: String!
  title: String!
  localizations: LinkExternalCreateLocalizationsInput
}
input LinkExternalCreateLocalizationsInput {
  create: [LinkExternalCreateLocalizationInput!]
}
input LinkExternalCreateLocalizationInput {
  data: LinkExternalCreateLocalizationDataInput!
  locale: Locale!
}
input LinkExternalCreateLocalizationDataInput {
  createdAt: DateTime
  updatedAt: DateTime
  description: RichTextAST
  url: String!
  title: String!
}
input LinkInternalCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  title: String
  list: ZzDeleteListCreateManyInlineInput
  description: RichTextAST
  page: PageCreateOneInlineInput
  rowPeopleWithText: RowPeopleWithTextCreateManyInlineInput
  rowServicesWithText: RowServicesWithTextCreateManyInlineInput
  rowHeroVideo: RowHeroVideoCreateManyInlineInput
  localizations: LinkInternalCreateLocalizationsInput
}
input ZzDeleteListCreateManyInlineInput {
  create: [ZzDeleteListCreateInput!]
  connect: [ZzDeleteListWhereUniqueInput!]
}
input ZzDeleteListCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  identifier: String!
  items: ListItemsCreateManyInlineInput
}
input ListItemsCreateManyInlineInput {
  create: [ListItemsCreateInput!]
  connect: [ListItemsWhereUniqueInput!]
}
input ListItemsCreateInput {
  Page: PageCreateInput
  Person: PersonCreateInput
  Company: CompanyCreateInput
  RowHeroVideo: RowHeroVideoCreateInput
  LinkInternal: LinkInternalCreateInput
}
input PageCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  url: String!
  title: String!
  metaTitle: String!
  metaDescription: String!
  content: PageContentCreateManyInlineInput
  metaRobots: MetaRobots
  list: ZzDeleteListCreateManyInlineInput
  internalLink: LinkInternalCreateManyInlineInput
  localizations: PageCreateLocalizationsInput
}
input PageContentCreateManyInlineInput {
  create: [PageContentCreateInput!]
  connect: [PageContentWhereUniqueInput!]
}
input PageContentCreateInput {
  RowHeroVideo: RowHeroVideoCreateInput
}
input PageContentWhereUniqueInput {
  RowHeroVideo: RowHeroVideoWhereUniqueInput
}
input LinkInternalCreateManyInlineInput {
  create: [LinkInternalCreateInput!]
  connect: [LinkInternalWhereUniqueInput!]
}
input PageCreateLocalizationsInput {
  create: [PageCreateLocalizationInput!]
}
input PageCreateLocalizationInput {
  data: PageCreateLocalizationDataInput!
  locale: Locale!
}
input PageCreateLocalizationDataInput {
  createdAt: DateTime
  updatedAt: DateTime
  url: String!
  title: String!
  metaTitle: String!
  metaDescription: String!
}
input PersonCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  list: ZzDeleteListCreateManyInlineInput
  name: String
  avatar: AssetCreateOneInlineInput!
  personList: PersonListCreateManyInlineInput
}
input PersonListCreateManyInlineInput {
  create: [PersonListCreateInput!]
  connect: [PersonListWhereUniqueInput!]
}
input PersonListCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  persons: PersonCreateManyInlineInput
}
input PersonCreateManyInlineInput {
  create: [PersonCreateInput!]
  connect: [PersonWhereUniqueInput!]
}
input CompanyCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  list: ZzDeleteListCreateManyInlineInput
  logo: AssetCreateOneInlineInput!
  rowCompanySlider: RowCompanySliderCreateManyInlineInput
}
input RowCompanySliderCreateManyInlineInput {
  create: [RowCompanySliderCreateInput!]
  connect: [RowCompanySliderWhereUniqueInput!]
}
input RowCompanySliderCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  companies: CompanyCreateManyInlineInput
}
input CompanyCreateManyInlineInput {
  create: [CompanyCreateInput!]
  connect: [CompanyWhereUniqueInput!]
}
input ListItemsWhereUniqueInput {
  Page: PageWhereUniqueInput
  Person: PersonWhereUniqueInput
  Company: CompanyWhereUniqueInput
  RowHeroVideo: RowHeroVideoWhereUniqueInput
  LinkInternal: LinkInternalWhereUniqueInput
}
input PageCreateOneInlineInput {
  create: PageCreateInput
  connect: PageWhereUniqueInput
}
input RowPeopleWithTextCreateManyInlineInput {
  create: [RowPeopleWithTextCreateInput!]
  connect: [RowPeopleWithTextWhereUniqueInput!]
}
input RowPeopleWithTextCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  text: RichTextAST!
  links: LinkInternalCreateManyInlineInput
  localizations: RowPeopleWithTextCreateLocalizationsInput
}
input RowPeopleWithTextCreateLocalizationsInput {
  create: [RowPeopleWithTextCreateLocalizationInput!]
}
input RowPeopleWithTextCreateLocalizationInput {
  data: RowPeopleWithTextCreateLocalizationDataInput!
  locale: Locale!
}
input RowPeopleWithTextCreateLocalizationDataInput {
  createdAt: DateTime
  updatedAt: DateTime
  text: RichTextAST!
}
input RowServicesWithTextCreateManyInlineInput {
  create: [RowServicesWithTextCreateInput!]
  connect: [RowServicesWithTextWhereUniqueInput!]
}
input RowServicesWithTextCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  text: String!
  links: LinkInternalCreateManyInlineInput
  localizations: RowServicesWithTextCreateLocalizationsInput
}
input RowServicesWithTextCreateLocalizationsInput {
  create: [RowServicesWithTextCreateLocalizationInput!]
}
input RowServicesWithTextCreateLocalizationInput {
  data: RowServicesWithTextCreateLocalizationDataInput!
  locale: Locale!
}
input RowServicesWithTextCreateLocalizationDataInput {
  createdAt: DateTime
  updatedAt: DateTime
  text: String!
}
input LinkInternalCreateLocalizationsInput {
  create: [LinkInternalCreateLocalizationInput!]
}
input LinkInternalCreateLocalizationInput {
  data: LinkInternalCreateLocalizationDataInput!
  locale: Locale!
}
input LinkInternalCreateLocalizationDataInput {
  createdAt: DateTime
  updatedAt: DateTime
  title: String
}
input RowHeroVideoLinksWhereUniqueInput {
  LinkExternal: LinkExternalWhereUniqueInput
  LinkInternal: LinkInternalWhereUniqueInput
}
input PageCreateManyInlineInput {
  create: [PageCreateInput!]
  connect: [PageWhereUniqueInput!]
}
input RowColumnTwoCreateManyInlineInput {
  create: [RowColumnTwoCreateInput!]
  connect: [RowColumnTwoWhereUniqueInput!]
}
input RowColumnTwoCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  colOne: RichTextAST!
  colOneIcon: AssetCreateOneInlineInput!
  colTwo: RichTextAST!
  colTwoIcon: AssetCreateOneInlineInput!
  localizations: RowColumnTwoCreateLocalizationsInput
}
input RowColumnTwoCreateLocalizationsInput {
  create: [RowColumnTwoCreateLocalizationInput!]
}
input RowColumnTwoCreateLocalizationInput {
  data: RowColumnTwoCreateLocalizationDataInput!
  locale: Locale!
}
input RowColumnTwoCreateLocalizationDataInput {
  createdAt: DateTime
  updatedAt: DateTime
  colOne: RichTextAST!
  colTwo: RichTextAST!
}
input RowColumnThreeCreateManyInlineInput {
  create: [RowColumnThreeCreateInput!]
  connect: [RowColumnThreeWhereUniqueInput!]
}
input RowColumnThreeCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  colOne: RichTextAST!
  colOneIcon: AssetCreateOneInlineInput
  colTwo: RichTextAST!
  colTwoIcon: AssetCreateOneInlineInput
  colThree: RichTextAST!
  colThreeIcon: AssetCreateOneInlineInput
  localizations: RowColumnThreeCreateLocalizationsInput
}
input RowColumnThreeCreateLocalizationsInput {
  create: [RowColumnThreeCreateLocalizationInput!]
}
input RowColumnThreeCreateLocalizationInput {
  data: RowColumnThreeCreateLocalizationDataInput!
  locale: Locale!
}
input RowColumnThreeCreateLocalizationDataInput {
  createdAt: DateTime
  updatedAt: DateTime
  colOne: RichTextAST!
  colTwo: RichTextAST!
  colThree: RichTextAST!
}
input RowColumnOneCreateManyInlineInput {
  create: [RowColumnOneCreateInput!]
  connect: [RowColumnOneWhereUniqueInput!]
}
input RowColumnOneCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  colOne: RichTextAST
  colOneIcon: AssetCreateOneInlineInput
}
input AssetCreateLocalizationsInput {
  create: [AssetCreateLocalizationInput!]
}
input AssetCreateLocalizationInput {
  data: AssetCreateLocalizationDataInput!
  locale: Locale!
}
input AssetCreateLocalizationDataInput {
  createdAt: DateTime
  updatedAt: DateTime
  handle: String!
  fileName: String!
  height: Float
  width: Float
  size: Float
  mimeType: String
}
input AssetUpdateInput {
  handle: String
  fileName: String
  height: Float
  width: Float
  size: Float
  mimeType: String
  videoRowHeroVideo: RowHeroVideoUpdateManyInlineInput
  personAvatar: PersonUpdateManyInlineInput
  companyLogo: CompanyUpdateManyInlineInput
  colOneIconRowColumnTwo: RowColumnTwoUpdateManyInlineInput
  colTwoIconRowColumnTwo: RowColumnTwoUpdateManyInlineInput
  rowColumnThreeColOneIcon: RowColumnThreeUpdateManyInlineInput
  rowColumnThreeColTwoIcon: RowColumnThreeUpdateManyInlineInput
  rowColumnThreeColThreeIcon: RowColumnThreeUpdateManyInlineInput
  rowColumnOneColOneIcon: RowColumnOneUpdateManyInlineInput
  localizations: AssetUpdateLocalizationsInput
}
input RowHeroVideoUpdateManyInlineInput {
  create: [RowHeroVideoCreateInput!]
  connect: [RowHeroVideoConnectInput!]
  set: [RowHeroVideoWhereUniqueInput!]
  update: [RowHeroVideoUpdateWithNestedWhereUniqueInput!]
  upsert: [RowHeroVideoUpsertWithNestedWhereUniqueInput!]
  disconnect: [RowHeroVideoWhereUniqueInput!]
  delete: [RowHeroVideoWhereUniqueInput!]
}
input RowHeroVideoConnectInput {
  where: RowHeroVideoWhereUniqueInput!
  position: ConnectPositionInput
}
input ConnectPositionInput {
  after: ID
  before: ID
  start: Boolean
  end: Boolean
}
input RowHeroVideoUpdateWithNestedWhereUniqueInput {
  where: RowHeroVideoWhereUniqueInput!
  data: RowHeroVideoUpdateInput!
}
input RowHeroVideoUpdateInput {
  content: RichTextAST
  title: RichTextAST
  video: AssetUpdateOneInlineInput
  links: RowHeroVideoLinksUpdateManyInlineInput
  page: PageUpdateManyInlineInput
  list: ZzDeleteListUpdateManyInlineInput
}
input AssetUpdateOneInlineInput {
  create: AssetCreateInput
  update: AssetUpdateWithNestedWhereUniqueInput
  upsert: AssetUpsertWithNestedWhereUniqueInput
  connect: AssetWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}
input AssetUpdateWithNestedWhereUniqueInput {
  where: AssetWhereUniqueInput!
  data: AssetUpdateInput!
}
input AssetUpsertWithNestedWhereUniqueInput {
  where: AssetWhereUniqueInput!
  data: AssetUpsertInput!
}
input AssetUpsertInput {
  create: AssetCreateInput!
  update: AssetUpdateInput!
}
input RowHeroVideoLinksUpdateManyInlineInput {
  create: [RowHeroVideoLinksCreateInput!]
  connect: [RowHeroVideoLinksConnectInput!]
  set: [RowHeroVideoLinksWhereUniqueInput!]
  update: [RowHeroVideoLinksUpdateWithNestedWhereUniqueInput!]
  upsert: [RowHeroVideoLinksUpsertWithNestedWhereUniqueInput!]
  disconnect: [RowHeroVideoLinksWhereUniqueInput!]
  delete: [RowHeroVideoLinksWhereUniqueInput!]
}
input RowHeroVideoLinksConnectInput {
  LinkExternal: LinkExternalConnectInput
  LinkInternal: LinkInternalConnectInput
}
input LinkExternalConnectInput {
  where: LinkExternalWhereUniqueInput!
  position: ConnectPositionInput
}
input LinkInternalConnectInput {
  where: LinkInternalWhereUniqueInput!
  position: ConnectPositionInput
}
input RowHeroVideoLinksUpdateWithNestedWhereUniqueInput {
  LinkExternal: LinkExternalUpdateWithNestedWhereUniqueInput
  LinkInternal: LinkInternalUpdateWithNestedWhereUniqueInput
}
input LinkExternalUpdateWithNestedWhereUniqueInput {
  where: LinkExternalWhereUniqueInput!
  data: LinkExternalUpdateInput!
}
input LinkExternalUpdateInput {
  description: RichTextAST
  rowHeroVideo: RowHeroVideoUpdateManyInlineInput
  url: String
  title: String
  localizations: LinkExternalUpdateLocalizationsInput
}
input LinkExternalUpdateLocalizationsInput {
  create: [LinkExternalCreateLocalizationInput!]
  update: [LinkExternalUpdateLocalizationInput!]
  upsert: [LinkExternalUpsertLocalizationInput!]
  delete: [Locale!]
}
input LinkExternalUpdateLocalizationInput {
  data: LinkExternalUpdateLocalizationDataInput!
  locale: Locale!
}
input LinkExternalUpdateLocalizationDataInput {
  description: RichTextAST
  url: String!
  title: String!
}
input LinkExternalUpsertLocalizationInput {
  update: LinkExternalUpdateLocalizationDataInput!
  create: LinkExternalCreateLocalizationDataInput!
  locale: Locale!
}
input LinkInternalUpdateWithNestedWhereUniqueInput {
  where: LinkInternalWhereUniqueInput!
  data: LinkInternalUpdateInput!
}
input LinkInternalUpdateInput {
  title: String
  list: ZzDeleteListUpdateManyInlineInput
  description: RichTextAST
  page: PageUpdateOneInlineInput
  rowPeopleWithText: RowPeopleWithTextUpdateManyInlineInput
  rowServicesWithText: RowServicesWithTextUpdateManyInlineInput
  rowHeroVideo: RowHeroVideoUpdateManyInlineInput
  localizations: LinkInternalUpdateLocalizationsInput
}
input ZzDeleteListUpdateManyInlineInput {
  create: [ZzDeleteListCreateInput!]
  connect: [ZzDeleteListConnectInput!]
  set: [ZzDeleteListWhereUniqueInput!]
  update: [ZzDeleteListUpdateWithNestedWhereUniqueInput!]
  upsert: [ZzDeleteListUpsertWithNestedWhereUniqueInput!]
  disconnect: [ZzDeleteListWhereUniqueInput!]
  delete: [ZzDeleteListWhereUniqueInput!]
}
input ZzDeleteListConnectInput {
  where: ZzDeleteListWhereUniqueInput!
  position: ConnectPositionInput
}
input ZzDeleteListUpdateWithNestedWhereUniqueInput {
  where: ZzDeleteListWhereUniqueInput!
  data: ZzDeleteListUpdateInput!
}
input ZzDeleteListUpdateInput {
  identifier: String
  items: ListItemsUpdateManyInlineInput
}
input ListItemsUpdateManyInlineInput {
  create: [ListItemsCreateInput!]
  connect: [ListItemsConnectInput!]
  set: [ListItemsWhereUniqueInput!]
  update: [ListItemsUpdateWithNestedWhereUniqueInput!]
  upsert: [ListItemsUpsertWithNestedWhereUniqueInput!]
  disconnect: [ListItemsWhereUniqueInput!]
  delete: [ListItemsWhereUniqueInput!]
}
input ListItemsConnectInput {
  Page: PageConnectInput
  Person: PersonConnectInput
  Company: CompanyConnectInput
  RowHeroVideo: RowHeroVideoConnectInput
  LinkInternal: LinkInternalConnectInput
}
input PageConnectInput {
  where: PageWhereUniqueInput!
  position: ConnectPositionInput
}
input PersonConnectInput {
  where: PersonWhereUniqueInput!
  position: ConnectPositionInput
}
input CompanyConnectInput {
  where: CompanyWhereUniqueInput!
  position: ConnectPositionInput
}
input ListItemsUpdateWithNestedWhereUniqueInput {
  Page: PageUpdateWithNestedWhereUniqueInput
  Person: PersonUpdateWithNestedWhereUniqueInput
  Company: CompanyUpdateWithNestedWhereUniqueInput
  RowHeroVideo: RowHeroVideoUpdateWithNestedWhereUniqueInput
  LinkInternal: LinkInternalUpdateWithNestedWhereUniqueInput
}
input PageUpdateWithNestedWhereUniqueInput {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}
input PageUpdateInput {
  url: String
  title: String
  metaTitle: String
  metaDescription: String
  content: PageContentUpdateManyInlineInput
  metaRobots: MetaRobots
  list: ZzDeleteListUpdateManyInlineInput
  internalLink: LinkInternalUpdateManyInlineInput
  localizations: PageUpdateLocalizationsInput
}
input PageContentUpdateManyInlineInput {
  create: [PageContentCreateInput!]
  connect: [PageContentConnectInput!]
  set: [PageContentWhereUniqueInput!]
  update: [PageContentUpdateWithNestedWhereUniqueInput!]
  upsert: [PageContentUpsertWithNestedWhereUniqueInput!]
  disconnect: [PageContentWhereUniqueInput!]
  delete: [PageContentWhereUniqueInput!]
}
input PageContentConnectInput {
  RowHeroVideo: RowHeroVideoConnectInput
}
input PageContentUpdateWithNestedWhereUniqueInput {
  RowHeroVideo: RowHeroVideoUpdateWithNestedWhereUniqueInput
}
input PageContentUpsertWithNestedWhereUniqueInput {
  RowHeroVideo: RowHeroVideoUpsertWithNestedWhereUniqueInput
}
input RowHeroVideoUpsertWithNestedWhereUniqueInput {
  where: RowHeroVideoWhereUniqueInput!
  data: RowHeroVideoUpsertInput!
}
input RowHeroVideoUpsertInput {
  create: RowHeroVideoCreateInput!
  update: RowHeroVideoUpdateInput!
}
input LinkInternalUpdateManyInlineInput {
  create: [LinkInternalCreateInput!]
  connect: [LinkInternalConnectInput!]
  set: [LinkInternalWhereUniqueInput!]
  update: [LinkInternalUpdateWithNestedWhereUniqueInput!]
  upsert: [LinkInternalUpsertWithNestedWhereUniqueInput!]
  disconnect: [LinkInternalWhereUniqueInput!]
  delete: [LinkInternalWhereUniqueInput!]
}
input LinkInternalUpsertWithNestedWhereUniqueInput {
  where: LinkInternalWhereUniqueInput!
  data: LinkInternalUpsertInput!
}
input LinkInternalUpsertInput {
  create: LinkInternalCreateInput!
  update: LinkInternalUpdateInput!
}
input PageUpdateLocalizationsInput {
  create: [PageCreateLocalizationInput!]
  update: [PageUpdateLocalizationInput!]
  upsert: [PageUpsertLocalizationInput!]
  delete: [Locale!]
}
input PageUpdateLocalizationInput {
  data: PageUpdateLocalizationDataInput!
  locale: Locale!
}
input PageUpdateLocalizationDataInput {
  url: String!
  title: String!
  metaTitle: String!
  metaDescription: String!
}
input PageUpsertLocalizationInput {
  update: PageUpdateLocalizationDataInput!
  create: PageCreateLocalizationDataInput!
  locale: Locale!
}
input PersonUpdateWithNestedWhereUniqueInput {
  where: PersonWhereUniqueInput!
  data: PersonUpdateInput!
}
input PersonUpdateInput {
  list: ZzDeleteListUpdateManyInlineInput
  name: String
  avatar: AssetUpdateOneInlineInput
  personList: PersonListUpdateManyInlineInput
}
input PersonListUpdateManyInlineInput {
  create: [PersonListCreateInput!]
  connect: [PersonListConnectInput!]
  set: [PersonListWhereUniqueInput!]
  update: [PersonListUpdateWithNestedWhereUniqueInput!]
  upsert: [PersonListUpsertWithNestedWhereUniqueInput!]
  disconnect: [PersonListWhereUniqueInput!]
  delete: [PersonListWhereUniqueInput!]
}
input PersonListConnectInput {
  where: PersonListWhereUniqueInput!
  position: ConnectPositionInput
}
input PersonListUpdateWithNestedWhereUniqueInput {
  where: PersonListWhereUniqueInput!
  data: PersonListUpdateInput!
}
input PersonListUpdateInput {
  persons: PersonUpdateManyInlineInput
}
input PersonUpdateManyInlineInput {
  create: [PersonCreateInput!]
  connect: [PersonConnectInput!]
  set: [PersonWhereUniqueInput!]
  update: [PersonUpdateWithNestedWhereUniqueInput!]
  upsert: [PersonUpsertWithNestedWhereUniqueInput!]
  disconnect: [PersonWhereUniqueInput!]
  delete: [PersonWhereUniqueInput!]
}
input PersonUpsertWithNestedWhereUniqueInput {
  where: PersonWhereUniqueInput!
  data: PersonUpsertInput!
}
input PersonUpsertInput {
  create: PersonCreateInput!
  update: PersonUpdateInput!
}
input PersonListUpsertWithNestedWhereUniqueInput {
  where: PersonListWhereUniqueInput!
  data: PersonListUpsertInput!
}
input PersonListUpsertInput {
  create: PersonListCreateInput!
  update: PersonListUpdateInput!
}
input CompanyUpdateWithNestedWhereUniqueInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateInput!
}
input CompanyUpdateInput {
  name: String
  list: ZzDeleteListUpdateManyInlineInput
  logo: AssetUpdateOneInlineInput
  rowCompanySlider: RowCompanySliderUpdateManyInlineInput
}
input RowCompanySliderUpdateManyInlineInput {
  create: [RowCompanySliderCreateInput!]
  connect: [RowCompanySliderConnectInput!]
  set: [RowCompanySliderWhereUniqueInput!]
  update: [RowCompanySliderUpdateWithNestedWhereUniqueInput!]
  upsert: [RowCompanySliderUpsertWithNestedWhereUniqueInput!]
  disconnect: [RowCompanySliderWhereUniqueInput!]
  delete: [RowCompanySliderWhereUniqueInput!]
}
input RowCompanySliderConnectInput {
  where: RowCompanySliderWhereUniqueInput!
  position: ConnectPositionInput
}
input RowCompanySliderUpdateWithNestedWhereUniqueInput {
  where: RowCompanySliderWhereUniqueInput!
  data: RowCompanySliderUpdateInput!
}
input RowCompanySliderUpdateInput {
  companies: CompanyUpdateManyInlineInput
}
input CompanyUpdateManyInlineInput {
  create: [CompanyCreateInput!]
  connect: [CompanyConnectInput!]
  set: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithNestedWhereUniqueInput!]
  upsert: [CompanyUpsertWithNestedWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  delete: [CompanyWhereUniqueInput!]
}
input CompanyUpsertWithNestedWhereUniqueInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpsertInput!
}
input CompanyUpsertInput {
  create: CompanyCreateInput!
  update: CompanyUpdateInput!
}
input RowCompanySliderUpsertWithNestedWhereUniqueInput {
  where: RowCompanySliderWhereUniqueInput!
  data: RowCompanySliderUpsertInput!
}
input RowCompanySliderUpsertInput {
  create: RowCompanySliderCreateInput!
  update: RowCompanySliderUpdateInput!
}
input ListItemsUpsertWithNestedWhereUniqueInput {
  Page: PageUpsertWithNestedWhereUniqueInput
  Person: PersonUpsertWithNestedWhereUniqueInput
  Company: CompanyUpsertWithNestedWhereUniqueInput
  RowHeroVideo: RowHeroVideoUpsertWithNestedWhereUniqueInput
  LinkInternal: LinkInternalUpsertWithNestedWhereUniqueInput
}
input PageUpsertWithNestedWhereUniqueInput {
  where: PageWhereUniqueInput!
  data: PageUpsertInput!
}
input PageUpsertInput {
  create: PageCreateInput!
  update: PageUpdateInput!
}
input ZzDeleteListUpsertWithNestedWhereUniqueInput {
  where: ZzDeleteListWhereUniqueInput!
  data: ZzDeleteListUpsertInput!
}
input ZzDeleteListUpsertInput {
  create: ZzDeleteListCreateInput!
  update: ZzDeleteListUpdateInput!
}
input PageUpdateOneInlineInput {
  create: PageCreateInput
  update: PageUpdateWithNestedWhereUniqueInput
  upsert: PageUpsertWithNestedWhereUniqueInput
  connect: PageWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}
input RowPeopleWithTextUpdateManyInlineInput {
  create: [RowPeopleWithTextCreateInput!]
  connect: [RowPeopleWithTextConnectInput!]
  set: [RowPeopleWithTextWhereUniqueInput!]
  update: [RowPeopleWithTextUpdateWithNestedWhereUniqueInput!]
  upsert: [RowPeopleWithTextUpsertWithNestedWhereUniqueInput!]
  disconnect: [RowPeopleWithTextWhereUniqueInput!]
  delete: [RowPeopleWithTextWhereUniqueInput!]
}
input RowPeopleWithTextConnectInput {
  where: RowPeopleWithTextWhereUniqueInput!
  position: ConnectPositionInput
}
input RowPeopleWithTextUpdateWithNestedWhereUniqueInput {
  where: RowPeopleWithTextWhereUniqueInput!
  data: RowPeopleWithTextUpdateInput!
}
input RowPeopleWithTextUpdateInput {
  text: RichTextAST
  links: LinkInternalUpdateManyInlineInput
  localizations: RowPeopleWithTextUpdateLocalizationsInput
}
input RowPeopleWithTextUpdateLocalizationsInput {
  create: [RowPeopleWithTextCreateLocalizationInput!]
  update: [RowPeopleWithTextUpdateLocalizationInput!]
  upsert: [RowPeopleWithTextUpsertLocalizationInput!]
  delete: [Locale!]
}
input RowPeopleWithTextUpdateLocalizationInput {
  data: RowPeopleWithTextUpdateLocalizationDataInput!
  locale: Locale!
}
input RowPeopleWithTextUpdateLocalizationDataInput {
  text: RichTextAST!
}
input RowPeopleWithTextUpsertLocalizationInput {
  update: RowPeopleWithTextUpdateLocalizationDataInput!
  create: RowPeopleWithTextCreateLocalizationDataInput!
  locale: Locale!
}
input RowPeopleWithTextUpsertWithNestedWhereUniqueInput {
  where: RowPeopleWithTextWhereUniqueInput!
  data: RowPeopleWithTextUpsertInput!
}
input RowPeopleWithTextUpsertInput {
  create: RowPeopleWithTextCreateInput!
  update: RowPeopleWithTextUpdateInput!
}
input RowServicesWithTextUpdateManyInlineInput {
  create: [RowServicesWithTextCreateInput!]
  connect: [RowServicesWithTextConnectInput!]
  set: [RowServicesWithTextWhereUniqueInput!]
  update: [RowServicesWithTextUpdateWithNestedWhereUniqueInput!]
  upsert: [RowServicesWithTextUpsertWithNestedWhereUniqueInput!]
  disconnect: [RowServicesWithTextWhereUniqueInput!]
  delete: [RowServicesWithTextWhereUniqueInput!]
}
input RowServicesWithTextConnectInput {
  where: RowServicesWithTextWhereUniqueInput!
  position: ConnectPositionInput
}
input RowServicesWithTextUpdateWithNestedWhereUniqueInput {
  where: RowServicesWithTextWhereUniqueInput!
  data: RowServicesWithTextUpdateInput!
}
input RowServicesWithTextUpdateInput {
  text: String
  links: LinkInternalUpdateManyInlineInput
  localizations: RowServicesWithTextUpdateLocalizationsInput
}
input RowServicesWithTextUpdateLocalizationsInput {
  create: [RowServicesWithTextCreateLocalizationInput!]
  update: [RowServicesWithTextUpdateLocalizationInput!]
  upsert: [RowServicesWithTextUpsertLocalizationInput!]
  delete: [Locale!]
}
input RowServicesWithTextUpdateLocalizationInput {
  data: RowServicesWithTextUpdateLocalizationDataInput!
  locale: Locale!
}
input RowServicesWithTextUpdateLocalizationDataInput {
  text: String!
}
input RowServicesWithTextUpsertLocalizationInput {
  update: RowServicesWithTextUpdateLocalizationDataInput!
  create: RowServicesWithTextCreateLocalizationDataInput!
  locale: Locale!
}
input RowServicesWithTextUpsertWithNestedWhereUniqueInput {
  where: RowServicesWithTextWhereUniqueInput!
  data: RowServicesWithTextUpsertInput!
}
input RowServicesWithTextUpsertInput {
  create: RowServicesWithTextCreateInput!
  update: RowServicesWithTextUpdateInput!
}
input LinkInternalUpdateLocalizationsInput {
  create: [LinkInternalCreateLocalizationInput!]
  update: [LinkInternalUpdateLocalizationInput!]
  upsert: [LinkInternalUpsertLocalizationInput!]
  delete: [Locale!]
}
input LinkInternalUpdateLocalizationInput {
  data: LinkInternalUpdateLocalizationDataInput!
  locale: Locale!
}
input LinkInternalUpdateLocalizationDataInput {
  title: String
}
input LinkInternalUpsertLocalizationInput {
  update: LinkInternalUpdateLocalizationDataInput!
  create: LinkInternalCreateLocalizationDataInput!
  locale: Locale!
}
input RowHeroVideoLinksUpsertWithNestedWhereUniqueInput {
  LinkExternal: LinkExternalUpsertWithNestedWhereUniqueInput
  LinkInternal: LinkInternalUpsertWithNestedWhereUniqueInput
}
input LinkExternalUpsertWithNestedWhereUniqueInput {
  where: LinkExternalWhereUniqueInput!
  data: LinkExternalUpsertInput!
}
input LinkExternalUpsertInput {
  create: LinkExternalCreateInput!
  update: LinkExternalUpdateInput!
}
input PageUpdateManyInlineInput {
  create: [PageCreateInput!]
  connect: [PageConnectInput!]
  set: [PageWhereUniqueInput!]
  update: [PageUpdateWithNestedWhereUniqueInput!]
  upsert: [PageUpsertWithNestedWhereUniqueInput!]
  disconnect: [PageWhereUniqueInput!]
  delete: [PageWhereUniqueInput!]
}
input RowColumnTwoUpdateManyInlineInput {
  create: [RowColumnTwoCreateInput!]
  connect: [RowColumnTwoConnectInput!]
  set: [RowColumnTwoWhereUniqueInput!]
  update: [RowColumnTwoUpdateWithNestedWhereUniqueInput!]
  upsert: [RowColumnTwoUpsertWithNestedWhereUniqueInput!]
  disconnect: [RowColumnTwoWhereUniqueInput!]
  delete: [RowColumnTwoWhereUniqueInput!]
}
input RowColumnTwoConnectInput {
  where: RowColumnTwoWhereUniqueInput!
  position: ConnectPositionInput
}
input RowColumnTwoUpdateWithNestedWhereUniqueInput {
  where: RowColumnTwoWhereUniqueInput!
  data: RowColumnTwoUpdateInput!
}
input RowColumnTwoUpdateInput {
  colOne: RichTextAST
  colOneIcon: AssetUpdateOneInlineInput
  colTwo: RichTextAST
  colTwoIcon: AssetUpdateOneInlineInput
  localizations: RowColumnTwoUpdateLocalizationsInput
}
input RowColumnTwoUpdateLocalizationsInput {
  create: [RowColumnTwoCreateLocalizationInput!]
  update: [RowColumnTwoUpdateLocalizationInput!]
  upsert: [RowColumnTwoUpsertLocalizationInput!]
  delete: [Locale!]
}
input RowColumnTwoUpdateLocalizationInput {
  data: RowColumnTwoUpdateLocalizationDataInput!
  locale: Locale!
}
input RowColumnTwoUpdateLocalizationDataInput {
  colOne: RichTextAST!
  colTwo: RichTextAST!
}
input RowColumnTwoUpsertLocalizationInput {
  update: RowColumnTwoUpdateLocalizationDataInput!
  create: RowColumnTwoCreateLocalizationDataInput!
  locale: Locale!
}
input RowColumnTwoUpsertWithNestedWhereUniqueInput {
  where: RowColumnTwoWhereUniqueInput!
  data: RowColumnTwoUpsertInput!
}
input RowColumnTwoUpsertInput {
  create: RowColumnTwoCreateInput!
  update: RowColumnTwoUpdateInput!
}
input RowColumnThreeUpdateManyInlineInput {
  create: [RowColumnThreeCreateInput!]
  connect: [RowColumnThreeConnectInput!]
  set: [RowColumnThreeWhereUniqueInput!]
  update: [RowColumnThreeUpdateWithNestedWhereUniqueInput!]
  upsert: [RowColumnThreeUpsertWithNestedWhereUniqueInput!]
  disconnect: [RowColumnThreeWhereUniqueInput!]
  delete: [RowColumnThreeWhereUniqueInput!]
}
input RowColumnThreeConnectInput {
  where: RowColumnThreeWhereUniqueInput!
  position: ConnectPositionInput
}
input RowColumnThreeUpdateWithNestedWhereUniqueInput {
  where: RowColumnThreeWhereUniqueInput!
  data: RowColumnThreeUpdateInput!
}
input RowColumnThreeUpdateInput {
  colOne: RichTextAST
  colOneIcon: AssetUpdateOneInlineInput
  colTwo: RichTextAST
  colTwoIcon: AssetUpdateOneInlineInput
  colThree: RichTextAST
  colThreeIcon: AssetUpdateOneInlineInput
  localizations: RowColumnThreeUpdateLocalizationsInput
}
input RowColumnThreeUpdateLocalizationsInput {
  create: [RowColumnThreeCreateLocalizationInput!]
  update: [RowColumnThreeUpdateLocalizationInput!]
  upsert: [RowColumnThreeUpsertLocalizationInput!]
  delete: [Locale!]
}
input RowColumnThreeUpdateLocalizationInput {
  data: RowColumnThreeUpdateLocalizationDataInput!
  locale: Locale!
}
input RowColumnThreeUpdateLocalizationDataInput {
  colOne: RichTextAST!
  colTwo: RichTextAST!
  colThree: RichTextAST!
}
input RowColumnThreeUpsertLocalizationInput {
  update: RowColumnThreeUpdateLocalizationDataInput!
  create: RowColumnThreeCreateLocalizationDataInput!
  locale: Locale!
}
input RowColumnThreeUpsertWithNestedWhereUniqueInput {
  where: RowColumnThreeWhereUniqueInput!
  data: RowColumnThreeUpsertInput!
}
input RowColumnThreeUpsertInput {
  create: RowColumnThreeCreateInput!
  update: RowColumnThreeUpdateInput!
}
input RowColumnOneUpdateManyInlineInput {
  create: [RowColumnOneCreateInput!]
  connect: [RowColumnOneConnectInput!]
  set: [RowColumnOneWhereUniqueInput!]
  update: [RowColumnOneUpdateWithNestedWhereUniqueInput!]
  upsert: [RowColumnOneUpsertWithNestedWhereUniqueInput!]
  disconnect: [RowColumnOneWhereUniqueInput!]
  delete: [RowColumnOneWhereUniqueInput!]
}
input RowColumnOneConnectInput {
  where: RowColumnOneWhereUniqueInput!
  position: ConnectPositionInput
}
input RowColumnOneUpdateWithNestedWhereUniqueInput {
  where: RowColumnOneWhereUniqueInput!
  data: RowColumnOneUpdateInput!
}
input RowColumnOneUpdateInput {
  colOne: RichTextAST
  colOneIcon: AssetUpdateOneInlineInput
}
input RowColumnOneUpsertWithNestedWhereUniqueInput {
  where: RowColumnOneWhereUniqueInput!
  data: RowColumnOneUpsertInput!
}
input RowColumnOneUpsertInput {
  create: RowColumnOneCreateInput!
  update: RowColumnOneUpdateInput!
}
input AssetUpdateLocalizationsInput {
  create: [AssetCreateLocalizationInput!]
  update: [AssetUpdateLocalizationInput!]
  upsert: [AssetUpsertLocalizationInput!]
  delete: [Locale!]
}
input AssetUpdateLocalizationInput {
  data: AssetUpdateLocalizationDataInput!
  locale: Locale!
}
input AssetUpdateLocalizationDataInput {
  handle: String!
  fileName: String!
  height: Float
  width: Float
  size: Float
  mimeType: String
}
input AssetUpsertLocalizationInput {
  update: AssetUpdateLocalizationDataInput!
  create: AssetCreateLocalizationDataInput!
  locale: Locale!
}
input AssetManyWhereInput {
  _search: String
  AND: [AssetWhereInput!]
  OR: [AssetWhereInput!]
  NOT: [AssetWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  videoRowHeroVideo_every: RowHeroVideoWhereInput
  videoRowHeroVideo_some: RowHeroVideoWhereInput
  videoRowHeroVideo_none: RowHeroVideoWhereInput
  personAvatar_every: PersonWhereInput
  personAvatar_some: PersonWhereInput
  personAvatar_none: PersonWhereInput
  companyLogo_every: CompanyWhereInput
  companyLogo_some: CompanyWhereInput
  companyLogo_none: CompanyWhereInput
  colOneIconRowColumnTwo_every: RowColumnTwoWhereInput
  colOneIconRowColumnTwo_some: RowColumnTwoWhereInput
  colOneIconRowColumnTwo_none: RowColumnTwoWhereInput
  colTwoIconRowColumnTwo_every: RowColumnTwoWhereInput
  colTwoIconRowColumnTwo_some: RowColumnTwoWhereInput
  colTwoIconRowColumnTwo_none: RowColumnTwoWhereInput
  rowColumnThreeColOneIcon_every: RowColumnThreeWhereInput
  rowColumnThreeColOneIcon_some: RowColumnThreeWhereInput
  rowColumnThreeColOneIcon_none: RowColumnThreeWhereInput
  rowColumnThreeColTwoIcon_every: RowColumnThreeWhereInput
  rowColumnThreeColTwoIcon_some: RowColumnThreeWhereInput
  rowColumnThreeColTwoIcon_none: RowColumnThreeWhereInput
  rowColumnThreeColThreeIcon_every: RowColumnThreeWhereInput
  rowColumnThreeColThreeIcon_some: RowColumnThreeWhereInput
  rowColumnThreeColThreeIcon_none: RowColumnThreeWhereInput
  rowColumnOneColOneIcon_every: RowColumnOneWhereInput
  rowColumnOneColOneIcon_some: RowColumnOneWhereInput
  rowColumnOneColOneIcon_none: RowColumnOneWhereInput
}
input AssetUpdateManyInput {
  createdAt: DateTime
  updatedAt: DateTime
  localizations: [AssetUpdateManyLocalizationInput!]
}
input AssetUpdateManyLocalizationInput {
  fileName: String!
  height: Float
  width: Float
  size: Float
  mimeType: String
}
type BatchPayload {
  count: Long!
}
scalar Long
input CompanyManyWhereInput {
  _search: String
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  logo: AssetWhereInput
  rowCompanySlider_every: RowCompanySliderWhereInput
  rowCompanySlider_some: RowCompanySliderWhereInput
  rowCompanySlider_none: RowCompanySliderWhereInput
}
input CompanyUpdateManyInput {
  createdAt: DateTime
  updatedAt: DateTime
}
input LinkExternalManyWhereInput {
  _search: String
  AND: [LinkExternalWhereInput!]
  OR: [LinkExternalWhereInput!]
  NOT: [LinkExternalWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
}
input LinkExternalUpdateManyInput {
  createdAt: DateTime
  updatedAt: DateTime
  localizations: [LinkExternalUpdateManyLocalizationInput!]
}
input LinkExternalUpdateManyLocalizationInput {
  description: RichTextAST
  url: String!
  title: String!
}
input LinkInternalManyWhereInput {
  _search: String
  AND: [LinkInternalWhereInput!]
  OR: [LinkInternalWhereInput!]
  NOT: [LinkInternalWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  page: PageWhereInput
  rowPeopleWithText_every: RowPeopleWithTextWhereInput
  rowPeopleWithText_some: RowPeopleWithTextWhereInput
  rowPeopleWithText_none: RowPeopleWithTextWhereInput
  rowServicesWithText_every: RowServicesWithTextWhereInput
  rowServicesWithText_some: RowServicesWithTextWhereInput
  rowServicesWithText_none: RowServicesWithTextWhereInput
}
input LinkInternalUpdateManyInput {
  createdAt: DateTime
  updatedAt: DateTime
  description: RichTextAST
  localizations: [LinkInternalUpdateManyLocalizationInput!]
}
input LinkInternalUpdateManyLocalizationInput {
  title: String
}
input PageManyWhereInput {
  _search: String
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  metaRobots: MetaRobots
  metaRobots_not: MetaRobots
  metaRobots_in: [MetaRobots!]
  metaRobots_not_in: [MetaRobots!]
  internalLink_every: LinkInternalWhereInput
  internalLink_some: LinkInternalWhereInput
  internalLink_none: LinkInternalWhereInput
}
input PageUpdateManyInput {
  createdAt: DateTime
  updatedAt: DateTime
  metaRobots: MetaRobots
  localizations: [PageUpdateManyLocalizationInput!]
}
input PageUpdateManyLocalizationInput {
  title: String!
  metaTitle: String!
  metaDescription: String!
}
input PersonManyWhereInput {
  _search: String
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  avatar: AssetWhereInput
  personList_every: PersonListWhereInput
  personList_some: PersonListWhereInput
  personList_none: PersonListWhereInput
}
input PersonUpdateManyInput {
  createdAt: DateTime
  updatedAt: DateTime
  name: String
}
input PersonListManyWhereInput {
  _search: String
  AND: [PersonListWhereInput!]
  OR: [PersonListWhereInput!]
  NOT: [PersonListWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  persons_every: PersonWhereInput
  persons_some: PersonWhereInput
  persons_none: PersonWhereInput
}
input PersonListUpdateManyInput {
  createdAt: DateTime
  updatedAt: DateTime
}
input RowColumnOneManyWhereInput {
  _search: String
  AND: [RowColumnOneWhereInput!]
  OR: [RowColumnOneWhereInput!]
  NOT: [RowColumnOneWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  colOneIcon: AssetWhereInput
}
input RowColumnOneUpdateManyInput {
  createdAt: DateTime
  updatedAt: DateTime
  colOne: RichTextAST
}
input RowColumnThreeManyWhereInput {
  _search: String
  AND: [RowColumnThreeWhereInput!]
  OR: [RowColumnThreeWhereInput!]
  NOT: [RowColumnThreeWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  colOneIcon: AssetWhereInput
  colTwoIcon: AssetWhereInput
  colThreeIcon: AssetWhereInput
}
input RowColumnThreeUpdateManyInput {
  createdAt: DateTime
  updatedAt: DateTime
  localizations: [RowColumnThreeUpdateManyLocalizationInput!]
}
input RowColumnThreeUpdateManyLocalizationInput {
  colOne: RichTextAST!
  colTwo: RichTextAST!
  colThree: RichTextAST!
}
input RowColumnTwoManyWhereInput {
  _search: String
  AND: [RowColumnTwoWhereInput!]
  OR: [RowColumnTwoWhereInput!]
  NOT: [RowColumnTwoWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  colOneIcon: AssetWhereInput
  colTwoIcon: AssetWhereInput
}
input RowColumnTwoUpdateManyInput {
  createdAt: DateTime
  updatedAt: DateTime
  localizations: [RowColumnTwoUpdateManyLocalizationInput!]
}
input RowColumnTwoUpdateManyLocalizationInput {
  colOne: RichTextAST!
  colTwo: RichTextAST!
}
input RowCompanySliderManyWhereInput {
  _search: String
  AND: [RowCompanySliderWhereInput!]
  OR: [RowCompanySliderWhereInput!]
  NOT: [RowCompanySliderWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  companies_every: CompanyWhereInput
  companies_some: CompanyWhereInput
  companies_none: CompanyWhereInput
}
input RowCompanySliderUpdateManyInput {
  createdAt: DateTime
  updatedAt: DateTime
}
input RowHeroVideoManyWhereInput {
  _search: String
  AND: [RowHeroVideoWhereInput!]
  OR: [RowHeroVideoWhereInput!]
  NOT: [RowHeroVideoWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  video: AssetWhereInput
}
input RowHeroVideoUpdateManyInput {
  createdAt: DateTime
  updatedAt: DateTime
  content: RichTextAST!
  title: RichTextAST!
}
input RowPeopleWithTextManyWhereInput {
  _search: String
  AND: [RowPeopleWithTextWhereInput!]
  OR: [RowPeopleWithTextWhereInput!]
  NOT: [RowPeopleWithTextWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  links_every: LinkInternalWhereInput
  links_some: LinkInternalWhereInput
  links_none: LinkInternalWhereInput
}
input RowPeopleWithTextUpdateManyInput {
  createdAt: DateTime
  updatedAt: DateTime
  localizations: [RowPeopleWithTextUpdateManyLocalizationInput!]
}
input RowPeopleWithTextUpdateManyLocalizationInput {
  text: RichTextAST!
}
input RowRecentBlogPostCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  limit: Int
}
input RowRecentBlogPostUpdateInput {
  limit: Int
}
input RowRecentBlogPostUpsertInput {
  create: RowRecentBlogPostCreateInput!
  update: RowRecentBlogPostUpdateInput!
}
input RowRecentBlogPostManyWhereInput {
  _search: String
  AND: [RowRecentBlogPostWhereInput!]
  OR: [RowRecentBlogPostWhereInput!]
  NOT: [RowRecentBlogPostWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  limit: Int
  limit_not: Int
  limit_in: [Int!]
  limit_not_in: [Int!]
  limit_lt: Int
  limit_lte: Int
  limit_gt: Int
  limit_gte: Int
}
input RowRecentBlogPostUpdateManyInput {
  createdAt: DateTime
  updatedAt: DateTime
  limit: Int
}
input RowServicesWithTextManyWhereInput {
  _search: String
  AND: [RowServicesWithTextWhereInput!]
  OR: [RowServicesWithTextWhereInput!]
  NOT: [RowServicesWithTextWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  links_every: LinkInternalWhereInput
  links_some: LinkInternalWhereInput
  links_none: LinkInternalWhereInput
}
input RowServicesWithTextUpdateManyInput {
  createdAt: DateTime
  updatedAt: DateTime
  localizations: [RowServicesWithTextUpdateManyLocalizationInput!]
}
input RowServicesWithTextUpdateManyLocalizationInput {
  text: String!
}
input ZzDeleteListManyWhereInput {
  _search: String
  AND: [ZzDeleteListWhereInput!]
  OR: [ZzDeleteListWhereInput!]
  NOT: [ZzDeleteListWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  publishedAt: DateTime
  publishedAt_not: DateTime
  publishedAt_in: [DateTime!]
  publishedAt_not_in: [DateTime!]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  identifier: String
  identifier_not: String
  identifier_in: [String!]
  identifier_not_in: [String!]
  identifier_contains: String
  identifier_not_contains: String
  identifier_starts_with: String
  identifier_not_starts_with: String
  identifier_ends_with: String
  identifier_not_ends_with: String
}
input ZzDeleteListUpdateManyInput {
  createdAt: DateTime
  updatedAt: DateTime
}
input LinkExternalCreateOneInlineInput {
  create: LinkExternalCreateInput
  connect: LinkExternalWhereUniqueInput
}
input LinkInternalUpdateOneInlineInput {
  create: LinkInternalCreateInput
  update: LinkInternalUpdateWithNestedWhereUniqueInput
  upsert: LinkInternalUpsertWithNestedWhereUniqueInput
  connect: LinkInternalWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}
enum _MutationInputFieldKind {
  scalar
  richText
  enum
  relation
  union
  virtual
}
input AssetUpdateManyInlineInput {
  create: [AssetCreateInput!]
  connect: [AssetConnectInput!]
  set: [AssetWhereUniqueInput!]
  update: [AssetUpdateWithNestedWhereUniqueInput!]
  upsert: [AssetUpsertWithNestedWhereUniqueInput!]
  disconnect: [AssetWhereUniqueInput!]
  delete: [AssetWhereUniqueInput!]
}
input AssetConnectInput {
  where: AssetWhereUniqueInput!
  position: ConnectPositionInput
}
input RowColumnTwoCreateOneInlineInput {
  create: RowColumnTwoCreateInput
  connect: RowColumnTwoWhereUniqueInput
}
input PersonListCreateOneInlineInput {
  create: PersonListCreateInput
  connect: PersonListWhereUniqueInput
}
input RowColumnOneUpdateOneInlineInput {
  create: RowColumnOneCreateInput
  update: RowColumnOneUpdateWithNestedWhereUniqueInput
  upsert: RowColumnOneUpsertWithNestedWhereUniqueInput
  connect: RowColumnOneWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}
input ZzDeleteListUpdateManyWithNestedWhereInput {
  where: ZzDeleteListWhereInput!
  data: ZzDeleteListUpdateManyInput!
}
input CompanyCreateOneInlineInput {
  create: CompanyCreateInput
  connect: CompanyWhereUniqueInput
}
enum _FilterKind {
  search
  AND
  OR
  NOT
  eq
  eq_not
  in
  not_in
  lt
  lte
  gt
  gte
  contains
  not_contains
  starts_with
  not_starts_with
  ends_with
  not_ends_with
  contains_all
  contains_some
  contains_none
  relational_single
  relational_every
  relational_some
  relational_none
}
scalar Hex
input PersonListUpdateOneInlineInput {
  create: PersonListCreateInput
  update: PersonListUpdateWithNestedWhereUniqueInput
  upsert: PersonListUpsertWithNestedWhereUniqueInput
  connect: PersonListWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}
input RowHeroVideoUpdateManyWithNestedWhereInput {
  where: RowHeroVideoWhereInput!
  data: RowHeroVideoUpdateManyInput!
}
input RowHeroVideoLinksUpdateInput {
  LinkExternal: LinkExternalUpdateInput
  LinkInternal: LinkInternalUpdateInput
}
input RowServicesWithTextUpdateManyWithNestedWhereInput {
  where: RowServicesWithTextWhereInput!
  data: RowServicesWithTextUpdateManyInput!
}
enum _RelationInputKind {
  create
  update
}
input PageContentUpdateManyWithNestedWhereInput {
  RowHeroVideo: RowHeroVideoUpdateManyWithNestedWhereInput
}
input PublishLocaleInput {
  locale: Locale!
  stages: [Stage!]!
}
input PageUpdateManyWithNestedWhereInput {
  where: PageWhereInput!
  data: PageUpdateManyInput!
}
input LinkExternalUpdateManyWithNestedWhereInput {
  where: LinkExternalWhereInput!
  data: LinkExternalUpdateManyInput!
}
input LinkInternalUpdateManyWithNestedWhereInput {
  where: LinkInternalWhereInput!
  data: LinkInternalUpdateManyInput!
}
type Location {
  latitude: Float!
  longitude: Float!
  distance(from: LocationInput!): Float!
}
input LocationInput {
  latitude: Float!
  longitude: Float!
}
input RowColumnThreeUpdateOneInlineInput {
  create: RowColumnThreeCreateInput
  update: RowColumnThreeUpdateWithNestedWhereUniqueInput
  upsert: RowColumnThreeUpsertWithNestedWhereUniqueInput
  connect: RowColumnThreeWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}
enum _RelationKind {
  regular
  union
}
input AssetUpdateManyWithNestedWhereInput {
  where: AssetWhereInput!
  data: AssetUpdateManyInput!
}
input PersonUpdateManyWithNestedWhereInput {
  where: PersonWhereInput!
  data: PersonUpdateManyInput!
}
input LinkExternalUpdateManyInlineInput {
  create: [LinkExternalCreateInput!]
  connect: [LinkExternalConnectInput!]
  set: [LinkExternalWhereUniqueInput!]
  update: [LinkExternalUpdateWithNestedWhereUniqueInput!]
  upsert: [LinkExternalUpsertWithNestedWhereUniqueInput!]
  disconnect: [LinkExternalWhereUniqueInput!]
  delete: [LinkExternalWhereUniqueInput!]
}
input RowHeroVideoLinksUpdateManyWithNestedWhereInput {
  LinkExternal: LinkExternalUpdateManyWithNestedWhereInput
  LinkInternal: LinkInternalUpdateManyWithNestedWhereInput
}
input ListItemsUpdateInput {
  Page: PageUpdateInput
  Person: PersonUpdateInput
  Company: CompanyUpdateInput
  RowHeroVideo: RowHeroVideoUpdateInput
  LinkInternal: LinkInternalUpdateInput
}
input RowPeopleWithTextUpdateOneInlineInput {
  create: RowPeopleWithTextCreateInput
  update: RowPeopleWithTextUpdateWithNestedWhereUniqueInput
  upsert: RowPeopleWithTextUpsertWithNestedWhereUniqueInput
  connect: RowPeopleWithTextWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}
input RowColumnOneCreateOneInlineInput {
  create: RowColumnOneCreateInput
  connect: RowColumnOneWhereUniqueInput
}
input RowHeroVideoUpdateOneInlineInput {
  create: RowHeroVideoCreateInput
  update: RowHeroVideoUpdateWithNestedWhereUniqueInput
  upsert: RowHeroVideoUpsertWithNestedWhereUniqueInput
  connect: RowHeroVideoWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}
scalar RGBAHue
input RowRecentBlogPostUpdateManyWithNestedWhereInput {
  where: RowRecentBlogPostWhereInput!
  data: RowRecentBlogPostUpdateManyInput!
}
enum _MutationKind {
  create
  publish
  unpublish
  update
  upsert
  delete
  updateMany
  publishMany
  unpublishMany
  deleteMany
}
input RowHeroVideoLinksCreateOneInlineInput {
  create: RowHeroVideoLinksCreateInput
  connect: RowHeroVideoLinksWhereUniqueInput
}
input ZzDeleteListUpdateOneInlineInput {
  create: ZzDeleteListCreateInput
  update: ZzDeleteListUpdateWithNestedWhereUniqueInput
  upsert: ZzDeleteListUpsertWithNestedWhereUniqueInput
  connect: ZzDeleteListWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}
input PersonCreateOneInlineInput {
  create: PersonCreateInput
  connect: PersonWhereUniqueInput
}
input RowPeopleWithTextUpdateManyWithNestedWhereInput {
  where: RowPeopleWithTextWhereInput!
  data: RowPeopleWithTextUpdateManyInput!
}
input ListItemsCreateOneInlineInput {
  create: ListItemsCreateInput
  connect: ListItemsWhereUniqueInput
}
input RowRecentBlogPostUpsertWithNestedWhereUniqueInput {
  where: RowRecentBlogPostWhereUniqueInput!
  data: RowRecentBlogPostUpsertInput!
}
input ListItemsUpdateManyWithNestedWhereInput {
  Page: PageUpdateManyWithNestedWhereInput
  Person: PersonUpdateManyWithNestedWhereInput
  Company: CompanyUpdateManyWithNestedWhereInput
  RowHeroVideo: RowHeroVideoUpdateManyWithNestedWhereInput
  LinkInternal: LinkInternalUpdateManyWithNestedWhereInput
}
input CompanyUpdateManyWithNestedWhereInput {
  where: CompanyWhereInput!
  data: CompanyUpdateManyInput!
}
input PageContentUpdateOneInlineInput {
  create: PageContentCreateInput
  update: PageContentUpdateWithNestedWhereUniqueInput
  upsert: PageContentUpsertWithNestedWhereUniqueInput
  connect: PageContentWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}
input CompanyUpdateOneInlineInput {
  create: CompanyCreateInput
  update: CompanyUpdateWithNestedWhereUniqueInput
  upsert: CompanyUpsertWithNestedWhereUniqueInput
  connect: CompanyWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}
input LinkExternalUpdateOneInlineInput {
  create: LinkExternalCreateInput
  update: LinkExternalUpdateWithNestedWhereUniqueInput
  upsert: LinkExternalUpsertWithNestedWhereUniqueInput
  connect: LinkExternalWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}
input PersonListUpdateManyWithNestedWhereInput {
  where: PersonListWhereInput!
  data: PersonListUpdateManyInput!
}
input PersonUpdateOneInlineInput {
  create: PersonCreateInput
  update: PersonUpdateWithNestedWhereUniqueInput
  upsert: PersonUpsertWithNestedWhereUniqueInput
  connect: PersonWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}
input RowCompanySliderUpdateManyWithNestedWhereInput {
  where: RowCompanySliderWhereInput!
  data: RowCompanySliderUpdateManyInput!
}
input ColorInput {
  hex: Hex
  rgba: RGBAInput
}
input RGBAInput {
  r: RGBAHue!
  g: RGBAHue!
  b: RGBAHue!
  a: RGBATransparency!
}
scalar RGBATransparency
input RowColumnThreeUpdateManyWithNestedWhereInput {
  where: RowColumnThreeWhereInput!
  data: RowColumnThreeUpdateManyInput!
}
enum _RelationInputCardinality {
  one
  many
}
input RowColumnThreeCreateOneInlineInput {
  create: RowColumnThreeCreateInput
  connect: RowColumnThreeWhereUniqueInput
}
input RowPeopleWithTextCreateOneInlineInput {
  create: RowPeopleWithTextCreateInput
  connect: RowPeopleWithTextWhereUniqueInput
}
type Color {
  hex: Hex!
  rgba: RGBA!
  css: String!
}
type RGBA {
  r: RGBAHue!
  g: RGBAHue!
  b: RGBAHue!
  a: RGBATransparency!
}
input RowCompanySliderCreateOneInlineInput {
  create: RowCompanySliderCreateInput
  connect: RowCompanySliderWhereUniqueInput
}
input ListItemsUpdateOneInlineInput {
  create: ListItemsCreateInput
  update: ListItemsUpdateWithNestedWhereUniqueInput
  upsert: ListItemsUpsertWithNestedWhereUniqueInput
  connect: ListItemsWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}
input LinkExternalCreateManyInlineInput {
  create: [LinkExternalCreateInput!]
  connect: [LinkExternalWhereUniqueInput!]
}
enum _OrderDirection {
  asc
  desc
}
input AssetCreateManyInlineInput {
  create: [AssetCreateInput!]
  connect: [AssetWhereUniqueInput!]
}
input RowServicesWithTextUpdateOneInlineInput {
  create: RowServicesWithTextCreateInput
  update: RowServicesWithTextUpdateWithNestedWhereUniqueInput
  upsert: RowServicesWithTextUpsertWithNestedWhereUniqueInput
  connect: RowServicesWithTextWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}
input UnpublishLocaleInput {
  locale: Locale!
  stages: [Stage!]!
}
input PageContentWhereInput {
  RowHeroVideo: RowHeroVideoWhereInput
}
scalar Json
input RowColumnTwoUpdateOneInlineInput {
  create: RowColumnTwoCreateInput
  update: RowColumnTwoUpdateWithNestedWhereUniqueInput
  upsert: RowColumnTwoUpsertWithNestedWhereUniqueInput
  connect: RowColumnTwoWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}
input PageContentUpdateInput {
  RowHeroVideo: RowHeroVideoUpdateInput
}
input RowCompanySliderUpdateOneInlineInput {
  create: RowCompanySliderCreateInput
  update: RowCompanySliderUpdateWithNestedWhereUniqueInput
  upsert: RowCompanySliderUpsertWithNestedWhereUniqueInput
  connect: RowCompanySliderWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}
input ListItemsWhereInput {
  Page: PageWhereInput
  Person: PersonWhereInput
  Company: CompanyWhereInput
  RowHeroVideo: RowHeroVideoWhereInput
  LinkInternal: LinkInternalWhereInput
}
input RowHeroVideoCreateOneInlineInput {
  create: RowHeroVideoCreateInput
  connect: RowHeroVideoWhereUniqueInput
}
input ZzDeleteListCreateOneInlineInput {
  create: ZzDeleteListCreateInput
  connect: ZzDeleteListWhereUniqueInput
}
input PageContentCreateOneInlineInput {
  create: PageContentCreateInput
  connect: PageContentWhereUniqueInput
}
input LinkInternalCreateOneInlineInput {
  create: LinkInternalCreateInput
  connect: LinkInternalWhereUniqueInput
}
input RowColumnOneUpdateManyWithNestedWhereInput {
  where: RowColumnOneWhereInput!
  data: RowColumnOneUpdateManyInput!
}
input RowServicesWithTextCreateOneInlineInput {
  create: RowServicesWithTextCreateInput
  connect: RowServicesWithTextWhereUniqueInput
}
input RowRecentBlogPostUpdateWithNestedWhereUniqueInput {
  where: RowRecentBlogPostWhereUniqueInput!
  data: RowRecentBlogPostUpdateInput!
}
input RowHeroVideoLinksUpdateOneInlineInput {
  create: RowHeroVideoLinksCreateInput
  update: RowHeroVideoLinksUpdateWithNestedWhereUniqueInput
  upsert: RowHeroVideoLinksUpsertWithNestedWhereUniqueInput
  connect: RowHeroVideoLinksWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}
input RowColumnTwoUpdateManyWithNestedWhereInput {
  where: RowColumnTwoWhereInput!
  data: RowColumnTwoUpdateManyInput!
}
input RowHeroVideoLinksWhereInput {
  LinkExternal: LinkExternalWhereInput
  LinkInternal: LinkInternalWhereInput
}
scalar Date
