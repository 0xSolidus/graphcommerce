// Do not edit this file: autogenerated by graphql-code-generator
export type Maybe<T> = T | null
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] }
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  RGBATransparency: any
  /** Raw JSON value */
  Json: any
  /** Slate-compatible RichText AST */
  RichTextAST: any
  RGBAHue: any
  /** A date string, such as 2007-12-03 (YYYY-MM-DD), compliant with ISO 8601 standard for representation of dates using the Gregorian calendar. */
  Date: any
  /** A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the date-timeformat outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representationof dates and times using the Gregorian calendar. */
  DateTime: any
  Hex: any
  /** The Long scalar type represents non-fractional signed whole numeric values. Long can represent values between -(2^63) and 2^63 - 1. */
  Long: any
}

export type Query = {
  __typename?: 'Query'
  /** Retrieve a single asset */
  asset?: Maybe<Asset>
  /** Retrieve document version */
  assetVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple assets */
  assets: Array<Asset>
  /** Retrieve multiple assets using the Relay connection interface */
  assetsConnection: AssetConnection
  /** Retrieve a single award */
  award?: Maybe<Award>
  /** Retrieve document version */
  awardVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple awards */
  awards: Array<Award>
  /** Retrieve multiple awards using the Relay connection interface */
  awardsConnection: AwardConnection
  /** Returns information about shopping cart */
  cart?: Maybe<Cart>
  categories?: Maybe<CategoryResult>
  /**
   * The category query searches for categories that match the criteria specified in the search and filter attributes.
   * @deprecated Use 'categoryList' query instead of 'category' query
   */
  category?: Maybe<CategoryTree>
  /** Returns an array of categories based on the specified filters. */
  categoryList?: Maybe<Array<Maybe<CategoryTree>>>
  /** The Checkout Agreements information */
  checkoutAgreements?: Maybe<Array<Maybe<CheckoutAgreement>>>
  /** The CMS block query returns information about CMS blocks */
  cmsBlocks?: Maybe<CmsBlocks>
  /** The CMS page query returns information about a CMS page */
  cmsPage?: Maybe<CmsPage>
  /** Retrieve multiple companies */
  companies: Array<Company>
  /** Retrieve multiple companies using the Relay connection interface */
  companiesConnection: CompanyConnection
  /** Retrieve a single company */
  company?: Maybe<Company>
  /** Retrieve document version */
  companyVersion?: Maybe<DocumentVersion>
  /** Retrieve a single contactForm */
  contactForm?: Maybe<ContactForm>
  /** Retrieve document version */
  contactFormVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple contactForms */
  contactForms: Array<ContactForm>
  /** Retrieve multiple contactForms using the Relay connection interface */
  contactFormsConnection: ContactFormConnection
  /** The countries query provides information for all countries. */
  countries?: Maybe<Array<Maybe<Country>>>
  /** The countries query provides information for a single country. */
  country?: Maybe<Country>
  /** The currency query returns information about store currency. */
  currency?: Maybe<Currency>
  /** The customAttributeMetadata query returns the attribute type, given an attribute code and entity type */
  customAttributeMetadata?: Maybe<CustomAttributeMetadata>
  /** The customer query returns information about a customer account */
  customer?: Maybe<Customer>
  /** Returns information about the customer shopping cart */
  customerCart: Cart
  /** The query returns the contents of a customer's downloadable products */
  customerDownloadableProducts?: Maybe<CustomerDownloadableProducts>
  /** List of customer orders */
  customerOrders?: Maybe<CustomerOrders>
  /** Return a list of customer payment tokens */
  customerPaymentTokens?: Maybe<CustomerPaymentTokens>
  customerToken?: Maybe<CustomerToken>
  /** Retrieve a single footer */
  footer?: Maybe<Footer>
  /** Retrieve document version */
  footerVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple footers */
  footers: Array<Footer>
  /** Retrieve multiple footers using the Relay connection interface */
  footersConnection: FooterConnection
  /** Retrieve secure PayPal url for Payments Pro Hosted Solution transaction. */
  getHostedProUrl?: Maybe<HostedProUrl>
  /** Retrieve payment credentials for transaction. Use this query for Payflow Link and Payments Advanced payment methods. */
  getPayflowLinkToken?: Maybe<PayflowLinkToken>
  /** Retrieve a single header */
  header?: Maybe<Header>
  /** Retrieve document version */
  headerVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple headers */
  headers: Array<Header>
  /** Retrieve multiple headers using the Relay connection interface */
  headersConnection: HeaderConnection
  historyState: HistoryState
  isEmailAvailable?: Maybe<IsEmailAvailableOutput>
  /** Retrieve a single linkExternal */
  linkExternal?: Maybe<LinkExternal>
  /** Retrieve document version */
  linkExternalVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple linkExternals */
  linkExternals: Array<LinkExternal>
  /** Retrieve multiple linkExternals using the Relay connection interface */
  linkExternalsConnection: LinkExternalConnection
  /** Retrieve a single linkInternal */
  linkInternal?: Maybe<LinkInternal>
  /** Retrieve document version */
  linkInternalVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple linkInternals */
  linkInternals: Array<LinkInternal>
  /** Retrieve multiple linkInternals using the Relay connection interface */
  linkInternalsConnection: LinkInternalConnection
  /** Fetches an object given its ID */
  node?: Maybe<Node>
  /** Retrieve a single page */
  page?: Maybe<Page>
  /** Retrieve document version */
  pageVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple pages */
  pages: Array<Page>
  /** Retrieve multiple pages using the Relay connection interface */
  pagesConnection: PageConnection
  /** Retrieve a single paperCard */
  paperCard?: Maybe<PaperCard>
  /** Retrieve document version */
  paperCardVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple paperCards */
  paperCards: Array<PaperCard>
  /** Retrieve multiple paperCards using the Relay connection interface */
  paperCardsConnection: PaperCardConnection
  /** Retrieve a single parnerList */
  parnerList?: Maybe<ParnerList>
  /** Retrieve document version */
  parnerListVersion?: Maybe<DocumentVersion>
  /** Retrieve a single partner */
  partner?: Maybe<Partner>
  /** Retrieve multiple partnerLists */
  partnerLists: Array<ParnerList>
  /** Retrieve multiple partnerLists using the Relay connection interface */
  partnerListsConnection: ParnerListConnection
  /** Retrieve document version */
  partnerVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple partners */
  partners: Array<Partner>
  /** Retrieve multiple partners using the Relay connection interface */
  partnersConnection: PartnerConnection
  /** Retrieve multiple people */
  people: Array<Person>
  /** Retrieve multiple people using the Relay connection interface */
  peopleConnection: PersonConnection
  /** Retrieve a single person */
  person?: Maybe<Person>
  /** Retrieve document version */
  personVersion?: Maybe<DocumentVersion>
  /** The pickup locations query searches for locations that match the search request requirements. */
  pickupLocations?: Maybe<PickupLocations>
  /** The products query searches for products that match the criteria specified in the search and filter attributes. */
  products?: Maybe<Products>
  /** Retrieve a single review */
  review?: Maybe<Review>
  /** Retrieve document version */
  reviewVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple reviews */
  reviews: Array<Review>
  /** Retrieve multiple reviews using the Relay connection interface */
  reviewsConnection: ReviewConnection
  /** Retrieve a single rowCenteredText */
  rowCenteredText?: Maybe<RowCenteredText>
  /** Retrieve document version */
  rowCenteredTextVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowCenteredTexts */
  rowCenteredTexts: Array<RowCenteredText>
  /** Retrieve multiple rowCenteredTexts using the Relay connection interface */
  rowCenteredTextsConnection: RowCenteredTextConnection
  /** Retrieve a single rowCollaboration */
  rowCollaboration?: Maybe<RowCollaboration>
  /** Retrieve document version */
  rowCollaborationVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowCollaborations */
  rowCollaborations: Array<RowCollaboration>
  /** Retrieve multiple rowCollaborations using the Relay connection interface */
  rowCollaborationsConnection: RowCollaborationConnection
  /** Retrieve a single rowColorBlock */
  rowColorBlock?: Maybe<RowColorBlock>
  /** Retrieve document version */
  rowColorBlockVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowColorBlocks */
  rowColorBlocks: Array<RowColorBlock>
  /** Retrieve multiple rowColorBlocks using the Relay connection interface */
  rowColorBlocksConnection: RowColorBlockConnection
  /** Retrieve a single rowColorSpeedBlock */
  rowColorSpeedBlock?: Maybe<RowColorSpeedBlock>
  /** Retrieve document version */
  rowColorSpeedBlockVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowColorSpeedBlocks */
  rowColorSpeedBlocks: Array<RowColorSpeedBlock>
  /** Retrieve multiple rowColorSpeedBlocks using the Relay connection interface */
  rowColorSpeedBlocksConnection: RowColorSpeedBlockConnection
  /** Retrieve a single rowColumnBoxed */
  rowColumnBoxed?: Maybe<RowColumnBoxed>
  /** Retrieve document version */
  rowColumnBoxedVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowColumnBoxeds */
  rowColumnBoxeds: Array<RowColumnBoxed>
  /** Retrieve multiple rowColumnBoxeds using the Relay connection interface */
  rowColumnBoxedsConnection: RowColumnBoxedConnection
  /** Retrieve a single rowColumnOne */
  rowColumnOne?: Maybe<RowColumnOne>
  /** Retrieve document version */
  rowColumnOneVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowColumnOnes */
  rowColumnOnes: Array<RowColumnOne>
  /** Retrieve multiple rowColumnOnes using the Relay connection interface */
  rowColumnOnesConnection: RowColumnOneConnection
  /** Retrieve a single rowColumnThree */
  rowColumnThree?: Maybe<RowColumnThree>
  /** Retrieve document version */
  rowColumnThreeVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowColumnThrees */
  rowColumnThrees: Array<RowColumnThree>
  /** Retrieve multiple rowColumnThrees using the Relay connection interface */
  rowColumnThreesConnection: RowColumnThreeConnection
  /** Retrieve a single rowColumnTwo */
  rowColumnTwo?: Maybe<RowColumnTwo>
  /** Retrieve document version */
  rowColumnTwoVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowColumnTwos */
  rowColumnTwos: Array<RowColumnTwo>
  /** Retrieve multiple rowColumnTwos using the Relay connection interface */
  rowColumnTwosConnection: RowColumnTwoConnection
  /** Retrieve a single rowCompanySlider */
  rowCompanySlider?: Maybe<RowCompanySlider>
  /** Retrieve document version */
  rowCompanySliderVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowCompanySliders */
  rowCompanySliders: Array<RowCompanySlider>
  /** Retrieve multiple rowCompanySliders using the Relay connection interface */
  rowCompanySlidersConnection: RowCompanySliderConnection
  /** Retrieve a single rowContact */
  rowContact?: Maybe<RowContact>
  /** Retrieve document version */
  rowContactVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowContacts */
  rowContacts: Array<RowContact>
  /** Retrieve multiple rowContacts using the Relay connection interface */
  rowContactsConnection: RowContactConnection
  /** Retrieve a single rowExplanation */
  rowExplanation?: Maybe<RowExplanation>
  /** Retrieve document version */
  rowExplanationVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowExplanations */
  rowExplanations: Array<RowExplanation>
  /** Retrieve multiple rowExplanations using the Relay connection interface */
  rowExplanationsConnection: RowExplanationConnection
  /** Retrieve a single rowGoogleMap */
  rowGoogleMap?: Maybe<RowGoogleMap>
  /** Retrieve document version */
  rowGoogleMapVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowGoogleMaps */
  rowGoogleMaps: Array<RowGoogleMap>
  /** Retrieve multiple rowGoogleMaps using the Relay connection interface */
  rowGoogleMapsConnection: RowGoogleMapConnection
  /** Retrieve a single rowHero */
  rowHero?: Maybe<RowHero>
  /** Retrieve document version */
  rowHeroVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowHeroes */
  rowHeroes: Array<RowHero>
  /** Retrieve multiple rowHeroes using the Relay connection interface */
  rowHeroesConnection: RowHeroConnection
  /** Retrieve a single rowIconWithTextList */
  rowIconWithTextList?: Maybe<RowIconWithTextList>
  /** Retrieve document version */
  rowIconWithTextListVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowIconWithTextLists */
  rowIconWithTextLists: Array<RowIconWithTextList>
  /** Retrieve multiple rowIconWithTextLists using the Relay connection interface */
  rowIconWithTextListsConnection: RowIconWithTextListConnection
  /** Retrieve a single rowIframe */
  rowIframe?: Maybe<RowIframe>
  /** Retrieve document version */
  rowIframeVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowIframes */
  rowIframes: Array<RowIframe>
  /** Retrieve multiple rowIframes using the Relay connection interface */
  rowIframesConnection: RowIframeConnection
  /** Retrieve a single rowImageOrVideo */
  rowImageOrVideo?: Maybe<RowImageOrVideo>
  /** Retrieve document version */
  rowImageOrVideoVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowImageOrVideos */
  rowImageOrVideos: Array<RowImageOrVideo>
  /** Retrieve multiple rowImageOrVideos using the Relay connection interface */
  rowImageOrVideosConnection: RowImageOrVideoConnection
  /** Retrieve a single rowImageSwiper */
  rowImageSwiper?: Maybe<RowImageSwiper>
  /** Retrieve document version */
  rowImageSwiperVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowImageSwipers */
  rowImageSwipers: Array<RowImageSwiper>
  /** Retrieve multiple rowImageSwipers using the Relay connection interface */
  rowImageSwipersConnection: RowImageSwiperConnection
  /** Retrieve a single rowIntro */
  rowIntro?: Maybe<RowIntro>
  /** Retrieve document version */
  rowIntroVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowIntros */
  rowIntros: Array<RowIntro>
  /** Retrieve multiple rowIntros using the Relay connection interface */
  rowIntrosConnection: RowIntroConnection
  /** Retrieve a single rowIpadHorizontal */
  rowIpadHorizontal?: Maybe<RowIpadHorizontal>
  /** Retrieve document version */
  rowIpadHorizontalVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowIpadHorizontals */
  rowIpadHorizontals: Array<RowIpadHorizontal>
  /** Retrieve multiple rowIpadHorizontals using the Relay connection interface */
  rowIpadHorizontalsConnection: RowIpadHorizontalConnection
  /** Retrieve a single rowIpadVertical */
  rowIpadVertical?: Maybe<RowIpadVertical>
  /** Retrieve document version */
  rowIpadVerticalVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowIpadVerticals */
  rowIpadVerticals: Array<RowIpadVertical>
  /** Retrieve multiple rowIpadVerticals using the Relay connection interface */
  rowIpadVerticalsConnection: RowIpadVerticalConnection
  /** Retrieve a single rowIphoneWithText */
  rowIphoneWithText?: Maybe<RowIphoneWithText>
  /** Retrieve document version */
  rowIphoneWithTextVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowIphoneWithTexts */
  rowIphoneWithTexts: Array<RowIphoneWithText>
  /** Retrieve multiple rowIphoneWithTexts using the Relay connection interface */
  rowIphoneWithTextsConnection: RowIphoneWithTextConnection
  /** Retrieve a single rowLaptop */
  rowLaptop?: Maybe<RowLaptop>
  /** Retrieve document version */
  rowLaptopVersion?: Maybe<DocumentVersion>
  /** Retrieve a single rowLaptopWithText */
  rowLaptopWithText?: Maybe<RowLaptopWithText>
  /** Retrieve document version */
  rowLaptopWithTextVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowLaptopWithTexts */
  rowLaptopWithTexts: Array<RowLaptopWithText>
  /** Retrieve multiple rowLaptopWithTexts using the Relay connection interface */
  rowLaptopWithTextsConnection: RowLaptopWithTextConnection
  /** Retrieve multiple rowLaptops */
  rowLaptops: Array<RowLaptop>
  /** Retrieve multiple rowLaptops using the Relay connection interface */
  rowLaptopsConnection: RowLaptopConnection
  /** Retrieve a single rowLineHorizontal */
  rowLineHorizontal?: Maybe<RowLineHorizontal>
  /** Retrieve document version */
  rowLineHorizontalVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowLineHorizontals */
  rowLineHorizontals: Array<RowLineHorizontal>
  /** Retrieve multiple rowLineHorizontals using the Relay connection interface */
  rowLineHorizontalsConnection: RowLineHorizontalConnection
  /** Retrieve a single rowLinksWithText */
  rowLinksWithText?: Maybe<RowLinksWithText>
  /** Retrieve document version */
  rowLinksWithTextVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowLinksWithTexts */
  rowLinksWithTexts: Array<RowLinksWithText>
  /** Retrieve multiple rowLinksWithTexts using the Relay connection interface */
  rowLinksWithTextsConnection: RowLinksWithTextConnection
  /** Retrieve a single rowModule */
  rowModule?: Maybe<RowModule>
  /** Retrieve a single rowModulePage */
  rowModulePage?: Maybe<RowModulePage>
  /** Retrieve document version */
  rowModulePageVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowModulePages */
  rowModulePages: Array<RowModulePage>
  /** Retrieve multiple rowModulePages using the Relay connection interface */
  rowModulePagesConnection: RowModulePageConnection
  /** Retrieve document version */
  rowModuleVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowModules */
  rowModules: Array<RowModule>
  /** Retrieve multiple rowModules using the Relay connection interface */
  rowModulesConnection: RowModuleConnection
  /** Retrieve a single rowPeopleWithText */
  rowPeopleWithText?: Maybe<RowPeopleWithText>
  /** Retrieve document version */
  rowPeopleWithTextVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowPeopleWithTexts */
  rowPeopleWithTexts: Array<RowPeopleWithText>
  /** Retrieve multiple rowPeopleWithTexts using the Relay connection interface */
  rowPeopleWithTextsConnection: RowPeopleWithTextConnection
  /** Retrieve a single rowPhonesSlider */
  rowPhonesSlider?: Maybe<RowPhonesSlider>
  /** Retrieve document version */
  rowPhonesSliderVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowPhonesSliders */
  rowPhonesSliders: Array<RowPhonesSlider>
  /** Retrieve multiple rowPhonesSliders using the Relay connection interface */
  rowPhonesSlidersConnection: RowPhonesSliderConnection
  /** Retrieve a single rowQuote */
  rowQuote?: Maybe<RowQuote>
  /** Retrieve document version */
  rowQuoteVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowQuotes */
  rowQuotes: Array<RowQuote>
  /** Retrieve multiple rowQuotes using the Relay connection interface */
  rowQuotesConnection: RowQuoteConnection
  /** Retrieve a single rowRecentBlogPost */
  rowRecentBlogPost?: Maybe<RowRecentBlogPost>
  /** Retrieve document version */
  rowRecentBlogPostVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowRecentBlogPosts */
  rowRecentBlogPosts: Array<RowRecentBlogPost>
  /** Retrieve multiple rowRecentBlogPosts using the Relay connection interface */
  rowRecentBlogPostsConnection: RowRecentBlogPostConnection
  /** Retrieve a single rowReview */
  rowReview?: Maybe<RowReview>
  /** Retrieve document version */
  rowReviewVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowReviews */
  rowReviews: Array<RowReview>
  /** Retrieve multiple rowReviews using the Relay connection interface */
  rowReviewsConnection: RowReviewConnection
  /** Retrieve a single rowServiceList */
  rowServiceList?: Maybe<RowServiceList>
  /** Retrieve document version */
  rowServiceListVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowServiceLists */
  rowServiceLists: Array<RowServiceList>
  /** Retrieve multiple rowServiceLists using the Relay connection interface */
  rowServiceListsConnection: RowServiceListConnection
  /** Retrieve a single rowTitle */
  rowTitle?: Maybe<RowTitle>
  /** Retrieve document version */
  rowTitleVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowTitles */
  rowTitles: Array<RowTitle>
  /** Retrieve multiple rowTitles using the Relay connection interface */
  rowTitlesConnection: RowTitleConnection
  /** Retrieve multiple rowVacancies */
  rowVacancies: Array<RowVacancy>
  /** Retrieve multiple rowVacancies using the Relay connection interface */
  rowVacanciesConnection: RowVacancyConnection
  /** Retrieve a single rowVacancy */
  rowVacancy?: Maybe<RowVacancy>
  /** Retrieve document version */
  rowVacancyVersion?: Maybe<DocumentVersion>
  /** Retrieve a single rowYoutubeVideo */
  rowYoutubeVideo?: Maybe<RowYoutubeVideo>
  /** Retrieve document version */
  rowYoutubeVideoVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple rowYoutubeVideos */
  rowYoutubeVideos: Array<RowYoutubeVideo>
  /** Retrieve multiple rowYoutubeVideos using the Relay connection interface */
  rowYoutubeVideosConnection: RowYoutubeVideoConnection
  /** Retrieve a single service */
  service?: Maybe<Service>
  /** Retrieve document version */
  serviceVersion?: Maybe<DocumentVersion>
  /** Retrieve multiple services */
  services: Array<Service>
  /** Retrieve multiple services using the Relay connection interface */
  servicesConnection: ServiceConnection
  /** The store config query */
  storeConfig?: Maybe<StoreConfig>
  /** The urlResolver query returns the relative URL for a specified product, category or CMS page, using as input a url_key appended by the url_suffix, if one exists */
  urlResolver?: Maybe<EntityUrl>
  /**
   * The wishlist query returns the contents of a customer's wish list
   * @deprecated Moved under `Customer` `wishlist`
   */
  wishlist?: Maybe<WishlistOutput>
}

export type QueryAssetArgs = {
  where: AssetWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryAssetVersionArgs = {
  where: VersionWhereInput
}

export type QueryAssetsArgs = {
  where?: Maybe<AssetWhereInput>
  orderBy?: Maybe<AssetOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryAssetsConnectionArgs = {
  where?: Maybe<AssetWhereInput>
  orderBy?: Maybe<AssetOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryAwardArgs = {
  where: AwardWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryAwardVersionArgs = {
  where: VersionWhereInput
}

export type QueryAwardsArgs = {
  where?: Maybe<AwardWhereInput>
  orderBy?: Maybe<AwardOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryAwardsConnectionArgs = {
  where?: Maybe<AwardWhereInput>
  orderBy?: Maybe<AwardOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryCartArgs = {
  cart_id: Scalars['String']
}

export type QueryCategoriesArgs = {
  filters?: Maybe<CategoryFilterInput>
  pageSize?: Maybe<Scalars['Int']>
  currentPage?: Maybe<Scalars['Int']>
}

export type QueryCategoryArgs = {
  id?: Maybe<Scalars['Int']>
}

export type QueryCategoryListArgs = {
  filters?: Maybe<CategoryFilterInput>
}

export type QueryCmsBlocksArgs = {
  identifiers?: Maybe<Array<Maybe<Scalars['String']>>>
}

export type QueryCmsPageArgs = {
  id?: Maybe<Scalars['Int']>
  identifier?: Maybe<Scalars['String']>
}

export type QueryCompaniesArgs = {
  where?: Maybe<CompanyWhereInput>
  orderBy?: Maybe<CompanyOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryCompaniesConnectionArgs = {
  where?: Maybe<CompanyWhereInput>
  orderBy?: Maybe<CompanyOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryCompanyArgs = {
  where: CompanyWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryCompanyVersionArgs = {
  where: VersionWhereInput
}

export type QueryContactFormArgs = {
  where: ContactFormWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryContactFormVersionArgs = {
  where: VersionWhereInput
}

export type QueryContactFormsArgs = {
  where?: Maybe<ContactFormWhereInput>
  orderBy?: Maybe<ContactFormOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryContactFormsConnectionArgs = {
  where?: Maybe<ContactFormWhereInput>
  orderBy?: Maybe<ContactFormOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryCountryArgs = {
  id?: Maybe<Scalars['String']>
}

export type QueryCustomAttributeMetadataArgs = {
  attributes: Array<AttributeInput>
}

export type QueryFooterArgs = {
  where: FooterWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryFooterVersionArgs = {
  where: VersionWhereInput
}

export type QueryFootersArgs = {
  where?: Maybe<FooterWhereInput>
  orderBy?: Maybe<FooterOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryFootersConnectionArgs = {
  where?: Maybe<FooterWhereInput>
  orderBy?: Maybe<FooterOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryGetHostedProUrlArgs = {
  input: HostedProUrlInput
}

export type QueryGetPayflowLinkTokenArgs = {
  input: PayflowLinkTokenInput
}

export type QueryHeaderArgs = {
  where: HeaderWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryHeaderVersionArgs = {
  where: VersionWhereInput
}

export type QueryHeadersArgs = {
  where?: Maybe<HeaderWhereInput>
  orderBy?: Maybe<HeaderOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryHeadersConnectionArgs = {
  where?: Maybe<HeaderWhereInput>
  orderBy?: Maybe<HeaderOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryIsEmailAvailableArgs = {
  email: Scalars['String']
}

export type QueryLinkExternalArgs = {
  where: LinkExternalWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryLinkExternalVersionArgs = {
  where: VersionWhereInput
}

export type QueryLinkExternalsArgs = {
  where?: Maybe<LinkExternalWhereInput>
  orderBy?: Maybe<LinkExternalOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryLinkExternalsConnectionArgs = {
  where?: Maybe<LinkExternalWhereInput>
  orderBy?: Maybe<LinkExternalOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryLinkInternalArgs = {
  where: LinkInternalWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryLinkInternalVersionArgs = {
  where: VersionWhereInput
}

export type QueryLinkInternalsArgs = {
  where?: Maybe<LinkInternalWhereInput>
  orderBy?: Maybe<LinkInternalOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryLinkInternalsConnectionArgs = {
  where?: Maybe<LinkInternalWhereInput>
  orderBy?: Maybe<LinkInternalOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryNodeArgs = {
  id: Scalars['ID']
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryPageArgs = {
  where: PageWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryPageVersionArgs = {
  where: VersionWhereInput
}

export type QueryPagesArgs = {
  where?: Maybe<PageWhereInput>
  orderBy?: Maybe<PageOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryPagesConnectionArgs = {
  where?: Maybe<PageWhereInput>
  orderBy?: Maybe<PageOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryPaperCardArgs = {
  where: PaperCardWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryPaperCardVersionArgs = {
  where: VersionWhereInput
}

export type QueryPaperCardsArgs = {
  where?: Maybe<PaperCardWhereInput>
  orderBy?: Maybe<PaperCardOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryPaperCardsConnectionArgs = {
  where?: Maybe<PaperCardWhereInput>
  orderBy?: Maybe<PaperCardOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryParnerListArgs = {
  where: ParnerListWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryParnerListVersionArgs = {
  where: VersionWhereInput
}

export type QueryPartnerArgs = {
  where: PartnerWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryPartnerListsArgs = {
  where?: Maybe<ParnerListWhereInput>
  orderBy?: Maybe<ParnerListOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryPartnerListsConnectionArgs = {
  where?: Maybe<ParnerListWhereInput>
  orderBy?: Maybe<ParnerListOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryPartnerVersionArgs = {
  where: VersionWhereInput
}

export type QueryPartnersArgs = {
  where?: Maybe<PartnerWhereInput>
  orderBy?: Maybe<PartnerOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryPartnersConnectionArgs = {
  where?: Maybe<PartnerWhereInput>
  orderBy?: Maybe<PartnerOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryPeopleArgs = {
  where?: Maybe<PersonWhereInput>
  orderBy?: Maybe<PersonOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryPeopleConnectionArgs = {
  where?: Maybe<PersonWhereInput>
  orderBy?: Maybe<PersonOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryPersonArgs = {
  where: PersonWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryPersonVersionArgs = {
  where: VersionWhereInput
}

export type QueryPickupLocationsArgs = {
  area?: Maybe<AreaInput>
  filters?: Maybe<PickupLocationFilterInput>
  sort?: Maybe<PickupLocationSortInput>
  pageSize?: Maybe<Scalars['Int']>
  currentPage?: Maybe<Scalars['Int']>
}

export type QueryProductsArgs = {
  search?: Maybe<Scalars['String']>
  filter?: Maybe<ProductAttributeFilterInput>
  pageSize?: Maybe<Scalars['Int']>
  currentPage?: Maybe<Scalars['Int']>
  sort?: Maybe<ProductAttributeSortInput>
}

export type QueryReviewArgs = {
  where: ReviewWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryReviewVersionArgs = {
  where: VersionWhereInput
}

export type QueryReviewsArgs = {
  where?: Maybe<ReviewWhereInput>
  orderBy?: Maybe<ReviewOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryReviewsConnectionArgs = {
  where?: Maybe<ReviewWhereInput>
  orderBy?: Maybe<ReviewOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowCenteredTextArgs = {
  where: RowCenteredTextWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowCenteredTextVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowCenteredTextsArgs = {
  where?: Maybe<RowCenteredTextWhereInput>
  orderBy?: Maybe<RowCenteredTextOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowCenteredTextsConnectionArgs = {
  where?: Maybe<RowCenteredTextWhereInput>
  orderBy?: Maybe<RowCenteredTextOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowCollaborationArgs = {
  where: RowCollaborationWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowCollaborationVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowCollaborationsArgs = {
  where?: Maybe<RowCollaborationWhereInput>
  orderBy?: Maybe<RowCollaborationOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowCollaborationsConnectionArgs = {
  where?: Maybe<RowCollaborationWhereInput>
  orderBy?: Maybe<RowCollaborationOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowColorBlockArgs = {
  where: RowColorBlockWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowColorBlockVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowColorBlocksArgs = {
  where?: Maybe<RowColorBlockWhereInput>
  orderBy?: Maybe<RowColorBlockOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowColorBlocksConnectionArgs = {
  where?: Maybe<RowColorBlockWhereInput>
  orderBy?: Maybe<RowColorBlockOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowColorSpeedBlockArgs = {
  where: RowColorSpeedBlockWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowColorSpeedBlockVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowColorSpeedBlocksArgs = {
  where?: Maybe<RowColorSpeedBlockWhereInput>
  orderBy?: Maybe<RowColorSpeedBlockOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowColorSpeedBlocksConnectionArgs = {
  where?: Maybe<RowColorSpeedBlockWhereInput>
  orderBy?: Maybe<RowColorSpeedBlockOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowColumnBoxedArgs = {
  where: RowColumnBoxedWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowColumnBoxedVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowColumnBoxedsArgs = {
  where?: Maybe<RowColumnBoxedWhereInput>
  orderBy?: Maybe<RowColumnBoxedOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowColumnBoxedsConnectionArgs = {
  where?: Maybe<RowColumnBoxedWhereInput>
  orderBy?: Maybe<RowColumnBoxedOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowColumnOneArgs = {
  where: RowColumnOneWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowColumnOneVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowColumnOnesArgs = {
  where?: Maybe<RowColumnOneWhereInput>
  orderBy?: Maybe<RowColumnOneOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowColumnOnesConnectionArgs = {
  where?: Maybe<RowColumnOneWhereInput>
  orderBy?: Maybe<RowColumnOneOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowColumnThreeArgs = {
  where: RowColumnThreeWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowColumnThreeVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowColumnThreesArgs = {
  where?: Maybe<RowColumnThreeWhereInput>
  orderBy?: Maybe<RowColumnThreeOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowColumnThreesConnectionArgs = {
  where?: Maybe<RowColumnThreeWhereInput>
  orderBy?: Maybe<RowColumnThreeOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowColumnTwoArgs = {
  where: RowColumnTwoWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowColumnTwoVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowColumnTwosArgs = {
  where?: Maybe<RowColumnTwoWhereInput>
  orderBy?: Maybe<RowColumnTwoOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowColumnTwosConnectionArgs = {
  where?: Maybe<RowColumnTwoWhereInput>
  orderBy?: Maybe<RowColumnTwoOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowCompanySliderArgs = {
  where: RowCompanySliderWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowCompanySliderVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowCompanySlidersArgs = {
  where?: Maybe<RowCompanySliderWhereInput>
  orderBy?: Maybe<RowCompanySliderOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowCompanySlidersConnectionArgs = {
  where?: Maybe<RowCompanySliderWhereInput>
  orderBy?: Maybe<RowCompanySliderOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowContactArgs = {
  where: RowContactWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowContactVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowContactsArgs = {
  where?: Maybe<RowContactWhereInput>
  orderBy?: Maybe<RowContactOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowContactsConnectionArgs = {
  where?: Maybe<RowContactWhereInput>
  orderBy?: Maybe<RowContactOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowExplanationArgs = {
  where: RowExplanationWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowExplanationVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowExplanationsArgs = {
  where?: Maybe<RowExplanationWhereInput>
  orderBy?: Maybe<RowExplanationOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowExplanationsConnectionArgs = {
  where?: Maybe<RowExplanationWhereInput>
  orderBy?: Maybe<RowExplanationOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowGoogleMapArgs = {
  where: RowGoogleMapWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowGoogleMapVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowGoogleMapsArgs = {
  where?: Maybe<RowGoogleMapWhereInput>
  orderBy?: Maybe<RowGoogleMapOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowGoogleMapsConnectionArgs = {
  where?: Maybe<RowGoogleMapWhereInput>
  orderBy?: Maybe<RowGoogleMapOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowHeroArgs = {
  where: RowHeroWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowHeroVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowHeroesArgs = {
  where?: Maybe<RowHeroWhereInput>
  orderBy?: Maybe<RowHeroOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowHeroesConnectionArgs = {
  where?: Maybe<RowHeroWhereInput>
  orderBy?: Maybe<RowHeroOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowIconWithTextListArgs = {
  where: RowIconWithTextListWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowIconWithTextListVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowIconWithTextListsArgs = {
  where?: Maybe<RowIconWithTextListWhereInput>
  orderBy?: Maybe<RowIconWithTextListOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowIconWithTextListsConnectionArgs = {
  where?: Maybe<RowIconWithTextListWhereInput>
  orderBy?: Maybe<RowIconWithTextListOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowIframeArgs = {
  where: RowIframeWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowIframeVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowIframesArgs = {
  where?: Maybe<RowIframeWhereInput>
  orderBy?: Maybe<RowIframeOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowIframesConnectionArgs = {
  where?: Maybe<RowIframeWhereInput>
  orderBy?: Maybe<RowIframeOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowImageOrVideoArgs = {
  where: RowImageOrVideoWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowImageOrVideoVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowImageOrVideosArgs = {
  where?: Maybe<RowImageOrVideoWhereInput>
  orderBy?: Maybe<RowImageOrVideoOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowImageOrVideosConnectionArgs = {
  where?: Maybe<RowImageOrVideoWhereInput>
  orderBy?: Maybe<RowImageOrVideoOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowImageSwiperArgs = {
  where: RowImageSwiperWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowImageSwiperVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowImageSwipersArgs = {
  where?: Maybe<RowImageSwiperWhereInput>
  orderBy?: Maybe<RowImageSwiperOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowImageSwipersConnectionArgs = {
  where?: Maybe<RowImageSwiperWhereInput>
  orderBy?: Maybe<RowImageSwiperOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowIntroArgs = {
  where: RowIntroWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowIntroVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowIntrosArgs = {
  where?: Maybe<RowIntroWhereInput>
  orderBy?: Maybe<RowIntroOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowIntrosConnectionArgs = {
  where?: Maybe<RowIntroWhereInput>
  orderBy?: Maybe<RowIntroOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowIpadHorizontalArgs = {
  where: RowIpadHorizontalWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowIpadHorizontalVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowIpadHorizontalsArgs = {
  where?: Maybe<RowIpadHorizontalWhereInput>
  orderBy?: Maybe<RowIpadHorizontalOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowIpadHorizontalsConnectionArgs = {
  where?: Maybe<RowIpadHorizontalWhereInput>
  orderBy?: Maybe<RowIpadHorizontalOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowIpadVerticalArgs = {
  where: RowIpadVerticalWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowIpadVerticalVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowIpadVerticalsArgs = {
  where?: Maybe<RowIpadVerticalWhereInput>
  orderBy?: Maybe<RowIpadVerticalOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowIpadVerticalsConnectionArgs = {
  where?: Maybe<RowIpadVerticalWhereInput>
  orderBy?: Maybe<RowIpadVerticalOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowIphoneWithTextArgs = {
  where: RowIphoneWithTextWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowIphoneWithTextVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowIphoneWithTextsArgs = {
  where?: Maybe<RowIphoneWithTextWhereInput>
  orderBy?: Maybe<RowIphoneWithTextOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowIphoneWithTextsConnectionArgs = {
  where?: Maybe<RowIphoneWithTextWhereInput>
  orderBy?: Maybe<RowIphoneWithTextOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowLaptopArgs = {
  where: RowLaptopWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowLaptopVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowLaptopWithTextArgs = {
  where: RowLaptopWithTextWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowLaptopWithTextVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowLaptopWithTextsArgs = {
  where?: Maybe<RowLaptopWithTextWhereInput>
  orderBy?: Maybe<RowLaptopWithTextOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowLaptopWithTextsConnectionArgs = {
  where?: Maybe<RowLaptopWithTextWhereInput>
  orderBy?: Maybe<RowLaptopWithTextOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowLaptopsArgs = {
  where?: Maybe<RowLaptopWhereInput>
  orderBy?: Maybe<RowLaptopOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowLaptopsConnectionArgs = {
  where?: Maybe<RowLaptopWhereInput>
  orderBy?: Maybe<RowLaptopOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowLineHorizontalArgs = {
  where: RowLineHorizontalWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowLineHorizontalVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowLineHorizontalsArgs = {
  where?: Maybe<RowLineHorizontalWhereInput>
  orderBy?: Maybe<RowLineHorizontalOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowLineHorizontalsConnectionArgs = {
  where?: Maybe<RowLineHorizontalWhereInput>
  orderBy?: Maybe<RowLineHorizontalOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowLinksWithTextArgs = {
  where: RowLinksWithTextWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowLinksWithTextVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowLinksWithTextsArgs = {
  where?: Maybe<RowLinksWithTextWhereInput>
  orderBy?: Maybe<RowLinksWithTextOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowLinksWithTextsConnectionArgs = {
  where?: Maybe<RowLinksWithTextWhereInput>
  orderBy?: Maybe<RowLinksWithTextOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowModuleArgs = {
  where: RowModuleWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowModulePageArgs = {
  where: RowModulePageWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowModulePageVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowModulePagesArgs = {
  where?: Maybe<RowModulePageWhereInput>
  orderBy?: Maybe<RowModulePageOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowModulePagesConnectionArgs = {
  where?: Maybe<RowModulePageWhereInput>
  orderBy?: Maybe<RowModulePageOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowModuleVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowModulesArgs = {
  where?: Maybe<RowModuleWhereInput>
  orderBy?: Maybe<RowModuleOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowModulesConnectionArgs = {
  where?: Maybe<RowModuleWhereInput>
  orderBy?: Maybe<RowModuleOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowPeopleWithTextArgs = {
  where: RowPeopleWithTextWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowPeopleWithTextVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowPeopleWithTextsArgs = {
  where?: Maybe<RowPeopleWithTextWhereInput>
  orderBy?: Maybe<RowPeopleWithTextOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowPeopleWithTextsConnectionArgs = {
  where?: Maybe<RowPeopleWithTextWhereInput>
  orderBy?: Maybe<RowPeopleWithTextOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowPhonesSliderArgs = {
  where: RowPhonesSliderWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowPhonesSliderVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowPhonesSlidersArgs = {
  where?: Maybe<RowPhonesSliderWhereInput>
  orderBy?: Maybe<RowPhonesSliderOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowPhonesSlidersConnectionArgs = {
  where?: Maybe<RowPhonesSliderWhereInput>
  orderBy?: Maybe<RowPhonesSliderOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowQuoteArgs = {
  where: RowQuoteWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowQuoteVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowQuotesArgs = {
  where?: Maybe<RowQuoteWhereInput>
  orderBy?: Maybe<RowQuoteOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowQuotesConnectionArgs = {
  where?: Maybe<RowQuoteWhereInput>
  orderBy?: Maybe<RowQuoteOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowRecentBlogPostArgs = {
  where: RowRecentBlogPostWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowRecentBlogPostVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowRecentBlogPostsArgs = {
  where?: Maybe<RowRecentBlogPostWhereInput>
  orderBy?: Maybe<RowRecentBlogPostOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowRecentBlogPostsConnectionArgs = {
  where?: Maybe<RowRecentBlogPostWhereInput>
  orderBy?: Maybe<RowRecentBlogPostOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowReviewArgs = {
  where: RowReviewWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowReviewVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowReviewsArgs = {
  where?: Maybe<RowReviewWhereInput>
  orderBy?: Maybe<RowReviewOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowReviewsConnectionArgs = {
  where?: Maybe<RowReviewWhereInput>
  orderBy?: Maybe<RowReviewOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowServiceListArgs = {
  where: RowServiceListWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowServiceListVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowServiceListsArgs = {
  where?: Maybe<RowServiceListWhereInput>
  orderBy?: Maybe<RowServiceListOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowServiceListsConnectionArgs = {
  where?: Maybe<RowServiceListWhereInput>
  orderBy?: Maybe<RowServiceListOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowTitleArgs = {
  where: RowTitleWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowTitleVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowTitlesArgs = {
  where?: Maybe<RowTitleWhereInput>
  orderBy?: Maybe<RowTitleOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowTitlesConnectionArgs = {
  where?: Maybe<RowTitleWhereInput>
  orderBy?: Maybe<RowTitleOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowVacanciesArgs = {
  where?: Maybe<RowVacancyWhereInput>
  orderBy?: Maybe<RowVacancyOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowVacanciesConnectionArgs = {
  where?: Maybe<RowVacancyWhereInput>
  orderBy?: Maybe<RowVacancyOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowVacancyArgs = {
  where: RowVacancyWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowVacancyVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowYoutubeVideoArgs = {
  where: RowYoutubeVideoWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowYoutubeVideoVersionArgs = {
  where: VersionWhereInput
}

export type QueryRowYoutubeVideosArgs = {
  where?: Maybe<RowYoutubeVideoWhereInput>
  orderBy?: Maybe<RowYoutubeVideoOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryRowYoutubeVideosConnectionArgs = {
  where?: Maybe<RowYoutubeVideoWhereInput>
  orderBy?: Maybe<RowYoutubeVideoOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryServiceArgs = {
  where: ServiceWhereUniqueInput
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryServiceVersionArgs = {
  where: VersionWhereInput
}

export type QueryServicesArgs = {
  where?: Maybe<ServiceWhereInput>
  orderBy?: Maybe<ServiceOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryServicesConnectionArgs = {
  where?: Maybe<ServiceWhereInput>
  orderBy?: Maybe<ServiceOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  stage?: Stage
  locales?: Array<Locale>
}

export type QueryUrlResolverArgs = {
  url: Scalars['String']
}

export type Mutation = {
  __typename?: 'Mutation'
  /** Create one contactForm */
  createContactForm?: Maybe<ContactForm>
  addBundleProductsToCart?: Maybe<AddBundleProductsToCartOutput>
  addConfigurableProductsToCart?: Maybe<AddConfigurableProductsToCartOutput>
  addDownloadableProductsToCart?: Maybe<AddDownloadableProductsToCartOutput>
  addSimpleProductsToCart?: Maybe<AddSimpleProductsToCartOutput>
  addVirtualProductsToCart?: Maybe<AddVirtualProductsToCartOutput>
  applyCouponToCart?: Maybe<ApplyCouponToCartOutput>
  /** Changes the password for the logged-in customer */
  changeCustomerPassword?: Maybe<Customer>
  /** Creates Client Token for Braintree Javascript SDK initialization. */
  createBraintreeClientToken: Scalars['String']
  /** Create customer account */
  createCustomer?: Maybe<CustomerOutput>
  /** Create customer address */
  createCustomerAddress?: Maybe<CustomerAddress>
  /** Creates an empty shopping cart for a guest or logged in user */
  createEmptyCart?: Maybe<Scalars['String']>
  /** Initiates a transaction and receives a token. Use this mutation for Payflow Pro and Payments Pro payment methods */
  createPayflowProToken?: Maybe<CreatePayflowProTokenOutput>
  /** Initiates an Express Checkout transaction and receives a token. Use this mutation for Express Checkout and Payments Standard payment methods. */
  createPaypalExpressToken?: Maybe<PaypalExpressTokenOutput>
  /** Delete customer address */
  deleteCustomerAddress?: Maybe<Scalars['Boolean']>
  /** Delete a customer payment token */
  deletePaymentToken?: Maybe<DeletePaymentTokenOutput>
  /** Retrieve the customer token */
  generateCustomerToken?: Maybe<CustomerToken>
  /** Handles payment response and saves payment in Quote. Use this mutations for Payflow Pro and Payments Pro payment methods. */
  handlePayflowProResponse?: Maybe<PayflowProResponseOutput>
  /** Merges the source cart into the destination cart */
  mergeCarts: Cart
  placeOrder?: Maybe<PlaceOrderOutput>
  removeCouponFromCart?: Maybe<RemoveCouponFromCartOutput>
  removeItemFromCart?: Maybe<RemoveItemFromCartOutput>
  /** Adds all products from a customer's previous order to the cart. */
  reorderItems?: Maybe<ReorderItemsOutput>
  /** Request an email with a reset password token for the registered customer identified by the specified email. */
  requestPasswordResetEmail?: Maybe<Scalars['Boolean']>
  /** Reset a customer's password using the reset password token that the customer received in an email after requesting it using requestPasswordResetEmail. */
  resetPassword?: Maybe<Scalars['Boolean']>
  /** Revoke the customer token */
  revokeCustomerToken?: Maybe<RevokeCustomerTokenOutput>
  /** Recommends Product by Sending Single/Multiple Email */
  sendEmailToFriend?: Maybe<SendEmailToFriendOutput>
  setBillingAddressOnCart?: Maybe<SetBillingAddressOnCartOutput>
  setGuestEmailOnCart?: Maybe<SetGuestEmailOnCartOutput>
  /** @deprecated Should use setPaymentMethodOnCart and placeOrder mutations in single request. */
  setPaymentMethodAndPlaceOrder?: Maybe<PlaceOrderOutput>
  setPaymentMethodOnCart?: Maybe<SetPaymentMethodOnCartOutput>
  setShippingAddressesOnCart?: Maybe<SetShippingAddressesOnCartOutput>
  setShippingMethodsOnCart?: Maybe<SetShippingMethodsOnCartOutput>
  updateCartItems?: Maybe<UpdateCartItemsOutput>
  /** Update the customer's personal information */
  updateCustomer?: Maybe<CustomerOutput>
  /** Update customer address */
  updateCustomerAddress?: Maybe<CustomerAddress>
}

export type MutationCreateContactFormArgs = {
  data: ContactFormCreateInput
}

export type MutationAddBundleProductsToCartArgs = {
  input?: Maybe<AddBundleProductsToCartInput>
}

export type MutationAddConfigurableProductsToCartArgs = {
  input?: Maybe<AddConfigurableProductsToCartInput>
}

export type MutationAddDownloadableProductsToCartArgs = {
  input?: Maybe<AddDownloadableProductsToCartInput>
}

export type MutationAddSimpleProductsToCartArgs = {
  input?: Maybe<AddSimpleProductsToCartInput>
}

export type MutationAddVirtualProductsToCartArgs = {
  input?: Maybe<AddVirtualProductsToCartInput>
}

export type MutationApplyCouponToCartArgs = {
  input?: Maybe<ApplyCouponToCartInput>
}

export type MutationChangeCustomerPasswordArgs = {
  currentPassword: Scalars['String']
  newPassword: Scalars['String']
}

export type MutationCreateCustomerArgs = {
  input: CustomerInput
}

export type MutationCreateCustomerAddressArgs = {
  input: CustomerAddressInput
}

export type MutationCreateEmptyCartArgs = {
  input?: Maybe<CreateEmptyCartInput>
}

export type MutationCreatePayflowProTokenArgs = {
  input: PayflowProTokenInput
}

export type MutationCreatePaypalExpressTokenArgs = {
  input: PaypalExpressTokenInput
}

export type MutationDeleteCustomerAddressArgs = {
  id: Scalars['Int']
}

export type MutationDeletePaymentTokenArgs = {
  public_hash: Scalars['String']
}

export type MutationGenerateCustomerTokenArgs = {
  email: Scalars['String']
  password: Scalars['String']
}

export type MutationHandlePayflowProResponseArgs = {
  input: PayflowProResponseInput
}

export type MutationMergeCartsArgs = {
  source_cart_id: Scalars['String']
  destination_cart_id: Scalars['String']
}

export type MutationPlaceOrderArgs = {
  input?: Maybe<PlaceOrderInput>
}

export type MutationRemoveCouponFromCartArgs = {
  input?: Maybe<RemoveCouponFromCartInput>
}

export type MutationRemoveItemFromCartArgs = {
  input?: Maybe<RemoveItemFromCartInput>
}

export type MutationReorderItemsArgs = {
  orderNumber: Scalars['String']
}

export type MutationRequestPasswordResetEmailArgs = {
  email: Scalars['String']
}

export type MutationResetPasswordArgs = {
  email: Scalars['String']
  resetPasswordToken: Scalars['String']
  newPassword: Scalars['String']
}

export type MutationSendEmailToFriendArgs = {
  input?: Maybe<SendEmailToFriendInput>
}

export type MutationSetBillingAddressOnCartArgs = {
  input?: Maybe<SetBillingAddressOnCartInput>
}

export type MutationSetGuestEmailOnCartArgs = {
  input?: Maybe<SetGuestEmailOnCartInput>
}

export type MutationSetPaymentMethodAndPlaceOrderArgs = {
  input?: Maybe<SetPaymentMethodAndPlaceOrderInput>
}

export type MutationSetPaymentMethodOnCartArgs = {
  input?: Maybe<SetPaymentMethodOnCartInput>
}

export type MutationSetShippingAddressesOnCartArgs = {
  input?: Maybe<SetShippingAddressesOnCartInput>
}

export type MutationSetShippingMethodsOnCartArgs = {
  input?: Maybe<SetShippingMethodsOnCartInput>
}

export type MutationUpdateCartItemsArgs = {
  input?: Maybe<UpdateCartItemsInput>
}

export type MutationUpdateCustomerArgs = {
  input: CustomerInput
}

export type MutationUpdateCustomerAddressArgs = {
  id: Scalars['Int']
  input?: Maybe<CustomerAddressInput>
}

export type LinkInternalUpsertLocalizationInput = {
  update: LinkInternalUpdateLocalizationDataInput
  create: LinkInternalCreateLocalizationDataInput
  locale: Locale
}

export type RowCollaborationUpdateManyLocalizationInput = {
  data: RowCollaborationUpdateManyLocalizationDataInput
  locale: Locale
}

/** An edge in a connection. */
export type RowColumnThreeEdge = {
  __typename?: 'RowColumnThreeEdge'
  /** The item at the end of the edge. */
  node: RowColumnThree
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowColumnThreeUpdateManyLocalizationDataInput = {
  colOne?: Maybe<Scalars['RichTextAST']>
  colTwo?: Maybe<Scalars['RichTextAST']>
  colThree?: Maybe<Scalars['RichTextAST']>
}

export type RowCompanySliderConnectInput = {
  /** Document to connect */
  where: RowCompanySliderWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowLinksWithTextUpsertLocalizationInput = {
  update: RowLinksWithTextUpdateLocalizationDataInput
  create: RowLinksWithTextCreateLocalizationDataInput
  locale: Locale
}

export type RowModulePageCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowModulePageCreateLocalizationInput>>
}

export type FooterConnectInput = {
  /** Document to connect */
  where: FooterWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowIntroUpdateManyInlineInput = {
  /** Create and connect multiple RowIntro documents */
  create?: Maybe<Array<RowIntroCreateInput>>
  /** Connect multiple existing RowIntro documents */
  connect?: Maybe<Array<RowIntroConnectInput>>
  /** Override currently-connected documents with multiple existing RowIntro documents */
  set?: Maybe<Array<RowIntroWhereUniqueInput>>
  /** Update multiple RowIntro documents */
  update?: Maybe<Array<RowIntroUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowIntro documents */
  upsert?: Maybe<Array<RowIntroUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowIntro documents */
  disconnect?: Maybe<Array<RowIntroWhereUniqueInput>>
  /** Delete multiple RowIntro documents */
  delete?: Maybe<Array<RowIntroWhereUniqueInput>>
}

/** A connection to a list of items. */
export type RowIphoneWithTextConnection = {
  __typename?: 'RowIphoneWithTextConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowIphoneWithTextEdge>
  aggregate: Aggregate
}

export type RowYoutubeVideoCreateManyInlineInput = {
  /** Create and connect multiple existing RowYoutubeVideo documents */
  create?: Maybe<Array<RowYoutubeVideoCreateInput>>
  /** Connect multiple existing RowYoutubeVideo documents */
  connect?: Maybe<Array<RowYoutubeVideoWhereUniqueInput>>
}

export type AssetUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: AssetWhereInput
  /** Update many input */
  data: AssetUpdateManyInput
}

export type ReviewUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: ReviewWhereInput
  /** Update many input */
  data: ReviewUpdateManyInput
}

export type RowCenteredTextUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowCenteredTextUpdateManyLocalizationInput>>
}

export type RowIphoneWithTextUpdateManyInput = {
  /** colOne input for default locale (nl) */
  colOne?: Maybe<Scalars['RichTextAST']>
  /** colTwoOptional input for default locale (nl) */
  colTwoOptional?: Maybe<Scalars['RichTextAST']>
  /** colThreeOptional input for default locale (nl) */
  colThreeOptional?: Maybe<Scalars['RichTextAST']>
  /** Optional updates to localizations */
  localizations?: Maybe<RowIphoneWithTextUpdateManyLocalizationsInput>
}

export type RowPeopleWithTextUpsertLocalizationInput = {
  update: RowPeopleWithTextUpdateLocalizationDataInput
  create: RowPeopleWithTextCreateLocalizationDataInput
  locale: Locale
}

/** Representing a geolocation point with latitude and longitude */
export type Location = {
  __typename?: 'Location'
  latitude: Scalars['Float']
  longitude: Scalars['Float']
  distance: Scalars['Float']
}

/** Representing a geolocation point with latitude and longitude */
export type LocationDistanceArgs = {
  from: LocationInput
}

export type PageUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: PageWhereUniqueInput
  /** Upsert data */
  data: PageUpsertInput
}

/** An edge in a connection. */
export type ParnerListEdge = {
  __typename?: 'ParnerListEdge'
  /** The item at the end of the edge. */
  node: ParnerList
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowColumnTwoUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowColumnTwoCreateLocalizationInput>>
  /** Localizations to update */
  update?: Maybe<Array<RowColumnTwoUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowColumnTwoUpsertLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
}

export type RowImageSwiperCreateOneInlineInput = {
  /** Create and connect one RowImageSwiper document */
  create?: Maybe<RowImageSwiperCreateInput>
  /** Connect one existing RowImageSwiper document */
  connect?: Maybe<RowImageSwiperWhereUniqueInput>
}

/** Identifies documents */
export type RowReviewManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowReviewWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowReviewWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowReviewWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  reviews_every?: Maybe<ReviewWhereInput>
  reviews_some?: Maybe<ReviewWhereInput>
  reviews_none?: Maybe<ReviewWhereInput>
}

export type RowServiceListOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identifier_ASC'
  | 'identifier_DESC'

export type RowVacancyConnectInput = {
  /** Document to connect */
  where: RowVacancyWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type LinkInternalUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: LinkInternalWhereUniqueInput
  /** Document to update */
  data: LinkInternalUpdateInput
}

export type RowColumnBoxed = Node & {
  __typename?: 'RowColumnBoxed'
  /** System stage field */
  stage: Stage
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowColumnBoxed>
  /** Get the document in other stages */
  documentInStages: Array<RowColumnBoxed>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  content: RichText
  page: Array<Page>
  /** List of RowColumnBoxed versions */
  history: Array<Version>
}

export type RowColumnBoxedLocalizationsArgs = {
  locales?: Array<Locale>
  includeCurrent?: Scalars['Boolean']
}

export type RowColumnBoxedDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowColumnBoxedCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowColumnBoxedUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowColumnBoxedPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowColumnBoxedPageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowColumnBoxedHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowColumnOneUpdateManyLocalizationInput = {
  data: RowColumnOneUpdateManyLocalizationDataInput
  locale: Locale
}

/** A connection to a list of items. */
export type RowContactConnection = {
  __typename?: 'RowContactConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowContactEdge>
  aggregate: Aggregate
}

export type RowIpadHorizontalUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowIpadHorizontalWhereUniqueInput
  /** Upsert data */
  data: RowIpadHorizontalUpsertInput
}

/** Identifies documents */
export type RowLaptopManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowLaptopWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowLaptopWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowLaptopWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  backgroundImage?: Maybe<AssetWhereInput>
  laptopContent?: Maybe<AssetWhereInput>
}

export type PaperCard = Node & {
  __typename?: 'PaperCard'
  /** System stage field */
  stage: Stage
  /** Get the document in other stages */
  documentInStages: Array<PaperCard>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  title: Scalars['String']
  headerBanner: Asset
  cardContent: RichText
  cardLink?: Maybe<LinkInternal>
  buttonText?: Maybe<Scalars['String']>
  rowExplanation?: Maybe<RowExplanation>
  /** List of PaperCard versions */
  history: Array<Version>
}

export type PaperCardDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type PaperCardHeaderBannerArgs = {
  locales?: Maybe<Array<Locale>>
}

export type PaperCardCardLinkArgs = {
  locales?: Maybe<Array<Locale>>
}

export type PaperCardRowExplanationArgs = {
  locales?: Maybe<Array<Locale>>
}

export type PaperCardHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

/** References RowModule record uniquely */
export type RowModuleWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

export type RowModuleConnectInput = {
  /** Document to connect */
  where: RowModuleWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

/** An edge in a connection. */
export type RowVacancyEdge = {
  __typename?: 'RowVacancyEdge'
  /** The item at the end of the edge. */
  node: RowVacancy
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type AwardUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: AwardWhereInput
  /** Update many input */
  data: AwardUpdateManyInput
}

export type RowCenteredTextUpdateManyLocalizationInput = {
  data: RowCenteredTextUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowContactUpdateLocalizationDataInput = {
  text?: Maybe<Scalars['RichTextAST']>
}

export type RowIntroUpdateInput = {
  identity?: Maybe<Scalars['String']>
  /** content input for default locale (nl) */
  content?: Maybe<Scalars['RichTextAST']>
  page?: Maybe<PageUpdateManyInlineInput>
  /** Manage document localizations */
  localizations?: Maybe<RowIntroUpdateLocalizationsInput>
}

export type RowLaptopUpdateOneInlineInput = {
  /** Create and connect one RowLaptop document */
  create?: Maybe<RowLaptopCreateInput>
  /** Update single RowLaptop document */
  update?: Maybe<RowLaptopUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowLaptop document */
  upsert?: Maybe<RowLaptopUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowLaptop document */
  connect?: Maybe<RowLaptopWhereUniqueInput>
  /** Disconnect currently connected RowLaptop document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowLaptop document */
  delete?: Maybe<Scalars['Boolean']>
}

export type LinkExternalUpsertInput = {
  /** Create document if it didn't exist */
  create: LinkExternalCreateInput
  /** Update document if it exists */
  update: LinkExternalUpdateInput
}

export type FooterUpdateManyInput = {
  /** text input for default locale (nl) */
  text?: Maybe<Scalars['RichTextAST']>
  /** contact input for default locale (nl) */
  contact?: Maybe<Scalars['RichTextAST']>
  /** address input for default locale (nl) */
  address?: Maybe<Scalars['RichTextAST']>
  /** Optional updates to localizations */
  localizations?: Maybe<FooterUpdateManyLocalizationsInput>
}

export type LinkInternalUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<LinkInternalUpdateManyLocalizationInput>>
}

export type ParnerListUpsertInput = {
  /** Create document if it didn't exist */
  create: ParnerListCreateInput
  /** Update document if it exists */
  update: ParnerListUpdateInput
}

export type RowIframeUpdateManyInlineInput = {
  /** Create and connect multiple RowIframe documents */
  create?: Maybe<Array<RowIframeCreateInput>>
  /** Connect multiple existing RowIframe documents */
  connect?: Maybe<Array<RowIframeConnectInput>>
  /** Override currently-connected documents with multiple existing RowIframe documents */
  set?: Maybe<Array<RowIframeWhereUniqueInput>>
  /** Update multiple RowIframe documents */
  update?: Maybe<Array<RowIframeUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowIframe documents */
  upsert?: Maybe<Array<RowIframeUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowIframe documents */
  disconnect?: Maybe<Array<RowIframeWhereUniqueInput>>
  /** Delete multiple RowIframe documents */
  delete?: Maybe<Array<RowIframeWhereUniqueInput>>
}

export type RowIpadVerticalCreateManyInlineInput = {
  /** Create and connect multiple existing RowIpadVertical documents */
  create?: Maybe<Array<RowIpadVerticalCreateInput>>
  /** Connect multiple existing RowIpadVertical documents */
  connect?: Maybe<Array<RowIpadVerticalWhereUniqueInput>>
}

export type RowServiceListConnectInput = {
  /** Document to connect */
  where: RowServiceListWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type FooterUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: FooterWhereInput
  /** Update many input */
  data: FooterUpdateManyInput
}

export type RowIntroUpdateLocalizationDataInput = {
  content?: Maybe<Scalars['RichTextAST']>
}

export type RowIpadVertical = Node & {
  __typename?: 'RowIpadVertical'
  /** System stage field */
  stage: Stage
  /** Get the document in other stages */
  documentInStages: Array<RowIpadVertical>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  backgroundImage?: Maybe<Asset>
  iPadContent: Asset
  page: Array<Page>
  /** List of RowIpadVertical versions */
  history: Array<Version>
}

export type RowIpadVerticalDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowIpadVerticalBackgroundImageArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowIpadVerticalIPadContentArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowIpadVerticalPageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowIpadVerticalHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowIphoneWithText = Node & {
  __typename?: 'RowIphoneWithText'
  /** System stage field */
  stage: Stage
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowIphoneWithText>
  /** Get the document in other stages */
  documentInStages: Array<RowIphoneWithText>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  /** You need to include the iPhone and shadow in your background image. Example: https://media.graphcms.com/resize=fit:max,w:600/NssTZLoiTKex4o6j0JSz */
  backgroundImageWithPhone: Asset
  /**  Needs to have the same aspect ratio as this example: https://cdn.filestackcontent.com/YcMWoHFQSnyEN2g0sFJd Also make sure to have the rounded corners at the bottom!  */
  iPhoneVideo?: Maybe<Asset>
  /** Will be displayed behind the phone. The phone will appear to be resting on this surface. */
  themeImage?: Maybe<Asset>
  colOne: RichText
  colTwoOptional?: Maybe<RichText>
  colThreeOptional?: Maybe<RichText>
  page: Array<Page>
  /** List of RowIphoneWithText versions */
  history: Array<Version>
}

export type RowIphoneWithTextLocalizationsArgs = {
  locales?: Array<Locale>
  includeCurrent?: Scalars['Boolean']
}

export type RowIphoneWithTextDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowIphoneWithTextCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowIphoneWithTextUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowIphoneWithTextPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowIphoneWithTextBackgroundImageWithPhoneArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowIphoneWithTextIPhoneVideoArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowIphoneWithTextThemeImageArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowIphoneWithTextPageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowIphoneWithTextHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowColorBlockBlockContentConnectInput = {
  RowColumnThree?: Maybe<RowColumnThreeConnectInput>
  RowColumnTwo?: Maybe<RowColumnTwoConnectInput>
  RowColumnOne?: Maybe<RowColumnOneConnectInput>
}

export type RowCenteredTextConnectInput = {
  /** Document to connect */
  where: RowCenteredTextWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowColumnTwoCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  colOne: Scalars['RichTextAST']
  colTwo: Scalars['RichTextAST']
}

export type RowLaptopUpsertInput = {
  /** Create document if it didn't exist */
  create: RowLaptopCreateInput
  /** Update document if it exists */
  update: RowLaptopUpdateInput
}

export type LinkExternalUpdateLocalizationDataInput = {
  title?: Maybe<Scalars['String']>
  description?: Maybe<Scalars['RichTextAST']>
}

export type PersonCreateOneInlineInput = {
  /** Create and connect one Person document */
  create?: Maybe<PersonCreateInput>
  /** Connect one existing Person document */
  connect?: Maybe<PersonWhereUniqueInput>
}

export type RowIpadVerticalUpdateInput = {
  backgroundImage?: Maybe<AssetUpdateOneInlineInput>
  iPadContent?: Maybe<AssetUpdateOneInlineInput>
  page?: Maybe<PageUpdateManyInlineInput>
}

export type RowIphoneWithTextCreateManyInlineInput = {
  /** Create and connect multiple existing RowIphoneWithText documents */
  create?: Maybe<Array<RowIphoneWithTextCreateInput>>
  /** Connect multiple existing RowIphoneWithText documents */
  connect?: Maybe<Array<RowIphoneWithTextWhereUniqueInput>>
}

export type FooterOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'

/** References Page record uniquely */
export type PageWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

export type PersonUpdateOneInlineInput = {
  /** Create and connect one Person document */
  create?: Maybe<PersonCreateInput>
  /** Update single Person document */
  update?: Maybe<PersonUpdateWithNestedWhereUniqueInput>
  /** Upsert single Person document */
  upsert?: Maybe<PersonUpsertWithNestedWhereUniqueInput>
  /** Connect existing Person document */
  connect?: Maybe<PersonWhereUniqueInput>
  /** Disconnect currently connected Person document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected Person document */
  delete?: Maybe<Scalars['Boolean']>
}

/** References RowIframe record uniquely */
export type RowIframeWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

export type RowImageOrVideoUpdateOneInlineInput = {
  /** Create and connect one RowImageOrVideo document */
  create?: Maybe<RowImageOrVideoCreateInput>
  /** Update single RowImageOrVideo document */
  update?: Maybe<RowImageOrVideoUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowImageOrVideo document */
  upsert?: Maybe<RowImageOrVideoUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowImageOrVideo document */
  connect?: Maybe<RowImageOrVideoWhereUniqueInput>
  /** Disconnect currently connected RowImageOrVideo document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowImageOrVideo document */
  delete?: Maybe<Scalars['Boolean']>
}

/** References RowLinksWithText record uniquely */
export type RowLinksWithTextWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type LinkExternalUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: LinkExternalWhereUniqueInput
  /** Upsert data */
  data: LinkExternalUpsertInput
}

export type LinkExternalCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** title input for default locale (nl) */
  title: Scalars['String']
  /** description input for default locale (nl) */
  description?: Maybe<Scalars['RichTextAST']>
  url: Scalars['String']
  rowHeroVideo?: Maybe<RowHeroCreateManyInlineInput>
  footerAdditionalLinks?: Maybe<FooterCreateManyInlineInput>
  rowGoogleMap?: Maybe<RowGoogleMapCreateManyInlineInput>
  module?: Maybe<RowModuleCreateOneInlineInput>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<LinkExternalCreateLocalizationsInput>
}

export type RowGoogleMapCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  /** address input for default locale (nl) */
  address: Scalars['RichTextAST']
  /** businessInfo input for default locale (nl) */
  businessInfo: Scalars['RichTextAST']
  socialLinks?: Maybe<LinkExternalCreateManyInlineInput>
  page?: Maybe<PageCreateManyInlineInput>
  location: Scalars['String']
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowGoogleMapCreateLocalizationsInput>
}

export type RowHeroUpdateManyLocalizationDataInput = {
  text?: Maybe<Scalars['RichTextAST']>
}

export type RowLinksWithTextCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  /** text input for default locale (nl) */
  text: Scalars['RichTextAST']
  page?: Maybe<PageCreateManyInlineInput>
  pages?: Maybe<PageCreateManyInlineInput>
  links?: Maybe<LinkInternalCreateManyInlineInput>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowLinksWithTextCreateLocalizationsInput>
}

/** Identifies documents */
export type RowPhonesSliderWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowPhonesSliderWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowPhonesSliderWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowPhonesSliderWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  backgroundImage?: Maybe<AssetWhereInput>
  phoneOneContent?: Maybe<AssetWhereInput>
  phoneTwoContent?: Maybe<AssetWhereInput>
  phoneThreeContent?: Maybe<AssetWhereInput>
}

/** A connection to a list of items. */
export type ServiceConnection = {
  __typename?: 'ServiceConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<ServiceEdge>
  aggregate: Aggregate
}

export type AssetUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: AssetWhereUniqueInput
  /** Upsert data */
  data: AssetUpsertInput
}

export type RowColumnTwo = Node & {
  __typename?: 'RowColumnTwo'
  /** System stage field */
  stage: Stage
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowColumnTwo>
  /** Get the document in other stages */
  documentInStages: Array<RowColumnTwo>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  rowColorBlock?: Maybe<RowColorBlock>
  identity: Scalars['String']
  colOneIcon?: Maybe<Asset>
  colOne: RichText
  colTwo: RichText
  colTwoIcon?: Maybe<Asset>
  page: Array<Page>
  /** List of RowColumnTwo versions */
  history: Array<Version>
}

export type RowColumnTwoLocalizationsArgs = {
  locales?: Array<Locale>
  includeCurrent?: Scalars['Boolean']
}

export type RowColumnTwoDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowColumnTwoCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowColumnTwoUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowColumnTwoPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowColumnTwoRowColorBlockArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowColumnTwoColOneIconArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowColumnTwoColTwoIconArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowColumnTwoPageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowColumnTwoHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowServiceListUpdateManyInlineInput = {
  /** Create and connect multiple RowServiceList documents */
  create?: Maybe<Array<RowServiceListCreateInput>>
  /** Connect multiple existing RowServiceList documents */
  connect?: Maybe<Array<RowServiceListConnectInput>>
  /** Override currently-connected documents with multiple existing RowServiceList documents */
  set?: Maybe<Array<RowServiceListWhereUniqueInput>>
  /** Update multiple RowServiceList documents */
  update?: Maybe<Array<RowServiceListUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowServiceList documents */
  upsert?: Maybe<Array<RowServiceListUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowServiceList documents */
  disconnect?: Maybe<Array<RowServiceListWhereUniqueInput>>
  /** Delete multiple RowServiceList documents */
  delete?: Maybe<Array<RowServiceListWhereUniqueInput>>
}

export type AssetCreateManyInlineInput = {
  /** Create and connect multiple existing Asset documents */
  create?: Maybe<Array<AssetCreateInput>>
  /** Connect multiple existing Asset documents */
  connect?: Maybe<Array<AssetWhereUniqueInput>>
}

export type RowColorBlockUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: Maybe<Scalars['String']>
}

/** An edge in a connection. */
export type RowContactEdge = {
  __typename?: 'RowContactEdge'
  /** The item at the end of the edge. */
  node: RowContact
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowModuleUpdateInput = {
  name?: Maybe<Scalars['String']>
  /** description input for default locale (nl) */
  description?: Maybe<Scalars['RichTextAST']>
  link?: Maybe<LinkExternalUpdateOneInlineInput>
  page?: Maybe<PageUpdateManyInlineInput>
  /** Manage document localizations */
  localizations?: Maybe<RowModuleUpdateLocalizationsInput>
}

export type RowModuleUpdateManyLocalizationInput = {
  data: RowModuleUpdateManyLocalizationDataInput
  locale: Locale
}

/** Identifies documents */
export type CompanyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<CompanyWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<CompanyWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<CompanyWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  name?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  name_not_ends_with?: Maybe<Scalars['String']>
  logo?: Maybe<AssetWhereInput>
  rowCompanySlider_every?: Maybe<RowCompanySliderWhereInput>
  rowCompanySlider_some?: Maybe<RowCompanySliderWhereInput>
  rowCompanySlider_none?: Maybe<RowCompanySliderWhereInput>
}

/** Identifies documents */
export type PageManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<PageWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<PageWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<PageWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  metaRobots?: Maybe<MetaRobots>
  /** All values that are not equal to given value. */
  metaRobots_not?: Maybe<MetaRobots>
  /** All values that are contained in given list. */
  metaRobots_in?: Maybe<Array<MetaRobots>>
  /** All values that are not contained in given list. */
  metaRobots_not_in?: Maybe<Array<MetaRobots>>
  author?: Maybe<PersonWhereInput>
  logo?: Maybe<AssetWhereInput>
  asset?: Maybe<AssetWhereInput>
  internalLink_every?: Maybe<LinkInternalWhereInput>
  internalLink_some?: Maybe<LinkInternalWhereInput>
  internalLink_none?: Maybe<LinkInternalWhereInput>
  headerContact_every?: Maybe<HeaderWhereInput>
  headerContact_some?: Maybe<HeaderWhereInput>
  headerContact_none?: Maybe<HeaderWhereInput>
  headerHome_every?: Maybe<HeaderWhereInput>
  headerHome_some?: Maybe<HeaderWhereInput>
  headerHome_none?: Maybe<HeaderWhereInput>
  headerMenu_every?: Maybe<HeaderWhereInput>
  headerMenu_some?: Maybe<HeaderWhereInput>
  headerMenu_none?: Maybe<HeaderWhereInput>
  rowServicesWithText_every?: Maybe<RowLinksWithTextWhereInput>
  rowServicesWithText_some?: Maybe<RowLinksWithTextWhereInput>
  rowServicesWithText_none?: Maybe<RowLinksWithTextWhereInput>
  service?: Maybe<ServiceWhereInput>
}

export type PageUpdateLocalizationInput = {
  data: PageUpdateLocalizationDataInput
  locale: Locale
}

export type RowColorBlockUpdateManyInlineInput = {
  /** Create and connect multiple RowColorBlock documents */
  create?: Maybe<Array<RowColorBlockCreateInput>>
  /** Connect multiple existing RowColorBlock documents */
  connect?: Maybe<Array<RowColorBlockConnectInput>>
  /** Override currently-connected documents with multiple existing RowColorBlock documents */
  set?: Maybe<Array<RowColorBlockWhereUniqueInput>>
  /** Update multiple RowColorBlock documents */
  update?: Maybe<Array<RowColorBlockUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowColorBlock documents */
  upsert?: Maybe<Array<RowColorBlockUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowColorBlock documents */
  disconnect?: Maybe<Array<RowColorBlockWhereUniqueInput>>
  /** Delete multiple RowColorBlock documents */
  delete?: Maybe<Array<RowColorBlockWhereUniqueInput>>
}

export type RowColumnThreeUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowColumnThreeWhereInput
  /** Update many input */
  data: RowColumnThreeUpdateManyInput
}

/** Identifies documents */
export type RowImageOrVideoWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowImageOrVideoWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowImageOrVideoWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowImageOrVideoWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  asset?: Maybe<AssetWhereInput>
}

export type RowIphoneWithTextCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  backgroundImageWithPhone: AssetCreateOneInlineInput
  iPhoneVideo?: Maybe<AssetCreateOneInlineInput>
  themeImage?: Maybe<AssetCreateOneInlineInput>
  /** colOne input for default locale (nl) */
  colOne: Scalars['RichTextAST']
  /** colTwoOptional input for default locale (nl) */
  colTwoOptional?: Maybe<Scalars['RichTextAST']>
  /** colThreeOptional input for default locale (nl) */
  colThreeOptional?: Maybe<Scalars['RichTextAST']>
  page?: Maybe<PageCreateManyInlineInput>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowIphoneWithTextCreateLocalizationsInput>
}

export type RowLinksWithTextUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowLinksWithTextWhereUniqueInput
  /** Upsert data */
  data: RowLinksWithTextUpsertInput
}

export type LinkExternal = Node & {
  __typename?: 'LinkExternal'
  /** System stage field */
  stage: Stage
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<LinkExternal>
  /** Get the document in other stages */
  documentInStages: Array<LinkExternal>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  title: Scalars['String']
  /** If filled in a LinkBlock will be rendered */
  description?: Maybe<RichText>
  url: Scalars['String']
  rowHeroVideo: Array<RowHero>
  footerAdditionalLinks: Array<Footer>
  rowGoogleMap: Array<RowGoogleMap>
  module?: Maybe<RowModule>
  /** List of LinkExternal versions */
  history: Array<Version>
}

export type LinkExternalLocalizationsArgs = {
  locales?: Array<Locale>
  includeCurrent?: Scalars['Boolean']
}

export type LinkExternalDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type LinkExternalCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type LinkExternalUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type LinkExternalPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type LinkExternalRowHeroVideoArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type LinkExternalFooterAdditionalLinksArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type LinkExternalRowGoogleMapArgs = {
  where?: Maybe<RowGoogleMapWhereInput>
  orderBy?: Maybe<RowGoogleMapOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type LinkExternalModuleArgs = {
  locales?: Maybe<Array<Locale>>
}

export type LinkExternalHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowPhonesSliderCreateManyInlineInput = {
  /** Create and connect multiple existing RowPhonesSlider documents */
  create?: Maybe<Array<RowPhonesSliderCreateInput>>
  /** Connect multiple existing RowPhonesSlider documents */
  connect?: Maybe<Array<RowPhonesSliderWhereUniqueInput>>
}

export type RowVacancyUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowVacancyCreateLocalizationInput>>
  /** Localizations to update */
  update?: Maybe<Array<RowVacancyUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowVacancyUpsertLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
}

export type RowModulePageUpdateLocalizationDataInput = {
  description?: Maybe<Scalars['RichTextAST']>
}

export type RowExplanationUpdateInput = {
  identifier?: Maybe<Scalars['String']>
  subject?: Maybe<Scalars['RichTextAST']>
  explanation?: Maybe<Scalars['RichTextAST']>
  page?: Maybe<PageUpdateManyInlineInput>
  card?: Maybe<PaperCardUpdateOneInlineInput>
}

export type ContactFormUpdateManyInput = {
  name?: Maybe<Scalars['String']>
  email?: Maybe<Scalars['String']>
  phoneNumber?: Maybe<Scalars['String']>
  subject?: Maybe<ContactSubject>
  message?: Maybe<Scalars['String']>
}

export type FooterCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<FooterCreateLocalizationInput>>
}

export type LinkExternalUpdateInput = {
  /** title input for default locale (nl) */
  title?: Maybe<Scalars['String']>
  /** description input for default locale (nl) */
  description?: Maybe<Scalars['RichTextAST']>
  url?: Maybe<Scalars['String']>
  rowHeroVideo?: Maybe<RowHeroUpdateManyInlineInput>
  footerAdditionalLinks?: Maybe<FooterUpdateManyInlineInput>
  rowGoogleMap?: Maybe<RowGoogleMapUpdateManyInlineInput>
  module?: Maybe<RowModuleUpdateOneInlineInput>
  /** Manage document localizations */
  localizations?: Maybe<LinkExternalUpdateLocalizationsInput>
}

export type LinkInternalUpdateManyLocalizationDataInput = {
  title?: Maybe<Scalars['String']>
  description?: Maybe<Scalars['RichTextAST']>
}

export type PaperCardUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: PaperCardWhereUniqueInput
  /** Upsert data */
  data: PaperCardUpsertInput
}

export type PartnerCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  name: Scalars['String']
  url: Scalars['String']
  logo: AssetCreateOneInlineInput
  rowCollaboration?: Maybe<ParnerListCreateManyInlineInput>
}

export type RowColorBlockUpsertInput = {
  /** Create document if it didn't exist */
  create: RowColorBlockCreateInput
  /** Update document if it exists */
  update: RowColorBlockUpdateInput
}

export type RowRecentBlogPostCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowRecentBlogPostCreateLocalizationInput>>
}

export type Company = Node & {
  __typename?: 'Company'
  /** System stage field */
  stage: Stage
  /** Get the document in other stages */
  documentInStages: Array<Company>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  name: Scalars['String']
  logo: Asset
  rowCompanySlider: Array<RowCompanySlider>
  /** List of Company versions */
  history: Array<Version>
}

export type CompanyDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type CompanyLogoArgs = {
  locales?: Maybe<Array<Locale>>
}

export type CompanyRowCompanySliderArgs = {
  where?: Maybe<RowCompanySliderWhereInput>
  orderBy?: Maybe<RowCompanySliderOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type CompanyHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowColumnBoxedUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowColumnBoxedCreateLocalizationInput>>
  /** Localizations to update */
  update?: Maybe<Array<RowColumnBoxedUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowColumnBoxedUpsertLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
}

export type RowGoogleMapUpdateManyLocalizationDataInput = {
  address?: Maybe<Scalars['RichTextAST']>
  businessInfo?: Maybe<Scalars['RichTextAST']>
}

export type RowIpadVerticalCreateOneInlineInput = {
  /** Create and connect one RowIpadVertical document */
  create?: Maybe<RowIpadVerticalCreateInput>
  /** Connect one existing RowIpadVertical document */
  connect?: Maybe<RowIpadVerticalWhereUniqueInput>
}

export type PaperCardUpdateOneInlineInput = {
  /** Create and connect one PaperCard document */
  create?: Maybe<PaperCardCreateInput>
  /** Update single PaperCard document */
  update?: Maybe<PaperCardUpdateWithNestedWhereUniqueInput>
  /** Upsert single PaperCard document */
  upsert?: Maybe<PaperCardUpsertWithNestedWhereUniqueInput>
  /** Connect existing PaperCard document */
  connect?: Maybe<PaperCardWhereUniqueInput>
  /** Disconnect currently connected PaperCard document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected PaperCard document */
  delete?: Maybe<Scalars['Boolean']>
}

/** Identifies documents */
export type RowColumnOneManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowColumnOneWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowColumnOneWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowColumnOneWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  colOneIcon?: Maybe<AssetWhereInput>
}

export type RowLinksWithTextUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowLinksWithTextWhereInput
  /** Update many input */
  data: RowLinksWithTextUpdateManyInput
}

export type FooterCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  links?: Maybe<LinkInternalCreateManyInlineInput>
  contactLink?: Maybe<LinkInternalCreateOneInlineInput>
  /** text input for default locale (nl) */
  text: Scalars['RichTextAST']
  /** contact input for default locale (nl) */
  contact: Scalars['RichTextAST']
  /** address input for default locale (nl) */
  address: Scalars['RichTextAST']
  reviewsLink?: Maybe<LinkInternalCreateOneInlineInput>
  additionalLinks?: Maybe<FooterAdditionalLinksCreateManyInlineInput>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<FooterCreateLocalizationsInput>
}

/** References Header record uniquely */
export type HeaderWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type RowColorBlockConnectInput = {
  /** Document to connect */
  where: RowColorBlockWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowHeroUpsertLocalizationInput = {
  update: RowHeroUpdateLocalizationDataInput
  create: RowHeroCreateLocalizationDataInput
  locale: Locale
}

export type RowLaptopWithTextCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  backgroundImage?: Maybe<AssetCreateOneInlineInput>
  laptopContent: AssetCreateOneInlineInput
  colOne: Scalars['RichTextAST']
  page?: Maybe<PageCreateManyInlineInput>
}

export type RowModuleCreateManyInlineInput = {
  /** Create and connect multiple existing RowModule documents */
  create?: Maybe<Array<RowModuleCreateInput>>
  /** Connect multiple existing RowModule documents */
  connect?: Maybe<Array<RowModuleWhereUniqueInput>>
}

export type RowHeroVideoLinksUpsertWithNestedWhereUniqueInput = {
  LinkExternal?: Maybe<LinkExternalUpsertWithNestedWhereUniqueInput>
  LinkInternal?: Maybe<LinkInternalUpsertWithNestedWhereUniqueInput>
}

export type AwardCreateOneInlineInput = {
  /** Create and connect one Award document */
  create?: Maybe<AwardCreateInput>
  /** Connect one existing Award document */
  connect?: Maybe<AwardWhereUniqueInput>
}

export type RowColumnThreeUpdateInput = {
  rowColorBlock?: Maybe<RowColorBlockUpdateOneInlineInput>
  identity?: Maybe<Scalars['String']>
  /** colOne input for default locale (nl) */
  colOne?: Maybe<Scalars['RichTextAST']>
  colOneIcon?: Maybe<AssetUpdateOneInlineInput>
  /** colTwo input for default locale (nl) */
  colTwo?: Maybe<Scalars['RichTextAST']>
  colTwoIcon?: Maybe<AssetUpdateOneInlineInput>
  /** colThree input for default locale (nl) */
  colThree?: Maybe<Scalars['RichTextAST']>
  colThreeIcon?: Maybe<AssetUpdateOneInlineInput>
  page?: Maybe<PageUpdateManyInlineInput>
  /** Manage document localizations */
  localizations?: Maybe<RowColumnThreeUpdateLocalizationsInput>
}

export type RowIntroUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowIntroWhereUniqueInput
  /** Document to update */
  data: RowIntroUpdateInput
}

export type ParnerListUpdateOneInlineInput = {
  /** Create and connect one ParnerList document */
  create?: Maybe<ParnerListCreateInput>
  /** Update single ParnerList document */
  update?: Maybe<ParnerListUpdateWithNestedWhereUniqueInput>
  /** Upsert single ParnerList document */
  upsert?: Maybe<ParnerListUpsertWithNestedWhereUniqueInput>
  /** Connect existing ParnerList document */
  connect?: Maybe<ParnerListWhereUniqueInput>
  /** Disconnect currently connected ParnerList document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected ParnerList document */
  delete?: Maybe<Scalars['Boolean']>
}

export type LinkExternalCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<LinkExternalCreateLocalizationInput>>
}

export type RowColorBlock = Node & {
  __typename?: 'RowColorBlock'
  /** System stage field */
  stage: Stage
  /** Get the document in other stages */
  documentInStages: Array<RowColorBlock>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  identifier: Scalars['String']
  blockTitle?: Maybe<RowTitle>
  blockContent: Array<RowColorBlockBlockContent>
  page: Array<Page>
  /** List of RowColorBlock versions */
  history: Array<Version>
}

export type RowColorBlockDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowColorBlockBlockTitleArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowColorBlockBlockContentArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowColorBlockPageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowColorBlockHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

/** Identifies documents */
export type HeaderManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<HeaderWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<HeaderWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<HeaderWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  menuPages_every?: Maybe<PageWhereInput>
  menuPages_some?: Maybe<PageWhereInput>
  menuPages_none?: Maybe<PageWhereInput>
  homePage?: Maybe<PageWhereInput>
  contactPage?: Maybe<PageWhereInput>
  contactAvatar?: Maybe<PersonWhereInput>
}

export type PageCreateManyInlineInput = {
  /** Create and connect multiple existing Page documents */
  create?: Maybe<Array<PageCreateInput>>
  /** Connect multiple existing Page documents */
  connect?: Maybe<Array<PageWhereUniqueInput>>
}

/** Identifies documents */
export type RowHeroWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowHeroWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowHeroWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowHeroWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  asset?: Maybe<AssetWhereInput>
  contactPeople_every?: Maybe<PersonWhereInput>
  contactPeople_some?: Maybe<PersonWhereInput>
  contactPeople_none?: Maybe<PersonWhereInput>
}

export type RowIconWithTextListUpdateManyInput = {
  /** text input for default locale (nl) */
  text?: Maybe<Scalars['RichTextAST']>
  /** rowOne input for default locale (nl) */
  rowOne?: Maybe<Scalars['RichTextAST']>
  /** rowTwo input for default locale (nl) */
  rowTwo?: Maybe<Scalars['RichTextAST']>
  /** rowThree input for default locale (nl) */
  rowThree?: Maybe<Scalars['RichTextAST']>
  /** rowFour input for default locale (nl) */
  rowFour?: Maybe<Scalars['RichTextAST']>
  /** rowFive input for default locale (nl) */
  rowFive?: Maybe<Scalars['RichTextAST']>
  /** rowSix input for default locale (nl) */
  rowSix?: Maybe<Scalars['RichTextAST']>
  /** Optional updates to localizations */
  localizations?: Maybe<RowIconWithTextListUpdateManyLocalizationsInput>
}

export type RowLinksWithTextUpdateManyLocalizationInput = {
  data: RowLinksWithTextUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowLinksWithTextUpdateManyLocalizationDataInput = {
  text?: Maybe<Scalars['RichTextAST']>
}

export type RowModuleUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowModuleWhereUniqueInput
  /** Document to update */
  data: RowModuleUpdateInput
}

export type AwardCreateLocalizationInput = {
  /** Localization input */
  data: AwardCreateLocalizationDataInput
  locale: Locale
}

export type RowPhonesSliderUpdateManyInlineInput = {
  /** Create and connect multiple RowPhonesSlider documents */
  create?: Maybe<Array<RowPhonesSliderCreateInput>>
  /** Connect multiple existing RowPhonesSlider documents */
  connect?: Maybe<Array<RowPhonesSliderConnectInput>>
  /** Override currently-connected documents with multiple existing RowPhonesSlider documents */
  set?: Maybe<Array<RowPhonesSliderWhereUniqueInput>>
  /** Update multiple RowPhonesSlider documents */
  update?: Maybe<Array<RowPhonesSliderUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowPhonesSlider documents */
  upsert?: Maybe<Array<RowPhonesSliderUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowPhonesSlider documents */
  disconnect?: Maybe<Array<RowPhonesSliderWhereUniqueInput>>
  /** Delete multiple RowPhonesSlider documents */
  delete?: Maybe<Array<RowPhonesSliderWhereUniqueInput>>
}

export type ServiceUpdateOneInlineInput = {
  /** Create and connect one Service document */
  create?: Maybe<ServiceCreateInput>
  /** Update single Service document */
  update?: Maybe<ServiceUpdateWithNestedWhereUniqueInput>
  /** Upsert single Service document */
  upsert?: Maybe<ServiceUpsertWithNestedWhereUniqueInput>
  /** Connect existing Service document */
  connect?: Maybe<ServiceWhereUniqueInput>
  /** Disconnect currently connected Service document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected Service document */
  delete?: Maybe<Scalars['Boolean']>
}

export type RowModuleUpsertLocalizationInput = {
  update: RowModuleUpdateLocalizationDataInput
  create: RowModuleCreateLocalizationDataInput
  locale: Locale
}

export type RowImageOrVideoCreateOneInlineInput = {
  /** Create and connect one RowImageOrVideo document */
  create?: Maybe<RowImageOrVideoCreateInput>
  /** Connect one existing RowImageOrVideo document */
  connect?: Maybe<RowImageOrVideoWhereUniqueInput>
}

export type RowImageSwiperConnectInput = {
  /** Document to connect */
  where: RowImageSwiperWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowIframeUpsertLocalizationInput = {
  update: RowIframeUpdateLocalizationDataInput
  create: RowIframeCreateLocalizationDataInput
  locale: Locale
}

export type RowColumnThreeUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowColumnThreeWhereUniqueInput
  /** Upsert data */
  data: RowColumnThreeUpsertInput
}

export type LinkExternalUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: LinkExternalWhereInput
  /** Update many input */
  data: LinkExternalUpdateManyInput
}

export type ParnerListUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: ParnerListWhereInput
  /** Update many input */
  data: ParnerListUpdateManyInput
}

/** Identifies documents */
export type ReviewManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ReviewWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ReviewWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ReviewWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  customerName?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  customerName_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  customerName_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  customerName_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  customerName_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  customerName_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  customerName_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  customerName_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  customerName_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  customerName_not_ends_with?: Maybe<Scalars['String']>
  rating?: Maybe<Scalars['Int']>
  /** All values that are not equal to given value. */
  rating_not?: Maybe<Scalars['Int']>
  /** All values that are contained in given list. */
  rating_in?: Maybe<Array<Scalars['Int']>>
  /** All values that are not contained in given list. */
  rating_not_in?: Maybe<Array<Scalars['Int']>>
  /** All values less than the given value. */
  rating_lt?: Maybe<Scalars['Int']>
  /** All values less than or equal the given value. */
  rating_lte?: Maybe<Scalars['Int']>
  /** All values greater than the given value. */
  rating_gt?: Maybe<Scalars['Int']>
  /** All values greater than or equal the given value. */
  rating_gte?: Maybe<Scalars['Int']>
  rowReview_every?: Maybe<RowReviewWhereInput>
  rowReview_some?: Maybe<RowReviewWhereInput>
  rowReview_none?: Maybe<RowReviewWhereInput>
}

export type RowContactUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowContactUpdateManyLocalizationInput>>
}

export type RowIphoneWithTextOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'

export type ServiceUpsertInput = {
  /** Create document if it didn't exist */
  create: ServiceCreateInput
  /** Update document if it exists */
  update: ServiceUpdateInput
}

export type PageContentWhereInput = {
  RowLinksWithText?: Maybe<RowLinksWithTextWhereInput>
  RowColumnThree?: Maybe<RowColumnThreeWhereInput>
  RowColumnTwo?: Maybe<RowColumnTwoWhereInput>
  RowRecentBlogPost?: Maybe<RowRecentBlogPostWhereInput>
  RowPeopleWithText?: Maybe<RowPeopleWithTextWhereInput>
  RowColumnOne?: Maybe<RowColumnOneWhereInput>
  RowCompanySlider?: Maybe<RowCompanySliderWhereInput>
  RowHero?: Maybe<RowHeroWhereInput>
  RowYoutubeVideo?: Maybe<RowYoutubeVideoWhereInput>
  RowIpadHorizontal?: Maybe<RowIpadHorizontalWhereInput>
  RowColorSpeedBlock?: Maybe<RowColorSpeedBlockWhereInput>
  RowContact?: Maybe<RowContactWhereInput>
  RowGoogleMap?: Maybe<RowGoogleMapWhereInput>
  RowVacancy?: Maybe<RowVacancyWhereInput>
  RowLaptopWithText?: Maybe<RowLaptopWithTextWhereInput>
  RowIconWithTextList?: Maybe<RowIconWithTextListWhereInput>
  RowLineHorizontal?: Maybe<RowLineHorizontalWhereInput>
  RowIphoneWithText?: Maybe<RowIphoneWithTextWhereInput>
  RowIpadVertical?: Maybe<RowIpadVerticalWhereInput>
  RowLaptop?: Maybe<RowLaptopWhereInput>
  RowImageOrVideo?: Maybe<RowImageOrVideoWhereInput>
  RowPhonesSlider?: Maybe<RowPhonesSliderWhereInput>
  RowIframe?: Maybe<RowIframeWhereInput>
  RowQuote?: Maybe<RowQuoteWhereInput>
  RowColorBlock?: Maybe<RowColorBlockWhereInput>
  RowIntro?: Maybe<RowIntroWhereInput>
  RowTitle?: Maybe<RowTitleWhereInput>
  RowReview?: Maybe<RowReviewWhereInput>
  RowServiceList?: Maybe<RowServiceListWhereInput>
  RowCollaboration?: Maybe<RowCollaborationWhereInput>
  RowExplanation?: Maybe<RowExplanationWhereInput>
  RowColumnBoxed?: Maybe<RowColumnBoxedWhereInput>
  RowModule?: Maybe<RowModuleWhereInput>
  RowModulePage?: Maybe<RowModulePageWhereInput>
  RowCenteredText?: Maybe<RowCenteredTextWhereInput>
  RowImageSwiper?: Maybe<RowImageSwiperWhereInput>
}

export type AssetCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  handle: Scalars['String']
  fileName: Scalars['String']
  height?: Maybe<Scalars['Float']>
  width?: Maybe<Scalars['Float']>
  size?: Maybe<Scalars['Float']>
  mimeType?: Maybe<Scalars['String']>
  alt?: Maybe<Scalars['String']>
}

export type RowLineHorizontalCreateManyInlineInput = {
  /** Create and connect multiple existing RowLineHorizontal documents */
  create?: Maybe<Array<RowLineHorizontalCreateInput>>
  /** Connect multiple existing RowLineHorizontal documents */
  connect?: Maybe<Array<RowLineHorizontalWhereUniqueInput>>
}

export type RowLineHorizontalUpdateOneInlineInput = {
  /** Create and connect one RowLineHorizontal document */
  create?: Maybe<RowLineHorizontalCreateInput>
  /** Update single RowLineHorizontal document */
  update?: Maybe<RowLineHorizontalUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowLineHorizontal document */
  upsert?: Maybe<RowLineHorizontalUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowLineHorizontal document */
  connect?: Maybe<RowLineHorizontalWhereUniqueInput>
  /** Disconnect currently connected RowLineHorizontal document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowLineHorizontal document */
  delete?: Maybe<Scalars['Boolean']>
}

export type CompanyCreateManyInlineInput = {
  /** Create and connect multiple existing Company documents */
  create?: Maybe<Array<CompanyCreateInput>>
  /** Connect multiple existing Company documents */
  connect?: Maybe<Array<CompanyWhereUniqueInput>>
}

/** An edge in a connection. */
export type LinkInternalEdge = {
  __typename?: 'LinkInternalEdge'
  /** The item at the end of the edge. */
  node: LinkInternal
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowCollaborationCreateLocalizationInput = {
  /** Localization input */
  data: RowCollaborationCreateLocalizationDataInput
  locale: Locale
}

/** Identifies documents */
export type RowColumnBoxedWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowColumnBoxedWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowColumnBoxedWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowColumnBoxedWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
}

export type RowCompanySlider = Node & {
  __typename?: 'RowCompanySlider'
  /** System stage field */
  stage: Stage
  /** Get the document in other stages */
  documentInStages: Array<RowCompanySlider>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  companies: Array<Company>
  page: Array<Page>
  /** List of RowCompanySlider versions */
  history: Array<Version>
}

export type RowCompanySliderDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowCompanySliderCompaniesArgs = {
  where?: Maybe<CompanyWhereInput>
  orderBy?: Maybe<CompanyOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowCompanySliderPageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowCompanySliderHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowGoogleMap = Node & {
  __typename?: 'RowGoogleMap'
  /** System stage field */
  stage: Stage
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowGoogleMap>
  /** Get the document in other stages */
  documentInStages: Array<RowGoogleMap>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  address: RichText
  businessInfo: RichText
  socialLinks: Array<LinkExternal>
  page: Array<Page>
  /** Search query entered in Google Maps */
  location: Scalars['String']
  /** List of RowGoogleMap versions */
  history: Array<Version>
}

export type RowGoogleMapLocalizationsArgs = {
  locales?: Array<Locale>
  includeCurrent?: Scalars['Boolean']
}

export type RowGoogleMapDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowGoogleMapCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowGoogleMapUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowGoogleMapPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowGoogleMapSocialLinksArgs = {
  where?: Maybe<LinkExternalWhereInput>
  orderBy?: Maybe<LinkExternalOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowGoogleMapPageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowGoogleMapHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

/** Identifies documents */
export type RowIconWithTextListWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowIconWithTextListWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowIconWithTextListWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowIconWithTextListWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  rowOneIcon?: Maybe<AssetWhereInput>
  rowTwoIcon?: Maybe<AssetWhereInput>
  rowThreeIcon?: Maybe<AssetWhereInput>
  rowFourIcon?: Maybe<AssetWhereInput>
  rowFiveIcon?: Maybe<AssetWhereInput>
  rowSixIcon?: Maybe<AssetWhereInput>
}

/** Identifies documents */
export type RowModulePageManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowModulePageWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowModulePageWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowModulePageWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  name?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  name_not_ends_with?: Maybe<Scalars['String']>
  link?: Maybe<LinkInternalWhereInput>
}

export type AssetUpdateManyInput = {
  fileName?: Maybe<Scalars['String']>
  height?: Maybe<Scalars['Float']>
  width?: Maybe<Scalars['Float']>
  size?: Maybe<Scalars['Float']>
  mimeType?: Maybe<Scalars['String']>
  /** alt input for default locale (nl) */
  alt?: Maybe<Scalars['String']>
  /** Optional updates to localizations */
  localizations?: Maybe<AssetUpdateManyLocalizationsInput>
}

export type RowVacancyOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'vacancystatus_ASC'
  | 'vacancystatus_DESC'
  | 'perks_ASC'
  | 'perks_DESC'

export type RowColorSpeedBlockCreateOneInlineInput = {
  /** Create and connect one RowColorSpeedBlock document */
  create?: Maybe<RowColorSpeedBlockCreateInput>
  /** Connect one existing RowColorSpeedBlock document */
  connect?: Maybe<RowColorSpeedBlockWhereUniqueInput>
}

export type RowColumnTwoOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'

export type RowYoutubeVideoOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'videoId_ASC'
  | 'videoId_DESC'
  | 'title_ASC'
  | 'title_DESC'

/** An edge in a connection. */
export type AssetEdge = {
  __typename?: 'AssetEdge'
  /** The item at the end of the edge. */
  node: Asset
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowLaptopWithTextCreateManyInlineInput = {
  /** Create and connect multiple existing RowLaptopWithText documents */
  create?: Maybe<Array<RowLaptopWithTextCreateInput>>
  /** Connect multiple existing RowLaptopWithText documents */
  connect?: Maybe<Array<RowLaptopWithTextWhereUniqueInput>>
}

export type RowColumnTwoUpdateOneInlineInput = {
  /** Create and connect one RowColumnTwo document */
  create?: Maybe<RowColumnTwoCreateInput>
  /** Update single RowColumnTwo document */
  update?: Maybe<RowColumnTwoUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowColumnTwo document */
  upsert?: Maybe<RowColumnTwoUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowColumnTwo document */
  connect?: Maybe<RowColumnTwoWhereUniqueInput>
  /** Disconnect currently connected RowColumnTwo document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowColumnTwo document */
  delete?: Maybe<Scalars['Boolean']>
}

export type PageUpdateLocalizationDataInput = {
  url?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
  metaTitle?: Maybe<Scalars['String']>
  metaDescription?: Maybe<Scalars['String']>
  releaseDate?: Maybe<Scalars['DateTime']>
}

export type RowCollaborationUpdateManyLocalizationDataInput = {
  content?: Maybe<Scalars['RichTextAST']>
}

export type RowColumnBoxedUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowColumnBoxedWhereUniqueInput
  /** Upsert data */
  data: RowColumnBoxedUpsertInput
}

export type RowHeroConnectInput = {
  /** Document to connect */
  where: RowHeroWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

/** Asset system model */
export type Asset = Node & {
  __typename?: 'Asset'
  /** System stage field */
  stage: Stage
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<Asset>
  /** Get the document in other stages */
  documentInStages: Array<Asset>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  /** The file handle */
  handle: Scalars['String']
  /** The file name */
  fileName: Scalars['String']
  /** The height of the file */
  height?: Maybe<Scalars['Float']>
  /** The file width */
  width?: Maybe<Scalars['Float']>
  /** The file size */
  size?: Maybe<Scalars['Float']>
  /** The mime type of the file */
  mimeType?: Maybe<Scalars['String']>
  alt?: Maybe<Scalars['String']>
  personAvatar: Array<Person>
  companyLogo: Array<Company>
  rowColumnThreeColOneIcon: Array<RowColumnThree>
  rowColumnThreeColTwoIcon: Array<RowColumnThree>
  rowColumnThreeColThreeIcon: Array<RowColumnThree>
  rowColumnOneColOneIcon: Array<RowColumnOne>
  rowHeroAsset: Array<RowHero>
  pageAsset: Array<Page>
  rowColumnTwoColOneIcon: Array<RowColumnTwo>
  rowColumnTwoColTwoIcon: Array<RowColumnTwo>
  awardAsset: Array<Award>
  rowOneIconRowIconWithTextList: Array<RowIconWithTextList>
  rowTwoIconRowIconWithTextList: Array<RowIconWithTextList>
  rowThreeIconRowIconWithTextList: Array<RowIconWithTextList>
  rowFourIconRowIconWithTextList: Array<RowIconWithTextList>
  rowFiveIconRowIconWithTextList: Array<RowIconWithTextList>
  rowSixIconRowIconWithTextList: Array<RowIconWithTextList>
  rowIpadHorizontalBackgroundImage: Array<RowIpadHorizontal>
  rowIpadHorizontalIPadContent: Array<RowIpadHorizontal>
  rowIphoneWithTextBackgroundImage: Array<RowIphoneWithText>
  rowIphoneWithTextIPhoneVideo: Array<RowIphoneWithText>
  rowIphoneWithTextThemeImage: Array<RowIphoneWithText>
  rowIpadVerticalBackgroundimage: Array<RowIpadVertical>
  rowIpadVerticalIpadcontent: Array<RowIpadVertical>
  rowLaptopBackgroundimage: Array<RowLaptop>
  rowLaptopLaptopcontent: Array<RowLaptop>
  rowVacancyPdf: Array<RowVacancy>
  rowImageOrVideoAsset: Array<RowImageOrVideo>
  rowLaptopWithTextBackgroundImage: Array<RowLaptopWithText>
  rowLaptopWithTextLaptopContent: Array<RowLaptopWithText>
  rowPhonesSliderPhoneOneContent: Array<RowPhonesSlider>
  rowPhonesSliderPhoneTwoContent: Array<RowPhonesSlider>
  rowPhonesSliderPhoneThreeContent: Array<RowPhonesSlider>
  rowPhonesSliderBackgroundImage: Array<RowPhonesSlider>
  pageLogo: Array<Page>
  partnerLogo: Array<Partner>
  paperCardHeaderBanner: Array<PaperCard>
  rowImageSwiperAsset: Array<RowImageSwiper>
  /** List of Asset versions */
  history: Array<Version>
  /** Get the url for the asset with provided transformations applied. */
  url: Scalars['String']
}

/** Asset system model */
export type AssetLocalizationsArgs = {
  locales?: Array<Locale>
  includeCurrent?: Scalars['Boolean']
}

/** Asset system model */
export type AssetDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

/** Asset system model */
export type AssetCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

/** Asset system model */
export type AssetUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

/** Asset system model */
export type AssetPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

/** Asset system model */
export type AssetPersonAvatarArgs = {
  where?: Maybe<PersonWhereInput>
  orderBy?: Maybe<PersonOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetCompanyLogoArgs = {
  where?: Maybe<CompanyWhereInput>
  orderBy?: Maybe<CompanyOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowColumnThreeColOneIconArgs = {
  where?: Maybe<RowColumnThreeWhereInput>
  orderBy?: Maybe<RowColumnThreeOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowColumnThreeColTwoIconArgs = {
  where?: Maybe<RowColumnThreeWhereInput>
  orderBy?: Maybe<RowColumnThreeOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowColumnThreeColThreeIconArgs = {
  where?: Maybe<RowColumnThreeWhereInput>
  orderBy?: Maybe<RowColumnThreeOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowColumnOneColOneIconArgs = {
  where?: Maybe<RowColumnOneWhereInput>
  orderBy?: Maybe<RowColumnOneOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowHeroAssetArgs = {
  where?: Maybe<RowHeroWhereInput>
  orderBy?: Maybe<RowHeroOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetPageAssetArgs = {
  where?: Maybe<PageWhereInput>
  orderBy?: Maybe<PageOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowColumnTwoColOneIconArgs = {
  where?: Maybe<RowColumnTwoWhereInput>
  orderBy?: Maybe<RowColumnTwoOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowColumnTwoColTwoIconArgs = {
  where?: Maybe<RowColumnTwoWhereInput>
  orderBy?: Maybe<RowColumnTwoOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetAwardAssetArgs = {
  where?: Maybe<AwardWhereInput>
  orderBy?: Maybe<AwardOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowOneIconRowIconWithTextListArgs = {
  where?: Maybe<RowIconWithTextListWhereInput>
  orderBy?: Maybe<RowIconWithTextListOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowTwoIconRowIconWithTextListArgs = {
  where?: Maybe<RowIconWithTextListWhereInput>
  orderBy?: Maybe<RowIconWithTextListOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowThreeIconRowIconWithTextListArgs = {
  where?: Maybe<RowIconWithTextListWhereInput>
  orderBy?: Maybe<RowIconWithTextListOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowFourIconRowIconWithTextListArgs = {
  where?: Maybe<RowIconWithTextListWhereInput>
  orderBy?: Maybe<RowIconWithTextListOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowFiveIconRowIconWithTextListArgs = {
  where?: Maybe<RowIconWithTextListWhereInput>
  orderBy?: Maybe<RowIconWithTextListOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowSixIconRowIconWithTextListArgs = {
  where?: Maybe<RowIconWithTextListWhereInput>
  orderBy?: Maybe<RowIconWithTextListOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowIpadHorizontalBackgroundImageArgs = {
  where?: Maybe<RowIpadHorizontalWhereInput>
  orderBy?: Maybe<RowIpadHorizontalOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowIpadHorizontalIPadContentArgs = {
  where?: Maybe<RowIpadHorizontalWhereInput>
  orderBy?: Maybe<RowIpadHorizontalOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowIphoneWithTextBackgroundImageArgs = {
  where?: Maybe<RowIphoneWithTextWhereInput>
  orderBy?: Maybe<RowIphoneWithTextOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowIphoneWithTextIPhoneVideoArgs = {
  where?: Maybe<RowIphoneWithTextWhereInput>
  orderBy?: Maybe<RowIphoneWithTextOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowIphoneWithTextThemeImageArgs = {
  where?: Maybe<RowIphoneWithTextWhereInput>
  orderBy?: Maybe<RowIphoneWithTextOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowIpadVerticalBackgroundimageArgs = {
  where?: Maybe<RowIpadVerticalWhereInput>
  orderBy?: Maybe<RowIpadVerticalOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowIpadVerticalIpadcontentArgs = {
  where?: Maybe<RowIpadVerticalWhereInput>
  orderBy?: Maybe<RowIpadVerticalOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowLaptopBackgroundimageArgs = {
  where?: Maybe<RowLaptopWhereInput>
  orderBy?: Maybe<RowLaptopOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowLaptopLaptopcontentArgs = {
  where?: Maybe<RowLaptopWhereInput>
  orderBy?: Maybe<RowLaptopOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowVacancyPdfArgs = {
  where?: Maybe<RowVacancyWhereInput>
  orderBy?: Maybe<RowVacancyOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowImageOrVideoAssetArgs = {
  where?: Maybe<RowImageOrVideoWhereInput>
  orderBy?: Maybe<RowImageOrVideoOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowLaptopWithTextBackgroundImageArgs = {
  where?: Maybe<RowLaptopWithTextWhereInput>
  orderBy?: Maybe<RowLaptopWithTextOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowLaptopWithTextLaptopContentArgs = {
  where?: Maybe<RowLaptopWithTextWhereInput>
  orderBy?: Maybe<RowLaptopWithTextOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowPhonesSliderPhoneOneContentArgs = {
  where?: Maybe<RowPhonesSliderWhereInput>
  orderBy?: Maybe<RowPhonesSliderOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowPhonesSliderPhoneTwoContentArgs = {
  where?: Maybe<RowPhonesSliderWhereInput>
  orderBy?: Maybe<RowPhonesSliderOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowPhonesSliderPhoneThreeContentArgs = {
  where?: Maybe<RowPhonesSliderWhereInput>
  orderBy?: Maybe<RowPhonesSliderOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowPhonesSliderBackgroundImageArgs = {
  where?: Maybe<RowPhonesSliderWhereInput>
  orderBy?: Maybe<RowPhonesSliderOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetPageLogoArgs = {
  where?: Maybe<PageWhereInput>
  orderBy?: Maybe<PageOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetPartnerLogoArgs = {
  where?: Maybe<PartnerWhereInput>
  orderBy?: Maybe<PartnerOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetPaperCardHeaderBannerArgs = {
  where?: Maybe<PaperCardWhereInput>
  orderBy?: Maybe<PaperCardOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetRowImageSwiperAssetArgs = {
  where?: Maybe<RowImageSwiperWhereInput>
  orderBy?: Maybe<RowImageSwiperOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Asset system model */
export type AssetHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

/** Asset system model */
export type AssetUrlArgs = {
  transformation?: Maybe<AssetTransformationInput>
}

/** References RowGoogleMap record uniquely */
export type RowGoogleMapWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

/** A connection to a list of items. */
export type RowImageSwiperConnection = {
  __typename?: 'RowImageSwiperConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowImageSwiperEdge>
  aggregate: Aggregate
}

export type RowModuleUpdateManyLocalizationDataInput = {
  description?: Maybe<Scalars['RichTextAST']>
}

export type RowVacancyCreateManyInlineInput = {
  /** Create and connect multiple existing RowVacancy documents */
  create?: Maybe<Array<RowVacancyCreateInput>>
  /** Connect multiple existing RowVacancy documents */
  connect?: Maybe<Array<RowVacancyWhereUniqueInput>>
}

export type FooterAdditionalLinksUpdateWithNestedWhereUniqueInput = {
  LinkInternal?: Maybe<LinkInternalUpdateWithNestedWhereUniqueInput>
  LinkExternal?: Maybe<LinkExternalUpdateWithNestedWhereUniqueInput>
}

export type Aggregate = {
  __typename?: 'Aggregate'
  count: Scalars['Int']
}

export type LinkExternalUpdateManyLocalizationDataInput = {
  title?: Maybe<Scalars['String']>
  description?: Maybe<Scalars['RichTextAST']>
}

export type RowCenteredTextUpdateLocalizationInput = {
  data: RowCenteredTextUpdateLocalizationDataInput
  locale: Locale
}

/** A connection to a list of items. */
export type RowCollaborationConnection = {
  __typename?: 'RowCollaborationConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowCollaborationEdge>
  aggregate: Aggregate
}

export type RowIntroUpdateManyLocalizationInput = {
  data: RowIntroUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowTitleUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowTitleWhereUniqueInput
  /** Document to update */
  data: RowTitleUpdateInput
}

export type AwardUpsertLocalizationInput = {
  update: AwardUpdateLocalizationDataInput
  create: AwardCreateLocalizationDataInput
  locale: Locale
}

export type LinkInternal = Node & {
  __typename?: 'LinkInternal'
  /** System stage field */
  stage: Stage
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<LinkInternal>
  /** Get the document in other stages */
  documentInStages: Array<LinkInternal>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  title: Scalars['String']
  page?: Maybe<Page>
  description?: Maybe<RichText>
  rowPeopleWithText: Array<RowPeopleWithText>
  rowHeroVideo: Array<RowHero>
  rowRecentBlogPost?: Maybe<RowRecentBlogPost>
  footerContactLink: Array<Footer>
  footerAdditionalLinks: Array<Footer>
  footerLinks: Array<Footer>
  footerReviewLink: Array<Footer>
  rowLinksWithText: Array<RowLinksWithText>
  paperCard?: Maybe<PaperCard>
  rowModulePage?: Maybe<RowModulePage>
  /** List of LinkInternal versions */
  history: Array<Version>
}

export type LinkInternalLocalizationsArgs = {
  locales?: Array<Locale>
  includeCurrent?: Scalars['Boolean']
}

export type LinkInternalDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type LinkInternalCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type LinkInternalUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type LinkInternalPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type LinkInternalPageArgs = {
  locales?: Maybe<Array<Locale>>
}

export type LinkInternalRowPeopleWithTextArgs = {
  where?: Maybe<RowPeopleWithTextWhereInput>
  orderBy?: Maybe<RowPeopleWithTextOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type LinkInternalRowHeroVideoArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type LinkInternalRowRecentBlogPostArgs = {
  locales?: Maybe<Array<Locale>>
}

export type LinkInternalFooterContactLinkArgs = {
  where?: Maybe<FooterWhereInput>
  orderBy?: Maybe<FooterOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type LinkInternalFooterAdditionalLinksArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type LinkInternalFooterLinksArgs = {
  where?: Maybe<FooterWhereInput>
  orderBy?: Maybe<FooterOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type LinkInternalFooterReviewLinkArgs = {
  where?: Maybe<FooterWhereInput>
  orderBy?: Maybe<FooterOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type LinkInternalRowLinksWithTextArgs = {
  where?: Maybe<RowLinksWithTextWhereInput>
  orderBy?: Maybe<RowLinksWithTextOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type LinkInternalPaperCardArgs = {
  locales?: Maybe<Array<Locale>>
}

export type LinkInternalRowModulePageArgs = {
  locales?: Maybe<Array<Locale>>
}

export type LinkInternalHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type PageCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  url: Scalars['String']
  title: Scalars['String']
  metaTitle: Scalars['String']
  metaDescription: Scalars['String']
  releaseDate?: Maybe<Scalars['DateTime']>
}

export type RowHeroCreateManyInlineInput = {
  /** Create and connect multiple existing RowHero documents */
  create?: Maybe<Array<RowHeroCreateInput>>
  /** Connect multiple existing RowHero documents */
  connect?: Maybe<Array<RowHeroWhereUniqueInput>>
}

export type RowImageOrVideoUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: Maybe<Scalars['String']>
}

export type RowIpadVerticalOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'

export type RowLinksWithTextUpdateOneInlineInput = {
  /** Create and connect one RowLinksWithText document */
  create?: Maybe<RowLinksWithTextCreateInput>
  /** Update single RowLinksWithText document */
  update?: Maybe<RowLinksWithTextUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowLinksWithText document */
  upsert?: Maybe<RowLinksWithTextUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowLinksWithText document */
  connect?: Maybe<RowLinksWithTextWhereUniqueInput>
  /** Disconnect currently connected RowLinksWithText document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowLinksWithText document */
  delete?: Maybe<Scalars['Boolean']>
}

export type RowTitleUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowTitleWhereInput
  /** Update many input */
  data: RowTitleUpdateManyInput
}

export type RowIpadVerticalUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: Maybe<Scalars['String']>
}

export type RowIphoneWithTextUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowIphoneWithTextCreateLocalizationInput>>
  /** Localizations to update */
  update?: Maybe<Array<RowIphoneWithTextUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowIphoneWithTextUpsertLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
}

export type RowModulePageCreateOneInlineInput = {
  /** Create and connect one RowModulePage document */
  create?: Maybe<RowModulePageCreateInput>
  /** Connect one existing RowModulePage document */
  connect?: Maybe<RowModulePageWhereUniqueInput>
}

export type AssetOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'handle_ASC'
  | 'handle_DESC'
  | 'fileName_ASC'
  | 'fileName_DESC'
  | 'height_ASC'
  | 'height_DESC'
  | 'width_ASC'
  | 'width_DESC'
  | 'size_ASC'
  | 'size_DESC'
  | 'mimeType_ASC'
  | 'mimeType_DESC'
  | 'alt_ASC'
  | 'alt_DESC'

export type LinkInternalCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<LinkInternalCreateLocalizationInput>>
}

/** Identifies documents */
export type ContactFormManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ContactFormWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ContactFormWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ContactFormWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  name?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  name_not_ends_with?: Maybe<Scalars['String']>
  email?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  email_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  email_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  email_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  email_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  email_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  email_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  email_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  email_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  email_not_ends_with?: Maybe<Scalars['String']>
  phoneNumber?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  phoneNumber_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  phoneNumber_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  phoneNumber_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  phoneNumber_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  phoneNumber_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  phoneNumber_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  phoneNumber_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  phoneNumber_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  phoneNumber_not_ends_with?: Maybe<Scalars['String']>
  subject?: Maybe<ContactSubject>
  /** All values that are not equal to given value. */
  subject_not?: Maybe<ContactSubject>
  /** All values that are contained in given list. */
  subject_in?: Maybe<Array<ContactSubject>>
  /** All values that are not contained in given list. */
  subject_not_in?: Maybe<Array<ContactSubject>>
  message?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  message_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  message_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  message_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  message_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  message_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  message_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  message_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  message_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  message_not_ends_with?: Maybe<Scalars['String']>
}

export type LinkInternalConnectInput = {
  /** Document to connect */
  where: LinkInternalWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type PartnerConnectInput = {
  /** Document to connect */
  where: PartnerWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowCenteredTextUpdateManyInlineInput = {
  /** Create and connect multiple RowCenteredText documents */
  create?: Maybe<Array<RowCenteredTextCreateInput>>
  /** Connect multiple existing RowCenteredText documents */
  connect?: Maybe<Array<RowCenteredTextConnectInput>>
  /** Override currently-connected documents with multiple existing RowCenteredText documents */
  set?: Maybe<Array<RowCenteredTextWhereUniqueInput>>
  /** Update multiple RowCenteredText documents */
  update?: Maybe<Array<RowCenteredTextUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowCenteredText documents */
  upsert?: Maybe<Array<RowCenteredTextUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowCenteredText documents */
  disconnect?: Maybe<Array<RowCenteredTextWhereUniqueInput>>
  /** Delete multiple RowCenteredText documents */
  delete?: Maybe<Array<RowCenteredTextWhereUniqueInput>>
}

/** Input for a geolocation point with latitude and longitude */
export type LocationInput = {
  latitude: Scalars['Float']
  longitude: Scalars['Float']
}

/** Transformations for Documents */
export type DocumentTransformationInput = {
  /** Changes the output for the file. */
  output?: Maybe<DocumentOutputInput>
}

export type HeaderOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'

export type RowModuleCreateOneInlineInput = {
  /** Create and connect one RowModule document */
  create?: Maybe<RowModuleCreateInput>
  /** Connect one existing RowModule document */
  connect?: Maybe<RowModuleWhereUniqueInput>
}

export type RowQuoteCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  clientName: Scalars['String']
  clientTitle: Scalars['String']
  clientQuote: Scalars['String']
  functionalities: Scalars['RichTextAST']
  page?: Maybe<PageCreateManyInlineInput>
}

/** Identifies documents */
export type RowRecentBlogPostWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowRecentBlogPostWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowRecentBlogPostWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowRecentBlogPostWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  link?: Maybe<LinkInternalWhereInput>
  forceLocalization?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  forceLocalization_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  forceLocalization_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  forceLocalization_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  forceLocalization_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  forceLocalization_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  forceLocalization_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  forceLocalization_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  forceLocalization_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  forceLocalization_not_ends_with?: Maybe<Scalars['String']>
}

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo'
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>
  /** Number of items in the current page. */
  pageSize?: Maybe<Scalars['Int']>
}

/** References RowColumnThree record uniquely */
export type RowColumnThreeWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type RowImageSwiperUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowImageSwiperWhereInput
  /** Update many input */
  data: RowImageSwiperUpdateManyInput
}

export type RowIphoneWithTextUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowIphoneWithTextWhereUniqueInput
  /** Document to update */
  data: RowIphoneWithTextUpdateInput
}

export type RowCollaborationUpdateInput = {
  identifier?: Maybe<Scalars['String']>
  /** content input for default locale (nl) */
  content?: Maybe<Scalars['RichTextAST']>
  partnerList?: Maybe<ParnerListUpdateOneInlineInput>
  page?: Maybe<PageUpdateManyInlineInput>
  /** Manage document localizations */
  localizations?: Maybe<RowCollaborationUpdateLocalizationsInput>
}

/** Identifies documents */
export type FooterManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<FooterWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<FooterWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<FooterWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  links_every?: Maybe<LinkInternalWhereInput>
  links_some?: Maybe<LinkInternalWhereInput>
  links_none?: Maybe<LinkInternalWhereInput>
  contactLink?: Maybe<LinkInternalWhereInput>
  reviewsLink?: Maybe<LinkInternalWhereInput>
}

export type RowColumnTwoUpdateManyLocalizationInput = {
  data: RowColumnTwoUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowIntro = Node & {
  __typename?: 'RowIntro'
  /** System stage field */
  stage: Stage
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowIntro>
  /** Get the document in other stages */
  documentInStages: Array<RowIntro>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  content: RichText
  page: Array<Page>
  /** List of RowIntro versions */
  history: Array<Version>
}

export type RowIntroLocalizationsArgs = {
  locales?: Array<Locale>
  includeCurrent?: Scalars['Boolean']
}

export type RowIntroDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowIntroCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowIntroUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowIntroPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowIntroPageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowIntroHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowVacancy = Node & {
  __typename?: 'RowVacancy'
  /** System stage field */
  stage: Stage
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowVacancy>
  /** Get the document in other stages */
  documentInStages: Array<RowVacancy>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  vacancystatus?: Maybe<VacancyStatus>
  perks: Array<Scalars['String']>
  text: RichText
  pdf: Asset
  page: Array<Page>
  /** List of RowVacancy versions */
  history: Array<Version>
}

export type RowVacancyLocalizationsArgs = {
  locales?: Array<Locale>
  includeCurrent?: Scalars['Boolean']
}

export type RowVacancyDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowVacancyCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowVacancyUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowVacancyPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowVacancyPdfArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowVacancyPageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowVacancyHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type ContactFormUpsertInput = {
  /** Create document if it didn't exist */
  create: ContactFormCreateInput
  /** Update document if it exists */
  update: ContactFormUpdateInput
}

/** An edge in a connection. */
export type RowColumnTwoEdge = {
  __typename?: 'RowColumnTwoEdge'
  /** The item at the end of the edge. */
  node: RowColumnTwo
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowIconWithTextListUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowIconWithTextListCreateLocalizationInput>>
  /** Localizations to update */
  update?: Maybe<Array<RowIconWithTextListUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowIconWithTextListUpsertLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
}

/** Identifies documents */
export type RowQuoteManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowQuoteWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowQuoteWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowQuoteWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  clientName?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  clientName_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  clientName_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  clientName_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  clientName_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  clientName_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  clientName_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  clientName_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  clientName_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  clientName_not_ends_with?: Maybe<Scalars['String']>
  clientTitle?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  clientTitle_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  clientTitle_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  clientTitle_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  clientTitle_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  clientTitle_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  clientTitle_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  clientTitle_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  clientTitle_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  clientTitle_not_ends_with?: Maybe<Scalars['String']>
  clientQuote?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  clientQuote_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  clientQuote_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  clientQuote_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  clientQuote_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  clientQuote_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  clientQuote_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  clientQuote_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  clientQuote_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  clientQuote_not_ends_with?: Maybe<Scalars['String']>
}

export type RowRecentBlogPostUpdateLocalizationInput = {
  data: RowRecentBlogPostUpdateLocalizationDataInput
  locale: Locale
}

/** Identifies documents */
export type RowServiceListManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowServiceListWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowServiceListWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowServiceListWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identifier?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identifier_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identifier_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identifier_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identifier_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identifier_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identifier_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identifier_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identifier_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identifier_not_ends_with?: Maybe<Scalars['String']>
  services_every?: Maybe<ServiceWhereInput>
  services_some?: Maybe<ServiceWhereInput>
  services_none?: Maybe<ServiceWhereInput>
}

/** A connection to a list of items. */
export type RowColorBlockConnection = {
  __typename?: 'RowColorBlockConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowColorBlockEdge>
  aggregate: Aggregate
}

export type RowImageSwiperUpsertInput = {
  /** Create document if it didn't exist */
  create: RowImageSwiperCreateInput
  /** Update document if it exists */
  update: RowImageSwiperUpdateInput
}

/** A connection to a list of items. */
export type RowLineHorizontalConnection = {
  __typename?: 'RowLineHorizontalConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowLineHorizontalEdge>
  aggregate: Aggregate
}

export type RowColorBlockCreateOneInlineInput = {
  /** Create and connect one RowColorBlock document */
  create?: Maybe<RowColorBlockCreateInput>
  /** Connect one existing RowColorBlock document */
  connect?: Maybe<RowColorBlockWhereUniqueInput>
}

export type PageCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<PageCreateLocalizationInput>>
}

export type ReviewUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: ReviewWhereUniqueInput
  /** Document to update */
  data: ReviewUpdateInput
}

export type RowIntroUpsertInput = {
  /** Create document if it didn't exist */
  create: RowIntroCreateInput
  /** Update document if it exists */
  update: RowIntroUpdateInput
}

export type HeaderUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: HeaderWhereUniqueInput
  /** Upsert data */
  data: HeaderUpsertInput
}

export type RowColumnOneUpdateLocalizationInput = {
  data: RowColumnOneUpdateLocalizationDataInput
  locale: Locale
}

export type RowHeroUpdateInput = {
  identity?: Maybe<Scalars['String']>
  asset?: Maybe<AssetUpdateOneInlineInput>
  /** text input for default locale (nl) */
  text?: Maybe<Scalars['RichTextAST']>
  links?: Maybe<RowHeroVideoLinksUpdateManyInlineInput>
  contactPeople?: Maybe<PersonUpdateManyInlineInput>
  page?: Maybe<PageUpdateManyInlineInput>
  /** Manage document localizations */
  localizations?: Maybe<RowHeroUpdateLocalizationsInput>
}

export type RowImageOrVideoUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowImageOrVideoWhereUniqueInput
  /** Document to update */
  data: RowImageOrVideoUpdateInput
}

export type RowIpadHorizontalUpdateInput = {
  backgroundImage?: Maybe<AssetUpdateOneInlineInput>
  iPadContent?: Maybe<AssetUpdateOneInlineInput>
  page?: Maybe<PageUpdateManyInlineInput>
}

export type PageCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** url input for default locale (nl) */
  url: Scalars['String']
  /** title input for default locale (nl) */
  title: Scalars['String']
  /** metaTitle input for default locale (nl) */
  metaTitle: Scalars['String']
  /** metaDescription input for default locale (nl) */
  metaDescription: Scalars['String']
  metaRobots: MetaRobots
  content?: Maybe<PageContentCreateManyInlineInput>
  author?: Maybe<PersonCreateOneInlineInput>
  logo?: Maybe<AssetCreateOneInlineInput>
  /** releaseDate input for default locale (nl) */
  releaseDate?: Maybe<Scalars['DateTime']>
  asset?: Maybe<AssetCreateOneInlineInput>
  internalLink?: Maybe<LinkInternalCreateManyInlineInput>
  headerContact?: Maybe<HeaderCreateManyInlineInput>
  headerHome?: Maybe<HeaderCreateManyInlineInput>
  headerMenu?: Maybe<HeaderCreateManyInlineInput>
  rowServicesWithText?: Maybe<RowLinksWithTextCreateManyInlineInput>
  service?: Maybe<ServiceCreateOneInlineInput>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<PageCreateLocalizationsInput>
}

export type RowModulePageUpdateOneInlineInput = {
  /** Create and connect one RowModulePage document */
  create?: Maybe<RowModulePageCreateInput>
  /** Update single RowModulePage document */
  update?: Maybe<RowModulePageUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowModulePage document */
  upsert?: Maybe<RowModulePageUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowModulePage document */
  connect?: Maybe<RowModulePageWhereUniqueInput>
  /** Disconnect currently connected RowModulePage document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowModulePage document */
  delete?: Maybe<Scalars['Boolean']>
}

export type RowQuoteUpdateManyInlineInput = {
  /** Create and connect multiple RowQuote documents */
  create?: Maybe<Array<RowQuoteCreateInput>>
  /** Connect multiple existing RowQuote documents */
  connect?: Maybe<Array<RowQuoteConnectInput>>
  /** Override currently-connected documents with multiple existing RowQuote documents */
  set?: Maybe<Array<RowQuoteWhereUniqueInput>>
  /** Update multiple RowQuote documents */
  update?: Maybe<Array<RowQuoteUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowQuote documents */
  upsert?: Maybe<Array<RowQuoteUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowQuote documents */
  disconnect?: Maybe<Array<RowQuoteWhereUniqueInput>>
  /** Delete multiple RowQuote documents */
  delete?: Maybe<Array<RowQuoteWhereUniqueInput>>
}

export type RowIframeUpdateManyLocalizationDataInput = {
  title?: Maybe<Scalars['String']>
}

export type Header = Node & {
  __typename?: 'Header'
  /** System stage field */
  stage: Stage
  /** Get the document in other stages */
  documentInStages: Array<Header>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  menuPages: Array<Page>
  homePage?: Maybe<Page>
  contactPage?: Maybe<Page>
  contactAvatar?: Maybe<Person>
  /** List of Header versions */
  history: Array<Version>
}

export type HeaderDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type HeaderMenuPagesArgs = {
  where?: Maybe<PageWhereInput>
  orderBy?: Maybe<PageOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type HeaderHomePageArgs = {
  locales?: Maybe<Array<Locale>>
}

export type HeaderContactPageArgs = {
  locales?: Maybe<Array<Locale>>
}

export type HeaderContactAvatarArgs = {
  locales?: Maybe<Array<Locale>>
}

export type HeaderHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type LinkInternalCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  title: Scalars['String']
  description?: Maybe<Scalars['RichTextAST']>
}

export type CompanyUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: CompanyWhereUniqueInput
  /** Document to update */
  data: CompanyUpdateInput
}

/** An edge in a connection. */
export type RowCollaborationEdge = {
  __typename?: 'RowCollaborationEdge'
  /** The item at the end of the edge. */
  node: RowCollaboration
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowColumnOneUpdateLocalizationDataInput = {
  colOne?: Maybe<Scalars['RichTextAST']>
}

export type RowCompanySliderUpdateInput = {
  identity?: Maybe<Scalars['String']>
  companies?: Maybe<CompanyUpdateManyInlineInput>
  page?: Maybe<PageUpdateManyInlineInput>
}

export type RowHeroUpdateLocalizationInput = {
  data: RowHeroUpdateLocalizationDataInput
  locale: Locale
}

export type RowIframeCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** title input for default locale (nl) */
  title: Scalars['String']
  iframeUrl: Scalars['String']
  page?: Maybe<PageCreateManyInlineInput>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowIframeCreateLocalizationsInput>
}

export type RowTitleCreateLocalizationInput = {
  /** Localization input */
  data: RowTitleCreateLocalizationDataInput
  locale: Locale
}

export type RowVacancyUpsertLocalizationInput = {
  update: RowVacancyUpdateLocalizationDataInput
  create: RowVacancyCreateLocalizationDataInput
  locale: Locale
}

export type LinkInternalUpdateManyInput = {
  /** title input for default locale (nl) */
  title?: Maybe<Scalars['String']>
  /** description input for default locale (nl) */
  description?: Maybe<Scalars['RichTextAST']>
  /** Optional updates to localizations */
  localizations?: Maybe<LinkInternalUpdateManyLocalizationsInput>
}

export type RowVacancyUpdateManyInput = {
  vacancystatus?: Maybe<VacancyStatus>
  /** perks input for default locale (nl) */
  perks?: Maybe<Array<Scalars['String']>>
  text?: Maybe<Scalars['RichTextAST']>
  /** Optional updates to localizations */
  localizations?: Maybe<RowVacancyUpdateManyLocalizationsInput>
}

export type RowImageOrVideoUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowImageOrVideoWhereUniqueInput
  /** Upsert data */
  data: RowImageOrVideoUpsertInput
}

export type RowModulePage = Node & {
  __typename?: 'RowModulePage'
  /** System stage field */
  stage: Stage
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowModulePage>
  /** Get the document in other stages */
  documentInStages: Array<RowModulePage>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  name: Scalars['String']
  description: RichText
  link?: Maybe<LinkInternal>
  page: Array<Page>
  /** List of RowModulePage versions */
  history: Array<Version>
}

export type RowModulePageLocalizationsArgs = {
  locales?: Array<Locale>
  includeCurrent?: Scalars['Boolean']
}

export type RowModulePageDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowModulePageCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowModulePageUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowModulePagePublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowModulePageLinkArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowModulePagePageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowModulePageHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowYoutubeVideoCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** videoId input for default locale (nl) */
  videoId: Scalars['String']
  title: Scalars['String']
  page?: Maybe<PageCreateManyInlineInput>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowYoutubeVideoCreateLocalizationsInput>
}

export type ContactFormOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'phoneNumber_ASC'
  | 'phoneNumber_DESC'
  | 'subject_ASC'
  | 'subject_DESC'
  | 'message_ASC'
  | 'message_DESC'

/** An edge in a connection. */
export type PageEdge = {
  __typename?: 'PageEdge'
  /** The item at the end of the edge. */
  node: Page
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type ParnerList = Node & {
  __typename?: 'ParnerList'
  /** System stage field */
  stage: Stage
  /** Get the document in other stages */
  documentInStages: Array<ParnerList>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  partners: Array<Partner>
  rowCollaboration: Array<RowCollaboration>
  /** List of ParnerList versions */
  history: Array<Version>
}

export type ParnerListDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type ParnerListPartnersArgs = {
  where?: Maybe<PartnerWhereInput>
  orderBy?: Maybe<PartnerOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type ParnerListRowCollaborationArgs = {
  where?: Maybe<RowCollaborationWhereInput>
  orderBy?: Maybe<RowCollaborationOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type ParnerListHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowColorBlockUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowColorBlockWhereUniqueInput
  /** Upsert data */
  data: RowColorBlockUpsertInput
}

export type RowColumnTwoCreateLocalizationInput = {
  /** Localization input */
  data: RowColumnTwoCreateLocalizationDataInput
  locale: Locale
}

export type RowImageSwiperUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: Maybe<Scalars['String']>
}

export type RowIpadHorizontalCreateOneInlineInput = {
  /** Create and connect one RowIpadHorizontal document */
  create?: Maybe<RowIpadHorizontalCreateInput>
  /** Connect one existing RowIpadHorizontal document */
  connect?: Maybe<RowIpadHorizontalWhereUniqueInput>
}

export type RowQuoteOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'clientName_ASC'
  | 'clientName_DESC'
  | 'clientTitle_ASC'
  | 'clientTitle_DESC'
  | 'clientQuote_ASC'
  | 'clientQuote_DESC'

export type FooterUpdateManyLocalizationInput = {
  data: FooterUpdateManyLocalizationDataInput
  locale: Locale
}

export type FooterAdditionalLinksCreateInput = {
  LinkInternal?: Maybe<LinkInternalCreateInput>
  LinkExternal?: Maybe<LinkExternalCreateInput>
}

export type RowYoutubeVideoUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowYoutubeVideoCreateLocalizationInput>>
  /** Localizations to update */
  update?: Maybe<Array<RowYoutubeVideoUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowYoutubeVideoUpsertLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
}

export type AwardCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** name input for default locale (nl) */
  name: Scalars['String']
  asset: AssetCreateOneInlineInput
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<AwardCreateLocalizationsInput>
}

export type ParnerListCreateOneInlineInput = {
  /** Create and connect one ParnerList document */
  create?: Maybe<ParnerListCreateInput>
  /** Connect one existing ParnerList document */
  connect?: Maybe<ParnerListWhereUniqueInput>
}

export type RowGoogleMapUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowGoogleMapWhereUniqueInput
  /** Document to update */
  data: RowGoogleMapUpdateInput
}

export type RowHeroUpdateManyLocalizationInput = {
  data: RowHeroUpdateManyLocalizationDataInput
  locale: Locale
}

export type _OrderDirection = 'asc' | 'desc'

export type RowColumnTwoUpsertLocalizationInput = {
  update: RowColumnTwoUpdateLocalizationDataInput
  create: RowColumnTwoCreateLocalizationDataInput
  locale: Locale
}

/** Identifies documents */
export type RowIphoneWithTextManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowIphoneWithTextWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowIphoneWithTextWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowIphoneWithTextWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  backgroundImageWithPhone?: Maybe<AssetWhereInput>
  iPhoneVideo?: Maybe<AssetWhereInput>
  themeImage?: Maybe<AssetWhereInput>
}

/** An edge in a connection. */
export type PaperCardEdge = {
  __typename?: 'PaperCardEdge'
  /** The item at the end of the edge. */
  node: PaperCard
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type PersonConnectInput = {
  /** Document to connect */
  where: PersonWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowColorSpeedBlockUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowColorSpeedBlockWhereUniqueInput
  /** Upsert data */
  data: RowColorSpeedBlockUpsertInput
}

export type RowGoogleMapUpdateManyInput = {
  /** address input for default locale (nl) */
  address?: Maybe<Scalars['RichTextAST']>
  /** businessInfo input for default locale (nl) */
  businessInfo?: Maybe<Scalars['RichTextAST']>
  location?: Maybe<Scalars['String']>
  /** Optional updates to localizations */
  localizations?: Maybe<RowGoogleMapUpdateManyLocalizationsInput>
}

export type RowIframeOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'iframeUrl_ASC'
  | 'iframeUrl_DESC'

export type RowIntroUpdateLocalizationInput = {
  data: RowIntroUpdateLocalizationDataInput
  locale: Locale
}

export type RowRecentBlogPostConnectInput = {
  /** Document to connect */
  where: RowRecentBlogPostWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowVacancyCreateLocalizationInput = {
  /** Localization input */
  data: RowVacancyCreateLocalizationDataInput
  locale: Locale
}

/** Identifies documents */
export type PersonManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<PersonWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<PersonWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<PersonWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  name?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  name_not_ends_with?: Maybe<Scalars['String']>
  avatar?: Maybe<AssetWhereInput>
  page_every?: Maybe<PageWhereInput>
  page_some?: Maybe<PageWhereInput>
  page_none?: Maybe<PageWhereInput>
  header_every?: Maybe<HeaderWhereInput>
  header_some?: Maybe<HeaderWhereInput>
  header_none?: Maybe<HeaderWhereInput>
  rowHero_every?: Maybe<RowHeroWhereInput>
  rowHero_some?: Maybe<RowHeroWhereInput>
  rowHero_none?: Maybe<RowHeroWhereInput>
}

/** Identifies documents */
export type RowLinksWithTextManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowLinksWithTextWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowLinksWithTextWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowLinksWithTextWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  pages_every?: Maybe<PageWhereInput>
  pages_some?: Maybe<PageWhereInput>
  pages_none?: Maybe<PageWhereInput>
  links_every?: Maybe<LinkInternalWhereInput>
  links_some?: Maybe<LinkInternalWhereInput>
  links_none?: Maybe<LinkInternalWhereInput>
}

export type RowIntroCreateLocalizationInput = {
  /** Localization input */
  data: RowIntroCreateLocalizationDataInput
  locale: Locale
}

export type RowIconWithTextListCreateLocalizationInput = {
  /** Localization input */
  data: RowIconWithTextListCreateLocalizationDataInput
  locale: Locale
}

/** Identifies documents */
export type RowIpadVerticalManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowIpadVerticalWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowIpadVerticalWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowIpadVerticalWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  backgroundImage?: Maybe<AssetWhereInput>
  iPadContent?: Maybe<AssetWhereInput>
}

/** An edge in a connection. */
export type RowIphoneWithTextEdge = {
  __typename?: 'RowIphoneWithTextEdge'
  /** The item at the end of the edge. */
  node: RowIphoneWithText
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type FooterAdditionalLinksUpdateManyWithNestedWhereInput = {
  LinkInternal?: Maybe<LinkInternalUpdateManyWithNestedWhereInput>
  LinkExternal?: Maybe<LinkExternalUpdateManyWithNestedWhereInput>
}

/** Identifies documents */
export type PersonWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<PersonWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<PersonWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<PersonWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  name?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  name_not_ends_with?: Maybe<Scalars['String']>
  avatar?: Maybe<AssetWhereInput>
  page_every?: Maybe<PageWhereInput>
  page_some?: Maybe<PageWhereInput>
  page_none?: Maybe<PageWhereInput>
  header_every?: Maybe<HeaderWhereInput>
  header_some?: Maybe<HeaderWhereInput>
  header_none?: Maybe<HeaderWhereInput>
  rowHero_every?: Maybe<RowHeroWhereInput>
  rowHero_some?: Maybe<RowHeroWhereInput>
  rowHero_none?: Maybe<RowHeroWhereInput>
}

export type ParnerListCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  partners?: Maybe<PartnerCreateManyInlineInput>
  rowCollaboration?: Maybe<RowCollaborationCreateManyInlineInput>
}

export type RowHeroUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowHeroWhereUniqueInput
  /** Upsert data */
  data: RowHeroUpsertInput
}

export type RowPeopleWithTextUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowPeopleWithTextWhereUniqueInput
  /** Upsert data */
  data: RowPeopleWithTextUpsertInput
}

export type LinkExternalUpsertLocalizationInput = {
  update: LinkExternalUpdateLocalizationDataInput
  create: LinkExternalCreateLocalizationDataInput
  locale: Locale
}

/** Identifies documents */
export type RowIframeWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowIframeWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowIframeWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowIframeWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  title?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  title_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  title_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  title_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  title_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  title_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  title_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  title_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  title_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  title_not_ends_with?: Maybe<Scalars['String']>
  iframeUrl?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  iframeUrl_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  iframeUrl_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  iframeUrl_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  iframeUrl_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  iframeUrl_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  iframeUrl_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  iframeUrl_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  iframeUrl_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  iframeUrl_not_ends_with?: Maybe<Scalars['String']>
}

export type RowIframeUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowIframeCreateLocalizationInput>>
  /** Localizations to update */
  update?: Maybe<Array<RowIframeUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowIframeUpsertLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
}

/** Identifies documents */
export type RowIpadVerticalWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowIpadVerticalWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowIpadVerticalWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowIpadVerticalWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  backgroundImage?: Maybe<AssetWhereInput>
  iPadContent?: Maybe<AssetWhereInput>
}

export type RowLinksWithTextCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  text: Scalars['RichTextAST']
}

export type RowYoutubeVideoUpdateManyLocalizationInput = {
  data: RowYoutubeVideoUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowExplanationCreateManyInlineInput = {
  /** Create and connect multiple existing RowExplanation documents */
  create?: Maybe<Array<RowExplanationCreateInput>>
  /** Connect multiple existing RowExplanation documents */
  connect?: Maybe<Array<RowExplanationWhereUniqueInput>>
}

export type RowHeroUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowHeroCreateLocalizationInput>>
  /** Localizations to update */
  update?: Maybe<Array<RowHeroUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowHeroUpsertLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
}

export type RowIntroUpdateManyLocalizationDataInput = {
  content?: Maybe<Scalars['RichTextAST']>
}

/** A connection to a list of items. */
export type RowLaptopWithTextConnection = {
  __typename?: 'RowLaptopWithTextConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowLaptopWithTextEdge>
  aggregate: Aggregate
}

export type RowModulePageUpdateManyInlineInput = {
  /** Create and connect multiple RowModulePage documents */
  create?: Maybe<Array<RowModulePageCreateInput>>
  /** Connect multiple existing RowModulePage documents */
  connect?: Maybe<Array<RowModulePageConnectInput>>
  /** Override currently-connected documents with multiple existing RowModulePage documents */
  set?: Maybe<Array<RowModulePageWhereUniqueInput>>
  /** Update multiple RowModulePage documents */
  update?: Maybe<Array<RowModulePageUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowModulePage documents */
  upsert?: Maybe<Array<RowModulePageUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowModulePage documents */
  disconnect?: Maybe<Array<RowModulePageWhereUniqueInput>>
  /** Delete multiple RowModulePage documents */
  delete?: Maybe<Array<RowModulePageWhereUniqueInput>>
}

export type AwardCreateManyInlineInput = {
  /** Create and connect multiple existing Award documents */
  create?: Maybe<Array<AwardCreateInput>>
  /** Connect multiple existing Award documents */
  connect?: Maybe<Array<AwardWhereUniqueInput>>
}

export type PersonCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  name: Scalars['String']
  avatar: AssetCreateOneInlineInput
  page?: Maybe<PageCreateManyInlineInput>
  header?: Maybe<HeaderCreateManyInlineInput>
  rowHero?: Maybe<RowHeroCreateManyInlineInput>
}

export type RowCollaborationCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  identifier: Scalars['String']
  /** content input for default locale (nl) */
  content: Scalars['RichTextAST']
  partnerList?: Maybe<ParnerListCreateOneInlineInput>
  page?: Maybe<PageCreateManyInlineInput>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowCollaborationCreateLocalizationsInput>
}

export type RowIframeCreateLocalizationInput = {
  /** Localization input */
  data: RowIframeCreateLocalizationDataInput
  locale: Locale
}

/** An edge in a connection. */
export type RowLinksWithTextEdge = {
  __typename?: 'RowLinksWithTextEdge'
  /** The item at the end of the edge. */
  node: RowLinksWithText
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowPhonesSliderCreateOneInlineInput = {
  /** Create and connect one RowPhonesSlider document */
  create?: Maybe<RowPhonesSliderCreateInput>
  /** Connect one existing RowPhonesSlider document */
  connect?: Maybe<RowPhonesSliderWhereUniqueInput>
}

export type CompanyUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: CompanyWhereInput
  /** Update many input */
  data: CompanyUpdateManyInput
}

/** Identifies documents */
export type RowColorBlockManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowColorBlockWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowColorBlockWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowColorBlockWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identifier?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identifier_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identifier_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identifier_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identifier_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identifier_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identifier_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identifier_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identifier_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identifier_not_ends_with?: Maybe<Scalars['String']>
  blockTitle?: Maybe<RowTitleWhereInput>
}

/** References RowColumnOne record uniquely */
export type RowColumnOneWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type RowColumnOneCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  rowColorBlock?: Maybe<RowColorBlockCreateOneInlineInput>
  identity: Scalars['String']
  /** colOne input for default locale (nl) */
  colOne: Scalars['RichTextAST']
  colOneIcon?: Maybe<AssetCreateOneInlineInput>
  page?: Maybe<PageCreateManyInlineInput>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowColumnOneCreateLocalizationsInput>
}

export type RowColumnOneUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowColumnOneWhereUniqueInput
  /** Upsert data */
  data: RowColumnOneUpsertInput
}

export type RowIframeUpdateInput = {
  /** title input for default locale (nl) */
  title?: Maybe<Scalars['String']>
  iframeUrl?: Maybe<Scalars['String']>
  page?: Maybe<PageUpdateManyInlineInput>
  /** Manage document localizations */
  localizations?: Maybe<RowIframeUpdateLocalizationsInput>
}

/** An edge in a connection. */
export type RowTitleEdge = {
  __typename?: 'RowTitleEdge'
  /** The item at the end of the edge. */
  node: RowTitle
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type FooterAdditionalLinksUpdateOneInlineInput = {
  /** Create and connect one FooterAdditionalLinks document */
  create?: Maybe<FooterAdditionalLinksCreateInput>
  /** Update single FooterAdditionalLinks document */
  update?: Maybe<FooterAdditionalLinksUpdateWithNestedWhereUniqueInput>
  /** Upsert single FooterAdditionalLinks document */
  upsert?: Maybe<FooterAdditionalLinksUpsertWithNestedWhereUniqueInput>
  /** Connect existing FooterAdditionalLinks document */
  connect?: Maybe<FooterAdditionalLinksWhereUniqueInput>
  /** Disconnect currently connected FooterAdditionalLinks document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected FooterAdditionalLinks document */
  delete?: Maybe<Scalars['Boolean']>
}

export type _RelationKind = 'regular' | 'union'

export type RowGoogleMapUpdateLocalizationInput = {
  data: RowGoogleMapUpdateLocalizationDataInput
  locale: Locale
}

export type RowPeopleWithTextCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowPeopleWithTextCreateLocalizationInput>>
}

export type RowColumnBoxedConnectInput = {
  /** Document to connect */
  where: RowColumnBoxedWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowIphoneWithTextUpdateOneInlineInput = {
  /** Create and connect one RowIphoneWithText document */
  create?: Maybe<RowIphoneWithTextCreateInput>
  /** Update single RowIphoneWithText document */
  update?: Maybe<RowIphoneWithTextUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowIphoneWithText document */
  upsert?: Maybe<RowIphoneWithTextUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowIphoneWithText document */
  connect?: Maybe<RowIphoneWithTextWhereUniqueInput>
  /** Disconnect currently connected RowIphoneWithText document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowIphoneWithText document */
  delete?: Maybe<Scalars['Boolean']>
}

/** References RowLaptop record uniquely */
export type RowLaptopWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

export type AwardUpdateManyLocalizationInput = {
  data: AwardUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowGoogleMapUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowGoogleMapUpdateManyLocalizationInput>>
}

export type ReviewUpsertInput = {
  /** Create document if it didn't exist */
  create: ReviewCreateInput
  /** Update document if it exists */
  update: ReviewUpdateInput
}

export type RowImageOrVideoUpsertInput = {
  /** Create document if it didn't exist */
  create: RowImageOrVideoCreateInput
  /** Update document if it exists */
  update: RowImageOrVideoUpdateInput
}

export type RowIpadVerticalUpsertInput = {
  /** Create document if it didn't exist */
  create: RowIpadVerticalCreateInput
  /** Update document if it exists */
  update: RowIpadVerticalUpdateInput
}

export type RowServiceList = Node & {
  __typename?: 'RowServiceList'
  /** System stage field */
  stage: Stage
  /** Get the document in other stages */
  documentInStages: Array<RowServiceList>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  identifier: Scalars['String']
  services: Array<Service>
  page: Array<Page>
  /** List of RowServiceList versions */
  history: Array<Version>
}

export type RowServiceListDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowServiceListServicesArgs = {
  where?: Maybe<ServiceWhereInput>
  orderBy?: Maybe<ServiceOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowServiceListPageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowServiceListHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowColumnThreeUpdateOneInlineInput = {
  /** Create and connect one RowColumnThree document */
  create?: Maybe<RowColumnThreeCreateInput>
  /** Update single RowColumnThree document */
  update?: Maybe<RowColumnThreeUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowColumnThree document */
  upsert?: Maybe<RowColumnThreeUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowColumnThree document */
  connect?: Maybe<RowColumnThreeWhereUniqueInput>
  /** Disconnect currently connected RowColumnThree document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowColumnThree document */
  delete?: Maybe<Scalars['Boolean']>
}

/** References Partner record uniquely */
export type PartnerWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

export type RowIframeUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowIframeWhereUniqueInput
  /** Document to update */
  data: RowIframeUpdateInput
}

export type RowIpadVerticalConnectInput = {
  /** Document to connect */
  where: RowIpadVerticalWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type AssetCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  handle: Scalars['String']
  fileName: Scalars['String']
  height?: Maybe<Scalars['Float']>
  width?: Maybe<Scalars['Float']>
  size?: Maybe<Scalars['Float']>
  mimeType?: Maybe<Scalars['String']>
  /** alt input for default locale (nl) */
  alt?: Maybe<Scalars['String']>
  personAvatar?: Maybe<PersonCreateManyInlineInput>
  companyLogo?: Maybe<CompanyCreateManyInlineInput>
  rowColumnThreeColOneIcon?: Maybe<RowColumnThreeCreateManyInlineInput>
  rowColumnThreeColTwoIcon?: Maybe<RowColumnThreeCreateManyInlineInput>
  rowColumnThreeColThreeIcon?: Maybe<RowColumnThreeCreateManyInlineInput>
  rowColumnOneColOneIcon?: Maybe<RowColumnOneCreateManyInlineInput>
  rowHeroAsset?: Maybe<RowHeroCreateManyInlineInput>
  pageAsset?: Maybe<PageCreateManyInlineInput>
  rowColumnTwoColOneIcon?: Maybe<RowColumnTwoCreateManyInlineInput>
  rowColumnTwoColTwoIcon?: Maybe<RowColumnTwoCreateManyInlineInput>
  awardAsset?: Maybe<AwardCreateManyInlineInput>
  rowOneIconRowIconWithTextList?: Maybe<RowIconWithTextListCreateManyInlineInput>
  rowTwoIconRowIconWithTextList?: Maybe<RowIconWithTextListCreateManyInlineInput>
  rowThreeIconRowIconWithTextList?: Maybe<RowIconWithTextListCreateManyInlineInput>
  rowFourIconRowIconWithTextList?: Maybe<RowIconWithTextListCreateManyInlineInput>
  rowFiveIconRowIconWithTextList?: Maybe<RowIconWithTextListCreateManyInlineInput>
  rowSixIconRowIconWithTextList?: Maybe<RowIconWithTextListCreateManyInlineInput>
  rowIpadHorizontalBackgroundImage?: Maybe<RowIpadHorizontalCreateManyInlineInput>
  rowIpadHorizontalIPadContent?: Maybe<RowIpadHorizontalCreateManyInlineInput>
  rowIphoneWithTextBackgroundImage?: Maybe<RowIphoneWithTextCreateManyInlineInput>
  rowIphoneWithTextIPhoneVideo?: Maybe<RowIphoneWithTextCreateManyInlineInput>
  rowIphoneWithTextThemeImage?: Maybe<RowIphoneWithTextCreateManyInlineInput>
  rowIpadVerticalBackgroundimage?: Maybe<RowIpadVerticalCreateManyInlineInput>
  rowIpadVerticalIpadcontent?: Maybe<RowIpadVerticalCreateManyInlineInput>
  rowLaptopBackgroundimage?: Maybe<RowLaptopCreateManyInlineInput>
  rowLaptopLaptopcontent?: Maybe<RowLaptopCreateManyInlineInput>
  rowVacancyPdf?: Maybe<RowVacancyCreateManyInlineInput>
  rowImageOrVideoAsset?: Maybe<RowImageOrVideoCreateManyInlineInput>
  rowLaptopWithTextBackgroundImage?: Maybe<RowLaptopWithTextCreateManyInlineInput>
  rowLaptopWithTextLaptopContent?: Maybe<RowLaptopWithTextCreateManyInlineInput>
  rowPhonesSliderPhoneOneContent?: Maybe<RowPhonesSliderCreateManyInlineInput>
  rowPhonesSliderPhoneTwoContent?: Maybe<RowPhonesSliderCreateManyInlineInput>
  rowPhonesSliderPhoneThreeContent?: Maybe<RowPhonesSliderCreateManyInlineInput>
  rowPhonesSliderBackgroundImage?: Maybe<RowPhonesSliderCreateManyInlineInput>
  pageLogo?: Maybe<PageCreateManyInlineInput>
  partnerLogo?: Maybe<PartnerCreateManyInlineInput>
  paperCardHeaderBanner?: Maybe<PaperCardCreateManyInlineInput>
  rowImageSwiperAsset?: Maybe<RowImageSwiperCreateManyInlineInput>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<AssetCreateLocalizationsInput>
}

/** References Asset record uniquely */
export type AssetWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

/** An edge in a connection. */
export type RowColorSpeedBlockEdge = {
  __typename?: 'RowColorSpeedBlockEdge'
  /** The item at the end of the edge. */
  node: RowColorSpeedBlock
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

/** Identifies documents */
export type RowIconWithTextListManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowIconWithTextListWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowIconWithTextListWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowIconWithTextListWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  rowOneIcon?: Maybe<AssetWhereInput>
  rowTwoIcon?: Maybe<AssetWhereInput>
  rowThreeIcon?: Maybe<AssetWhereInput>
  rowFourIcon?: Maybe<AssetWhereInput>
  rowFiveIcon?: Maybe<AssetWhereInput>
  rowSixIcon?: Maybe<AssetWhereInput>
}

export type RowLaptopWithTextUpdateManyInlineInput = {
  /** Create and connect multiple RowLaptopWithText documents */
  create?: Maybe<Array<RowLaptopWithTextCreateInput>>
  /** Connect multiple existing RowLaptopWithText documents */
  connect?: Maybe<Array<RowLaptopWithTextConnectInput>>
  /** Override currently-connected documents with multiple existing RowLaptopWithText documents */
  set?: Maybe<Array<RowLaptopWithTextWhereUniqueInput>>
  /** Update multiple RowLaptopWithText documents */
  update?: Maybe<Array<RowLaptopWithTextUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowLaptopWithText documents */
  upsert?: Maybe<Array<RowLaptopWithTextUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowLaptopWithText documents */
  disconnect?: Maybe<Array<RowLaptopWithTextWhereUniqueInput>>
  /** Delete multiple RowLaptopWithText documents */
  delete?: Maybe<Array<RowLaptopWithTextWhereUniqueInput>>
}

export type RowRecentBlogPostUpsertInput = {
  /** Create document if it didn't exist */
  create: RowRecentBlogPostCreateInput
  /** Update document if it exists */
  update: RowRecentBlogPostUpdateInput
}

export type UnpublishLocaleInput = {
  /** Locales to unpublish */
  locale: Locale
  /** Stages to unpublish selected locales from */
  stages: Array<Stage>
}

export type LinkInternalUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: LinkInternalWhereUniqueInput
  /** Upsert data */
  data: LinkInternalUpsertInput
}

export type RowIntroUpdateOneInlineInput = {
  /** Create and connect one RowIntro document */
  create?: Maybe<RowIntroCreateInput>
  /** Update single RowIntro document */
  update?: Maybe<RowIntroUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowIntro document */
  upsert?: Maybe<RowIntroUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowIntro document */
  connect?: Maybe<RowIntroWhereUniqueInput>
  /** Disconnect currently connected RowIntro document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowIntro document */
  delete?: Maybe<Scalars['Boolean']>
}

/** An edge in a connection. */
export type RowIpadVerticalEdge = {
  __typename?: 'RowIpadVerticalEdge'
  /** The item at the end of the edge. */
  node: RowIpadVertical
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowLineHorizontalUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowLineHorizontalWhereUniqueInput
  /** Document to update */
  data: RowLineHorizontalUpdateInput
}

/** Identifies documents */
export type RowTitleWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowTitleWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowTitleWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowTitleWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  rowColorBlock?: Maybe<RowColorSpeedBlockWhereInput>
  rowColorBlockTitle?: Maybe<RowColorBlockWhereInput>
}

export type LinkExternalCreateLocalizationInput = {
  /** Localization input */
  data: LinkExternalCreateLocalizationDataInput
  locale: Locale
}

export type RowGoogleMapCreateLocalizationInput = {
  /** Localization input */
  data: RowGoogleMapCreateLocalizationDataInput
  locale: Locale
}

/** Identifies documents */
export type RowLaptopWithTextWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowLaptopWithTextWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowLaptopWithTextWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowLaptopWithTextWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  backgroundImage?: Maybe<AssetWhereInput>
  laptopContent?: Maybe<AssetWhereInput>
}

export type RowHeroVideoLinksConnectInput = {
  LinkExternal?: Maybe<LinkExternalConnectInput>
  LinkInternal?: Maybe<LinkInternalConnectInput>
}

export type CompanyOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'name_ASC'
  | 'name_DESC'

/** References Footer record uniquely */
export type FooterWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type RowColumnTwoUpdateManyInlineInput = {
  /** Create and connect multiple RowColumnTwo documents */
  create?: Maybe<Array<RowColumnTwoCreateInput>>
  /** Connect multiple existing RowColumnTwo documents */
  connect?: Maybe<Array<RowColumnTwoConnectInput>>
  /** Override currently-connected documents with multiple existing RowColumnTwo documents */
  set?: Maybe<Array<RowColumnTwoWhereUniqueInput>>
  /** Update multiple RowColumnTwo documents */
  update?: Maybe<Array<RowColumnTwoUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowColumnTwo documents */
  upsert?: Maybe<Array<RowColumnTwoUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowColumnTwo documents */
  disconnect?: Maybe<Array<RowColumnTwoWhereUniqueInput>>
  /** Delete multiple RowColumnTwo documents */
  delete?: Maybe<Array<RowColumnTwoWhereUniqueInput>>
}

export type RowHeroOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'

export type RowImageOrVideoUpdateInput = {
  asset?: Maybe<AssetUpdateOneInlineInput>
  page?: Maybe<PageUpdateManyInlineInput>
}

export type RowYoutubeVideoUpdateLocalizationDataInput = {
  videoId?: Maybe<Scalars['String']>
}

/** Identifies documents */
export type ServiceWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ServiceWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ServiceWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ServiceWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  page?: Maybe<PageWhereInput>
  rowServiceList_every?: Maybe<RowServiceListWhereInput>
  rowServiceList_some?: Maybe<RowServiceListWhereInput>
  rowServiceList_none?: Maybe<RowServiceListWhereInput>
}

/** Representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba() */
export type Rgba = {
  __typename?: 'RGBA'
  r: Scalars['RGBAHue']
  g: Scalars['RGBAHue']
  b: Scalars['RGBAHue']
  a: Scalars['RGBATransparency']
}

export type RowIconWithTextListCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowIconWithTextListCreateLocalizationInput>>
}

export type RowImageOrVideoUpdateManyInlineInput = {
  /** Create and connect multiple RowImageOrVideo documents */
  create?: Maybe<Array<RowImageOrVideoCreateInput>>
  /** Connect multiple existing RowImageOrVideo documents */
  connect?: Maybe<Array<RowImageOrVideoConnectInput>>
  /** Override currently-connected documents with multiple existing RowImageOrVideo documents */
  set?: Maybe<Array<RowImageOrVideoWhereUniqueInput>>
  /** Update multiple RowImageOrVideo documents */
  update?: Maybe<Array<RowImageOrVideoUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowImageOrVideo documents */
  upsert?: Maybe<Array<RowImageOrVideoUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowImageOrVideo documents */
  disconnect?: Maybe<Array<RowImageOrVideoWhereUniqueInput>>
  /** Delete multiple RowImageOrVideo documents */
  delete?: Maybe<Array<RowImageOrVideoWhereUniqueInput>>
}

export type RowIphoneWithTextUpdateLocalizationInput = {
  data: RowIphoneWithTextUpdateLocalizationDataInput
  locale: Locale
}

/** Identifies documents */
export type RowLaptopWithTextManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowLaptopWithTextWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowLaptopWithTextWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowLaptopWithTextWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  backgroundImage?: Maybe<AssetWhereInput>
  laptopContent?: Maybe<AssetWhereInput>
}

/** References RowLaptopWithText record uniquely */
export type RowLaptopWithTextWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

export type RowLineHorizontalConnectInput = {
  /** Document to connect */
  where: RowLineHorizontalWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowServiceListUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowServiceListWhereUniqueInput
  /** Document to update */
  data: RowServiceListUpdateInput
}

export type FooterUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<FooterCreateLocalizationInput>>
  /** Localizations to update */
  update?: Maybe<Array<FooterUpdateLocalizationInput>>
  upsert?: Maybe<Array<FooterUpsertLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
}

export type FooterUpdateInput = {
  identity?: Maybe<Scalars['String']>
  links?: Maybe<LinkInternalUpdateManyInlineInput>
  contactLink?: Maybe<LinkInternalUpdateOneInlineInput>
  /** text input for default locale (nl) */
  text?: Maybe<Scalars['RichTextAST']>
  /** contact input for default locale (nl) */
  contact?: Maybe<Scalars['RichTextAST']>
  /** address input for default locale (nl) */
  address?: Maybe<Scalars['RichTextAST']>
  reviewsLink?: Maybe<LinkInternalUpdateOneInlineInput>
  additionalLinks?: Maybe<FooterAdditionalLinksUpdateManyInlineInput>
  /** Manage document localizations */
  localizations?: Maybe<FooterUpdateLocalizationsInput>
}

export type FooterUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: FooterWhereUniqueInput
  /** Upsert data */
  data: FooterUpsertInput
}

export type PaperCardCreateManyInlineInput = {
  /** Create and connect multiple existing PaperCard documents */
  create?: Maybe<Array<PaperCardCreateInput>>
  /** Connect multiple existing PaperCard documents */
  connect?: Maybe<Array<PaperCardWhereUniqueInput>>
}

export type RowColorBlockCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  identifier: Scalars['String']
  blockTitle?: Maybe<RowTitleCreateOneInlineInput>
  blockContent?: Maybe<RowColorBlockBlockContentCreateManyInlineInput>
  page?: Maybe<PageCreateManyInlineInput>
}

export type RowExplanationConnectInput = {
  /** Document to connect */
  where: RowExplanationWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowHeroUpdateManyInlineInput = {
  /** Create and connect multiple RowHero documents */
  create?: Maybe<Array<RowHeroCreateInput>>
  /** Connect multiple existing RowHero documents */
  connect?: Maybe<Array<RowHeroConnectInput>>
  /** Override currently-connected documents with multiple existing RowHero documents */
  set?: Maybe<Array<RowHeroWhereUniqueInput>>
  /** Update multiple RowHero documents */
  update?: Maybe<Array<RowHeroUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowHero documents */
  upsert?: Maybe<Array<RowHeroUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowHero documents */
  disconnect?: Maybe<Array<RowHeroWhereUniqueInput>>
  /** Delete multiple RowHero documents */
  delete?: Maybe<Array<RowHeroWhereUniqueInput>>
}

/** Identifies documents */
export type RowRecentBlogPostManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowRecentBlogPostWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowRecentBlogPostWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowRecentBlogPostWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  link?: Maybe<LinkInternalWhereInput>
}

export type _SystemDateTimeFieldVariation = 'base' | 'localization' | 'combined'

export type PageContentUpdateOneInlineInput = {
  /** Create and connect one PageContent document */
  create?: Maybe<PageContentCreateInput>
  /** Update single PageContent document */
  update?: Maybe<PageContentUpdateWithNestedWhereUniqueInput>
  /** Upsert single PageContent document */
  upsert?: Maybe<PageContentUpsertWithNestedWhereUniqueInput>
  /** Connect existing PageContent document */
  connect?: Maybe<PageContentWhereUniqueInput>
  /** Disconnect currently connected PageContent document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected PageContent document */
  delete?: Maybe<Scalars['Boolean']>
}

export type PersonUpdateManyInput = {
  name?: Maybe<Scalars['String']>
}

export type RowExplanationCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  identifier: Scalars['String']
  subject: Scalars['RichTextAST']
  explanation: Scalars['RichTextAST']
  page?: Maybe<PageCreateManyInlineInput>
  card?: Maybe<PaperCardCreateOneInlineInput>
}

export type RowIntroUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowIntroUpdateManyLocalizationInput>>
}

export type RowModulePageCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  description: Scalars['RichTextAST']
}

export type RowRecentBlogPostCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  /** header input for default locale (nl) */
  header?: Maybe<Scalars['RichTextAST']>
  link?: Maybe<LinkInternalCreateOneInlineInput>
  page?: Maybe<PageCreateManyInlineInput>
  /** forceLocalization input for default locale (nl) */
  forceLocalization?: Maybe<Scalars['String']>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowRecentBlogPostCreateLocalizationsInput>
}

/** A connection to a list of items. */
export type LinkExternalConnection = {
  __typename?: 'LinkExternalConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<LinkExternalEdge>
  aggregate: Aggregate
}

export type RowLinksWithTextUpdateLocalizationInput = {
  data: RowLinksWithTextUpdateLocalizationDataInput
  locale: Locale
}

export type RowIconWithTextListUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowIconWithTextListWhereUniqueInput
  /** Upsert data */
  data: RowIconWithTextListUpsertInput
}

export type RowImageOrVideoUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowImageOrVideoWhereInput
  /** Update many input */
  data: RowImageOrVideoUpdateManyInput
}

export type RowLaptopUpdateInput = {
  backgroundImage?: Maybe<AssetUpdateOneInlineInput>
  laptopContent?: Maybe<AssetUpdateOneInlineInput>
  page?: Maybe<PageUpdateManyInlineInput>
}

export type RowModulePageUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowModulePageWhereUniqueInput
  /** Document to update */
  data: RowModulePageUpdateInput
}

export type AwardUpdateInput = {
  /** name input for default locale (nl) */
  name?: Maybe<Scalars['String']>
  asset?: Maybe<AssetUpdateOneInlineInput>
  /** Manage document localizations */
  localizations?: Maybe<AwardUpdateLocalizationsInput>
}

/** Identifies documents */
export type RowCenteredTextWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowCenteredTextWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowCenteredTextWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowCenteredTextWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  name?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  name_not_ends_with?: Maybe<Scalars['String']>
}

/** An edge in a connection. */
export type RowColumnBoxedEdge = {
  __typename?: 'RowColumnBoxedEdge'
  /** The item at the end of the edge. */
  node: RowColumnBoxed
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowColumnThreeUpdateLocalizationInput = {
  data: RowColumnThreeUpdateLocalizationDataInput
  locale: Locale
}

export type RowIframeUpdateOneInlineInput = {
  /** Create and connect one RowIframe document */
  create?: Maybe<RowIframeCreateInput>
  /** Update single RowIframe document */
  update?: Maybe<RowIframeUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowIframe document */
  upsert?: Maybe<RowIframeUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowIframe document */
  connect?: Maybe<RowIframeWhereUniqueInput>
  /** Disconnect currently connected RowIframe document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowIframe document */
  delete?: Maybe<Scalars['Boolean']>
}

export type RowModuleUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowModuleCreateLocalizationInput>>
  /** Localizations to update */
  update?: Maybe<Array<RowModuleUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowModuleUpsertLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
}

export type FooterAdditionalLinksUpdateInput = {
  LinkInternal?: Maybe<LinkInternalUpdateInput>
  LinkExternal?: Maybe<LinkExternalUpdateInput>
}

export type PageUpsertLocalizationInput = {
  update: PageUpdateLocalizationDataInput
  create: PageCreateLocalizationDataInput
  locale: Locale
}

/** Identifies documents */
export type LinkInternalManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<LinkInternalWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<LinkInternalWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<LinkInternalWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  page?: Maybe<PageWhereInput>
  rowPeopleWithText_every?: Maybe<RowPeopleWithTextWhereInput>
  rowPeopleWithText_some?: Maybe<RowPeopleWithTextWhereInput>
  rowPeopleWithText_none?: Maybe<RowPeopleWithTextWhereInput>
  rowRecentBlogPost?: Maybe<RowRecentBlogPostWhereInput>
  footerContactLink_every?: Maybe<FooterWhereInput>
  footerContactLink_some?: Maybe<FooterWhereInput>
  footerContactLink_none?: Maybe<FooterWhereInput>
  footerLinks_every?: Maybe<FooterWhereInput>
  footerLinks_some?: Maybe<FooterWhereInput>
  footerLinks_none?: Maybe<FooterWhereInput>
  footerReviewLink_every?: Maybe<FooterWhereInput>
  footerReviewLink_some?: Maybe<FooterWhereInput>
  footerReviewLink_none?: Maybe<FooterWhereInput>
  rowLinksWithText_every?: Maybe<RowLinksWithTextWhereInput>
  rowLinksWithText_some?: Maybe<RowLinksWithTextWhereInput>
  rowLinksWithText_none?: Maybe<RowLinksWithTextWhereInput>
  paperCard?: Maybe<PaperCardWhereInput>
  rowModulePage?: Maybe<RowModulePageWhereInput>
}

export type RowGoogleMapUpsertLocalizationInput = {
  update: RowGoogleMapUpdateLocalizationDataInput
  create: RowGoogleMapCreateLocalizationDataInput
  locale: Locale
}

export type RowIntroUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowIntroWhereUniqueInput
  /** Upsert data */
  data: RowIntroUpsertInput
}

export type RowVacancyUpdateManyLocalizationDataInput = {
  perks?: Maybe<Array<Scalars['String']>>
}

export type FooterAdditionalLinksUpdateManyInlineInput = {
  /** Create and connect multiple FooterAdditionalLinks documents */
  create?: Maybe<Array<FooterAdditionalLinksCreateInput>>
  /** Connect multiple existing FooterAdditionalLinks documents */
  connect?: Maybe<Array<FooterAdditionalLinksConnectInput>>
  /** Override currently-connected documents with multiple existing FooterAdditionalLinks documents */
  set?: Maybe<Array<FooterAdditionalLinksWhereUniqueInput>>
  /** Update multiple FooterAdditionalLinks documents */
  update?: Maybe<Array<FooterAdditionalLinksUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple FooterAdditionalLinks documents */
  upsert?: Maybe<Array<FooterAdditionalLinksUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple FooterAdditionalLinks documents */
  disconnect?: Maybe<Array<FooterAdditionalLinksWhereUniqueInput>>
  /** Delete multiple FooterAdditionalLinks documents */
  delete?: Maybe<Array<FooterAdditionalLinksWhereUniqueInput>>
}

/** An edge in a connection. */
export type CompanyEdge = {
  __typename?: 'CompanyEdge'
  /** The item at the end of the edge. */
  node: Company
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowColorBlockCreateManyInlineInput = {
  /** Create and connect multiple existing RowColorBlock documents */
  create?: Maybe<Array<RowColorBlockCreateInput>>
  /** Connect multiple existing RowColorBlock documents */
  connect?: Maybe<Array<RowColorBlockWhereUniqueInput>>
}

/** Identifies documents */
export type RowExplanationWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowExplanationWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowExplanationWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowExplanationWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identifier?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identifier_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identifier_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identifier_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identifier_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identifier_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identifier_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identifier_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identifier_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identifier_not_ends_with?: Maybe<Scalars['String']>
  card?: Maybe<PaperCardWhereInput>
}

/** References RowIconWithTextList record uniquely */
export type RowIconWithTextListWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

export type PageContentUpsertWithNestedWhereUniqueInput = {
  RowLinksWithText?: Maybe<RowLinksWithTextUpsertWithNestedWhereUniqueInput>
  RowColumnThree?: Maybe<RowColumnThreeUpsertWithNestedWhereUniqueInput>
  RowColumnTwo?: Maybe<RowColumnTwoUpsertWithNestedWhereUniqueInput>
  RowRecentBlogPost?: Maybe<RowRecentBlogPostUpsertWithNestedWhereUniqueInput>
  RowPeopleWithText?: Maybe<RowPeopleWithTextUpsertWithNestedWhereUniqueInput>
  RowColumnOne?: Maybe<RowColumnOneUpsertWithNestedWhereUniqueInput>
  RowCompanySlider?: Maybe<RowCompanySliderUpsertWithNestedWhereUniqueInput>
  RowHero?: Maybe<RowHeroUpsertWithNestedWhereUniqueInput>
  RowYoutubeVideo?: Maybe<RowYoutubeVideoUpsertWithNestedWhereUniqueInput>
  RowIpadHorizontal?: Maybe<RowIpadHorizontalUpsertWithNestedWhereUniqueInput>
  RowColorSpeedBlock?: Maybe<RowColorSpeedBlockUpsertWithNestedWhereUniqueInput>
  RowContact?: Maybe<RowContactUpsertWithNestedWhereUniqueInput>
  RowGoogleMap?: Maybe<RowGoogleMapUpsertWithNestedWhereUniqueInput>
  RowVacancy?: Maybe<RowVacancyUpsertWithNestedWhereUniqueInput>
  RowLaptopWithText?: Maybe<RowLaptopWithTextUpsertWithNestedWhereUniqueInput>
  RowIconWithTextList?: Maybe<RowIconWithTextListUpsertWithNestedWhereUniqueInput>
  RowLineHorizontal?: Maybe<RowLineHorizontalUpsertWithNestedWhereUniqueInput>
  RowIphoneWithText?: Maybe<RowIphoneWithTextUpsertWithNestedWhereUniqueInput>
  RowIpadVertical?: Maybe<RowIpadVerticalUpsertWithNestedWhereUniqueInput>
  RowLaptop?: Maybe<RowLaptopUpsertWithNestedWhereUniqueInput>
  RowImageOrVideo?: Maybe<RowImageOrVideoUpsertWithNestedWhereUniqueInput>
  RowPhonesSlider?: Maybe<RowPhonesSliderUpsertWithNestedWhereUniqueInput>
  RowIframe?: Maybe<RowIframeUpsertWithNestedWhereUniqueInput>
  RowQuote?: Maybe<RowQuoteUpsertWithNestedWhereUniqueInput>
  RowColorBlock?: Maybe<RowColorBlockUpsertWithNestedWhereUniqueInput>
  RowIntro?: Maybe<RowIntroUpsertWithNestedWhereUniqueInput>
  RowTitle?: Maybe<RowTitleUpsertWithNestedWhereUniqueInput>
  RowReview?: Maybe<RowReviewUpsertWithNestedWhereUniqueInput>
  RowServiceList?: Maybe<RowServiceListUpsertWithNestedWhereUniqueInput>
  RowCollaboration?: Maybe<RowCollaborationUpsertWithNestedWhereUniqueInput>
  RowExplanation?: Maybe<RowExplanationUpsertWithNestedWhereUniqueInput>
  RowColumnBoxed?: Maybe<RowColumnBoxedUpsertWithNestedWhereUniqueInput>
  RowModule?: Maybe<RowModuleUpsertWithNestedWhereUniqueInput>
  RowModulePage?: Maybe<RowModulePageUpsertWithNestedWhereUniqueInput>
  RowCenteredText?: Maybe<RowCenteredTextUpsertWithNestedWhereUniqueInput>
  RowImageSwiper?: Maybe<RowImageSwiperUpsertWithNestedWhereUniqueInput>
}

export type PaperCardUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: PaperCardWhereUniqueInput
  /** Document to update */
  data: PaperCardUpdateInput
}

export type AwardUpdateOneInlineInput = {
  /** Create and connect one Award document */
  create?: Maybe<AwardCreateInput>
  /** Update single Award document */
  update?: Maybe<AwardUpdateWithNestedWhereUniqueInput>
  /** Upsert single Award document */
  upsert?: Maybe<AwardUpsertWithNestedWhereUniqueInput>
  /** Connect existing Award document */
  connect?: Maybe<AwardWhereUniqueInput>
  /** Disconnect currently connected Award document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected Award document */
  delete?: Maybe<Scalars['Boolean']>
}

export type RowColumnOneUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowColumnOneWhereInput
  /** Update many input */
  data: RowColumnOneUpdateManyInput
}

export type RowColumnThreeCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowColumnThreeCreateLocalizationInput>>
}

export type RowExplanationOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identifier_ASC'
  | 'identifier_DESC'

export type RowExplanationUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowExplanationWhereInput
  /** Update many input */
  data: RowExplanationUpdateManyInput
}

export type RowIphoneWithTextUpdateInput = {
  backgroundImageWithPhone?: Maybe<AssetUpdateOneInlineInput>
  iPhoneVideo?: Maybe<AssetUpdateOneInlineInput>
  themeImage?: Maybe<AssetUpdateOneInlineInput>
  /** colOne input for default locale (nl) */
  colOne?: Maybe<Scalars['RichTextAST']>
  /** colTwoOptional input for default locale (nl) */
  colTwoOptional?: Maybe<Scalars['RichTextAST']>
  /** colThreeOptional input for default locale (nl) */
  colThreeOptional?: Maybe<Scalars['RichTextAST']>
  page?: Maybe<PageUpdateManyInlineInput>
  /** Manage document localizations */
  localizations?: Maybe<RowIphoneWithTextUpdateLocalizationsInput>
}

export type RowLaptopUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowLaptopWhereUniqueInput
  /** Upsert data */
  data: RowLaptopUpsertInput
}

export type _RelationInputCardinality = 'one' | 'many'

export type RowQuote = Node & {
  __typename?: 'RowQuote'
  /** System stage field */
  stage: Stage
  /** Get the document in other stages */
  documentInStages: Array<RowQuote>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  clientName: Scalars['String']
  clientTitle: Scalars['String']
  clientQuote: Scalars['String']
  /** List the functionalities that are used in the case. */
  functionalities: RichText
  page: Array<Page>
  /** List of RowQuote versions */
  history: Array<Version>
}

export type RowQuoteDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowQuotePageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowQuoteHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type ServiceUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: ServiceWhereUniqueInput
  /** Upsert data */
  data: ServiceUpsertInput
}

/** References RowPhonesSlider record uniquely */
export type RowPhonesSliderWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

export type RowContactCreateLocalizationInput = {
  /** Localization input */
  data: RowContactCreateLocalizationDataInput
  locale: Locale
}

export type RowHero = Node & {
  __typename?: 'RowHero'
  /** System stage field */
  stage: Stage
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowHero>
  /** Get the document in other stages */
  documentInStages: Array<RowHero>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  asset: Asset
  text: RichText
  links: Array<RowHeroVideoLinks>
  contactPeople: Array<Person>
  page: Array<Page>
  /** List of RowHero versions */
  history: Array<Version>
}

export type RowHeroLocalizationsArgs = {
  locales?: Array<Locale>
  includeCurrent?: Scalars['Boolean']
}

export type RowHeroDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowHeroCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowHeroUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowHeroPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowHeroAssetArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowHeroLinksArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowHeroContactPeopleArgs = {
  where?: Maybe<PersonWhereInput>
  orderBy?: Maybe<PersonOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowHeroPageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowHeroHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowIconWithTextListUpsertLocalizationInput = {
  update: RowIconWithTextListUpdateLocalizationDataInput
  create: RowIconWithTextListCreateLocalizationDataInput
  locale: Locale
}

export type RowModule = Node & {
  __typename?: 'RowModule'
  /** System stage field */
  stage: Stage
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowModule>
  /** Get the document in other stages */
  documentInStages: Array<RowModule>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  name: Scalars['String']
  description: RichText
  link?: Maybe<LinkExternal>
  page: Array<Page>
  /** List of RowModule versions */
  history: Array<Version>
}

export type RowModuleLocalizationsArgs = {
  locales?: Array<Locale>
  includeCurrent?: Scalars['Boolean']
}

export type RowModuleDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowModuleCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowModuleUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowModulePublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowModuleLinkArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowModulePageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowModuleHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowModulePageUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowModulePageCreateLocalizationInput>>
  /** Localizations to update */
  update?: Maybe<Array<RowModulePageUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowModulePageUpsertLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
}

export type RowColorSpeedBlockUpsertInput = {
  /** Create document if it didn't exist */
  create: RowColorSpeedBlockCreateInput
  /** Update document if it exists */
  update: RowColorSpeedBlockUpdateInput
}

/** A connection to a list of items. */
export type RowColumnOneConnection = {
  __typename?: 'RowColumnOneConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowColumnOneEdge>
  aggregate: Aggregate
}

export type RowCompanySliderCreateOneInlineInput = {
  /** Create and connect one RowCompanySlider document */
  create?: Maybe<RowCompanySliderCreateInput>
  /** Connect one existing RowCompanySlider document */
  connect?: Maybe<RowCompanySliderWhereUniqueInput>
}

export type PersonUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: PersonWhereUniqueInput
  /** Upsert data */
  data: PersonUpsertInput
}

export type RowColumnThreeUpsertInput = {
  /** Create document if it didn't exist */
  create: RowColumnThreeCreateInput
  /** Update document if it exists */
  update: RowColumnThreeUpdateInput
}

/** Identifies documents */
export type RowGoogleMapManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowGoogleMapWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowGoogleMapWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowGoogleMapWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  socialLinks_every?: Maybe<LinkExternalWhereInput>
  socialLinks_some?: Maybe<LinkExternalWhereInput>
  socialLinks_none?: Maybe<LinkExternalWhereInput>
  location?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  location_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  location_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  location_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  location_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  location_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  location_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  location_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  location_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  location_not_ends_with?: Maybe<Scalars['String']>
}

export type RowIconWithTextListUpdateLocalizationInput = {
  data: RowIconWithTextListUpdateLocalizationDataInput
  locale: Locale
}

export type RowIframeUpsertInput = {
  /** Create document if it didn't exist */
  create: RowIframeCreateInput
  /** Update document if it exists */
  update: RowIframeUpdateInput
}

export type RowCollaborationUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowCollaborationUpdateManyLocalizationInput>>
}

export type RowServiceListCreateManyInlineInput = {
  /** Create and connect multiple existing RowServiceList documents */
  create?: Maybe<Array<RowServiceListCreateInput>>
  /** Connect multiple existing RowServiceList documents */
  connect?: Maybe<Array<RowServiceListWhereUniqueInput>>
}

export type RowYoutubeVideoCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowYoutubeVideoCreateLocalizationInput>>
}

/** Identifies documents */
export type RowHeroManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowHeroWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowHeroWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowHeroWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  asset?: Maybe<AssetWhereInput>
  contactPeople_every?: Maybe<PersonWhereInput>
  contactPeople_some?: Maybe<PersonWhereInput>
  contactPeople_none?: Maybe<PersonWhereInput>
}

export type RowContactUpdateManyLocalizationInput = {
  data: RowContactUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowImageSwiper = Node & {
  __typename?: 'RowImageSwiper'
  /** System stage field */
  stage: Stage
  /** Get the document in other stages */
  documentInStages: Array<RowImageSwiper>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  name: Scalars['String']
  assets: Array<Asset>
  page: Array<Page>
  /** List of RowImageSwiper versions */
  history: Array<Version>
}

export type RowImageSwiperDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowImageSwiperAssetsArgs = {
  where?: Maybe<AssetWhereInput>
  orderBy?: Maybe<AssetOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowImageSwiperPageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowImageSwiperHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

/** A connection to a list of items. */
export type RowQuoteConnection = {
  __typename?: 'RowQuoteConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowQuoteEdge>
  aggregate: Aggregate
}

export type ServiceUpdateInput = {
  identity?: Maybe<Scalars['String']>
  page?: Maybe<PageUpdateOneInlineInput>
  content?: Maybe<Scalars['RichTextAST']>
  rowServiceList?: Maybe<RowServiceListUpdateManyInlineInput>
}

export type LinkInternalUpdateManyInlineInput = {
  /** Create and connect multiple LinkInternal documents */
  create?: Maybe<Array<LinkInternalCreateInput>>
  /** Connect multiple existing LinkInternal documents */
  connect?: Maybe<Array<LinkInternalConnectInput>>
  /** Override currently-connected documents with multiple existing LinkInternal documents */
  set?: Maybe<Array<LinkInternalWhereUniqueInput>>
  /** Update multiple LinkInternal documents */
  update?: Maybe<Array<LinkInternalUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple LinkInternal documents */
  upsert?: Maybe<Array<LinkInternalUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple LinkInternal documents */
  disconnect?: Maybe<Array<LinkInternalWhereUniqueInput>>
  /** Delete multiple LinkInternal documents */
  delete?: Maybe<Array<LinkInternalWhereUniqueInput>>
}

export type RowIpadVerticalUpdateManyInlineInput = {
  /** Create and connect multiple RowIpadVertical documents */
  create?: Maybe<Array<RowIpadVerticalCreateInput>>
  /** Connect multiple existing RowIpadVertical documents */
  connect?: Maybe<Array<RowIpadVerticalConnectInput>>
  /** Override currently-connected documents with multiple existing RowIpadVertical documents */
  set?: Maybe<Array<RowIpadVerticalWhereUniqueInput>>
  /** Update multiple RowIpadVertical documents */
  update?: Maybe<Array<RowIpadVerticalUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowIpadVertical documents */
  upsert?: Maybe<Array<RowIpadVerticalUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowIpadVertical documents */
  disconnect?: Maybe<Array<RowIpadVerticalWhereUniqueInput>>
  /** Delete multiple RowIpadVertical documents */
  delete?: Maybe<Array<RowIpadVerticalWhereUniqueInput>>
}

export type RowLaptopWithTextUpdateInput = {
  backgroundImage?: Maybe<AssetUpdateOneInlineInput>
  laptopContent?: Maybe<AssetUpdateOneInlineInput>
  colOne?: Maybe<Scalars['RichTextAST']>
  page?: Maybe<PageUpdateManyInlineInput>
}

export type RowLinksWithTextCreateManyInlineInput = {
  /** Create and connect multiple existing RowLinksWithText documents */
  create?: Maybe<Array<RowLinksWithTextCreateInput>>
  /** Connect multiple existing RowLinksWithText documents */
  connect?: Maybe<Array<RowLinksWithTextWhereUniqueInput>>
}

/** Identifies documents */
export type RowGoogleMapWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowGoogleMapWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowGoogleMapWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowGoogleMapWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  socialLinks_every?: Maybe<LinkExternalWhereInput>
  socialLinks_some?: Maybe<LinkExternalWhereInput>
  socialLinks_none?: Maybe<LinkExternalWhereInput>
  location?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  location_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  location_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  location_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  location_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  location_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  location_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  location_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  location_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  location_not_ends_with?: Maybe<Scalars['String']>
}

export type RowQuoteUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowQuoteWhereInput
  /** Update many input */
  data: RowQuoteUpdateManyInput
}

export type RowReviewUpdateOneInlineInput = {
  /** Create and connect one RowReview document */
  create?: Maybe<RowReviewCreateInput>
  /** Update single RowReview document */
  update?: Maybe<RowReviewUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowReview document */
  upsert?: Maybe<RowReviewUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowReview document */
  connect?: Maybe<RowReviewWhereUniqueInput>
  /** Disconnect currently connected RowReview document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowReview document */
  delete?: Maybe<Scalars['Boolean']>
}

export type RowExplanationUpdateManyInput = {
  subject?: Maybe<Scalars['RichTextAST']>
  explanation?: Maybe<Scalars['RichTextAST']>
}

export type PartnerUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: PartnerWhereUniqueInput
  /** Upsert data */
  data: PartnerUpsertInput
}

export type RowCollaborationUpdateManyInlineInput = {
  /** Create and connect multiple RowCollaboration documents */
  create?: Maybe<Array<RowCollaborationCreateInput>>
  /** Connect multiple existing RowCollaboration documents */
  connect?: Maybe<Array<RowCollaborationConnectInput>>
  /** Override currently-connected documents with multiple existing RowCollaboration documents */
  set?: Maybe<Array<RowCollaborationWhereUniqueInput>>
  /** Update multiple RowCollaboration documents */
  update?: Maybe<Array<RowCollaborationUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowCollaboration documents */
  upsert?: Maybe<Array<RowCollaborationUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowCollaboration documents */
  disconnect?: Maybe<Array<RowCollaborationWhereUniqueInput>>
  /** Delete multiple RowCollaboration documents */
  delete?: Maybe<Array<RowCollaborationWhereUniqueInput>>
}

export type RowColumnBoxedCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  /** content input for default locale (nl) */
  content: Scalars['RichTextAST']
  page?: Maybe<PageCreateManyInlineInput>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowColumnBoxedCreateLocalizationsInput>
}

export type FooterAdditionalLinksConnectInput = {
  LinkInternal?: Maybe<LinkInternalConnectInput>
  LinkExternal?: Maybe<LinkExternalConnectInput>
}

export type PageUpdateManyLocalizationDataInput = {
  title?: Maybe<Scalars['String']>
  metaTitle?: Maybe<Scalars['String']>
  metaDescription?: Maybe<Scalars['String']>
  releaseDate?: Maybe<Scalars['DateTime']>
}

export type Footer = Node & {
  __typename?: 'Footer'
  /** System stage field */
  stage: Stage
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<Footer>
  /** Get the document in other stages */
  documentInStages: Array<Footer>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  links: Array<LinkInternal>
  contactLink?: Maybe<LinkInternal>
  text: RichText
  contact: RichText
  address: RichText
  reviewsLink?: Maybe<LinkInternal>
  additionalLinks: Array<FooterAdditionalLinks>
  /** List of Footer versions */
  history: Array<Version>
}

export type FooterLocalizationsArgs = {
  locales?: Array<Locale>
  includeCurrent?: Scalars['Boolean']
}

export type FooterDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type FooterCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type FooterUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type FooterPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type FooterLinksArgs = {
  where?: Maybe<LinkInternalWhereInput>
  orderBy?: Maybe<LinkInternalOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type FooterContactLinkArgs = {
  locales?: Maybe<Array<Locale>>
}

export type FooterReviewsLinkArgs = {
  locales?: Maybe<Array<Locale>>
}

export type FooterAdditionalLinksArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type FooterHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowIconWithTextList = Node & {
  __typename?: 'RowIconWithTextList'
  /** System stage field */
  stage: Stage
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowIconWithTextList>
  /** Get the document in other stages */
  documentInStages: Array<RowIconWithTextList>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  text: RichText
  rowOne: RichText
  rowOneIcon?: Maybe<Asset>
  rowTwo: RichText
  rowTwoIcon?: Maybe<Asset>
  rowThree?: Maybe<RichText>
  rowThreeIcon?: Maybe<Asset>
  rowFour?: Maybe<RichText>
  rowFourIcon?: Maybe<Asset>
  rowFive?: Maybe<RichText>
  rowFiveIcon?: Maybe<Asset>
  rowSix?: Maybe<RichText>
  rowSixIcon?: Maybe<Asset>
  page: Array<Page>
  /** List of RowIconWithTextList versions */
  history: Array<Version>
}

export type RowIconWithTextListLocalizationsArgs = {
  locales?: Array<Locale>
  includeCurrent?: Scalars['Boolean']
}

export type RowIconWithTextListDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowIconWithTextListCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowIconWithTextListUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowIconWithTextListPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowIconWithTextListRowOneIconArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowIconWithTextListRowTwoIconArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowIconWithTextListRowThreeIconArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowIconWithTextListRowFourIconArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowIconWithTextListRowFiveIconArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowIconWithTextListRowSixIconArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowIconWithTextListPageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowIconWithTextListHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowImageSwiperCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  name: Scalars['String']
  assets: AssetCreateManyInlineInput
  page?: Maybe<PageCreateManyInlineInput>
}

export type ContactSubject = 'COLLABORATION' | 'MODULE' | 'NEW_PROJECT' | 'OTHER' | 'VACANCY'

/** A connection to a list of items. */
export type PaperCardConnection = {
  __typename?: 'PaperCardConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<PaperCardEdge>
  aggregate: Aggregate
}

export type RowCollaborationUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowCollaborationCreateLocalizationInput>>
  /** Localizations to update */
  update?: Maybe<Array<RowCollaborationUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowCollaborationUpsertLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
}

export type RowHeroUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowHeroWhereInput
  /** Update many input */
  data: RowHeroUpdateManyInput
}

export type RowIframeUpdateLocalizationDataInput = {
  title?: Maybe<Scalars['String']>
}

export type RowImageSwiperCreateManyInlineInput = {
  /** Create and connect multiple existing RowImageSwiper documents */
  create?: Maybe<Array<RowImageSwiperCreateInput>>
  /** Connect multiple existing RowImageSwiper documents */
  connect?: Maybe<Array<RowImageSwiperWhereUniqueInput>>
}

/** Identifies documents */
export type RowIntroManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowIntroWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowIntroWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowIntroWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
}

export type RowIpadHorizontalOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'

/** A connection to a list of items. */
export type LinkInternalConnection = {
  __typename?: 'LinkInternalConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<LinkInternalEdge>
  aggregate: Aggregate
}

export type RowLaptopCreateOneInlineInput = {
  /** Create and connect one RowLaptop document */
  create?: Maybe<RowLaptopCreateInput>
  /** Connect one existing RowLaptop document */
  connect?: Maybe<RowLaptopWhereUniqueInput>
}

export type HeaderUpdateManyInlineInput = {
  /** Create and connect multiple Header documents */
  create?: Maybe<Array<HeaderCreateInput>>
  /** Connect multiple existing Header documents */
  connect?: Maybe<Array<HeaderConnectInput>>
  /** Override currently-connected documents with multiple existing Header documents */
  set?: Maybe<Array<HeaderWhereUniqueInput>>
  /** Update multiple Header documents */
  update?: Maybe<Array<HeaderUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple Header documents */
  upsert?: Maybe<Array<HeaderUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple Header documents */
  disconnect?: Maybe<Array<HeaderWhereUniqueInput>>
  /** Delete multiple Header documents */
  delete?: Maybe<Array<HeaderWhereUniqueInput>>
}

export type RowExplanationUpdateOneInlineInput = {
  /** Create and connect one RowExplanation document */
  create?: Maybe<RowExplanationCreateInput>
  /** Update single RowExplanation document */
  update?: Maybe<RowExplanationUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowExplanation document */
  upsert?: Maybe<RowExplanationUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowExplanation document */
  connect?: Maybe<RowExplanationWhereUniqueInput>
  /** Disconnect currently connected RowExplanation document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowExplanation document */
  delete?: Maybe<Scalars['Boolean']>
}

export type RowLinksWithTextCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowLinksWithTextCreateLocalizationInput>>
}

export type RowColorBlockBlockContentUpdateInput = {
  RowColumnThree?: Maybe<RowColumnThreeUpdateInput>
  RowColumnTwo?: Maybe<RowColumnTwoUpdateInput>
  RowColumnOne?: Maybe<RowColumnOneUpdateInput>
}

export type AssetUpdateManyInlineInput = {
  /** Create and connect multiple Asset documents */
  create?: Maybe<Array<AssetCreateInput>>
  /** Connect multiple existing Asset documents */
  connect?: Maybe<Array<AssetConnectInput>>
  /** Override currently-connected documents with multiple existing Asset documents */
  set?: Maybe<Array<AssetWhereUniqueInput>>
  /** Update multiple Asset documents */
  update?: Maybe<Array<AssetUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple Asset documents */
  upsert?: Maybe<Array<AssetUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple Asset documents */
  disconnect?: Maybe<Array<AssetWhereUniqueInput>>
  /** Delete multiple Asset documents */
  delete?: Maybe<Array<AssetWhereUniqueInput>>
}

export type PaperCardCreateOneInlineInput = {
  /** Create and connect one PaperCard document */
  create?: Maybe<PaperCardCreateInput>
  /** Connect one existing PaperCard document */
  connect?: Maybe<PaperCardWhereUniqueInput>
}

export type ReviewConnectInput = {
  /** Document to connect */
  where: ReviewWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowColumnBoxedUpdateLocalizationInput = {
  data: RowColumnBoxedUpdateLocalizationDataInput
  locale: Locale
}

export type RowCompanySliderUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowCompanySliderWhereUniqueInput
  /** Document to update */
  data: RowCompanySliderUpdateInput
}

export type RowContactCreateManyInlineInput = {
  /** Create and connect multiple existing RowContact documents */
  create?: Maybe<Array<RowContactCreateInput>>
  /** Connect multiple existing RowContact documents */
  connect?: Maybe<Array<RowContactWhereUniqueInput>>
}

/** An edge in a connection. */
export type RowExplanationEdge = {
  __typename?: 'RowExplanationEdge'
  /** The item at the end of the edge. */
  node: RowExplanation
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowGoogleMapUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowGoogleMapWhereUniqueInput
  /** Upsert data */
  data: RowGoogleMapUpsertInput
}

/** Transformations for Assets */
export type AssetTransformationInput = {
  image?: Maybe<ImageTransformationInput>
  document?: Maybe<DocumentTransformationInput>
  /** Pass true if you want to validate the passed transformation parameters */
  validateOptions?: Maybe<Scalars['Boolean']>
}

/** An edge in a connection. */
export type RowIpadHorizontalEdge = {
  __typename?: 'RowIpadHorizontalEdge'
  /** The item at the end of the edge. */
  node: RowIpadHorizontal
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

/** Identifies documents */
export type RowColorSpeedBlockWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowColorSpeedBlockWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowColorSpeedBlockWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowColorSpeedBlockWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identifier?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identifier_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identifier_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identifier_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identifier_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identifier_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identifier_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identifier_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identifier_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identifier_not_ends_with?: Maybe<Scalars['String']>
  colorBlockTitle?: Maybe<RowTitleWhereInput>
}

export type RowColumnOneUpsertInput = {
  /** Create document if it didn't exist */
  create: RowColumnOneCreateInput
  /** Update document if it exists */
  update: RowColumnOneUpdateInput
}

/** References RowImageOrVideo record uniquely */
export type RowImageOrVideoWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

export type RowQuoteUpsertInput = {
  /** Create document if it didn't exist */
  create: RowQuoteCreateInput
  /** Update document if it exists */
  update: RowQuoteUpdateInput
}

export type RowCollaborationUpdateOneInlineInput = {
  /** Create and connect one RowCollaboration document */
  create?: Maybe<RowCollaborationCreateInput>
  /** Update single RowCollaboration document */
  update?: Maybe<RowCollaborationUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowCollaboration document */
  upsert?: Maybe<RowCollaborationUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowCollaboration document */
  connect?: Maybe<RowCollaborationWhereUniqueInput>
  /** Disconnect currently connected RowCollaboration document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowCollaboration document */
  delete?: Maybe<Scalars['Boolean']>
}

export type RowContactUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowContactWhereUniqueInput
  /** Document to update */
  data: RowContactUpdateInput
}

export type RowContactUpdateInput = {
  identity?: Maybe<Scalars['String']>
  /** text input for default locale (nl) */
  text?: Maybe<Scalars['RichTextAST']>
  page?: Maybe<PageUpdateManyInlineInput>
  /** Manage document localizations */
  localizations?: Maybe<RowContactUpdateLocalizationsInput>
}

export type RowIntroCreateManyInlineInput = {
  /** Create and connect multiple existing RowIntro documents */
  create?: Maybe<Array<RowIntroCreateInput>>
  /** Connect multiple existing RowIntro documents */
  connect?: Maybe<Array<RowIntroWhereUniqueInput>>
}

export type RowModuleCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  name: Scalars['String']
  /** description input for default locale (nl) */
  description: Scalars['RichTextAST']
  link?: Maybe<LinkExternalCreateOneInlineInput>
  page?: Maybe<PageCreateManyInlineInput>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowModuleCreateLocalizationsInput>
}

export type RowModuleUpdateLocalizationInput = {
  data: RowModuleUpdateLocalizationDataInput
  locale: Locale
}

export type RowModulePageUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowModulePageWhereUniqueInput
  /** Upsert data */
  data: RowModulePageUpsertInput
}

/** Identifies documents */
export type RowTitleManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowTitleWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowTitleWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowTitleWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  rowColorBlock?: Maybe<RowColorSpeedBlockWhereInput>
  rowColorBlockTitle?: Maybe<RowColorBlockWhereInput>
}

export type RowColumnThreeUpsertLocalizationInput = {
  update: RowColumnThreeUpdateLocalizationDataInput
  create: RowColumnThreeCreateLocalizationDataInput
  locale: Locale
}

export type RowHeroVideoLinksUpdateOneInlineInput = {
  /** Create and connect one RowHeroVideoLinks document */
  create?: Maybe<RowHeroVideoLinksCreateInput>
  /** Update single RowHeroVideoLinks document */
  update?: Maybe<RowHeroVideoLinksUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowHeroVideoLinks document */
  upsert?: Maybe<RowHeroVideoLinksUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowHeroVideoLinks document */
  connect?: Maybe<RowHeroVideoLinksWhereUniqueInput>
  /** Disconnect currently connected RowHeroVideoLinks document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowHeroVideoLinks document */
  delete?: Maybe<Scalars['Boolean']>
}

export type AssetUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<AssetCreateLocalizationInput>>
  /** Localizations to update */
  update?: Maybe<Array<AssetUpdateLocalizationInput>>
  upsert?: Maybe<Array<AssetUpsertLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
}

/** An edge in a connection. */
export type LinkExternalEdge = {
  __typename?: 'LinkExternalEdge'
  /** The item at the end of the edge. */
  node: LinkExternal
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowCenteredTextUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowCenteredTextWhereInput
  /** Update many input */
  data: RowCenteredTextUpdateManyInput
}

export type RowIconWithTextListConnectInput = {
  /** Document to connect */
  where: RowIconWithTextListWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowIconWithTextListUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowIconWithTextListWhereUniqueInput
  /** Document to update */
  data: RowIconWithTextListUpdateInput
}

/** References RowImageSwiper record uniquely */
export type RowImageSwiperWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  name?: Maybe<Scalars['String']>
}

export type RowIphoneWithTextCreateOneInlineInput = {
  /** Create and connect one RowIphoneWithText document */
  create?: Maybe<RowIphoneWithTextCreateInput>
  /** Connect one existing RowIphoneWithText document */
  connect?: Maybe<RowIphoneWithTextWhereUniqueInput>
}

/** Stage system enumeration */
export type Stage =
  /** The Published stage is where you can publish your content to. */
  | 'PUBLISHED'
  /** The Draft is the default stage for all your content. */
  | 'DRAFT'

export type RowPeopleWithTextCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  text: Scalars['RichTextAST']
}

export type RowCollaborationUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowCollaborationWhereUniqueInput
  /** Document to update */
  data: RowCollaborationUpdateInput
}

export type RowColorSpeedBlock = Node & {
  __typename?: 'RowColorSpeedBlock'
  /** System stage field */
  stage: Stage
  /** Get the document in other stages */
  documentInStages: Array<RowColorSpeedBlock>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  identifier: Scalars['String']
  colorBlockTitle?: Maybe<RowTitle>
  colTwo: RichText
  colOne: RichText
  colThree: RichText
  colFour: RichText
  page: Array<Page>
  /** List of RowColorSpeedBlock versions */
  history: Array<Version>
}

export type RowColorSpeedBlockDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowColorSpeedBlockColorBlockTitleArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowColorSpeedBlockPageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowColorSpeedBlockHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowColumnThreeCreateManyInlineInput = {
  /** Create and connect multiple existing RowColumnThree documents */
  create?: Maybe<Array<RowColumnThreeCreateInput>>
  /** Connect multiple existing RowColumnThree documents */
  connect?: Maybe<Array<RowColumnThreeWhereUniqueInput>>
}

export type RowContactConnectInput = {
  /** Document to connect */
  where: RowContactWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowContactUpsertLocalizationInput = {
  update: RowContactUpdateLocalizationDataInput
  create: RowContactCreateLocalizationDataInput
  locale: Locale
}

export type RowImageSwiperUpdateManyInlineInput = {
  /** Create and connect multiple RowImageSwiper documents */
  create?: Maybe<Array<RowImageSwiperCreateInput>>
  /** Connect multiple existing RowImageSwiper documents */
  connect?: Maybe<Array<RowImageSwiperConnectInput>>
  /** Override currently-connected documents with multiple existing RowImageSwiper documents */
  set?: Maybe<Array<RowImageSwiperWhereUniqueInput>>
  /** Update multiple RowImageSwiper documents */
  update?: Maybe<Array<RowImageSwiperUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowImageSwiper documents */
  upsert?: Maybe<Array<RowImageSwiperUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowImageSwiper documents */
  disconnect?: Maybe<Array<RowImageSwiperWhereUniqueInput>>
  /** Delete multiple RowImageSwiper documents */
  delete?: Maybe<Array<RowImageSwiperWhereUniqueInput>>
}

export type RowVacancyUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowVacancyWhereUniqueInput
  /** Document to update */
  data: RowVacancyUpdateInput
}

/** References RowIphoneWithText record uniquely */
export type RowIphoneWithTextWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

/** An edge in a connection. */
export type RowLaptopWithTextEdge = {
  __typename?: 'RowLaptopWithTextEdge'
  /** The item at the end of the edge. */
  node: RowLaptopWithText
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowTitleUpdateLocalizationDataInput = {
  rowTitle?: Maybe<Scalars['RichTextAST']>
}

export type RowCompanySliderUpsertInput = {
  /** Create document if it didn't exist */
  create: RowCompanySliderCreateInput
  /** Update document if it exists */
  update: RowCompanySliderUpdateInput
}

export type RowColorSpeedBlockConnectInput = {
  /** Document to connect */
  where: RowColorSpeedBlockWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowColumnTwoUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowColumnTwoUpdateManyLocalizationInput>>
}

export type RowPhonesSliderOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'

export type RowTitleUpdateOneInlineInput = {
  /** Create and connect one RowTitle document */
  create?: Maybe<RowTitleCreateInput>
  /** Update single RowTitle document */
  update?: Maybe<RowTitleUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowTitle document */
  upsert?: Maybe<RowTitleUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowTitle document */
  connect?: Maybe<RowTitleWhereUniqueInput>
  /** Disconnect currently connected RowTitle document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowTitle document */
  delete?: Maybe<Scalars['Boolean']>
}

export type LinkExternalUpdateManyLocalizationInput = {
  data: LinkExternalUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowCollaborationCreateOneInlineInput = {
  /** Create and connect one RowCollaboration document */
  create?: Maybe<RowCollaborationCreateInput>
  /** Connect one existing RowCollaboration document */
  connect?: Maybe<RowCollaborationWhereUniqueInput>
}

export type FooterUpsertInput = {
  /** Create document if it didn't exist */
  create: FooterCreateInput
  /** Update document if it exists */
  update: FooterUpdateInput
}

export type AwardUpdateManyInput = {
  /** name input for default locale (nl) */
  name?: Maybe<Scalars['String']>
  /** Optional updates to localizations */
  localizations?: Maybe<AwardUpdateManyLocalizationsInput>
}

export type RowColumnTwoCreateManyInlineInput = {
  /** Create and connect multiple existing RowColumnTwo documents */
  create?: Maybe<Array<RowColumnTwoCreateInput>>
  /** Connect multiple existing RowColumnTwo documents */
  connect?: Maybe<Array<RowColumnTwoWhereUniqueInput>>
}

/** A connection to a list of items. */
export type RowHeroConnection = {
  __typename?: 'RowHeroConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowHeroEdge>
  aggregate: Aggregate
}

export type RowGoogleMapOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'location_ASC'
  | 'location_DESC'

export type RowIconWithTextListUpdateInput = {
  /** text input for default locale (nl) */
  text?: Maybe<Scalars['RichTextAST']>
  /** rowOne input for default locale (nl) */
  rowOne?: Maybe<Scalars['RichTextAST']>
  rowOneIcon?: Maybe<AssetUpdateOneInlineInput>
  /** rowTwo input for default locale (nl) */
  rowTwo?: Maybe<Scalars['RichTextAST']>
  rowTwoIcon?: Maybe<AssetUpdateOneInlineInput>
  /** rowThree input for default locale (nl) */
  rowThree?: Maybe<Scalars['RichTextAST']>
  rowThreeIcon?: Maybe<AssetUpdateOneInlineInput>
  /** rowFour input for default locale (nl) */
  rowFour?: Maybe<Scalars['RichTextAST']>
  rowFourIcon?: Maybe<AssetUpdateOneInlineInput>
  /** rowFive input for default locale (nl) */
  rowFive?: Maybe<Scalars['RichTextAST']>
  rowFiveIcon?: Maybe<AssetUpdateOneInlineInput>
  /** rowSix input for default locale (nl) */
  rowSix?: Maybe<Scalars['RichTextAST']>
  rowSixIcon?: Maybe<AssetUpdateOneInlineInput>
  page?: Maybe<PageUpdateManyInlineInput>
  /** Manage document localizations */
  localizations?: Maybe<RowIconWithTextListUpdateLocalizationsInput>
}

/** A connection to a list of items. */
export type RowIntroConnection = {
  __typename?: 'RowIntroConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowIntroEdge>
  aggregate: Aggregate
}

export type RowLineHorizontalCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  page?: Maybe<PageCreateManyInlineInput>
  active: Scalars['Boolean']
}

/** A connection to a list of items. */
export type RowLinksWithTextConnection = {
  __typename?: 'RowLinksWithTextConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowLinksWithTextEdge>
  aggregate: Aggregate
}

export type RowContactUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowContactWhereUniqueInput
  /** Upsert data */
  data: RowContactUpsertInput
}

export type RowIpadHorizontalUpsertInput = {
  /** Create document if it didn't exist */
  create: RowIpadHorizontalCreateInput
  /** Update document if it exists */
  update: RowIpadHorizontalUpdateInput
}

export type RowLinksWithTextUpdateInput = {
  identity?: Maybe<Scalars['String']>
  /** text input for default locale (nl) */
  text?: Maybe<Scalars['RichTextAST']>
  page?: Maybe<PageUpdateManyInlineInput>
  pages?: Maybe<PageUpdateManyInlineInput>
  links?: Maybe<LinkInternalUpdateManyInlineInput>
  /** Manage document localizations */
  localizations?: Maybe<RowLinksWithTextUpdateLocalizationsInput>
}

/** A connection to a list of items. */
export type RowPhonesSliderConnection = {
  __typename?: 'RowPhonesSliderConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowPhonesSliderEdge>
  aggregate: Aggregate
}

export type RowServiceListUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowServiceListWhereInput
  /** Update many input */
  data: RowServiceListUpdateManyInput
}

export type LinkExternalCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  title: Scalars['String']
  description?: Maybe<Scalars['RichTextAST']>
}

export type PartnerCreateOneInlineInput = {
  /** Create and connect one Partner document */
  create?: Maybe<PartnerCreateInput>
  /** Connect one existing Partner document */
  connect?: Maybe<PartnerWhereUniqueInput>
}

export type RowCompanySliderUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowCompanySliderWhereInput
  /** Update many input */
  data: RowCompanySliderUpdateManyInput
}

export type RowPeopleWithTextUpdateManyInlineInput = {
  /** Create and connect multiple RowPeopleWithText documents */
  create?: Maybe<Array<RowPeopleWithTextCreateInput>>
  /** Connect multiple existing RowPeopleWithText documents */
  connect?: Maybe<Array<RowPeopleWithTextConnectInput>>
  /** Override currently-connected documents with multiple existing RowPeopleWithText documents */
  set?: Maybe<Array<RowPeopleWithTextWhereUniqueInput>>
  /** Update multiple RowPeopleWithText documents */
  update?: Maybe<Array<RowPeopleWithTextUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowPeopleWithText documents */
  upsert?: Maybe<Array<RowPeopleWithTextUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowPeopleWithText documents */
  disconnect?: Maybe<Array<RowPeopleWithTextWhereUniqueInput>>
  /** Delete multiple RowPeopleWithText documents */
  delete?: Maybe<Array<RowPeopleWithTextWhereUniqueInput>>
}

/** An edge in a connection. */
export type HeaderEdge = {
  __typename?: 'HeaderEdge'
  /** The item at the end of the edge. */
  node: Header
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type HeaderCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  menuPages?: Maybe<PageCreateManyInlineInput>
  homePage?: Maybe<PageCreateOneInlineInput>
  contactPage?: Maybe<PageCreateOneInlineInput>
  contactAvatar?: Maybe<PersonCreateOneInlineInput>
}

/** References RowHero record uniquely */
export type RowHeroWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type RowPeopleWithTextUpsertInput = {
  /** Create document if it didn't exist */
  create: RowPeopleWithTextCreateInput
  /** Update document if it exists */
  update: RowPeopleWithTextUpdateInput
}

/** References RowServiceList record uniquely */
export type RowServiceListWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identifier?: Maybe<Scalars['String']>
}

export type RowYoutubeVideoUpsertLocalizationInput = {
  update: RowYoutubeVideoUpdateLocalizationDataInput
  create: RowYoutubeVideoCreateLocalizationDataInput
  locale: Locale
}

export type ServiceUpdateManyInput = {
  content?: Maybe<Scalars['RichTextAST']>
}

/** Identifies documents */
export type HeaderWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<HeaderWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<HeaderWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<HeaderWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  menuPages_every?: Maybe<PageWhereInput>
  menuPages_some?: Maybe<PageWhereInput>
  menuPages_none?: Maybe<PageWhereInput>
  homePage?: Maybe<PageWhereInput>
  contactPage?: Maybe<PageWhereInput>
  contactAvatar?: Maybe<PersonWhereInput>
}

export type RowCenteredTextUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowCenteredTextCreateLocalizationInput>>
  /** Localizations to update */
  update?: Maybe<Array<RowCenteredTextUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowCenteredTextUpsertLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
}

/** References RowColorBlock record uniquely */
export type RowColorBlockWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identifier?: Maybe<Scalars['String']>
}

export type RowColumnBoxedUpdateManyInlineInput = {
  /** Create and connect multiple RowColumnBoxed documents */
  create?: Maybe<Array<RowColumnBoxedCreateInput>>
  /** Connect multiple existing RowColumnBoxed documents */
  connect?: Maybe<Array<RowColumnBoxedConnectInput>>
  /** Override currently-connected documents with multiple existing RowColumnBoxed documents */
  set?: Maybe<Array<RowColumnBoxedWhereUniqueInput>>
  /** Update multiple RowColumnBoxed documents */
  update?: Maybe<Array<RowColumnBoxedUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowColumnBoxed documents */
  upsert?: Maybe<Array<RowColumnBoxedUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowColumnBoxed documents */
  disconnect?: Maybe<Array<RowColumnBoxedWhereUniqueInput>>
  /** Delete multiple RowColumnBoxed documents */
  delete?: Maybe<Array<RowColumnBoxedWhereUniqueInput>>
}

export type RowColumnOneUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowColumnOneUpdateManyLocalizationInput>>
}

export type RowContactUpdateLocalizationInput = {
  data: RowContactUpdateLocalizationDataInput
  locale: Locale
}

export type RowIconWithTextListUpdateOneInlineInput = {
  /** Create and connect one RowIconWithTextList document */
  create?: Maybe<RowIconWithTextListCreateInput>
  /** Update single RowIconWithTextList document */
  update?: Maybe<RowIconWithTextListUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowIconWithTextList document */
  upsert?: Maybe<RowIconWithTextListUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowIconWithTextList document */
  connect?: Maybe<RowIconWithTextListWhereUniqueInput>
  /** Disconnect currently connected RowIconWithTextList document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowIconWithTextList document */
  delete?: Maybe<Scalars['Boolean']>
}

export type RowLinksWithTextUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowLinksWithTextCreateLocalizationInput>>
  /** Localizations to update */
  update?: Maybe<Array<RowLinksWithTextUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowLinksWithTextUpsertLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
}

/** Identifies documents */
export type PageWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<PageWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<PageWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<PageWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  url?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  url_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  url_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  url_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  url_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  url_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  url_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  url_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  url_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  url_not_ends_with?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  title_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  title_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  title_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  title_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  title_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  title_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  title_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  title_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  title_not_ends_with?: Maybe<Scalars['String']>
  metaTitle?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  metaTitle_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  metaTitle_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  metaTitle_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  metaTitle_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  metaTitle_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  metaTitle_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  metaTitle_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  metaTitle_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  metaTitle_not_ends_with?: Maybe<Scalars['String']>
  metaDescription?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  metaDescription_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  metaDescription_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  metaDescription_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  metaDescription_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  metaDescription_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  metaDescription_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  metaDescription_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  metaDescription_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  metaDescription_not_ends_with?: Maybe<Scalars['String']>
  metaRobots?: Maybe<MetaRobots>
  /** All values that are not equal to given value. */
  metaRobots_not?: Maybe<MetaRobots>
  /** All values that are contained in given list. */
  metaRobots_in?: Maybe<Array<MetaRobots>>
  /** All values that are not contained in given list. */
  metaRobots_not_in?: Maybe<Array<MetaRobots>>
  author?: Maybe<PersonWhereInput>
  logo?: Maybe<AssetWhereInput>
  releaseDate?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  releaseDate_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  releaseDate_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  releaseDate_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  releaseDate_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  releaseDate_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  releaseDate_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  releaseDate_gte?: Maybe<Scalars['DateTime']>
  asset?: Maybe<AssetWhereInput>
  internalLink_every?: Maybe<LinkInternalWhereInput>
  internalLink_some?: Maybe<LinkInternalWhereInput>
  internalLink_none?: Maybe<LinkInternalWhereInput>
  headerContact_every?: Maybe<HeaderWhereInput>
  headerContact_some?: Maybe<HeaderWhereInput>
  headerContact_none?: Maybe<HeaderWhereInput>
  headerHome_every?: Maybe<HeaderWhereInput>
  headerHome_some?: Maybe<HeaderWhereInput>
  headerHome_none?: Maybe<HeaderWhereInput>
  headerMenu_every?: Maybe<HeaderWhereInput>
  headerMenu_some?: Maybe<HeaderWhereInput>
  headerMenu_none?: Maybe<HeaderWhereInput>
  rowServicesWithText_every?: Maybe<RowLinksWithTextWhereInput>
  rowServicesWithText_some?: Maybe<RowLinksWithTextWhereInput>
  rowServicesWithText_none?: Maybe<RowLinksWithTextWhereInput>
  service?: Maybe<ServiceWhereInput>
}

export type RowReviewUpsertInput = {
  /** Create document if it didn't exist */
  create: RowReviewCreateInput
  /** Update document if it exists */
  update: RowReviewUpdateInput
}

export type RowYoutubeVideoUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowYoutubeVideoWhereInput
  /** Update many input */
  data: RowYoutubeVideoUpdateManyInput
}

export type RowRecentBlogPostUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowRecentBlogPostUpdateManyLocalizationInput>>
}

export type RowColorSpeedBlockOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identifier_ASC'
  | 'identifier_DESC'

export type RowColumnThreeUpdateManyInlineInput = {
  /** Create and connect multiple RowColumnThree documents */
  create?: Maybe<Array<RowColumnThreeCreateInput>>
  /** Connect multiple existing RowColumnThree documents */
  connect?: Maybe<Array<RowColumnThreeConnectInput>>
  /** Override currently-connected documents with multiple existing RowColumnThree documents */
  set?: Maybe<Array<RowColumnThreeWhereUniqueInput>>
  /** Update multiple RowColumnThree documents */
  update?: Maybe<Array<RowColumnThreeUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowColumnThree documents */
  upsert?: Maybe<Array<RowColumnThreeUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowColumnThree documents */
  disconnect?: Maybe<Array<RowColumnThreeWhereUniqueInput>>
  /** Delete multiple RowColumnThree documents */
  delete?: Maybe<Array<RowColumnThreeWhereUniqueInput>>
}

/** References RowCompanySlider record uniquely */
export type RowCompanySliderWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type AwardUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<AwardCreateLocalizationInput>>
  /** Localizations to update */
  update?: Maybe<Array<AwardUpdateLocalizationInput>>
  upsert?: Maybe<Array<AwardUpsertLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
}

/** A connection to a list of items. */
export type RowIconWithTextListConnection = {
  __typename?: 'RowIconWithTextListConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowIconWithTextListEdge>
  aggregate: Aggregate
}

/** Identifies documents */
export type RowIpadHorizontalWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowIpadHorizontalWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowIpadHorizontalWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowIpadHorizontalWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  backgroundImage?: Maybe<AssetWhereInput>
  iPadContent?: Maybe<AssetWhereInput>
}

export type RowLaptop = Node & {
  __typename?: 'RowLaptop'
  /** System stage field */
  stage: Stage
  /** Get the document in other stages */
  documentInStages: Array<RowLaptop>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  backgroundImage?: Maybe<Asset>
  laptopContent: Asset
  page: Array<Page>
  /** List of RowLaptop versions */
  history: Array<Version>
}

export type RowLaptopDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowLaptopBackgroundImageArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowLaptopLaptopContentArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowLaptopPageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowLaptopHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

/** Identifies documents */
export type RowColumnBoxedManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowColumnBoxedWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowColumnBoxedWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowColumnBoxedWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
}

export type RowColorSpeedBlockUpdateOneInlineInput = {
  /** Create and connect one RowColorSpeedBlock document */
  create?: Maybe<RowColorSpeedBlockCreateInput>
  /** Update single RowColorSpeedBlock document */
  update?: Maybe<RowColorSpeedBlockUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowColorSpeedBlock document */
  upsert?: Maybe<RowColorSpeedBlockUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowColorSpeedBlock document */
  connect?: Maybe<RowColorSpeedBlockWhereUniqueInput>
  /** Disconnect currently connected RowColorSpeedBlock document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowColorSpeedBlock document */
  delete?: Maybe<Scalars['Boolean']>
}

export type RowColumnOneCreateLocalizationInput = {
  /** Localization input */
  data: RowColumnOneCreateLocalizationDataInput
  locale: Locale
}

export type RowColumnThreeUpdateLocalizationDataInput = {
  colOne?: Maybe<Scalars['RichTextAST']>
  colTwo?: Maybe<Scalars['RichTextAST']>
  colThree?: Maybe<Scalars['RichTextAST']>
}

export type RowColumnTwoUpsertInput = {
  /** Create document if it didn't exist */
  create: RowColumnTwoCreateInput
  /** Update document if it exists */
  update: RowColumnTwoUpdateInput
}

export type PaperCardConnectInput = {
  /** Document to connect */
  where: PaperCardWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

/** Identifies documents */
export type ReviewWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ReviewWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ReviewWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ReviewWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  customerName?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  customerName_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  customerName_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  customerName_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  customerName_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  customerName_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  customerName_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  customerName_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  customerName_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  customerName_not_ends_with?: Maybe<Scalars['String']>
  rating?: Maybe<Scalars['Int']>
  /** All values that are not equal to given value. */
  rating_not?: Maybe<Scalars['Int']>
  /** All values that are contained in given list. */
  rating_in?: Maybe<Array<Scalars['Int']>>
  /** All values that are not contained in given list. */
  rating_not_in?: Maybe<Array<Scalars['Int']>>
  /** All values less than the given value. */
  rating_lt?: Maybe<Scalars['Int']>
  /** All values less than or equal the given value. */
  rating_lte?: Maybe<Scalars['Int']>
  /** All values greater than the given value. */
  rating_gt?: Maybe<Scalars['Int']>
  /** All values greater than or equal the given value. */
  rating_gte?: Maybe<Scalars['Int']>
  quote?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  quote_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  quote_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  quote_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  quote_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  quote_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  quote_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  quote_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  quote_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  quote_not_ends_with?: Maybe<Scalars['String']>
  rowReview_every?: Maybe<RowReviewWhereInput>
  rowReview_some?: Maybe<RowReviewWhereInput>
  rowReview_none?: Maybe<RowReviewWhereInput>
}

export type RowColumnOneConnectInput = {
  /** Document to connect */
  where: RowColumnOneWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

/** A connection to a list of items. */
export type RowColumnTwoConnection = {
  __typename?: 'RowColumnTwoConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowColumnTwoEdge>
  aggregate: Aggregate
}

export type RowIframeUpdateManyLocalizationInput = {
  data: RowIframeUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowQuoteUpdateOneInlineInput = {
  /** Create and connect one RowQuote document */
  create?: Maybe<RowQuoteCreateInput>
  /** Update single RowQuote document */
  update?: Maybe<RowQuoteUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowQuote document */
  upsert?: Maybe<RowQuoteUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowQuote document */
  connect?: Maybe<RowQuoteWhereUniqueInput>
  /** Disconnect currently connected RowQuote document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowQuote document */
  delete?: Maybe<Scalars['Boolean']>
}

/** Identifies documents */
export type RowVacancyManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowVacancyWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowVacancyWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowVacancyWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  vacancystatus?: Maybe<VacancyStatus>
  /** All values that are not equal to given value. */
  vacancystatus_not?: Maybe<VacancyStatus>
  /** All values that are contained in given list. */
  vacancystatus_in?: Maybe<Array<VacancyStatus>>
  /** All values that are not contained in given list. */
  vacancystatus_not_in?: Maybe<Array<VacancyStatus>>
  pdf?: Maybe<AssetWhereInput>
}

export type AssetUpdateManyLocalizationDataInput = {
  fileName?: Maybe<Scalars['String']>
  height?: Maybe<Scalars['Float']>
  width?: Maybe<Scalars['Float']>
  size?: Maybe<Scalars['Float']>
  mimeType?: Maybe<Scalars['String']>
  alt?: Maybe<Scalars['String']>
}

export type RowHeroVideoLinks = LinkExternal | LinkInternal

export type LinkInternalUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: LinkInternalWhereInput
  /** Update many input */
  data: LinkInternalUpdateManyInput
}

export type RowCompanySliderOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'

export type RowYoutubeVideoUpdateInput = {
  /** videoId input for default locale (nl) */
  videoId?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
  page?: Maybe<PageUpdateManyInlineInput>
  /** Manage document localizations */
  localizations?: Maybe<RowYoutubeVideoUpdateLocalizationsInput>
}

export type RowYoutubeVideoUpdateManyInlineInput = {
  /** Create and connect multiple RowYoutubeVideo documents */
  create?: Maybe<Array<RowYoutubeVideoCreateInput>>
  /** Connect multiple existing RowYoutubeVideo documents */
  connect?: Maybe<Array<RowYoutubeVideoConnectInput>>
  /** Override currently-connected documents with multiple existing RowYoutubeVideo documents */
  set?: Maybe<Array<RowYoutubeVideoWhereUniqueInput>>
  /** Update multiple RowYoutubeVideo documents */
  update?: Maybe<Array<RowYoutubeVideoUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowYoutubeVideo documents */
  upsert?: Maybe<Array<RowYoutubeVideoUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowYoutubeVideo documents */
  disconnect?: Maybe<Array<RowYoutubeVideoWhereUniqueInput>>
  /** Delete multiple RowYoutubeVideo documents */
  delete?: Maybe<Array<RowYoutubeVideoWhereUniqueInput>>
}

export type ServiceOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'

export type ServiceCreateOneInlineInput = {
  /** Create and connect one Service document */
  create?: Maybe<ServiceCreateInput>
  /** Connect one existing Service document */
  connect?: Maybe<ServiceWhereUniqueInput>
}

/** Identifies documents */
export type RowColorBlockWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowColorBlockWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowColorBlockWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowColorBlockWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identifier?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identifier_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identifier_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identifier_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identifier_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identifier_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identifier_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identifier_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identifier_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identifier_not_ends_with?: Maybe<Scalars['String']>
  blockTitle?: Maybe<RowTitleWhereInput>
}

export type RowColumnTwoUpdateLocalizationDataInput = {
  colOne?: Maybe<Scalars['RichTextAST']>
  colTwo?: Maybe<Scalars['RichTextAST']>
}

export type RowCompanySliderUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: Maybe<Scalars['String']>
}

export type RowIpadVerticalUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowIpadVerticalWhereUniqueInput
  /** Upsert data */
  data: RowIpadVerticalUpsertInput
}

export type RowCenteredTextCreateManyInlineInput = {
  /** Create and connect multiple existing RowCenteredText documents */
  create?: Maybe<Array<RowCenteredTextCreateInput>>
  /** Connect multiple existing RowCenteredText documents */
  connect?: Maybe<Array<RowCenteredTextWhereUniqueInput>>
}

export type PublishLocaleInput = {
  /** Locales to publish */
  locale: Locale
  /** Stages to publish selected locales to */
  stages: Array<Stage>
}

export type RowIphoneWithTextUpsertLocalizationInput = {
  update: RowIphoneWithTextUpdateLocalizationDataInput
  create: RowIphoneWithTextCreateLocalizationDataInput
  locale: Locale
}

export type RowModuleUpdateLocalizationDataInput = {
  description?: Maybe<Scalars['RichTextAST']>
}

export type RowQuoteCreateOneInlineInput = {
  /** Create and connect one RowQuote document */
  create?: Maybe<RowQuoteCreateInput>
  /** Connect one existing RowQuote document */
  connect?: Maybe<RowQuoteWhereUniqueInput>
}

export type RowTitleUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowTitleWhereUniqueInput
  /** Upsert data */
  data: RowTitleUpsertInput
}

/** Accepts either HEX or RGBA color value. At least one of hex or rgba value should be passed. If both are passed RGBA is used. */
export type ColorInput = {
  hex?: Maybe<Scalars['Hex']>
  rgba?: Maybe<RgbaInput>
}

export type RowCollaborationCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  content: Scalars['RichTextAST']
}

/** An edge in a connection. */
export type RowModuleEdge = {
  __typename?: 'RowModuleEdge'
  /** The item at the end of the edge. */
  node: RowModule
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowServiceListUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowServiceListWhereUniqueInput
  /** Upsert data */
  data: RowServiceListUpsertInput
}

export type ReviewUpdateManyInlineInput = {
  /** Create and connect multiple Review documents */
  create?: Maybe<Array<ReviewCreateInput>>
  /** Connect multiple existing Review documents */
  connect?: Maybe<Array<ReviewConnectInput>>
  /** Override currently-connected documents with multiple existing Review documents */
  set?: Maybe<Array<ReviewWhereUniqueInput>>
  /** Update multiple Review documents */
  update?: Maybe<Array<ReviewUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple Review documents */
  upsert?: Maybe<Array<ReviewUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple Review documents */
  disconnect?: Maybe<Array<ReviewWhereUniqueInput>>
  /** Delete multiple Review documents */
  delete?: Maybe<Array<ReviewWhereUniqueInput>>
}

/** An edge in a connection. */
export type PersonEdge = {
  __typename?: 'PersonEdge'
  /** The item at the end of the edge. */
  node: Person
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowCollaborationUpdateLocalizationInput = {
  data: RowCollaborationUpdateLocalizationDataInput
  locale: Locale
}

export type RowColorSpeedBlockUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowColorSpeedBlockWhereUniqueInput
  /** Document to update */
  data: RowColorSpeedBlockUpdateInput
}

export type RowIframeCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  title: Scalars['String']
}

/** An edge in a connection. */
export type RowImageSwiperEdge = {
  __typename?: 'RowImageSwiperEdge'
  /** The item at the end of the edge. */
  node: RowImageSwiper
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type LinkExternalUpdateOneInlineInput = {
  /** Create and connect one LinkExternal document */
  create?: Maybe<LinkExternalCreateInput>
  /** Update single LinkExternal document */
  update?: Maybe<LinkExternalUpdateWithNestedWhereUniqueInput>
  /** Upsert single LinkExternal document */
  upsert?: Maybe<LinkExternalUpsertWithNestedWhereUniqueInput>
  /** Connect existing LinkExternal document */
  connect?: Maybe<LinkExternalWhereUniqueInput>
  /** Disconnect currently connected LinkExternal document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected LinkExternal document */
  delete?: Maybe<Scalars['Boolean']>
}

export type HeaderUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: Maybe<Scalars['String']>
}

export type PageUpdateManyLocalizationInput = {
  data: PageUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowColumnBoxedUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: Maybe<Scalars['String']>
}

export type RowColumnTwoUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowColumnTwoWhereInput
  /** Update many input */
  data: RowColumnTwoUpdateManyInput
}

export type RowIconWithTextListUpdateManyInlineInput = {
  /** Create and connect multiple RowIconWithTextList documents */
  create?: Maybe<Array<RowIconWithTextListCreateInput>>
  /** Connect multiple existing RowIconWithTextList documents */
  connect?: Maybe<Array<RowIconWithTextListConnectInput>>
  /** Override currently-connected documents with multiple existing RowIconWithTextList documents */
  set?: Maybe<Array<RowIconWithTextListWhereUniqueInput>>
  /** Update multiple RowIconWithTextList documents */
  update?: Maybe<Array<RowIconWithTextListUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowIconWithTextList documents */
  upsert?: Maybe<Array<RowIconWithTextListUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowIconWithTextList documents */
  disconnect?: Maybe<Array<RowIconWithTextListWhereUniqueInput>>
  /** Delete multiple RowIconWithTextList documents */
  delete?: Maybe<Array<RowIconWithTextListWhereUniqueInput>>
}

export type RowIframeUpdateManyInput = {
  /** title input for default locale (nl) */
  title?: Maybe<Scalars['String']>
  iframeUrl?: Maybe<Scalars['String']>
  /** Optional updates to localizations */
  localizations?: Maybe<RowIframeUpdateManyLocalizationsInput>
}

export type RowIpadVerticalUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowIpadVerticalWhereUniqueInput
  /** Document to update */
  data: RowIpadVerticalUpdateInput
}

/** Representing a color value comprising of HEX, RGBA and css color values */
export type Color = {
  __typename?: 'Color'
  hex: Scalars['Hex']
  rgba: Rgba
  css: Scalars['String']
}

export type FooterAdditionalLinks = LinkInternal | LinkExternal

export type RowQuoteCreateManyInlineInput = {
  /** Create and connect multiple existing RowQuote documents */
  create?: Maybe<Array<RowQuoteCreateInput>>
  /** Connect multiple existing RowQuote documents */
  connect?: Maybe<Array<RowQuoteWhereUniqueInput>>
}

export type FooterUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: FooterWhereUniqueInput
  /** Document to update */
  data: FooterUpdateInput
}

/** References LinkExternal record uniquely */
export type LinkExternalWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

/** References PaperCard record uniquely */
export type PaperCardWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  title?: Maybe<Scalars['String']>
}

export type RowIconWithTextListCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** text input for default locale (nl) */
  text: Scalars['RichTextAST']
  /** rowOne input for default locale (nl) */
  rowOne: Scalars['RichTextAST']
  rowOneIcon?: Maybe<AssetCreateOneInlineInput>
  /** rowTwo input for default locale (nl) */
  rowTwo: Scalars['RichTextAST']
  rowTwoIcon?: Maybe<AssetCreateOneInlineInput>
  /** rowThree input for default locale (nl) */
  rowThree?: Maybe<Scalars['RichTextAST']>
  rowThreeIcon?: Maybe<AssetCreateOneInlineInput>
  /** rowFour input for default locale (nl) */
  rowFour?: Maybe<Scalars['RichTextAST']>
  rowFourIcon?: Maybe<AssetCreateOneInlineInput>
  /** rowFive input for default locale (nl) */
  rowFive?: Maybe<Scalars['RichTextAST']>
  rowFiveIcon?: Maybe<AssetCreateOneInlineInput>
  /** rowSix input for default locale (nl) */
  rowSix?: Maybe<Scalars['RichTextAST']>
  rowSixIcon?: Maybe<AssetCreateOneInlineInput>
  page?: Maybe<PageCreateManyInlineInput>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowIconWithTextListCreateLocalizationsInput>
}

export type RowLaptopCreateManyInlineInput = {
  /** Create and connect multiple existing RowLaptop documents */
  create?: Maybe<Array<RowLaptopCreateInput>>
  /** Connect multiple existing RowLaptop documents */
  connect?: Maybe<Array<RowLaptopWhereUniqueInput>>
}

export type RowPeopleWithTextCreateManyInlineInput = {
  /** Create and connect multiple existing RowPeopleWithText documents */
  create?: Maybe<Array<RowPeopleWithTextCreateInput>>
  /** Connect multiple existing RowPeopleWithText documents */
  connect?: Maybe<Array<RowPeopleWithTextWhereUniqueInput>>
}

/** Identifies documents */
export type AwardManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<AwardWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<AwardWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<AwardWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  asset?: Maybe<AssetWhereInput>
}

export type ReviewUpdateManyLocalizationInput = {
  data: ReviewUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowGoogleMapCreateOneInlineInput = {
  /** Create and connect one RowGoogleMap document */
  create?: Maybe<RowGoogleMapCreateInput>
  /** Connect one existing RowGoogleMap document */
  connect?: Maybe<RowGoogleMapWhereUniqueInput>
}

export type RowIphoneWithTextCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  colOne: Scalars['RichTextAST']
  colTwoOptional?: Maybe<Scalars['RichTextAST']>
  colThreeOptional?: Maybe<Scalars['RichTextAST']>
}

export type RowPeopleWithTextUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowPeopleWithTextCreateLocalizationInput>>
  /** Localizations to update */
  update?: Maybe<Array<RowPeopleWithTextUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowPeopleWithTextUpsertLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
}

export type RowRecentBlogPostUpdateInput = {
  identity?: Maybe<Scalars['String']>
  /** header input for default locale (nl) */
  header?: Maybe<Scalars['RichTextAST']>
  link?: Maybe<LinkInternalUpdateOneInlineInput>
  page?: Maybe<PageUpdateManyInlineInput>
  /** forceLocalization input for default locale (nl) */
  forceLocalization?: Maybe<Scalars['String']>
  /** Manage document localizations */
  localizations?: Maybe<RowRecentBlogPostUpdateLocalizationsInput>
}

export type PartnerUpdateInput = {
  name?: Maybe<Scalars['String']>
  url?: Maybe<Scalars['String']>
  logo?: Maybe<AssetUpdateOneInlineInput>
  rowCollaboration?: Maybe<ParnerListUpdateManyInlineInput>
}

/** Identifies documents */
export type ParnerListManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ParnerListWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ParnerListWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ParnerListWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  partners_every?: Maybe<PartnerWhereInput>
  partners_some?: Maybe<PartnerWhereInput>
  partners_none?: Maybe<PartnerWhereInput>
  rowCollaboration_every?: Maybe<RowCollaborationWhereInput>
  rowCollaboration_some?: Maybe<RowCollaborationWhereInput>
  rowCollaboration_none?: Maybe<RowCollaborationWhereInput>
}

export type RowCollaborationConnectInput = {
  /** Document to connect */
  where: RowCollaborationWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowCollaborationUpdateLocalizationDataInput = {
  content?: Maybe<Scalars['RichTextAST']>
}

export type RowReviewUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowReviewWhereInput
  /** Update many input */
  data: RowReviewUpdateManyInput
}

/** Identifies documents */
export type CompanyManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<CompanyWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<CompanyWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<CompanyWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  name?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  name_not_ends_with?: Maybe<Scalars['String']>
  logo?: Maybe<AssetWhereInput>
  rowCompanySlider_every?: Maybe<RowCompanySliderWhereInput>
  rowCompanySlider_some?: Maybe<RowCompanySliderWhereInput>
  rowCompanySlider_none?: Maybe<RowCompanySliderWhereInput>
}

export type PageCreateOneInlineInput = {
  /** Create and connect one Page document */
  create?: Maybe<PageCreateInput>
  /** Connect one existing Page document */
  connect?: Maybe<PageWhereUniqueInput>
}

export type ReviewCreateOneInlineInput = {
  /** Create and connect one Review document */
  create?: Maybe<ReviewCreateInput>
  /** Connect one existing Review document */
  connect?: Maybe<ReviewWhereUniqueInput>
}

export type RowContactUpdateManyInlineInput = {
  /** Create and connect multiple RowContact documents */
  create?: Maybe<Array<RowContactCreateInput>>
  /** Connect multiple existing RowContact documents */
  connect?: Maybe<Array<RowContactConnectInput>>
  /** Override currently-connected documents with multiple existing RowContact documents */
  set?: Maybe<Array<RowContactWhereUniqueInput>>
  /** Update multiple RowContact documents */
  update?: Maybe<Array<RowContactUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowContact documents */
  upsert?: Maybe<Array<RowContactUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowContact documents */
  disconnect?: Maybe<Array<RowContactWhereUniqueInput>>
  /** Delete multiple RowContact documents */
  delete?: Maybe<Array<RowContactWhereUniqueInput>>
}

export type RowIconWithTextListUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowIconWithTextListUpdateManyLocalizationInput>>
}

export type RowHeroVideoLinksUpdateManyInlineInput = {
  /** Create and connect multiple RowHeroVideoLinks documents */
  create?: Maybe<Array<RowHeroVideoLinksCreateInput>>
  /** Connect multiple existing RowHeroVideoLinks documents */
  connect?: Maybe<Array<RowHeroVideoLinksConnectInput>>
  /** Override currently-connected documents with multiple existing RowHeroVideoLinks documents */
  set?: Maybe<Array<RowHeroVideoLinksWhereUniqueInput>>
  /** Update multiple RowHeroVideoLinks documents */
  update?: Maybe<Array<RowHeroVideoLinksUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowHeroVideoLinks documents */
  upsert?: Maybe<Array<RowHeroVideoLinksUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowHeroVideoLinks documents */
  disconnect?: Maybe<Array<RowHeroVideoLinksWhereUniqueInput>>
  /** Delete multiple RowHeroVideoLinks documents */
  delete?: Maybe<Array<RowHeroVideoLinksWhereUniqueInput>>
}

export type PageUpsertInput = {
  /** Create document if it didn't exist */
  create: PageCreateInput
  /** Update document if it exists */
  update: PageUpdateInput
}

export type RowExplanationCreateOneInlineInput = {
  /** Create and connect one RowExplanation document */
  create?: Maybe<RowExplanationCreateInput>
  /** Connect one existing RowExplanation document */
  connect?: Maybe<RowExplanationWhereUniqueInput>
}

export type RowIframeCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowIframeCreateLocalizationInput>>
}

export type RowImageSwiperUpdateInput = {
  name?: Maybe<Scalars['String']>
  assets?: Maybe<AssetUpdateManyInlineInput>
  page?: Maybe<PageUpdateManyInlineInput>
}

export type RowLaptopWithTextCreateOneInlineInput = {
  /** Create and connect one RowLaptopWithText document */
  create?: Maybe<RowLaptopWithTextCreateInput>
  /** Connect one existing RowLaptopWithText document */
  connect?: Maybe<RowLaptopWithTextWhereUniqueInput>
}

/** References RowLineHorizontal record uniquely */
export type RowLineHorizontalWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

export type RowHeroVideoLinksUpdateManyWithNestedWhereInput = {
  LinkExternal?: Maybe<LinkExternalUpdateManyWithNestedWhereInput>
  LinkInternal?: Maybe<LinkInternalUpdateManyWithNestedWhereInput>
}

export type FooterCreateOneInlineInput = {
  /** Create and connect one Footer document */
  create?: Maybe<FooterCreateInput>
  /** Connect one existing Footer document */
  connect?: Maybe<FooterWhereUniqueInput>
}

export type RowIconWithTextListUpdateManyLocalizationDataInput = {
  text?: Maybe<Scalars['RichTextAST']>
  rowOne?: Maybe<Scalars['RichTextAST']>
  rowTwo?: Maybe<Scalars['RichTextAST']>
  rowThree?: Maybe<Scalars['RichTextAST']>
  rowFour?: Maybe<Scalars['RichTextAST']>
  rowFive?: Maybe<Scalars['RichTextAST']>
  rowSix?: Maybe<Scalars['RichTextAST']>
}

export type RowImageOrVideoConnectInput = {
  /** Document to connect */
  where: RowImageOrVideoWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowLineHorizontal = Node & {
  __typename?: 'RowLineHorizontal'
  /** System stage field */
  stage: Stage
  /** Get the document in other stages */
  documentInStages: Array<RowLineHorizontal>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  page: Array<Page>
  active: Scalars['Boolean']
  /** List of RowLineHorizontal versions */
  history: Array<Version>
}

export type RowLineHorizontalDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowLineHorizontalPageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowLineHorizontalHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowQuoteUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowQuoteWhereUniqueInput
  /** Document to update */
  data: RowQuoteUpdateInput
}

/** References RowReview record uniquely */
export type RowReviewWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

export type RowReviewUpdateInput = {
  identity?: Maybe<Scalars['String']>
  reviews?: Maybe<ReviewUpdateManyInlineInput>
  page?: Maybe<PageUpdateManyInlineInput>
}

export type RowYoutubeVideoUpsertInput = {
  /** Create document if it didn't exist */
  create: RowYoutubeVideoCreateInput
  /** Update document if it exists */
  update: RowYoutubeVideoUpdateInput
}

export type RowCenteredTextUpdateManyLocalizationDataInput = {
  text?: Maybe<Scalars['RichTextAST']>
}

export type RowColumnOneOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'

/** A connection to a list of items. */
export type RowImageOrVideoConnection = {
  __typename?: 'RowImageOrVideoConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowImageOrVideoEdge>
  aggregate: Aggregate
}

export type FooterCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  text: Scalars['RichTextAST']
  contact: Scalars['RichTextAST']
  address: Scalars['RichTextAST']
}

export type PageContentConnectInput = {
  RowLinksWithText?: Maybe<RowLinksWithTextConnectInput>
  RowColumnThree?: Maybe<RowColumnThreeConnectInput>
  RowColumnTwo?: Maybe<RowColumnTwoConnectInput>
  RowRecentBlogPost?: Maybe<RowRecentBlogPostConnectInput>
  RowPeopleWithText?: Maybe<RowPeopleWithTextConnectInput>
  RowColumnOne?: Maybe<RowColumnOneConnectInput>
  RowCompanySlider?: Maybe<RowCompanySliderConnectInput>
  RowHero?: Maybe<RowHeroConnectInput>
  RowYoutubeVideo?: Maybe<RowYoutubeVideoConnectInput>
  RowIpadHorizontal?: Maybe<RowIpadHorizontalConnectInput>
  RowColorSpeedBlock?: Maybe<RowColorSpeedBlockConnectInput>
  RowContact?: Maybe<RowContactConnectInput>
  RowGoogleMap?: Maybe<RowGoogleMapConnectInput>
  RowVacancy?: Maybe<RowVacancyConnectInput>
  RowLaptopWithText?: Maybe<RowLaptopWithTextConnectInput>
  RowIconWithTextList?: Maybe<RowIconWithTextListConnectInput>
  RowLineHorizontal?: Maybe<RowLineHorizontalConnectInput>
  RowIphoneWithText?: Maybe<RowIphoneWithTextConnectInput>
  RowIpadVertical?: Maybe<RowIpadVerticalConnectInput>
  RowLaptop?: Maybe<RowLaptopConnectInput>
  RowImageOrVideo?: Maybe<RowImageOrVideoConnectInput>
  RowPhonesSlider?: Maybe<RowPhonesSliderConnectInput>
  RowIframe?: Maybe<RowIframeConnectInput>
  RowQuote?: Maybe<RowQuoteConnectInput>
  RowColorBlock?: Maybe<RowColorBlockConnectInput>
  RowIntro?: Maybe<RowIntroConnectInput>
  RowTitle?: Maybe<RowTitleConnectInput>
  RowReview?: Maybe<RowReviewConnectInput>
  RowServiceList?: Maybe<RowServiceListConnectInput>
  RowCollaboration?: Maybe<RowCollaborationConnectInput>
  RowExplanation?: Maybe<RowExplanationConnectInput>
  RowColumnBoxed?: Maybe<RowColumnBoxedConnectInput>
  RowModule?: Maybe<RowModuleConnectInput>
  RowModulePage?: Maybe<RowModulePageConnectInput>
  RowCenteredText?: Maybe<RowCenteredTextConnectInput>
  RowImageSwiper?: Maybe<RowImageSwiperConnectInput>
}

export type RowHeroCreateOneInlineInput = {
  /** Create and connect one RowHero document */
  create?: Maybe<RowHeroCreateInput>
  /** Connect one existing RowHero document */
  connect?: Maybe<RowHeroWhereUniqueInput>
}

/** References Company record uniquely */
export type CompanyWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  name?: Maybe<Scalars['String']>
}

/** Identifies documents */
export type PaperCardManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<PaperCardWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<PaperCardWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<PaperCardWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  title?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  title_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  title_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  title_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  title_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  title_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  title_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  title_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  title_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  title_not_ends_with?: Maybe<Scalars['String']>
  headerBanner?: Maybe<AssetWhereInput>
  cardLink?: Maybe<LinkInternalWhereInput>
  buttonText?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  buttonText_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  buttonText_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  buttonText_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  buttonText_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  buttonText_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  buttonText_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  buttonText_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  buttonText_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  buttonText_not_ends_with?: Maybe<Scalars['String']>
  rowExplanation?: Maybe<RowExplanationWhereInput>
}

export type RowCenteredTextOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'name_ASC'
  | 'name_DESC'

export type RowContactCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  text: Scalars['RichTextAST']
}

export type AwardUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: AwardWhereUniqueInput
  /** Document to update */
  data: AwardUpdateInput
}

export type DocumentFileTypes =
  | 'jpg'
  | 'odp'
  | 'ods'
  | 'odt'
  | 'png'
  | 'svg'
  | 'txt'
  | 'webp'
  | 'docx'
  | 'pdf'
  | 'html'
  | 'doc'
  | 'xlsx'
  | 'xls'
  | 'pptx'
  | 'ppt'

export type LinkExternalCreateManyInlineInput = {
  /** Create and connect multiple existing LinkExternal documents */
  create?: Maybe<Array<LinkExternalCreateInput>>
  /** Connect multiple existing LinkExternal documents */
  connect?: Maybe<Array<LinkExternalWhereUniqueInput>>
}

export type RowColumnBoxedUpdateInput = {
  identity?: Maybe<Scalars['String']>
  /** content input for default locale (nl) */
  content?: Maybe<Scalars['RichTextAST']>
  page?: Maybe<PageUpdateManyInlineInput>
  /** Manage document localizations */
  localizations?: Maybe<RowColumnBoxedUpdateLocalizationsInput>
}

export type RowGoogleMapCreateManyInlineInput = {
  /** Create and connect multiple existing RowGoogleMap documents */
  create?: Maybe<Array<RowGoogleMapCreateInput>>
  /** Connect multiple existing RowGoogleMap documents */
  connect?: Maybe<Array<RowGoogleMapWhereUniqueInput>>
}

export type _MutationKind =
  | 'create'
  | 'publish'
  | 'unpublish'
  | 'update'
  | 'upsert'
  | 'delete'
  | 'updateMany'
  | 'publishMany'
  | 'unpublishMany'
  | 'deleteMany'

export type RowColumnThreeConnectInput = {
  /** Document to connect */
  where: RowColumnThreeWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowPeopleWithText = Node & {
  __typename?: 'RowPeopleWithText'
  /** System stage field */
  stage: Stage
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowPeopleWithText>
  /** Get the document in other stages */
  documentInStages: Array<RowPeopleWithText>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  text: RichText
  links: Array<LinkInternal>
  page: Array<Page>
  /** List of RowPeopleWithText versions */
  history: Array<Version>
}

export type RowPeopleWithTextLocalizationsArgs = {
  locales?: Array<Locale>
  includeCurrent?: Scalars['Boolean']
}

export type RowPeopleWithTextDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowPeopleWithTextCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowPeopleWithTextUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowPeopleWithTextPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowPeopleWithTextLinksArgs = {
  where?: Maybe<LinkInternalWhereInput>
  orderBy?: Maybe<LinkInternalOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowPeopleWithTextPageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowPeopleWithTextHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowTitleUpsertLocalizationInput = {
  update: RowTitleUpdateLocalizationDataInput
  create: RowTitleCreateLocalizationDataInput
  locale: Locale
}

/** An edge in a connection. */
export type RowColorBlockEdge = {
  __typename?: 'RowColorBlockEdge'
  /** The item at the end of the edge. */
  node: RowColorBlock
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type ParnerListUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: ParnerListWhereUniqueInput
  /** Upsert data */
  data: ParnerListUpsertInput
}

export type RowCompanySliderCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  companies?: Maybe<CompanyCreateManyInlineInput>
  page?: Maybe<PageCreateManyInlineInput>
}

export type LinkInternalCreateOneInlineInput = {
  /** Create and connect one LinkInternal document */
  create?: Maybe<LinkInternalCreateInput>
  /** Connect one existing LinkInternal document */
  connect?: Maybe<LinkInternalWhereUniqueInput>
}

export type PageUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<PageUpdateManyLocalizationInput>>
}

export type RowColumnOneUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowColumnOneCreateLocalizationInput>>
  /** Localizations to update */
  update?: Maybe<Array<RowColumnOneUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowColumnOneUpsertLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
}

export type RowHeroUpdateOneInlineInput = {
  /** Create and connect one RowHero document */
  create?: Maybe<RowHeroCreateInput>
  /** Update single RowHero document */
  update?: Maybe<RowHeroUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowHero document */
  upsert?: Maybe<RowHeroUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowHero document */
  connect?: Maybe<RowHeroWhereUniqueInput>
  /** Disconnect currently connected RowHero document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowHero document */
  delete?: Maybe<Scalars['Boolean']>
}

export type RowLaptopWithTextUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowLaptopWithTextWhereUniqueInput
  /** Upsert data */
  data: RowLaptopWithTextUpsertInput
}

/** Identifies documents */
export type RowModuleWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowModuleWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowModuleWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowModuleWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  name?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  name_not_ends_with?: Maybe<Scalars['String']>
  link?: Maybe<LinkExternalWhereInput>
}

export type RowQuoteConnectInput = {
  /** Document to connect */
  where: RowQuoteWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowRecentBlogPostUpsertLocalizationInput = {
  update: RowRecentBlogPostUpdateLocalizationDataInput
  create: RowRecentBlogPostCreateLocalizationDataInput
  locale: Locale
}

export type ContactFormUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: ContactFormWhereInput
  /** Update many input */
  data: ContactFormUpdateManyInput
}

export type RowHeroVideoLinksCreateOneInlineInput = {
  /** Create and connect one RowHeroVideoLinks document */
  create?: Maybe<RowHeroVideoLinksCreateInput>
  /** Connect one existing RowHeroVideoLinks document */
  connect?: Maybe<RowHeroVideoLinksWhereUniqueInput>
}

export type LinkInternalCreateLocalizationInput = {
  /** Localization input */
  data: LinkInternalCreateLocalizationDataInput
  locale: Locale
}

export type Person = Node & {
  __typename?: 'Person'
  /** System stage field */
  stage: Stage
  /** Get the document in other stages */
  documentInStages: Array<Person>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  name: Scalars['String']
  avatar: Asset
  page: Array<Page>
  header: Array<Header>
  rowHero: Array<RowHero>
  /** List of Person versions */
  history: Array<Version>
}

export type PersonDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type PersonAvatarArgs = {
  locales?: Maybe<Array<Locale>>
}

export type PersonPageArgs = {
  where?: Maybe<PageWhereInput>
  orderBy?: Maybe<PageOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type PersonHeaderArgs = {
  where?: Maybe<HeaderWhereInput>
  orderBy?: Maybe<HeaderOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type PersonRowHeroArgs = {
  where?: Maybe<RowHeroWhereInput>
  orderBy?: Maybe<RowHeroOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type PersonHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowColumnBoxedUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowColumnBoxedWhereInput
  /** Update many input */
  data: RowColumnBoxedUpdateManyInput
}

export type RowIpadHorizontalUpdateOneInlineInput = {
  /** Create and connect one RowIpadHorizontal document */
  create?: Maybe<RowIpadHorizontalCreateInput>
  /** Update single RowIpadHorizontal document */
  update?: Maybe<RowIpadHorizontalUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowIpadHorizontal document */
  upsert?: Maybe<RowIpadHorizontalUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowIpadHorizontal document */
  connect?: Maybe<RowIpadHorizontalWhereUniqueInput>
  /** Disconnect currently connected RowIpadHorizontal document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowIpadHorizontal document */
  delete?: Maybe<Scalars['Boolean']>
}

export type RowModuleUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowModuleWhereUniqueInput
  /** Upsert data */
  data: RowModuleUpsertInput
}

export type Version = {
  __typename?: 'Version'
  id: Scalars['ID']
  stage: Stage
  revision: Scalars['Int']
  createdAt: Scalars['DateTime']
}

/** Identifies documents */
export type AssetWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<AssetWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<AssetWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<AssetWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  handle?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  handle_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  handle_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  handle_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  handle_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  handle_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  handle_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  handle_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  handle_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  handle_not_ends_with?: Maybe<Scalars['String']>
  fileName?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  fileName_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  fileName_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  fileName_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  fileName_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  fileName_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  fileName_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  fileName_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  fileName_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  fileName_not_ends_with?: Maybe<Scalars['String']>
  height?: Maybe<Scalars['Float']>
  /** All values that are not equal to given value. */
  height_not?: Maybe<Scalars['Float']>
  /** All values that are contained in given list. */
  height_in?: Maybe<Array<Scalars['Float']>>
  /** All values that are not contained in given list. */
  height_not_in?: Maybe<Array<Scalars['Float']>>
  /** All values less than the given value. */
  height_lt?: Maybe<Scalars['Float']>
  /** All values less than or equal the given value. */
  height_lte?: Maybe<Scalars['Float']>
  /** All values greater than the given value. */
  height_gt?: Maybe<Scalars['Float']>
  /** All values greater than or equal the given value. */
  height_gte?: Maybe<Scalars['Float']>
  width?: Maybe<Scalars['Float']>
  /** All values that are not equal to given value. */
  width_not?: Maybe<Scalars['Float']>
  /** All values that are contained in given list. */
  width_in?: Maybe<Array<Scalars['Float']>>
  /** All values that are not contained in given list. */
  width_not_in?: Maybe<Array<Scalars['Float']>>
  /** All values less than the given value. */
  width_lt?: Maybe<Scalars['Float']>
  /** All values less than or equal the given value. */
  width_lte?: Maybe<Scalars['Float']>
  /** All values greater than the given value. */
  width_gt?: Maybe<Scalars['Float']>
  /** All values greater than or equal the given value. */
  width_gte?: Maybe<Scalars['Float']>
  size?: Maybe<Scalars['Float']>
  /** All values that are not equal to given value. */
  size_not?: Maybe<Scalars['Float']>
  /** All values that are contained in given list. */
  size_in?: Maybe<Array<Scalars['Float']>>
  /** All values that are not contained in given list. */
  size_not_in?: Maybe<Array<Scalars['Float']>>
  /** All values less than the given value. */
  size_lt?: Maybe<Scalars['Float']>
  /** All values less than or equal the given value. */
  size_lte?: Maybe<Scalars['Float']>
  /** All values greater than the given value. */
  size_gt?: Maybe<Scalars['Float']>
  /** All values greater than or equal the given value. */
  size_gte?: Maybe<Scalars['Float']>
  mimeType?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  mimeType_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  mimeType_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  mimeType_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  mimeType_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  mimeType_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  mimeType_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  mimeType_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  mimeType_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  mimeType_not_ends_with?: Maybe<Scalars['String']>
  alt?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  alt_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  alt_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  alt_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  alt_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  alt_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  alt_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  alt_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  alt_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  alt_not_ends_with?: Maybe<Scalars['String']>
  personAvatar_every?: Maybe<PersonWhereInput>
  personAvatar_some?: Maybe<PersonWhereInput>
  personAvatar_none?: Maybe<PersonWhereInput>
  companyLogo_every?: Maybe<CompanyWhereInput>
  companyLogo_some?: Maybe<CompanyWhereInput>
  companyLogo_none?: Maybe<CompanyWhereInput>
  rowColumnThreeColOneIcon_every?: Maybe<RowColumnThreeWhereInput>
  rowColumnThreeColOneIcon_some?: Maybe<RowColumnThreeWhereInput>
  rowColumnThreeColOneIcon_none?: Maybe<RowColumnThreeWhereInput>
  rowColumnThreeColTwoIcon_every?: Maybe<RowColumnThreeWhereInput>
  rowColumnThreeColTwoIcon_some?: Maybe<RowColumnThreeWhereInput>
  rowColumnThreeColTwoIcon_none?: Maybe<RowColumnThreeWhereInput>
  rowColumnThreeColThreeIcon_every?: Maybe<RowColumnThreeWhereInput>
  rowColumnThreeColThreeIcon_some?: Maybe<RowColumnThreeWhereInput>
  rowColumnThreeColThreeIcon_none?: Maybe<RowColumnThreeWhereInput>
  rowColumnOneColOneIcon_every?: Maybe<RowColumnOneWhereInput>
  rowColumnOneColOneIcon_some?: Maybe<RowColumnOneWhereInput>
  rowColumnOneColOneIcon_none?: Maybe<RowColumnOneWhereInput>
  rowHeroAsset_every?: Maybe<RowHeroWhereInput>
  rowHeroAsset_some?: Maybe<RowHeroWhereInput>
  rowHeroAsset_none?: Maybe<RowHeroWhereInput>
  pageAsset_every?: Maybe<PageWhereInput>
  pageAsset_some?: Maybe<PageWhereInput>
  pageAsset_none?: Maybe<PageWhereInput>
  rowColumnTwoColOneIcon_every?: Maybe<RowColumnTwoWhereInput>
  rowColumnTwoColOneIcon_some?: Maybe<RowColumnTwoWhereInput>
  rowColumnTwoColOneIcon_none?: Maybe<RowColumnTwoWhereInput>
  rowColumnTwoColTwoIcon_every?: Maybe<RowColumnTwoWhereInput>
  rowColumnTwoColTwoIcon_some?: Maybe<RowColumnTwoWhereInput>
  rowColumnTwoColTwoIcon_none?: Maybe<RowColumnTwoWhereInput>
  awardAsset_every?: Maybe<AwardWhereInput>
  awardAsset_some?: Maybe<AwardWhereInput>
  awardAsset_none?: Maybe<AwardWhereInput>
  rowOneIconRowIconWithTextList_every?: Maybe<RowIconWithTextListWhereInput>
  rowOneIconRowIconWithTextList_some?: Maybe<RowIconWithTextListWhereInput>
  rowOneIconRowIconWithTextList_none?: Maybe<RowIconWithTextListWhereInput>
  rowTwoIconRowIconWithTextList_every?: Maybe<RowIconWithTextListWhereInput>
  rowTwoIconRowIconWithTextList_some?: Maybe<RowIconWithTextListWhereInput>
  rowTwoIconRowIconWithTextList_none?: Maybe<RowIconWithTextListWhereInput>
  rowThreeIconRowIconWithTextList_every?: Maybe<RowIconWithTextListWhereInput>
  rowThreeIconRowIconWithTextList_some?: Maybe<RowIconWithTextListWhereInput>
  rowThreeIconRowIconWithTextList_none?: Maybe<RowIconWithTextListWhereInput>
  rowFourIconRowIconWithTextList_every?: Maybe<RowIconWithTextListWhereInput>
  rowFourIconRowIconWithTextList_some?: Maybe<RowIconWithTextListWhereInput>
  rowFourIconRowIconWithTextList_none?: Maybe<RowIconWithTextListWhereInput>
  rowFiveIconRowIconWithTextList_every?: Maybe<RowIconWithTextListWhereInput>
  rowFiveIconRowIconWithTextList_some?: Maybe<RowIconWithTextListWhereInput>
  rowFiveIconRowIconWithTextList_none?: Maybe<RowIconWithTextListWhereInput>
  rowSixIconRowIconWithTextList_every?: Maybe<RowIconWithTextListWhereInput>
  rowSixIconRowIconWithTextList_some?: Maybe<RowIconWithTextListWhereInput>
  rowSixIconRowIconWithTextList_none?: Maybe<RowIconWithTextListWhereInput>
  rowIpadHorizontalBackgroundImage_every?: Maybe<RowIpadHorizontalWhereInput>
  rowIpadHorizontalBackgroundImage_some?: Maybe<RowIpadHorizontalWhereInput>
  rowIpadHorizontalBackgroundImage_none?: Maybe<RowIpadHorizontalWhereInput>
  rowIpadHorizontalIPadContent_every?: Maybe<RowIpadHorizontalWhereInput>
  rowIpadHorizontalIPadContent_some?: Maybe<RowIpadHorizontalWhereInput>
  rowIpadHorizontalIPadContent_none?: Maybe<RowIpadHorizontalWhereInput>
  rowIphoneWithTextBackgroundImage_every?: Maybe<RowIphoneWithTextWhereInput>
  rowIphoneWithTextBackgroundImage_some?: Maybe<RowIphoneWithTextWhereInput>
  rowIphoneWithTextBackgroundImage_none?: Maybe<RowIphoneWithTextWhereInput>
  rowIphoneWithTextIPhoneVideo_every?: Maybe<RowIphoneWithTextWhereInput>
  rowIphoneWithTextIPhoneVideo_some?: Maybe<RowIphoneWithTextWhereInput>
  rowIphoneWithTextIPhoneVideo_none?: Maybe<RowIphoneWithTextWhereInput>
  rowIphoneWithTextThemeImage_every?: Maybe<RowIphoneWithTextWhereInput>
  rowIphoneWithTextThemeImage_some?: Maybe<RowIphoneWithTextWhereInput>
  rowIphoneWithTextThemeImage_none?: Maybe<RowIphoneWithTextWhereInput>
  rowIpadVerticalBackgroundimage_every?: Maybe<RowIpadVerticalWhereInput>
  rowIpadVerticalBackgroundimage_some?: Maybe<RowIpadVerticalWhereInput>
  rowIpadVerticalBackgroundimage_none?: Maybe<RowIpadVerticalWhereInput>
  rowIpadVerticalIpadcontent_every?: Maybe<RowIpadVerticalWhereInput>
  rowIpadVerticalIpadcontent_some?: Maybe<RowIpadVerticalWhereInput>
  rowIpadVerticalIpadcontent_none?: Maybe<RowIpadVerticalWhereInput>
  rowLaptopBackgroundimage_every?: Maybe<RowLaptopWhereInput>
  rowLaptopBackgroundimage_some?: Maybe<RowLaptopWhereInput>
  rowLaptopBackgroundimage_none?: Maybe<RowLaptopWhereInput>
  rowLaptopLaptopcontent_every?: Maybe<RowLaptopWhereInput>
  rowLaptopLaptopcontent_some?: Maybe<RowLaptopWhereInput>
  rowLaptopLaptopcontent_none?: Maybe<RowLaptopWhereInput>
  rowVacancyPdf_every?: Maybe<RowVacancyWhereInput>
  rowVacancyPdf_some?: Maybe<RowVacancyWhereInput>
  rowVacancyPdf_none?: Maybe<RowVacancyWhereInput>
  rowImageOrVideoAsset_every?: Maybe<RowImageOrVideoWhereInput>
  rowImageOrVideoAsset_some?: Maybe<RowImageOrVideoWhereInput>
  rowImageOrVideoAsset_none?: Maybe<RowImageOrVideoWhereInput>
  rowLaptopWithTextBackgroundImage_every?: Maybe<RowLaptopWithTextWhereInput>
  rowLaptopWithTextBackgroundImage_some?: Maybe<RowLaptopWithTextWhereInput>
  rowLaptopWithTextBackgroundImage_none?: Maybe<RowLaptopWithTextWhereInput>
  rowLaptopWithTextLaptopContent_every?: Maybe<RowLaptopWithTextWhereInput>
  rowLaptopWithTextLaptopContent_some?: Maybe<RowLaptopWithTextWhereInput>
  rowLaptopWithTextLaptopContent_none?: Maybe<RowLaptopWithTextWhereInput>
  rowPhonesSliderPhoneOneContent_every?: Maybe<RowPhonesSliderWhereInput>
  rowPhonesSliderPhoneOneContent_some?: Maybe<RowPhonesSliderWhereInput>
  rowPhonesSliderPhoneOneContent_none?: Maybe<RowPhonesSliderWhereInput>
  rowPhonesSliderPhoneTwoContent_every?: Maybe<RowPhonesSliderWhereInput>
  rowPhonesSliderPhoneTwoContent_some?: Maybe<RowPhonesSliderWhereInput>
  rowPhonesSliderPhoneTwoContent_none?: Maybe<RowPhonesSliderWhereInput>
  rowPhonesSliderPhoneThreeContent_every?: Maybe<RowPhonesSliderWhereInput>
  rowPhonesSliderPhoneThreeContent_some?: Maybe<RowPhonesSliderWhereInput>
  rowPhonesSliderPhoneThreeContent_none?: Maybe<RowPhonesSliderWhereInput>
  rowPhonesSliderBackgroundImage_every?: Maybe<RowPhonesSliderWhereInput>
  rowPhonesSliderBackgroundImage_some?: Maybe<RowPhonesSliderWhereInput>
  rowPhonesSliderBackgroundImage_none?: Maybe<RowPhonesSliderWhereInput>
  pageLogo_every?: Maybe<PageWhereInput>
  pageLogo_some?: Maybe<PageWhereInput>
  pageLogo_none?: Maybe<PageWhereInput>
  partnerLogo_every?: Maybe<PartnerWhereInput>
  partnerLogo_some?: Maybe<PartnerWhereInput>
  partnerLogo_none?: Maybe<PartnerWhereInput>
  paperCardHeaderBanner_every?: Maybe<PaperCardWhereInput>
  paperCardHeaderBanner_some?: Maybe<PaperCardWhereInput>
  paperCardHeaderBanner_none?: Maybe<PaperCardWhereInput>
  rowImageSwiperAsset_every?: Maybe<RowImageSwiperWhereInput>
  rowImageSwiperAsset_some?: Maybe<RowImageSwiperWhereInput>
  rowImageSwiperAsset_none?: Maybe<RowImageSwiperWhereInput>
}

export type RowIconWithTextListUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowIconWithTextListWhereInput
  /** Update many input */
  data: RowIconWithTextListUpdateManyInput
}

/** A connection to a list of items. */
export type RowIframeConnection = {
  __typename?: 'RowIframeConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowIframeEdge>
  aggregate: Aggregate
}

export type RowPeopleWithTextCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  /** text input for default locale (nl) */
  text: Scalars['RichTextAST']
  links?: Maybe<LinkInternalCreateManyInlineInput>
  page?: Maybe<PageCreateManyInlineInput>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowPeopleWithTextCreateLocalizationsInput>
}

export type DocumentVersion = {
  __typename?: 'DocumentVersion'
  id: Scalars['ID']
  stage: Stage
  revision: Scalars['Int']
  createdAt: Scalars['DateTime']
  data?: Maybe<Scalars['Json']>
}

export type RowColorBlockUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowColorBlockWhereInput
  /** Update many input */
  data: RowColorBlockUpdateManyInput
}

export type RowColumnOneUpdateInput = {
  rowColorBlock?: Maybe<RowColorBlockUpdateOneInlineInput>
  identity?: Maybe<Scalars['String']>
  /** colOne input for default locale (nl) */
  colOne?: Maybe<Scalars['RichTextAST']>
  colOneIcon?: Maybe<AssetUpdateOneInlineInput>
  page?: Maybe<PageUpdateManyInlineInput>
  /** Manage document localizations */
  localizations?: Maybe<RowColumnOneUpdateLocalizationsInput>
}

export type RowModuleUpsertInput = {
  /** Create document if it didn't exist */
  create: RowModuleCreateInput
  /** Update document if it exists */
  update: RowModuleUpdateInput
}

/** A connection to a list of items. */
export type RowVacancyConnection = {
  __typename?: 'RowVacancyConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowVacancyEdge>
  aggregate: Aggregate
}

/** A connection to a list of items. */
export type ParnerListConnection = {
  __typename?: 'ParnerListConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<ParnerListEdge>
  aggregate: Aggregate
}

/** Identifies documents */
export type RowColorSpeedBlockManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowColorSpeedBlockWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowColorSpeedBlockWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowColorSpeedBlockWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identifier?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identifier_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identifier_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identifier_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identifier_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identifier_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identifier_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identifier_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identifier_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identifier_not_ends_with?: Maybe<Scalars['String']>
  colorBlockTitle?: Maybe<RowTitleWhereInput>
}

export type RowColorSpeedBlockCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  identifier: Scalars['String']
  colorBlockTitle?: Maybe<RowTitleCreateOneInlineInput>
  colTwo: Scalars['RichTextAST']
  colOne: Scalars['RichTextAST']
  colThree: Scalars['RichTextAST']
  colFour: Scalars['RichTextAST']
  page?: Maybe<PageCreateManyInlineInput>
}

export type RowColumnOneUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowColumnOneWhereUniqueInput
  /** Document to update */
  data: RowColumnOneUpdateInput
}

export type RowModulePageUpsertLocalizationInput = {
  update: RowModulePageUpdateLocalizationDataInput
  create: RowModulePageCreateLocalizationDataInput
  locale: Locale
}

export type RowPeopleWithTextUpdateLocalizationDataInput = {
  text?: Maybe<Scalars['RichTextAST']>
}

export type RowColorBlockBlockContentWhereInput = {
  RowColumnThree?: Maybe<RowColumnThreeWhereInput>
  RowColumnTwo?: Maybe<RowColumnTwoWhereInput>
  RowColumnOne?: Maybe<RowColumnOneWhereInput>
}

export type VersionWhereInput = {
  id: Scalars['ID']
  stage: Stage
  revision: Scalars['Int']
}

export type RowColorBlockUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowColorBlockWhereUniqueInput
  /** Document to update */
  data: RowColorBlockUpdateInput
}

export type RowIpadHorizontalUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowIpadHorizontalWhereUniqueInput
  /** Document to update */
  data: RowIpadHorizontalUpdateInput
}

export type RowRecentBlogPostCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  header?: Maybe<Scalars['RichTextAST']>
  forceLocalization?: Maybe<Scalars['String']>
}

export type PageContentWhereUniqueInput = {
  RowLinksWithText?: Maybe<RowLinksWithTextWhereUniqueInput>
  RowColumnThree?: Maybe<RowColumnThreeWhereUniqueInput>
  RowColumnTwo?: Maybe<RowColumnTwoWhereUniqueInput>
  RowRecentBlogPost?: Maybe<RowRecentBlogPostWhereUniqueInput>
  RowPeopleWithText?: Maybe<RowPeopleWithTextWhereUniqueInput>
  RowColumnOne?: Maybe<RowColumnOneWhereUniqueInput>
  RowCompanySlider?: Maybe<RowCompanySliderWhereUniqueInput>
  RowHero?: Maybe<RowHeroWhereUniqueInput>
  RowYoutubeVideo?: Maybe<RowYoutubeVideoWhereUniqueInput>
  RowIpadHorizontal?: Maybe<RowIpadHorizontalWhereUniqueInput>
  RowColorSpeedBlock?: Maybe<RowColorSpeedBlockWhereUniqueInput>
  RowContact?: Maybe<RowContactWhereUniqueInput>
  RowGoogleMap?: Maybe<RowGoogleMapWhereUniqueInput>
  RowVacancy?: Maybe<RowVacancyWhereUniqueInput>
  RowLaptopWithText?: Maybe<RowLaptopWithTextWhereUniqueInput>
  RowIconWithTextList?: Maybe<RowIconWithTextListWhereUniqueInput>
  RowLineHorizontal?: Maybe<RowLineHorizontalWhereUniqueInput>
  RowIphoneWithText?: Maybe<RowIphoneWithTextWhereUniqueInput>
  RowIpadVertical?: Maybe<RowIpadVerticalWhereUniqueInput>
  RowLaptop?: Maybe<RowLaptopWhereUniqueInput>
  RowImageOrVideo?: Maybe<RowImageOrVideoWhereUniqueInput>
  RowPhonesSlider?: Maybe<RowPhonesSliderWhereUniqueInput>
  RowIframe?: Maybe<RowIframeWhereUniqueInput>
  RowQuote?: Maybe<RowQuoteWhereUniqueInput>
  RowColorBlock?: Maybe<RowColorBlockWhereUniqueInput>
  RowIntro?: Maybe<RowIntroWhereUniqueInput>
  RowTitle?: Maybe<RowTitleWhereUniqueInput>
  RowReview?: Maybe<RowReviewWhereUniqueInput>
  RowServiceList?: Maybe<RowServiceListWhereUniqueInput>
  RowCollaboration?: Maybe<RowCollaborationWhereUniqueInput>
  RowExplanation?: Maybe<RowExplanationWhereUniqueInput>
  RowColumnBoxed?: Maybe<RowColumnBoxedWhereUniqueInput>
  RowModule?: Maybe<RowModuleWhereUniqueInput>
  RowModulePage?: Maybe<RowModulePageWhereUniqueInput>
  RowCenteredText?: Maybe<RowCenteredTextWhereUniqueInput>
  RowImageSwiper?: Maybe<RowImageSwiperWhereUniqueInput>
}

export type LinkInternalUpdateManyLocalizationInput = {
  data: LinkInternalUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowModulePageUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowModulePageWhereInput
  /** Update many input */
  data: RowModulePageUpdateManyInput
}

export type RowRecentBlogPostUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowRecentBlogPostWhereUniqueInput
  /** Upsert data */
  data: RowRecentBlogPostUpsertInput
}

export type RowRecentBlogPostUpdateOneInlineInput = {
  /** Create and connect one RowRecentBlogPost document */
  create?: Maybe<RowRecentBlogPostCreateInput>
  /** Update single RowRecentBlogPost document */
  update?: Maybe<RowRecentBlogPostUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowRecentBlogPost document */
  upsert?: Maybe<RowRecentBlogPostUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowRecentBlogPost document */
  connect?: Maybe<RowRecentBlogPostWhereUniqueInput>
  /** Disconnect currently connected RowRecentBlogPost document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowRecentBlogPost document */
  delete?: Maybe<Scalars['Boolean']>
}

export type ServiceCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  page?: Maybe<PageCreateOneInlineInput>
  content: Scalars['RichTextAST']
  rowServiceList?: Maybe<RowServiceListCreateManyInlineInput>
}

export type RowGoogleMapUpsertInput = {
  /** Create document if it didn't exist */
  create: RowGoogleMapCreateInput
  /** Update document if it exists */
  update: RowGoogleMapUpdateInput
}

export type RowIntroUpdateManyInput = {
  identity?: Maybe<Scalars['String']>
  /** content input for default locale (nl) */
  content?: Maybe<Scalars['RichTextAST']>
  /** Optional updates to localizations */
  localizations?: Maybe<RowIntroUpdateManyLocalizationsInput>
}

/** Identifies documents */
export type ServiceManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ServiceWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ServiceWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ServiceWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  page?: Maybe<PageWhereInput>
  rowServiceList_every?: Maybe<RowServiceListWhereInput>
  rowServiceList_some?: Maybe<RowServiceListWhereInput>
  rowServiceList_none?: Maybe<RowServiceListWhereInput>
}

export type PaperCardOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'buttonText_ASC'
  | 'buttonText_DESC'

export type RowCenteredText = Node & {
  __typename?: 'RowCenteredText'
  /** System stage field */
  stage: Stage
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowCenteredText>
  /** Get the document in other stages */
  documentInStages: Array<RowCenteredText>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  name: Scalars['String']
  text: RichText
  page: Array<Page>
  /** List of RowCenteredText versions */
  history: Array<Version>
}

export type RowCenteredTextLocalizationsArgs = {
  locales?: Array<Locale>
  includeCurrent?: Scalars['Boolean']
}

export type RowCenteredTextDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowCenteredTextCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowCenteredTextUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowCenteredTextPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowCenteredTextPageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowCenteredTextHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowLinksWithTextConnectInput = {
  /** Document to connect */
  where: RowLinksWithTextWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

/** Identifies documents */
export type RowServiceListWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowServiceListWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowServiceListWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowServiceListWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identifier?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identifier_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identifier_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identifier_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identifier_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identifier_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identifier_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identifier_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identifier_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identifier_not_ends_with?: Maybe<Scalars['String']>
  services_every?: Maybe<ServiceWhereInput>
  services_some?: Maybe<ServiceWhereInput>
  services_none?: Maybe<ServiceWhereInput>
}

/** Identifies documents */
export type RowVacancyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowVacancyWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowVacancyWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowVacancyWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  vacancystatus?: Maybe<VacancyStatus>
  /** All values that are not equal to given value. */
  vacancystatus_not?: Maybe<VacancyStatus>
  /** All values that are contained in given list. */
  vacancystatus_in?: Maybe<Array<VacancyStatus>>
  /** All values that are not contained in given list. */
  vacancystatus_not_in?: Maybe<Array<VacancyStatus>>
  /** Matches if the field array contains *all* items provided to the filter and order does match */
  perks?: Maybe<Array<Scalars['String']>>
  /** Matches if the field array does not contains *all* items provided to the filter or order does not match */
  perks_not?: Maybe<Array<Scalars['String']>>
  /** Matches if the field array contains *all* items provided to the filter */
  perks_contains_all?: Maybe<Array<Scalars['String']>>
  /** Matches if the field array contains at least one item provided to the filter */
  perks_contains_some?: Maybe<Array<Scalars['String']>>
  /** Matches if the field array does not contain any of the items provided to the filter */
  perks_contains_none?: Maybe<Array<Scalars['String']>>
  pdf?: Maybe<AssetWhereInput>
}

export type ServiceConnectInput = {
  /** Document to connect */
  where: ServiceWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type FooterUpdateLocalizationDataInput = {
  text?: Maybe<Scalars['RichTextAST']>
  contact?: Maybe<Scalars['RichTextAST']>
  address?: Maybe<Scalars['RichTextAST']>
}

export type CompanyCreateOneInlineInput = {
  /** Create and connect one Company document */
  create?: Maybe<CompanyCreateInput>
  /** Connect one existing Company document */
  connect?: Maybe<CompanyWhereUniqueInput>
}

export type PageUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: PageWhereUniqueInput
  /** Document to update */
  data: PageUpdateInput
}

export type ReviewUpdateManyInput = {
  identity?: Maybe<Scalars['String']>
  customerName?: Maybe<Scalars['String']>
  rating?: Maybe<Scalars['Int']>
  /** quote input for default locale (nl) */
  quote?: Maybe<Scalars['String']>
  /** Optional updates to localizations */
  localizations?: Maybe<ReviewUpdateManyLocalizationsInput>
}

export type RowIntroUpsertLocalizationInput = {
  update: RowIntroUpdateLocalizationDataInput
  create: RowIntroCreateLocalizationDataInput
  locale: Locale
}

export type CompanyUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: CompanyWhereUniqueInput
  /** Upsert data */
  data: CompanyUpsertInput
}

export type RowIntroOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'

export type RowLineHorizontalCreateOneInlineInput = {
  /** Create and connect one RowLineHorizontal document */
  create?: Maybe<RowLineHorizontalCreateInput>
  /** Connect one existing RowLineHorizontal document */
  connect?: Maybe<RowLineHorizontalWhereUniqueInput>
}

export type RowReviewUpdateManyInlineInput = {
  /** Create and connect multiple RowReview documents */
  create?: Maybe<Array<RowReviewCreateInput>>
  /** Connect multiple existing RowReview documents */
  connect?: Maybe<Array<RowReviewConnectInput>>
  /** Override currently-connected documents with multiple existing RowReview documents */
  set?: Maybe<Array<RowReviewWhereUniqueInput>>
  /** Update multiple RowReview documents */
  update?: Maybe<Array<RowReviewUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowReview documents */
  upsert?: Maybe<Array<RowReviewUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowReview documents */
  disconnect?: Maybe<Array<RowReviewWhereUniqueInput>>
  /** Delete multiple RowReview documents */
  delete?: Maybe<Array<RowReviewWhereUniqueInput>>
}

export type LinkInternalCreateManyInlineInput = {
  /** Create and connect multiple existing LinkInternal documents */
  create?: Maybe<Array<LinkInternalCreateInput>>
  /** Connect multiple existing LinkInternal documents */
  connect?: Maybe<Array<LinkInternalWhereUniqueInput>>
}

export type AwardConnectInput = {
  /** Document to connect */
  where: AwardWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type LinkInternalUpdateLocalizationInput = {
  data: LinkInternalUpdateLocalizationDataInput
  locale: Locale
}

export type PageUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<PageCreateLocalizationInput>>
  /** Localizations to update */
  update?: Maybe<Array<PageUpdateLocalizationInput>>
  upsert?: Maybe<Array<PageUpsertLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
}

export type RowColumnThreeUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowColumnThreeCreateLocalizationInput>>
  /** Localizations to update */
  update?: Maybe<Array<RowColumnThreeUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowColumnThreeUpsertLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
}

/** A connection to a list of items. */
export type RowExplanationConnection = {
  __typename?: 'RowExplanationConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowExplanationEdge>
  aggregate: Aggregate
}

export type RowModulePageUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowModulePageUpdateManyLocalizationInput>>
}

export type RowServiceListUpdateOneInlineInput = {
  /** Create and connect one RowServiceList document */
  create?: Maybe<RowServiceListCreateInput>
  /** Update single RowServiceList document */
  update?: Maybe<RowServiceListUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowServiceList document */
  upsert?: Maybe<RowServiceListUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowServiceList document */
  connect?: Maybe<RowServiceListWhereUniqueInput>
  /** Disconnect currently connected RowServiceList document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowServiceList document */
  delete?: Maybe<Scalars['Boolean']>
}

export type AssetUpsertLocalizationInput = {
  update: AssetUpdateLocalizationDataInput
  create: AssetCreateLocalizationDataInput
  locale: Locale
}

export type RowYoutubeVideoUpdateLocalizationInput = {
  data: RowYoutubeVideoUpdateLocalizationDataInput
  locale: Locale
}

export type PersonOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'name_ASC'
  | 'name_DESC'

export type RowCompanySliderUpdateManyInlineInput = {
  /** Create and connect multiple RowCompanySlider documents */
  create?: Maybe<Array<RowCompanySliderCreateInput>>
  /** Connect multiple existing RowCompanySlider documents */
  connect?: Maybe<Array<RowCompanySliderConnectInput>>
  /** Override currently-connected documents with multiple existing RowCompanySlider documents */
  set?: Maybe<Array<RowCompanySliderWhereUniqueInput>>
  /** Update multiple RowCompanySlider documents */
  update?: Maybe<Array<RowCompanySliderUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowCompanySlider documents */
  upsert?: Maybe<Array<RowCompanySliderUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowCompanySlider documents */
  disconnect?: Maybe<Array<RowCompanySliderWhereUniqueInput>>
  /** Delete multiple RowCompanySlider documents */
  delete?: Maybe<Array<RowCompanySliderWhereUniqueInput>>
}

export type RowGoogleMapUpdateLocalizationDataInput = {
  address?: Maybe<Scalars['RichTextAST']>
  businessInfo?: Maybe<Scalars['RichTextAST']>
}

export type RowIpadHorizontalUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowIpadHorizontalWhereInput
  /** Update many input */
  data: RowIpadHorizontalUpdateManyInput
}

/** References ParnerList record uniquely */
export type ParnerListWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

export type RowColumnBoxedCreateManyInlineInput = {
  /** Create and connect multiple existing RowColumnBoxed documents */
  create?: Maybe<Array<RowColumnBoxedCreateInput>>
  /** Connect multiple existing RowColumnBoxed documents */
  connect?: Maybe<Array<RowColumnBoxedWhereUniqueInput>>
}

export type RowColumnTwoUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowColumnTwoWhereUniqueInput
  /** Document to update */
  data: RowColumnTwoUpdateInput
}

export type RowIphoneWithTextCreateLocalizationInput = {
  /** Localization input */
  data: RowIphoneWithTextCreateLocalizationDataInput
  locale: Locale
}

export type RowModulePageCreateLocalizationInput = {
  /** Localization input */
  data: RowModulePageCreateLocalizationDataInput
  locale: Locale
}

export type RowVacancyCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  vacancystatus?: Maybe<VacancyStatus>
  /** perks input for default locale (nl) */
  perks: Array<Scalars['String']>
  text: Scalars['RichTextAST']
  pdf: AssetCreateOneInlineInput
  page?: Maybe<PageCreateManyInlineInput>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowVacancyCreateLocalizationsInput>
}

/** References RowColumnBoxed record uniquely */
export type RowColumnBoxedWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type RowCollaborationOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identifier_ASC'
  | 'identifier_DESC'

export type RowIframeCreateManyInlineInput = {
  /** Create and connect multiple existing RowIframe documents */
  create?: Maybe<Array<RowIframeCreateInput>>
  /** Connect multiple existing RowIframe documents */
  connect?: Maybe<Array<RowIframeWhereUniqueInput>>
}

export type RowReviewCreateManyInlineInput = {
  /** Create and connect multiple existing RowReview documents */
  create?: Maybe<Array<RowReviewCreateInput>>
  /** Connect multiple existing RowReview documents */
  connect?: Maybe<Array<RowReviewWhereUniqueInput>>
}

export type DocumentOutputInput = {
  /**  Transforms a document into a desired file type. See this matrix for format support:  PDF:	jpg, odp, ods, odt, png, svg, txt, and webp DOC:	docx, html, jpg, odt, pdf, png, svg, txt, and webp DOCX:	doc, html, jpg, odt, pdf, png, svg, txt, and webp ODT:	doc, docx, html, jpg, pdf, png, svg, txt, and webp XLS:	jpg, pdf, ods, png, svg, xlsx, and webp XLSX:	jpg, pdf, ods, png, svg, xls, and webp ODS:	jpg, pdf, png, xls, svg, xlsx, and webp PPT:	jpg, odp, pdf, png, svg, pptx, and webp PPTX:	jpg, odp, pdf, png, svg, ppt, and webp ODP:	jpg, pdf, png, ppt, svg, pptx, and webp BMP:	jpg, odp, ods, odt, pdf, png, svg, and webp GIF:	jpg, odp, ods, odt, pdf, png, svg, and webp JPG:	jpg, odp, ods, odt, pdf, png, svg, and webp PNG:	jpg, odp, ods, odt, pdf, png, svg, and webp WEBP:	jpg, odp, ods, odt, pdf, png, svg, and webp TIFF:	jpg, odp, ods, odt, pdf, png, svg, and webp AI:	    jpg, odp, ods, odt, pdf, png, svg, and webp PSD:	jpg, odp, ods, odt, pdf, png, svg, and webp SVG:	jpg, odp, ods, odt, pdf, png, and webp HTML:	jpg, odt, pdf, svg, txt, and webp TXT:	jpg, html, odt, pdf, svg, and webp  */
  format?: Maybe<DocumentFileTypes>
}

export type RowColumnThreeOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'

export type RowColumnThreeCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  colOne: Scalars['RichTextAST']
  colTwo: Scalars['RichTextAST']
  colThree: Scalars['RichTextAST']
}

export type RowIphoneWithTextCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowIphoneWithTextCreateLocalizationInput>>
}

export type RowIphoneWithTextUpdateLocalizationDataInput = {
  colOne?: Maybe<Scalars['RichTextAST']>
  colTwoOptional?: Maybe<Scalars['RichTextAST']>
  colThreeOptional?: Maybe<Scalars['RichTextAST']>
}

export type RowCenteredTextUpdateLocalizationDataInput = {
  text?: Maybe<Scalars['RichTextAST']>
}

/** Identifies documents */
export type RowImageSwiperWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowImageSwiperWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowImageSwiperWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowImageSwiperWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  name?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  name_not_ends_with?: Maybe<Scalars['String']>
  assets_every?: Maybe<AssetWhereInput>
  assets_some?: Maybe<AssetWhereInput>
  assets_none?: Maybe<AssetWhereInput>
}

export type AssetUpdateManyLocalizationInput = {
  data: AssetUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowCenteredTextCreateOneInlineInput = {
  /** Create and connect one RowCenteredText document */
  create?: Maybe<RowCenteredTextCreateInput>
  /** Connect one existing RowCenteredText document */
  connect?: Maybe<RowCenteredTextWhereUniqueInput>
}

/** Identifies documents */
export type RowLinksWithTextWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowLinksWithTextWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowLinksWithTextWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowLinksWithTextWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  pages_every?: Maybe<PageWhereInput>
  pages_some?: Maybe<PageWhereInput>
  pages_none?: Maybe<PageWhereInput>
  links_every?: Maybe<LinkInternalWhereInput>
  links_some?: Maybe<LinkInternalWhereInput>
  links_none?: Maybe<LinkInternalWhereInput>
}

/** References RowPeopleWithText record uniquely */
export type RowPeopleWithTextWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

/** A connection to a list of items. */
export type RowReviewConnection = {
  __typename?: 'RowReviewConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowReviewEdge>
  aggregate: Aggregate
}

export type RowReviewCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  reviews?: Maybe<ReviewCreateManyInlineInput>
  page?: Maybe<PageCreateManyInlineInput>
}

export type RowVacancyUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowVacancyWhereUniqueInput
  /** Upsert data */
  data: RowVacancyUpsertInput
}

export type AssetCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<AssetCreateLocalizationInput>>
}

/** A connection to a list of items. */
export type ReviewConnection = {
  __typename?: 'ReviewConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<ReviewEdge>
  aggregate: Aggregate
}

export type RowTitleUpdateManyLocalizationDataInput = {
  rowTitle?: Maybe<Scalars['RichTextAST']>
}

/** An edge in a connection. */
export type AwardEdge = {
  __typename?: 'AwardEdge'
  /** The item at the end of the edge. */
  node: Award
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

/** References RowCollaboration record uniquely */
export type RowCollaborationWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identifier?: Maybe<Scalars['String']>
}

export type RowColumnOneUpdateManyInput = {
  /** colOne input for default locale (nl) */
  colOne?: Maybe<Scalars['RichTextAST']>
  /** Optional updates to localizations */
  localizations?: Maybe<RowColumnOneUpdateManyLocalizationsInput>
}

export type RowGoogleMapCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  address: Scalars['RichTextAST']
  businessInfo: Scalars['RichTextAST']
}

export type RowIphoneWithTextUpdateManyLocalizationDataInput = {
  colOne?: Maybe<Scalars['RichTextAST']>
  colTwoOptional?: Maybe<Scalars['RichTextAST']>
  colThreeOptional?: Maybe<Scalars['RichTextAST']>
}

export type RowLinksWithTextUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowLinksWithTextWhereUniqueInput
  /** Document to update */
  data: RowLinksWithTextUpdateInput
}

export type RowVacancyUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowVacancyWhereInput
  /** Update many input */
  data: RowVacancyUpdateManyInput
}

export type RowHeroVideoLinksWhereInput = {
  LinkExternal?: Maybe<LinkExternalWhereInput>
  LinkInternal?: Maybe<LinkInternalWhereInput>
}

export type CompanyConnectInput = {
  /** Document to connect */
  where: CompanyWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

/** Identifies documents */
export type RowImageSwiperManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowImageSwiperWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowImageSwiperWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowImageSwiperWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  name?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  name_not_ends_with?: Maybe<Scalars['String']>
  assets_every?: Maybe<AssetWhereInput>
  assets_some?: Maybe<AssetWhereInput>
  assets_none?: Maybe<AssetWhereInput>
}

export type FooterAdditionalLinksWhereInput = {
  LinkInternal?: Maybe<LinkInternalWhereInput>
  LinkExternal?: Maybe<LinkExternalWhereInput>
}

export type RowColorBlockBlockContentUpdateOneInlineInput = {
  /** Create and connect one RowColorBlockBlockContent document */
  create?: Maybe<RowColorBlockBlockContentCreateInput>
  /** Update single RowColorBlockBlockContent document */
  update?: Maybe<RowColorBlockBlockContentUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowColorBlockBlockContent document */
  upsert?: Maybe<RowColorBlockBlockContentUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowColorBlockBlockContent document */
  connect?: Maybe<RowColorBlockBlockContentWhereUniqueInput>
  /** Disconnect currently connected RowColorBlockBlockContent document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowColorBlockBlockContent document */
  delete?: Maybe<Scalars['Boolean']>
}

export type PaperCardUpdateManyInput = {
  cardContent?: Maybe<Scalars['RichTextAST']>
  buttonText?: Maybe<Scalars['String']>
}

export type RowCollaborationUpsertLocalizationInput = {
  update: RowCollaborationUpdateLocalizationDataInput
  create: RowCollaborationCreateLocalizationDataInput
  locale: Locale
}

/** References RowExplanation record uniquely */
export type RowExplanationWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identifier?: Maybe<Scalars['String']>
}

export type RowIconWithTextListUpdateManyLocalizationInput = {
  data: RowIconWithTextListUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowCenteredTextCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowCenteredTextCreateLocalizationInput>>
}

export type RowGoogleMapUpdateManyLocalizationInput = {
  data: RowGoogleMapUpdateManyLocalizationDataInput
  locale: Locale
}

/** Identifies documents */
export type RowImageOrVideoManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowImageOrVideoWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowImageOrVideoWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowImageOrVideoWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  asset?: Maybe<AssetWhereInput>
}

export type RowColumnBoxedUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowColumnBoxedWhereUniqueInput
  /** Document to update */
  data: RowColumnBoxedUpdateInput
}

export type PartnerUpdateManyInlineInput = {
  /** Create and connect multiple Partner documents */
  create?: Maybe<Array<PartnerCreateInput>>
  /** Connect multiple existing Partner documents */
  connect?: Maybe<Array<PartnerConnectInput>>
  /** Override currently-connected documents with multiple existing Partner documents */
  set?: Maybe<Array<PartnerWhereUniqueInput>>
  /** Update multiple Partner documents */
  update?: Maybe<Array<PartnerUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple Partner documents */
  upsert?: Maybe<Array<PartnerUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple Partner documents */
  disconnect?: Maybe<Array<PartnerWhereUniqueInput>>
  /** Delete multiple Partner documents */
  delete?: Maybe<Array<PartnerWhereUniqueInput>>
}

export type RowCollaborationUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowCollaborationWhereInput
  /** Update many input */
  data: RowCollaborationUpdateManyInput
}

/** References RowTitle record uniquely */
export type RowTitleWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

export type FooterAdditionalLinksWhereUniqueInput = {
  LinkInternal?: Maybe<LinkInternalWhereUniqueInput>
  LinkExternal?: Maybe<LinkExternalWhereUniqueInput>
}

export type HeaderCreateManyInlineInput = {
  /** Create and connect multiple existing Header documents */
  create?: Maybe<Array<HeaderCreateInput>>
  /** Connect multiple existing Header documents */
  connect?: Maybe<Array<HeaderWhereUniqueInput>>
}

export type _FilterKind =
  | 'search'
  | 'AND'
  | 'OR'
  | 'NOT'
  | 'eq'
  | 'eq_not'
  | 'in'
  | 'not_in'
  | 'lt'
  | 'lte'
  | 'gt'
  | 'gte'
  | 'contains'
  | 'not_contains'
  | 'starts_with'
  | 'not_starts_with'
  | 'ends_with'
  | 'not_ends_with'
  | 'contains_all'
  | 'contains_some'
  | 'contains_none'
  | 'relational_single'
  | 'relational_every'
  | 'relational_some'
  | 'relational_none'

/** Customer reviews */
export type Review = Node & {
  __typename?: 'Review'
  /** System stage field */
  stage: Stage
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<Review>
  /** Get the document in other stages */
  documentInStages: Array<Review>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  customerName: Scalars['String']
  /** Enter a number from 1 to 5. */
  rating: Scalars['Int']
  quote: Scalars['String']
  rowReview: Array<RowReview>
  /** List of Review versions */
  history: Array<Version>
}

/** Customer reviews */
export type ReviewLocalizationsArgs = {
  locales?: Array<Locale>
  includeCurrent?: Scalars['Boolean']
}

/** Customer reviews */
export type ReviewDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

/** Customer reviews */
export type ReviewCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

/** Customer reviews */
export type ReviewUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

/** Customer reviews */
export type ReviewPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

/** Customer reviews */
export type ReviewRowReviewArgs = {
  where?: Maybe<RowReviewWhereInput>
  orderBy?: Maybe<RowReviewOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Customer reviews */
export type ReviewHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowColumnOneCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowColumnOneCreateLocalizationInput>>
}

export type RowIframe = Node & {
  __typename?: 'RowIframe'
  /** System stage field */
  stage: Stage
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowIframe>
  /** Get the document in other stages */
  documentInStages: Array<RowIframe>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  title: Scalars['String']
  iframeUrl: Scalars['String']
  page: Array<Page>
  /** List of RowIframe versions */
  history: Array<Version>
}

export type RowIframeLocalizationsArgs = {
  locales?: Array<Locale>
  includeCurrent?: Scalars['Boolean']
}

export type RowIframeDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowIframeCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowIframeUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowIframePublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowIframePageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowIframeHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type ContactFormUpdateInput = {
  name?: Maybe<Scalars['String']>
  email?: Maybe<Scalars['String']>
  phoneNumber?: Maybe<Scalars['String']>
  subject?: Maybe<ContactSubject>
  message?: Maybe<Scalars['String']>
}

export type RowColumnOneCreateManyInlineInput = {
  /** Create and connect multiple existing RowColumnOne documents */
  create?: Maybe<Array<RowColumnOneCreateInput>>
  /** Connect multiple existing RowColumnOne documents */
  connect?: Maybe<Array<RowColumnOneWhereUniqueInput>>
}

/** An edge in a connection. */
export type RowReviewEdge = {
  __typename?: 'RowReviewEdge'
  /** The item at the end of the edge. */
  node: RowReview
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowTitleUpsertInput = {
  /** Create document if it didn't exist */
  create: RowTitleCreateInput
  /** Update document if it exists */
  update: RowTitleUpdateInput
}

export type PageContent =
  | RowLinksWithText
  | RowColumnThree
  | RowColumnTwo
  | RowRecentBlogPost
  | RowPeopleWithText
  | RowColumnOne
  | RowCompanySlider
  | RowHero
  | RowYoutubeVideo
  | RowIpadHorizontal
  | RowColorSpeedBlock
  | RowContact
  | RowGoogleMap
  | RowVacancy
  | RowLaptopWithText
  | RowIconWithTextList
  | RowLineHorizontal
  | RowIphoneWithText
  | RowIpadVertical
  | RowLaptop
  | RowImageOrVideo
  | RowPhonesSlider
  | RowIframe
  | RowQuote
  | RowColorBlock
  | RowIntro
  | RowTitle
  | RowReview
  | RowServiceList
  | RowCollaboration
  | RowExplanation
  | RowColumnBoxed
  | RowModule
  | RowModulePage
  | RowCenteredText
  | RowImageSwiper

export type PaperCardUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: PaperCardWhereInput
  /** Update many input */
  data: PaperCardUpdateManyInput
}

export type Partner = Node & {
  __typename?: 'Partner'
  /** System stage field */
  stage: Stage
  /** Get the document in other stages */
  documentInStages: Array<Partner>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  name: Scalars['String']
  url: Scalars['String']
  logo: Asset
  rowCollaboration: Array<ParnerList>
  /** List of Partner versions */
  history: Array<Version>
}

export type PartnerDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type PartnerLogoArgs = {
  locales?: Maybe<Array<Locale>>
}

export type PartnerRowCollaborationArgs = {
  where?: Maybe<ParnerListWhereInput>
  orderBy?: Maybe<ParnerListOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type PartnerHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type ReviewUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<ReviewUpdateManyLocalizationInput>>
}

export type RowPeopleWithTextUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowPeopleWithTextUpdateManyLocalizationInput>>
}

export type PaperCardCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  title: Scalars['String']
  headerBanner: AssetCreateOneInlineInput
  cardContent: Scalars['RichTextAST']
  cardLink?: Maybe<LinkInternalCreateOneInlineInput>
  buttonText?: Maybe<Scalars['String']>
  rowExplanation?: Maybe<RowExplanationCreateOneInlineInput>
}

export type RowColumnThreeUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowColumnThreeWhereUniqueInput
  /** Document to update */
  data: RowColumnThreeUpdateInput
}

export type RowRecentBlogPostOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'forceLocalization_ASC'
  | 'forceLocalization_DESC'

export type RowReviewUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowReviewWhereUniqueInput
  /** Document to update */
  data: RowReviewUpdateInput
}

export type LinkExternalOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'url_ASC'
  | 'url_DESC'

/** Identifies documents */
export type RowExplanationManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowExplanationWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowExplanationWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowExplanationWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identifier?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identifier_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identifier_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identifier_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identifier_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identifier_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identifier_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identifier_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identifier_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identifier_not_ends_with?: Maybe<Scalars['String']>
  card?: Maybe<PaperCardWhereInput>
}

export type PageContentUpdateManyWithNestedWhereInput = {
  RowLinksWithText?: Maybe<RowLinksWithTextUpdateManyWithNestedWhereInput>
  RowColumnThree?: Maybe<RowColumnThreeUpdateManyWithNestedWhereInput>
  RowColumnTwo?: Maybe<RowColumnTwoUpdateManyWithNestedWhereInput>
  RowRecentBlogPost?: Maybe<RowRecentBlogPostUpdateManyWithNestedWhereInput>
  RowPeopleWithText?: Maybe<RowPeopleWithTextUpdateManyWithNestedWhereInput>
  RowColumnOne?: Maybe<RowColumnOneUpdateManyWithNestedWhereInput>
  RowCompanySlider?: Maybe<RowCompanySliderUpdateManyWithNestedWhereInput>
  RowHero?: Maybe<RowHeroUpdateManyWithNestedWhereInput>
  RowYoutubeVideo?: Maybe<RowYoutubeVideoUpdateManyWithNestedWhereInput>
  RowIpadHorizontal?: Maybe<RowIpadHorizontalUpdateManyWithNestedWhereInput>
  RowColorSpeedBlock?: Maybe<RowColorSpeedBlockUpdateManyWithNestedWhereInput>
  RowContact?: Maybe<RowContactUpdateManyWithNestedWhereInput>
  RowGoogleMap?: Maybe<RowGoogleMapUpdateManyWithNestedWhereInput>
  RowVacancy?: Maybe<RowVacancyUpdateManyWithNestedWhereInput>
  RowLaptopWithText?: Maybe<RowLaptopWithTextUpdateManyWithNestedWhereInput>
  RowIconWithTextList?: Maybe<RowIconWithTextListUpdateManyWithNestedWhereInput>
  RowLineHorizontal?: Maybe<RowLineHorizontalUpdateManyWithNestedWhereInput>
  RowIphoneWithText?: Maybe<RowIphoneWithTextUpdateManyWithNestedWhereInput>
  RowIpadVertical?: Maybe<RowIpadVerticalUpdateManyWithNestedWhereInput>
  RowLaptop?: Maybe<RowLaptopUpdateManyWithNestedWhereInput>
  RowImageOrVideo?: Maybe<RowImageOrVideoUpdateManyWithNestedWhereInput>
  RowPhonesSlider?: Maybe<RowPhonesSliderUpdateManyWithNestedWhereInput>
  RowIframe?: Maybe<RowIframeUpdateManyWithNestedWhereInput>
  RowQuote?: Maybe<RowQuoteUpdateManyWithNestedWhereInput>
  RowColorBlock?: Maybe<RowColorBlockUpdateManyWithNestedWhereInput>
  RowIntro?: Maybe<RowIntroUpdateManyWithNestedWhereInput>
  RowTitle?: Maybe<RowTitleUpdateManyWithNestedWhereInput>
  RowReview?: Maybe<RowReviewUpdateManyWithNestedWhereInput>
  RowServiceList?: Maybe<RowServiceListUpdateManyWithNestedWhereInput>
  RowCollaboration?: Maybe<RowCollaborationUpdateManyWithNestedWhereInput>
  RowExplanation?: Maybe<RowExplanationUpdateManyWithNestedWhereInput>
  RowColumnBoxed?: Maybe<RowColumnBoxedUpdateManyWithNestedWhereInput>
  RowModule?: Maybe<RowModuleUpdateManyWithNestedWhereInput>
  RowModulePage?: Maybe<RowModulePageUpdateManyWithNestedWhereInput>
  RowCenteredText?: Maybe<RowCenteredTextUpdateManyWithNestedWhereInput>
  RowImageSwiper?: Maybe<RowImageSwiperUpdateManyWithNestedWhereInput>
}

export type RowColumnOneCreateOneInlineInput = {
  /** Create and connect one RowColumnOne document */
  create?: Maybe<RowColumnOneCreateInput>
  /** Connect one existing RowColumnOne document */
  connect?: Maybe<RowColumnOneWhereUniqueInput>
}

export type PersonCreateManyInlineInput = {
  /** Create and connect multiple existing Person documents */
  create?: Maybe<Array<PersonCreateInput>>
  /** Connect multiple existing Person documents */
  connect?: Maybe<Array<PersonWhereUniqueInput>>
}

/** An edge in a connection. */
export type RowCompanySliderEdge = {
  __typename?: 'RowCompanySliderEdge'
  /** The item at the end of the edge. */
  node: RowCompanySlider
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowReviewConnectInput = {
  /** Document to connect */
  where: RowReviewWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type FooterUpsertLocalizationInput = {
  update: FooterUpdateLocalizationDataInput
  create: FooterCreateLocalizationDataInput
  locale: Locale
}

export type AssetUpdateInput = {
  handle?: Maybe<Scalars['String']>
  fileName?: Maybe<Scalars['String']>
  height?: Maybe<Scalars['Float']>
  width?: Maybe<Scalars['Float']>
  size?: Maybe<Scalars['Float']>
  mimeType?: Maybe<Scalars['String']>
  /** alt input for default locale (nl) */
  alt?: Maybe<Scalars['String']>
  personAvatar?: Maybe<PersonUpdateManyInlineInput>
  companyLogo?: Maybe<CompanyUpdateManyInlineInput>
  rowColumnThreeColOneIcon?: Maybe<RowColumnThreeUpdateManyInlineInput>
  rowColumnThreeColTwoIcon?: Maybe<RowColumnThreeUpdateManyInlineInput>
  rowColumnThreeColThreeIcon?: Maybe<RowColumnThreeUpdateManyInlineInput>
  rowColumnOneColOneIcon?: Maybe<RowColumnOneUpdateManyInlineInput>
  rowHeroAsset?: Maybe<RowHeroUpdateManyInlineInput>
  pageAsset?: Maybe<PageUpdateManyInlineInput>
  rowColumnTwoColOneIcon?: Maybe<RowColumnTwoUpdateManyInlineInput>
  rowColumnTwoColTwoIcon?: Maybe<RowColumnTwoUpdateManyInlineInput>
  awardAsset?: Maybe<AwardUpdateManyInlineInput>
  rowOneIconRowIconWithTextList?: Maybe<RowIconWithTextListUpdateManyInlineInput>
  rowTwoIconRowIconWithTextList?: Maybe<RowIconWithTextListUpdateManyInlineInput>
  rowThreeIconRowIconWithTextList?: Maybe<RowIconWithTextListUpdateManyInlineInput>
  rowFourIconRowIconWithTextList?: Maybe<RowIconWithTextListUpdateManyInlineInput>
  rowFiveIconRowIconWithTextList?: Maybe<RowIconWithTextListUpdateManyInlineInput>
  rowSixIconRowIconWithTextList?: Maybe<RowIconWithTextListUpdateManyInlineInput>
  rowIpadHorizontalBackgroundImage?: Maybe<RowIpadHorizontalUpdateManyInlineInput>
  rowIpadHorizontalIPadContent?: Maybe<RowIpadHorizontalUpdateManyInlineInput>
  rowIphoneWithTextBackgroundImage?: Maybe<RowIphoneWithTextUpdateManyInlineInput>
  rowIphoneWithTextIPhoneVideo?: Maybe<RowIphoneWithTextUpdateManyInlineInput>
  rowIphoneWithTextThemeImage?: Maybe<RowIphoneWithTextUpdateManyInlineInput>
  rowIpadVerticalBackgroundimage?: Maybe<RowIpadVerticalUpdateManyInlineInput>
  rowIpadVerticalIpadcontent?: Maybe<RowIpadVerticalUpdateManyInlineInput>
  rowLaptopBackgroundimage?: Maybe<RowLaptopUpdateManyInlineInput>
  rowLaptopLaptopcontent?: Maybe<RowLaptopUpdateManyInlineInput>
  rowVacancyPdf?: Maybe<RowVacancyUpdateManyInlineInput>
  rowImageOrVideoAsset?: Maybe<RowImageOrVideoUpdateManyInlineInput>
  rowLaptopWithTextBackgroundImage?: Maybe<RowLaptopWithTextUpdateManyInlineInput>
  rowLaptopWithTextLaptopContent?: Maybe<RowLaptopWithTextUpdateManyInlineInput>
  rowPhonesSliderPhoneOneContent?: Maybe<RowPhonesSliderUpdateManyInlineInput>
  rowPhonesSliderPhoneTwoContent?: Maybe<RowPhonesSliderUpdateManyInlineInput>
  rowPhonesSliderPhoneThreeContent?: Maybe<RowPhonesSliderUpdateManyInlineInput>
  rowPhonesSliderBackgroundImage?: Maybe<RowPhonesSliderUpdateManyInlineInput>
  pageLogo?: Maybe<PageUpdateManyInlineInput>
  partnerLogo?: Maybe<PartnerUpdateManyInlineInput>
  paperCardHeaderBanner?: Maybe<PaperCardUpdateManyInlineInput>
  rowImageSwiperAsset?: Maybe<RowImageSwiperUpdateManyInlineInput>
  /** Manage document localizations */
  localizations?: Maybe<AssetUpdateLocalizationsInput>
}

export type RowColorBlockUpdateInput = {
  identifier?: Maybe<Scalars['String']>
  blockTitle?: Maybe<RowTitleUpdateOneInlineInput>
  blockContent?: Maybe<RowColorBlockBlockContentUpdateManyInlineInput>
  page?: Maybe<PageUpdateManyInlineInput>
}

/** Single text area, flowing over two columns (CSS Columns) */
export type RowColumnOne = Node & {
  __typename?: 'RowColumnOne'
  /** System stage field */
  stage: Stage
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowColumnOne>
  /** Get the document in other stages */
  documentInStages: Array<RowColumnOne>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  rowColorBlock?: Maybe<RowColorBlock>
  identity: Scalars['String']
  colOne: RichText
  colOneIcon?: Maybe<Asset>
  page: Array<Page>
  /** List of RowColumnOne versions */
  history: Array<Version>
}

/** Single text area, flowing over two columns (CSS Columns) */
export type RowColumnOneLocalizationsArgs = {
  locales?: Array<Locale>
  includeCurrent?: Scalars['Boolean']
}

/** Single text area, flowing over two columns (CSS Columns) */
export type RowColumnOneDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

/** Single text area, flowing over two columns (CSS Columns) */
export type RowColumnOneCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

/** Single text area, flowing over two columns (CSS Columns) */
export type RowColumnOneUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

/** Single text area, flowing over two columns (CSS Columns) */
export type RowColumnOnePublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

/** Single text area, flowing over two columns (CSS Columns) */
export type RowColumnOneRowColorBlockArgs = {
  locales?: Maybe<Array<Locale>>
}

/** Single text area, flowing over two columns (CSS Columns) */
export type RowColumnOneColOneIconArgs = {
  locales?: Maybe<Array<Locale>>
}

/** Single text area, flowing over two columns (CSS Columns) */
export type RowColumnOnePageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** Single text area, flowing over two columns (CSS Columns) */
export type RowColumnOneHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowIpadVerticalUpdateOneInlineInput = {
  /** Create and connect one RowIpadVertical document */
  create?: Maybe<RowIpadVerticalCreateInput>
  /** Update single RowIpadVertical document */
  update?: Maybe<RowIpadVerticalUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowIpadVertical document */
  upsert?: Maybe<RowIpadVerticalUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowIpadVertical document */
  connect?: Maybe<RowIpadVerticalWhereUniqueInput>
  /** Disconnect currently connected RowIpadVertical document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowIpadVertical document */
  delete?: Maybe<Scalars['Boolean']>
}

/** An edge in a connection. */
export type RowPeopleWithTextEdge = {
  __typename?: 'RowPeopleWithTextEdge'
  /** The item at the end of the edge. */
  node: RowPeopleWithText
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowReview = Node & {
  __typename?: 'RowReview'
  /** System stage field */
  stage: Stage
  /** Get the document in other stages */
  documentInStages: Array<RowReview>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  reviews: Array<Review>
  page: Array<Page>
  /** List of RowReview versions */
  history: Array<Version>
}

export type RowReviewDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowReviewReviewsArgs = {
  where?: Maybe<ReviewWhereInput>
  orderBy?: Maybe<ReviewOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowReviewPageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowReviewHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowColorBlockBlockContentUpdateManyInlineInput = {
  /** Create and connect multiple RowColorBlockBlockContent documents */
  create?: Maybe<Array<RowColorBlockBlockContentCreateInput>>
  /** Connect multiple existing RowColorBlockBlockContent documents */
  connect?: Maybe<Array<RowColorBlockBlockContentConnectInput>>
  /** Override currently-connected documents with multiple existing RowColorBlockBlockContent documents */
  set?: Maybe<Array<RowColorBlockBlockContentWhereUniqueInput>>
  /** Update multiple RowColorBlockBlockContent documents */
  update?: Maybe<Array<RowColorBlockBlockContentUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowColorBlockBlockContent documents */
  upsert?: Maybe<Array<RowColorBlockBlockContentUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowColorBlockBlockContent documents */
  disconnect?: Maybe<Array<RowColorBlockBlockContentWhereUniqueInput>>
  /** Delete multiple RowColorBlockBlockContent documents */
  delete?: Maybe<Array<RowColorBlockBlockContentWhereUniqueInput>>
}

/** Transformations for Images */
export type ImageTransformationInput = {
  /** Resizes the image */
  resize?: Maybe<ImageResizeInput>
}

/** Identifies documents */
export type LinkInternalWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<LinkInternalWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<LinkInternalWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<LinkInternalWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  title?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  title_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  title_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  title_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  title_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  title_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  title_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  title_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  title_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  title_not_ends_with?: Maybe<Scalars['String']>
  page?: Maybe<PageWhereInput>
  rowPeopleWithText_every?: Maybe<RowPeopleWithTextWhereInput>
  rowPeopleWithText_some?: Maybe<RowPeopleWithTextWhereInput>
  rowPeopleWithText_none?: Maybe<RowPeopleWithTextWhereInput>
  rowRecentBlogPost?: Maybe<RowRecentBlogPostWhereInput>
  footerContactLink_every?: Maybe<FooterWhereInput>
  footerContactLink_some?: Maybe<FooterWhereInput>
  footerContactLink_none?: Maybe<FooterWhereInput>
  footerLinks_every?: Maybe<FooterWhereInput>
  footerLinks_some?: Maybe<FooterWhereInput>
  footerLinks_none?: Maybe<FooterWhereInput>
  footerReviewLink_every?: Maybe<FooterWhereInput>
  footerReviewLink_some?: Maybe<FooterWhereInput>
  footerReviewLink_none?: Maybe<FooterWhereInput>
  rowLinksWithText_every?: Maybe<RowLinksWithTextWhereInput>
  rowLinksWithText_some?: Maybe<RowLinksWithTextWhereInput>
  rowLinksWithText_none?: Maybe<RowLinksWithTextWhereInput>
  paperCard?: Maybe<PaperCardWhereInput>
  rowModulePage?: Maybe<RowModulePageWhereInput>
}

export type ParnerListConnectInput = {
  /** Document to connect */
  where: ParnerListWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type PersonUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: PersonWhereInput
  /** Update many input */
  data: PersonUpdateManyInput
}

export type PersonUpdateManyInlineInput = {
  /** Create and connect multiple Person documents */
  create?: Maybe<Array<PersonCreateInput>>
  /** Connect multiple existing Person documents */
  connect?: Maybe<Array<PersonConnectInput>>
  /** Override currently-connected documents with multiple existing Person documents */
  set?: Maybe<Array<PersonWhereUniqueInput>>
  /** Update multiple Person documents */
  update?: Maybe<Array<PersonUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple Person documents */
  upsert?: Maybe<Array<PersonUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple Person documents */
  disconnect?: Maybe<Array<PersonWhereUniqueInput>>
  /** Delete multiple Person documents */
  delete?: Maybe<Array<PersonWhereUniqueInput>>
}

export type RowContactCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  /** text input for default locale (nl) */
  text: Scalars['RichTextAST']
  page?: Maybe<PageCreateManyInlineInput>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowContactCreateLocalizationsInput>
}

/** Identifies documents */
export type RowIpadHorizontalManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowIpadHorizontalWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowIpadHorizontalWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowIpadHorizontalWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  backgroundImage?: Maybe<AssetWhereInput>
  iPadContent?: Maybe<AssetWhereInput>
}

export type AwardCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<AwardCreateLocalizationInput>>
}

export type ContactFormUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: ContactFormWhereUniqueInput
  /** Document to update */
  data: ContactFormUpdateInput
}

export type FooterCreateLocalizationInput = {
  /** Localization input */
  data: FooterCreateLocalizationDataInput
  locale: Locale
}

/** References LinkInternal record uniquely */
export type LinkInternalWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

export type RowCenteredTextUpsertLocalizationInput = {
  update: RowCenteredTextUpdateLocalizationDataInput
  create: RowCenteredTextCreateLocalizationDataInput
  locale: Locale
}

export type RowCenteredTextUpdateOneInlineInput = {
  /** Create and connect one RowCenteredText document */
  create?: Maybe<RowCenteredTextCreateInput>
  /** Update single RowCenteredText document */
  update?: Maybe<RowCenteredTextUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowCenteredText document */
  upsert?: Maybe<RowCenteredTextUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowCenteredText document */
  connect?: Maybe<RowCenteredTextWhereUniqueInput>
  /** Disconnect currently connected RowCenteredText document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowCenteredText document */
  delete?: Maybe<Scalars['Boolean']>
}

export type RowImageOrVideoOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'

/** An edge in a connection. */
export type ServiceEdge = {
  __typename?: 'ServiceEdge'
  /** The item at the end of the edge. */
  node: Service
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

/** An edge in a connection. */
export type ContactFormEdge = {
  __typename?: 'ContactFormEdge'
  /** The item at the end of the edge. */
  node: ContactForm
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowCenteredTextUpdateInput = {
  name?: Maybe<Scalars['String']>
  /** text input for default locale (nl) */
  text?: Maybe<Scalars['RichTextAST']>
  page?: Maybe<PageUpdateManyInlineInput>
  /** Manage document localizations */
  localizations?: Maybe<RowCenteredTextUpdateLocalizationsInput>
}

export type RowIpadHorizontalUpdateManyInlineInput = {
  /** Create and connect multiple RowIpadHorizontal documents */
  create?: Maybe<Array<RowIpadHorizontalCreateInput>>
  /** Connect multiple existing RowIpadHorizontal documents */
  connect?: Maybe<Array<RowIpadHorizontalConnectInput>>
  /** Override currently-connected documents with multiple existing RowIpadHorizontal documents */
  set?: Maybe<Array<RowIpadHorizontalWhereUniqueInput>>
  /** Update multiple RowIpadHorizontal documents */
  update?: Maybe<Array<RowIpadHorizontalUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowIpadHorizontal documents */
  upsert?: Maybe<Array<RowIpadHorizontalUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowIpadHorizontal documents */
  disconnect?: Maybe<Array<RowIpadHorizontalWhereUniqueInput>>
  /** Delete multiple RowIpadHorizontal documents */
  delete?: Maybe<Array<RowIpadHorizontalWhereUniqueInput>>
}

export type LinkExternalUpdateManyInput = {
  /** title input for default locale (nl) */
  title?: Maybe<Scalars['String']>
  /** description input for default locale (nl) */
  description?: Maybe<Scalars['RichTextAST']>
  url?: Maybe<Scalars['String']>
  /** Optional updates to localizations */
  localizations?: Maybe<LinkExternalUpdateManyLocalizationsInput>
}

export type ContactForm = Node & {
  __typename?: 'ContactForm'
  /** System stage field */
  stage: Stage
  /** Get the document in other stages */
  documentInStages: Array<ContactForm>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  name: Scalars['String']
  email: Scalars['String']
  phoneNumber?: Maybe<Scalars['String']>
  subject: ContactSubject
  message: Scalars['String']
  /** List of ContactForm versions */
  history: Array<Version>
}

export type ContactFormDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type ContactFormHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

/** A connection to a list of items. */
export type PageConnection = {
  __typename?: 'PageConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<PageEdge>
  aggregate: Aggregate
}

export type RowColumnBoxedUpdateLocalizationDataInput = {
  content?: Maybe<Scalars['RichTextAST']>
}

export type RowGoogleMapUpdateManyInlineInput = {
  /** Create and connect multiple RowGoogleMap documents */
  create?: Maybe<Array<RowGoogleMapCreateInput>>
  /** Connect multiple existing RowGoogleMap documents */
  connect?: Maybe<Array<RowGoogleMapConnectInput>>
  /** Override currently-connected documents with multiple existing RowGoogleMap documents */
  set?: Maybe<Array<RowGoogleMapWhereUniqueInput>>
  /** Update multiple RowGoogleMap documents */
  update?: Maybe<Array<RowGoogleMapUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowGoogleMap documents */
  upsert?: Maybe<Array<RowGoogleMapUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowGoogleMap documents */
  disconnect?: Maybe<Array<RowGoogleMapWhereUniqueInput>>
  /** Delete multiple RowGoogleMap documents */
  delete?: Maybe<Array<RowGoogleMapWhereUniqueInput>>
}

/** An edge in a connection. */
export type RowIntroEdge = {
  __typename?: 'RowIntroEdge'
  /** The item at the end of the edge. */
  node: RowIntro
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowPeopleWithTextUpdateManyLocalizationInput = {
  data: RowPeopleWithTextUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowTitleCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowTitleCreateLocalizationInput>>
}

/** Identifies documents */
export type AwardWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<AwardWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<AwardWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<AwardWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  name?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  name_not_ends_with?: Maybe<Scalars['String']>
  asset?: Maybe<AssetWhereInput>
}

export type RowYoutubeVideoUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowYoutubeVideoWhereUniqueInput
  /** Upsert data */
  data: RowYoutubeVideoUpsertInput
}

export type RowColorBlockBlockContentCreateManyInlineInput = {
  /** Create and connect multiple existing RowColorBlockBlockContent documents */
  create?: Maybe<Array<RowColorBlockBlockContentCreateInput>>
  /** Connect multiple existing RowColorBlockBlockContent documents */
  connect?: Maybe<Array<RowColorBlockBlockContentWhereUniqueInput>>
}

export type RowTitleUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowTitleCreateLocalizationInput>>
  /** Localizations to update */
  update?: Maybe<Array<RowTitleUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowTitleUpsertLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
}

export type AwardUpdateManyInlineInput = {
  /** Create and connect multiple Award documents */
  create?: Maybe<Array<AwardCreateInput>>
  /** Connect multiple existing Award documents */
  connect?: Maybe<Array<AwardConnectInput>>
  /** Override currently-connected documents with multiple existing Award documents */
  set?: Maybe<Array<AwardWhereUniqueInput>>
  /** Update multiple Award documents */
  update?: Maybe<Array<AwardUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple Award documents */
  upsert?: Maybe<Array<AwardUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple Award documents */
  disconnect?: Maybe<Array<AwardWhereUniqueInput>>
  /** Delete multiple Award documents */
  delete?: Maybe<Array<AwardWhereUniqueInput>>
}

export type PageUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: PageWhereInput
  /** Update many input */
  data: PageUpdateManyInput
}

/** Identifies documents */
export type PartnerWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<PartnerWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<PartnerWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<PartnerWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  name?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  name_not_ends_with?: Maybe<Scalars['String']>
  url?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  url_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  url_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  url_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  url_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  url_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  url_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  url_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  url_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  url_not_ends_with?: Maybe<Scalars['String']>
  logo?: Maybe<AssetWhereInput>
  rowCollaboration_every?: Maybe<ParnerListWhereInput>
  rowCollaboration_some?: Maybe<ParnerListWhereInput>
  rowCollaboration_none?: Maybe<ParnerListWhereInput>
}

export type ReviewOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'customerName_ASC'
  | 'customerName_DESC'
  | 'rating_ASC'
  | 'rating_DESC'
  | 'quote_ASC'
  | 'quote_DESC'

export type RowCollaborationUpsertInput = {
  /** Create document if it didn't exist */
  create: RowCollaborationCreateInput
  /** Update document if it exists */
  update: RowCollaborationUpdateInput
}

/** Identifies documents */
export type RowColumnThreeWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowColumnThreeWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowColumnThreeWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowColumnThreeWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  colOneIcon?: Maybe<AssetWhereInput>
  colTwoIcon?: Maybe<AssetWhereInput>
  colThreeIcon?: Maybe<AssetWhereInput>
}

export type RowColumnTwoUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowColumnTwoWhereUniqueInput
  /** Upsert data */
  data: RowColumnTwoUpsertInput
}

export type RowColumnOneCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  colOne: Scalars['RichTextAST']
}

export type RowIconWithTextListCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  text: Scalars['RichTextAST']
  rowOne: Scalars['RichTextAST']
  rowTwo: Scalars['RichTextAST']
  rowThree?: Maybe<Scalars['RichTextAST']>
  rowFour?: Maybe<Scalars['RichTextAST']>
  rowFive?: Maybe<Scalars['RichTextAST']>
  rowSix?: Maybe<Scalars['RichTextAST']>
}

export type RowLaptopConnectInput = {
  /** Document to connect */
  where: RowLaptopWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowModuleUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowModuleWhereInput
  /** Update many input */
  data: RowModuleUpdateManyInput
}

export type RowVacancyUpdateInput = {
  identity?: Maybe<Scalars['String']>
  vacancystatus?: Maybe<VacancyStatus>
  /** perks input for default locale (nl) */
  perks?: Maybe<Array<Scalars['String']>>
  text?: Maybe<Scalars['RichTextAST']>
  pdf?: Maybe<AssetUpdateOneInlineInput>
  page?: Maybe<PageUpdateManyInlineInput>
  /** Manage document localizations */
  localizations?: Maybe<RowVacancyUpdateLocalizationsInput>
}

export type FooterAdditionalLinksCreateManyInlineInput = {
  /** Create and connect multiple existing FooterAdditionalLinks documents */
  create?: Maybe<Array<FooterAdditionalLinksCreateInput>>
  /** Connect multiple existing FooterAdditionalLinks documents */
  connect?: Maybe<Array<FooterAdditionalLinksWhereUniqueInput>>
}

export type PageContentUpdateWithNestedWhereUniqueInput = {
  RowLinksWithText?: Maybe<RowLinksWithTextUpdateWithNestedWhereUniqueInput>
  RowColumnThree?: Maybe<RowColumnThreeUpdateWithNestedWhereUniqueInput>
  RowColumnTwo?: Maybe<RowColumnTwoUpdateWithNestedWhereUniqueInput>
  RowRecentBlogPost?: Maybe<RowRecentBlogPostUpdateWithNestedWhereUniqueInput>
  RowPeopleWithText?: Maybe<RowPeopleWithTextUpdateWithNestedWhereUniqueInput>
  RowColumnOne?: Maybe<RowColumnOneUpdateWithNestedWhereUniqueInput>
  RowCompanySlider?: Maybe<RowCompanySliderUpdateWithNestedWhereUniqueInput>
  RowHero?: Maybe<RowHeroUpdateWithNestedWhereUniqueInput>
  RowYoutubeVideo?: Maybe<RowYoutubeVideoUpdateWithNestedWhereUniqueInput>
  RowIpadHorizontal?: Maybe<RowIpadHorizontalUpdateWithNestedWhereUniqueInput>
  RowColorSpeedBlock?: Maybe<RowColorSpeedBlockUpdateWithNestedWhereUniqueInput>
  RowContact?: Maybe<RowContactUpdateWithNestedWhereUniqueInput>
  RowGoogleMap?: Maybe<RowGoogleMapUpdateWithNestedWhereUniqueInput>
  RowVacancy?: Maybe<RowVacancyUpdateWithNestedWhereUniqueInput>
  RowLaptopWithText?: Maybe<RowLaptopWithTextUpdateWithNestedWhereUniqueInput>
  RowIconWithTextList?: Maybe<RowIconWithTextListUpdateWithNestedWhereUniqueInput>
  RowLineHorizontal?: Maybe<RowLineHorizontalUpdateWithNestedWhereUniqueInput>
  RowIphoneWithText?: Maybe<RowIphoneWithTextUpdateWithNestedWhereUniqueInput>
  RowIpadVertical?: Maybe<RowIpadVerticalUpdateWithNestedWhereUniqueInput>
  RowLaptop?: Maybe<RowLaptopUpdateWithNestedWhereUniqueInput>
  RowImageOrVideo?: Maybe<RowImageOrVideoUpdateWithNestedWhereUniqueInput>
  RowPhonesSlider?: Maybe<RowPhonesSliderUpdateWithNestedWhereUniqueInput>
  RowIframe?: Maybe<RowIframeUpdateWithNestedWhereUniqueInput>
  RowQuote?: Maybe<RowQuoteUpdateWithNestedWhereUniqueInput>
  RowColorBlock?: Maybe<RowColorBlockUpdateWithNestedWhereUniqueInput>
  RowIntro?: Maybe<RowIntroUpdateWithNestedWhereUniqueInput>
  RowTitle?: Maybe<RowTitleUpdateWithNestedWhereUniqueInput>
  RowReview?: Maybe<RowReviewUpdateWithNestedWhereUniqueInput>
  RowServiceList?: Maybe<RowServiceListUpdateWithNestedWhereUniqueInput>
  RowCollaboration?: Maybe<RowCollaborationUpdateWithNestedWhereUniqueInput>
  RowExplanation?: Maybe<RowExplanationUpdateWithNestedWhereUniqueInput>
  RowColumnBoxed?: Maybe<RowColumnBoxedUpdateWithNestedWhereUniqueInput>
  RowModule?: Maybe<RowModuleUpdateWithNestedWhereUniqueInput>
  RowModulePage?: Maybe<RowModulePageUpdateWithNestedWhereUniqueInput>
  RowCenteredText?: Maybe<RowCenteredTextUpdateWithNestedWhereUniqueInput>
  RowImageSwiper?: Maybe<RowImageSwiperUpdateWithNestedWhereUniqueInput>
}

/** A connection to a list of items. */
export type RowCenteredTextConnection = {
  __typename?: 'RowCenteredTextConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowCenteredTextEdge>
  aggregate: Aggregate
}

export type RowColumnTwoUpdateInput = {
  rowColorBlock?: Maybe<RowColorBlockUpdateOneInlineInput>
  identity?: Maybe<Scalars['String']>
  colOneIcon?: Maybe<AssetUpdateOneInlineInput>
  /** colOne input for default locale (nl) */
  colOne?: Maybe<Scalars['RichTextAST']>
  /** colTwo input for default locale (nl) */
  colTwo?: Maybe<Scalars['RichTextAST']>
  colTwoIcon?: Maybe<AssetUpdateOneInlineInput>
  page?: Maybe<PageUpdateManyInlineInput>
  /** Manage document localizations */
  localizations?: Maybe<RowColumnTwoUpdateLocalizationsInput>
}

/** An edge in a connection. */
export type RowGoogleMapEdge = {
  __typename?: 'RowGoogleMapEdge'
  /** The item at the end of the edge. */
  node: RowGoogleMap
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

/** Identifies documents */
export type RowModulePageWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowModulePageWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowModulePageWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowModulePageWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  name?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  name_not_ends_with?: Maybe<Scalars['String']>
  link?: Maybe<LinkInternalWhereInput>
}

export type RowRecentBlogPostUpdateLocalizationDataInput = {
  header?: Maybe<Scalars['RichTextAST']>
  forceLocalization?: Maybe<Scalars['String']>
}

export type RowTitleCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  /** rowTitle input for default locale (nl) */
  rowTitle: Scalars['RichTextAST']
  page?: Maybe<PageCreateManyInlineInput>
  rowColorBlock?: Maybe<RowColorSpeedBlockCreateOneInlineInput>
  rowColorBlockTitle?: Maybe<RowColorBlockCreateOneInlineInput>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowTitleCreateLocalizationsInput>
}

export type RowColumnOneUpdateManyInlineInput = {
  /** Create and connect multiple RowColumnOne documents */
  create?: Maybe<Array<RowColumnOneCreateInput>>
  /** Connect multiple existing RowColumnOne documents */
  connect?: Maybe<Array<RowColumnOneConnectInput>>
  /** Override currently-connected documents with multiple existing RowColumnOne documents */
  set?: Maybe<Array<RowColumnOneWhereUniqueInput>>
  /** Update multiple RowColumnOne documents */
  update?: Maybe<Array<RowColumnOneUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowColumnOne documents */
  upsert?: Maybe<Array<RowColumnOneUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowColumnOne documents */
  disconnect?: Maybe<Array<RowColumnOneWhereUniqueInput>>
  /** Delete multiple RowColumnOne documents */
  delete?: Maybe<Array<RowColumnOneWhereUniqueInput>>
}

export type PartnerUpsertInput = {
  /** Create document if it didn't exist */
  create: PartnerCreateInput
  /** Update document if it exists */
  update: PartnerUpdateInput
}

export type RowImageOrVideoCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  asset: AssetCreateOneInlineInput
  page?: Maybe<PageCreateManyInlineInput>
}

export type RowRecentBlogPostUpdateManyLocalizationDataInput = {
  header?: Maybe<Scalars['RichTextAST']>
  forceLocalization?: Maybe<Scalars['String']>
}

export type RowYoutubeVideoConnectInput = {
  /** Document to connect */
  where: RowYoutubeVideoWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowYoutubeVideoUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowYoutubeVideoWhereUniqueInput
  /** Document to update */
  data: RowYoutubeVideoUpdateInput
}

export type RowColorBlockBlockContentUpsertWithNestedWhereUniqueInput = {
  RowColumnThree?: Maybe<RowColumnThreeUpsertWithNestedWhereUniqueInput>
  RowColumnTwo?: Maybe<RowColumnTwoUpsertWithNestedWhereUniqueInput>
  RowColumnOne?: Maybe<RowColumnOneUpsertWithNestedWhereUniqueInput>
}

export type RowVacancyUpdateManyInlineInput = {
  /** Create and connect multiple RowVacancy documents */
  create?: Maybe<Array<RowVacancyCreateInput>>
  /** Connect multiple existing RowVacancy documents */
  connect?: Maybe<Array<RowVacancyConnectInput>>
  /** Override currently-connected documents with multiple existing RowVacancy documents */
  set?: Maybe<Array<RowVacancyWhereUniqueInput>>
  /** Update multiple RowVacancy documents */
  update?: Maybe<Array<RowVacancyUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowVacancy documents */
  upsert?: Maybe<Array<RowVacancyUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowVacancy documents */
  disconnect?: Maybe<Array<RowVacancyWhereUniqueInput>>
  /** Delete multiple RowVacancy documents */
  delete?: Maybe<Array<RowVacancyWhereUniqueInput>>
}

export type RowIntroConnectInput = {
  /** Document to connect */
  where: RowIntroWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type ConnectPositionInput = {
  /** Connect document after specified document */
  after?: Maybe<Scalars['ID']>
  /** Connect document before specified document */
  before?: Maybe<Scalars['ID']>
  /** Connect document at first position */
  start?: Maybe<Scalars['Boolean']>
  /** Connect document at last position */
  end?: Maybe<Scalars['Boolean']>
}

export type AssetCreateLocalizationInput = {
  /** Localization input */
  data: AssetCreateLocalizationDataInput
  locale: Locale
}

export type HeaderCreateOneInlineInput = {
  /** Create and connect one Header document */
  create?: Maybe<HeaderCreateInput>
  /** Connect one existing Header document */
  connect?: Maybe<HeaderWhereUniqueInput>
}

export type LinkExternalUpdateLocalizationInput = {
  data: LinkExternalUpdateLocalizationDataInput
  locale: Locale
}

export type RowHeroUpdateLocalizationDataInput = {
  text?: Maybe<Scalars['RichTextAST']>
}

export type RowModulePageCreateManyInlineInput = {
  /** Create and connect multiple existing RowModulePage documents */
  create?: Maybe<Array<RowModulePageCreateInput>>
  /** Connect multiple existing RowModulePage documents */
  connect?: Maybe<Array<RowModulePageWhereUniqueInput>>
}

export type RowTitleConnectInput = {
  /** Document to connect */
  where: RowTitleWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

/** An object with an ID */
export type Node = {
  /** The id of the object. */
  id: Scalars['ID']
  /** The Stage of an object */
  stage: Stage
}

export type RowVacancyCreateOneInlineInput = {
  /** Create and connect one RowVacancy document */
  create?: Maybe<RowVacancyCreateInput>
  /** Connect one existing RowVacancy document */
  connect?: Maybe<RowVacancyWhereUniqueInput>
}

export type RowPeopleWithTextUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowPeopleWithTextWhereInput
  /** Update many input */
  data: RowPeopleWithTextUpdateManyInput
}

export type RowPhonesSlider = Node & {
  __typename?: 'RowPhonesSlider'
  /** System stage field */
  stage: Stage
  /** Get the document in other stages */
  documentInStages: Array<RowPhonesSlider>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  backgroundImage?: Maybe<Asset>
  phoneOneContent: Asset
  phoneTwoContent: Asset
  phoneThreeContent: Asset
  page: Array<Page>
  /** List of RowPhonesSlider versions */
  history: Array<Version>
}

export type RowPhonesSliderDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowPhonesSliderBackgroundImageArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowPhonesSliderPhoneOneContentArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowPhonesSliderPhoneTwoContentArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowPhonesSliderPhoneThreeContentArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowPhonesSliderPageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowPhonesSliderHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowYoutubeVideoUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowYoutubeVideoUpdateManyLocalizationInput>>
}

export type RowLaptopCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  backgroundImage?: Maybe<AssetCreateOneInlineInput>
  laptopContent: AssetCreateOneInlineInput
  page?: Maybe<PageCreateManyInlineInput>
}

export type RowImageOrVideoCreateManyInlineInput = {
  /** Create and connect multiple existing RowImageOrVideo documents */
  create?: Maybe<Array<RowImageOrVideoCreateInput>>
  /** Connect multiple existing RowImageOrVideo documents */
  connect?: Maybe<Array<RowImageOrVideoWhereUniqueInput>>
}

/** References RowIntro record uniquely */
export type RowIntroWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

export type RowIpadVerticalUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowIpadVerticalWhereInput
  /** Update many input */
  data: RowIpadVerticalUpdateManyInput
}

/** Identifies documents */
export type RowYoutubeVideoManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowYoutubeVideoWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowYoutubeVideoWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowYoutubeVideoWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  title?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  title_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  title_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  title_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  title_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  title_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  title_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  title_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  title_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  title_not_ends_with?: Maybe<Scalars['String']>
}

export type ImageResizeInput = {
  /** The width in pixels to resize the image to. The value must be an integer from 1 to 10000. */
  width?: Maybe<Scalars['Int']>
  /** The height in pixels to resize the image to. The value must be an integer from 1 to 10000. */
  height?: Maybe<Scalars['Int']>
  /** The default value for the fit parameter is fit:clip. */
  fit?: Maybe<ImageFit>
}

export type RowColumnBoxedCreateLocalizationInput = {
  /** Localization input */
  data: RowColumnBoxedCreateLocalizationDataInput
  locale: Locale
}

/** Identifies documents */
export type RowColumnThreeManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowColumnThreeWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowColumnThreeWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowColumnThreeWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  colOneIcon?: Maybe<AssetWhereInput>
  colTwoIcon?: Maybe<AssetWhereInput>
  colThreeIcon?: Maybe<AssetWhereInput>
}

export type RowIframeConnectInput = {
  /** Document to connect */
  where: RowIframeWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowModulePageUpdateLocalizationInput = {
  data: RowModulePageUpdateLocalizationDataInput
  locale: Locale
}

export type ParnerListUpdateInput = {
  partners?: Maybe<PartnerUpdateManyInlineInput>
  rowCollaboration?: Maybe<RowCollaborationUpdateManyInlineInput>
}

/** Identifies documents */
export type RowCompanySliderWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowCompanySliderWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowCompanySliderWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowCompanySliderWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  companies_every?: Maybe<CompanyWhereInput>
  companies_some?: Maybe<CompanyWhereInput>
  companies_none?: Maybe<CompanyWhereInput>
}

export type RowLaptopWithText = Node & {
  __typename?: 'RowLaptopWithText'
  /** System stage field */
  stage: Stage
  /** Get the document in other stages */
  documentInStages: Array<RowLaptopWithText>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  backgroundImage?: Maybe<Asset>
  laptopContent: Asset
  colOne: RichText
  page: Array<Page>
  /** List of RowLaptopWithText versions */
  history: Array<Version>
}

export type RowLaptopWithTextDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowLaptopWithTextBackgroundImageArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowLaptopWithTextLaptopContentArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowLaptopWithTextPageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowLaptopWithTextHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowLineHorizontalUpdateManyInput = {
  active?: Maybe<Scalars['Boolean']>
}

export type RowHeroVideoLinksWhereUniqueInput = {
  LinkExternal?: Maybe<LinkExternalWhereUniqueInput>
  LinkInternal?: Maybe<LinkInternalWhereUniqueInput>
}

export type ContactFormUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: ContactFormWhereUniqueInput
  /** Upsert data */
  data: ContactFormUpsertInput
}

/** An edge in a connection. */
export type FooterEdge = {
  __typename?: 'FooterEdge'
  /** The item at the end of the edge. */
  node: Footer
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowIphoneWithTextUpdateManyLocalizationInput = {
  data: RowIphoneWithTextUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowLaptopWithTextUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowLaptopWithTextWhereInput
  /** Update many input */
  data: RowLaptopWithTextUpdateManyInput
}

/** Identifies documents */
export type RowQuoteWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowQuoteWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowQuoteWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowQuoteWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  clientName?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  clientName_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  clientName_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  clientName_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  clientName_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  clientName_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  clientName_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  clientName_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  clientName_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  clientName_not_ends_with?: Maybe<Scalars['String']>
  clientTitle?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  clientTitle_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  clientTitle_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  clientTitle_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  clientTitle_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  clientTitle_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  clientTitle_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  clientTitle_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  clientTitle_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  clientTitle_not_ends_with?: Maybe<Scalars['String']>
  clientQuote?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  clientQuote_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  clientQuote_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  clientQuote_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  clientQuote_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  clientQuote_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  clientQuote_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  clientQuote_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  clientQuote_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  clientQuote_not_ends_with?: Maybe<Scalars['String']>
}

/** References RowRecentBlogPost record uniquely */
export type RowRecentBlogPostWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type AwardUpsertInput = {
  /** Create document if it didn't exist */
  create: AwardCreateInput
  /** Update document if it exists */
  update: AwardUpdateInput
}

export type CompanyUpdateOneInlineInput = {
  /** Create and connect one Company document */
  create?: Maybe<CompanyCreateInput>
  /** Update single Company document */
  update?: Maybe<CompanyUpdateWithNestedWhereUniqueInput>
  /** Upsert single Company document */
  upsert?: Maybe<CompanyUpsertWithNestedWhereUniqueInput>
  /** Connect existing Company document */
  connect?: Maybe<CompanyWhereUniqueInput>
  /** Disconnect currently connected Company document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected Company document */
  delete?: Maybe<Scalars['Boolean']>
}

export type ParnerListOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'

export type ReviewUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<ReviewCreateLocalizationInput>>
  /** Localizations to update */
  update?: Maybe<Array<ReviewUpdateLocalizationInput>>
  upsert?: Maybe<Array<ReviewUpsertLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
}

/** A connection to a list of items. */
export type RowYoutubeVideoConnection = {
  __typename?: 'RowYoutubeVideoConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowYoutubeVideoEdge>
  aggregate: Aggregate
}

/** An edge in a connection. */
export type RowYoutubeVideoEdge = {
  __typename?: 'RowYoutubeVideoEdge'
  /** The item at the end of the edge. */
  node: RowYoutubeVideo
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowColumnBoxedUpsertLocalizationInput = {
  update: RowColumnBoxedUpdateLocalizationDataInput
  create: RowColumnBoxedCreateLocalizationDataInput
  locale: Locale
}

export type RowColumnBoxedCreateOneInlineInput = {
  /** Create and connect one RowColumnBoxed document */
  create?: Maybe<RowColumnBoxedCreateInput>
  /** Connect one existing RowColumnBoxed document */
  connect?: Maybe<RowColumnBoxedWhereUniqueInput>
}

export type LinkExternalUpdateManyInlineInput = {
  /** Create and connect multiple LinkExternal documents */
  create?: Maybe<Array<LinkExternalCreateInput>>
  /** Connect multiple existing LinkExternal documents */
  connect?: Maybe<Array<LinkExternalConnectInput>>
  /** Override currently-connected documents with multiple existing LinkExternal documents */
  set?: Maybe<Array<LinkExternalWhereUniqueInput>>
  /** Update multiple LinkExternal documents */
  update?: Maybe<Array<LinkExternalUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple LinkExternal documents */
  upsert?: Maybe<Array<LinkExternalUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple LinkExternal documents */
  disconnect?: Maybe<Array<LinkExternalWhereUniqueInput>>
  /** Delete multiple LinkExternal documents */
  delete?: Maybe<Array<LinkExternalWhereUniqueInput>>
}

export type RowCollaborationCreateManyInlineInput = {
  /** Create and connect multiple existing RowCollaboration documents */
  create?: Maybe<Array<RowCollaborationCreateInput>>
  /** Connect multiple existing RowCollaboration documents */
  connect?: Maybe<Array<RowCollaborationWhereUniqueInput>>
}

export type RowIpadHorizontalCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  backgroundImage?: Maybe<AssetCreateOneInlineInput>
  iPadContent: AssetCreateOneInlineInput
  page?: Maybe<PageCreateManyInlineInput>
}

export type RowModuleOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'name_ASC'
  | 'name_DESC'

export type RowModulePageOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'name_ASC'
  | 'name_DESC'

export type ServiceCreateManyInlineInput = {
  /** Create and connect multiple existing Service documents */
  create?: Maybe<Array<ServiceCreateInput>>
  /** Connect multiple existing Service documents */
  connect?: Maybe<Array<ServiceWhereUniqueInput>>
}

export type ReviewUpdateInput = {
  identity?: Maybe<Scalars['String']>
  customerName?: Maybe<Scalars['String']>
  rating?: Maybe<Scalars['Int']>
  /** quote input for default locale (nl) */
  quote?: Maybe<Scalars['String']>
  rowReview?: Maybe<RowReviewUpdateManyInlineInput>
  /** Manage document localizations */
  localizations?: Maybe<ReviewUpdateLocalizationsInput>
}

export type RowGoogleMapUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowGoogleMapCreateLocalizationInput>>
  /** Localizations to update */
  update?: Maybe<Array<RowGoogleMapUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowGoogleMapUpsertLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
}

export type RowLaptopOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'

export type RowLaptopWithTextOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'

export type RowLineHorizontalUpsertInput = {
  /** Create document if it didn't exist */
  create: RowLineHorizontalCreateInput
  /** Update document if it exists */
  update: RowLineHorizontalUpdateInput
}

export type RowPeopleWithTextUpdateOneInlineInput = {
  /** Create and connect one RowPeopleWithText document */
  create?: Maybe<RowPeopleWithTextCreateInput>
  /** Update single RowPeopleWithText document */
  update?: Maybe<RowPeopleWithTextUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowPeopleWithText document */
  upsert?: Maybe<RowPeopleWithTextUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowPeopleWithText document */
  connect?: Maybe<RowPeopleWithTextWhereUniqueInput>
  /** Disconnect currently connected RowPeopleWithText document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowPeopleWithText document */
  delete?: Maybe<Scalars['Boolean']>
}

export type RowCollaborationUpdateManyInput = {
  /** content input for default locale (nl) */
  content?: Maybe<Scalars['RichTextAST']>
  /** Optional updates to localizations */
  localizations?: Maybe<RowCollaborationUpdateManyLocalizationsInput>
}

/** A connection to a list of items. */
export type AssetConnection = {
  __typename?: 'AssetConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<AssetEdge>
  aggregate: Aggregate
}

export type LinkExternalCreateOneInlineInput = {
  /** Create and connect one LinkExternal document */
  create?: Maybe<LinkExternalCreateInput>
  /** Connect one existing LinkExternal document */
  connect?: Maybe<LinkExternalWhereUniqueInput>
}

/** An edge in a connection. */
export type PartnerEdge = {
  __typename?: 'PartnerEdge'
  /** The item at the end of the edge. */
  node: Partner
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

/** References Person record uniquely */
export type PersonWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

export type RowCenteredTextCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  name: Scalars['String']
  /** text input for default locale (nl) */
  text: Scalars['RichTextAST']
  page?: Maybe<PageCreateManyInlineInput>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowCenteredTextCreateLocalizationsInput>
}

export type RowGoogleMapUpdateOneInlineInput = {
  /** Create and connect one RowGoogleMap document */
  create?: Maybe<RowGoogleMapCreateInput>
  /** Update single RowGoogleMap document */
  update?: Maybe<RowGoogleMapUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowGoogleMap document */
  upsert?: Maybe<RowGoogleMapUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowGoogleMap document */
  connect?: Maybe<RowGoogleMapWhereUniqueInput>
  /** Disconnect currently connected RowGoogleMap document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowGoogleMap document */
  delete?: Maybe<Scalars['Boolean']>
}

export type RowHeroCreateLocalizationInput = {
  /** Localization input */
  data: RowHeroCreateLocalizationDataInput
  locale: Locale
}

export type SystemDateTimeFieldVariation = 'BASE' | 'LOCALIZATION' | 'COMBINED'

export type RowPeopleWithTextUpdateManyLocalizationDataInput = {
  text?: Maybe<Scalars['RichTextAST']>
}

export type RowPeopleWithTextCreateOneInlineInput = {
  /** Create and connect one RowPeopleWithText document */
  create?: Maybe<RowPeopleWithTextCreateInput>
  /** Connect one existing RowPeopleWithText document */
  connect?: Maybe<RowPeopleWithTextWhereUniqueInput>
}

export type RowRecentBlogPost = Node & {
  __typename?: 'RowRecentBlogPost'
  /** System stage field */
  stage: Stage
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowRecentBlogPost>
  /** Get the document in other stages */
  documentInStages: Array<RowRecentBlogPost>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  header?: Maybe<RichText>
  link?: Maybe<LinkInternal>
  page: Array<Page>
  forceLocalization?: Maybe<Scalars['String']>
  /** List of RowRecentBlogPost versions */
  history: Array<Version>
}

export type RowRecentBlogPostLocalizationsArgs = {
  locales?: Array<Locale>
  includeCurrent?: Scalars['Boolean']
}

export type RowRecentBlogPostDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowRecentBlogPostCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowRecentBlogPostUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowRecentBlogPostPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowRecentBlogPostLinkArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowRecentBlogPostPageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowRecentBlogPostHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type PageContentCreateManyInlineInput = {
  /** Create and connect multiple existing PageContent documents */
  create?: Maybe<Array<PageContentCreateInput>>
  /** Connect multiple existing PageContent documents */
  connect?: Maybe<Array<PageContentWhereUniqueInput>>
}

export type RowPeopleWithTextUpdateLocalizationInput = {
  data: RowPeopleWithTextUpdateLocalizationDataInput
  locale: Locale
}

export type PageOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'url_ASC'
  | 'url_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'metaTitle_ASC'
  | 'metaTitle_DESC'
  | 'metaDescription_ASC'
  | 'metaDescription_DESC'
  | 'metaRobots_ASC'
  | 'metaRobots_DESC'
  | 'releaseDate_ASC'
  | 'releaseDate_DESC'

export type RowColumnThree = Node & {
  __typename?: 'RowColumnThree'
  /** System stage field */
  stage: Stage
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowColumnThree>
  /** Get the document in other stages */
  documentInStages: Array<RowColumnThree>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  rowColorBlock?: Maybe<RowColorBlock>
  identity: Scalars['String']
  colOne: RichText
  colOneIcon?: Maybe<Asset>
  colTwo: RichText
  colTwoIcon?: Maybe<Asset>
  colThree: RichText
  colThreeIcon?: Maybe<Asset>
  page: Array<Page>
  /** List of RowColumnThree versions */
  history: Array<Version>
}

export type RowColumnThreeLocalizationsArgs = {
  locales?: Array<Locale>
  includeCurrent?: Scalars['Boolean']
}

export type RowColumnThreeDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowColumnThreeCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowColumnThreeUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowColumnThreePublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowColumnThreeRowColorBlockArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowColumnThreeColOneIconArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowColumnThreeColTwoIconArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowColumnThreeColThreeIconArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowColumnThreePageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowColumnThreeHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowIframeUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowIframeUpdateManyLocalizationInput>>
}

/** References RowModulePage record uniquely */
export type RowModulePageWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

export type CompanyUpdateInput = {
  name?: Maybe<Scalars['String']>
  logo?: Maybe<AssetUpdateOneInlineInput>
  rowCompanySlider?: Maybe<RowCompanySliderUpdateManyInlineInput>
}

export type RowModuleUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowModuleUpdateManyLocalizationInput>>
}

export type RowPhonesSliderUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowPhonesSliderWhereUniqueInput
  /** Upsert data */
  data: RowPhonesSliderUpsertInput
}

export type RowTitleUpdateManyInlineInput = {
  /** Create and connect multiple RowTitle documents */
  create?: Maybe<Array<RowTitleCreateInput>>
  /** Connect multiple existing RowTitle documents */
  connect?: Maybe<Array<RowTitleConnectInput>>
  /** Override currently-connected documents with multiple existing RowTitle documents */
  set?: Maybe<Array<RowTitleWhereUniqueInput>>
  /** Update multiple RowTitle documents */
  update?: Maybe<Array<RowTitleUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowTitle documents */
  upsert?: Maybe<Array<RowTitleUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowTitle documents */
  disconnect?: Maybe<Array<RowTitleWhereUniqueInput>>
  /** Delete multiple RowTitle documents */
  delete?: Maybe<Array<RowTitleWhereUniqueInput>>
}

export type ServiceUpdateManyInlineInput = {
  /** Create and connect multiple Service documents */
  create?: Maybe<Array<ServiceCreateInput>>
  /** Connect multiple existing Service documents */
  connect?: Maybe<Array<ServiceConnectInput>>
  /** Override currently-connected documents with multiple existing Service documents */
  set?: Maybe<Array<ServiceWhereUniqueInput>>
  /** Update multiple Service documents */
  update?: Maybe<Array<ServiceUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple Service documents */
  upsert?: Maybe<Array<ServiceUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple Service documents */
  disconnect?: Maybe<Array<ServiceWhereUniqueInput>>
  /** Delete multiple Service documents */
  delete?: Maybe<Array<ServiceWhereUniqueInput>>
}

export type ParnerListUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: ParnerListWhereUniqueInput
  /** Document to update */
  data: ParnerListUpdateInput
}

export type RowLaptopUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowLaptopWhereInput
  /** Update many input */
  data: RowLaptopUpdateManyInput
}

/** A connection to a list of items. */
export type RowPeopleWithTextConnection = {
  __typename?: 'RowPeopleWithTextConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowPeopleWithTextEdge>
  aggregate: Aggregate
}

export type RowRecentBlogPostCreateOneInlineInput = {
  /** Create and connect one RowRecentBlogPost document */
  create?: Maybe<RowRecentBlogPostCreateInput>
  /** Connect one existing RowRecentBlogPost document */
  connect?: Maybe<RowRecentBlogPostWhereUniqueInput>
}

export type RowServiceListCreateOneInlineInput = {
  /** Create and connect one RowServiceList document */
  create?: Maybe<RowServiceListCreateInput>
  /** Connect one existing RowServiceList document */
  connect?: Maybe<RowServiceListWhereUniqueInput>
}

export type RowYoutubeVideoCreateOneInlineInput = {
  /** Create and connect one RowYoutubeVideo document */
  create?: Maybe<RowYoutubeVideoCreateInput>
  /** Connect one existing RowYoutubeVideo document */
  connect?: Maybe<RowYoutubeVideoWhereUniqueInput>
}

export type RowYoutubeVideoUpdateOneInlineInput = {
  /** Create and connect one RowYoutubeVideo document */
  create?: Maybe<RowYoutubeVideoCreateInput>
  /** Update single RowYoutubeVideo document */
  update?: Maybe<RowYoutubeVideoUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowYoutubeVideo document */
  upsert?: Maybe<RowYoutubeVideoUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowYoutubeVideo document */
  connect?: Maybe<RowYoutubeVideoWhereUniqueInput>
  /** Disconnect currently connected RowYoutubeVideo document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowYoutubeVideo document */
  delete?: Maybe<Scalars['Boolean']>
}

export type PageContentCreateOneInlineInput = {
  /** Create and connect one PageContent document */
  create?: Maybe<PageContentCreateInput>
  /** Connect one existing PageContent document */
  connect?: Maybe<PageContentWhereUniqueInput>
}

export type AssetUpsertInput = {
  /** Create document if it didn't exist */
  create: AssetCreateInput
  /** Update document if it exists */
  update: AssetUpdateInput
}

export type RowHeroVideoLinksCreateManyInlineInput = {
  /** Create and connect multiple existing RowHeroVideoLinks documents */
  create?: Maybe<Array<RowHeroVideoLinksCreateInput>>
  /** Connect multiple existing RowHeroVideoLinks documents */
  connect?: Maybe<Array<RowHeroVideoLinksWhereUniqueInput>>
}

export type RowContactCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowContactCreateLocalizationInput>>
}

/** Identifies documents */
export type RowLineHorizontalWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowLineHorizontalWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowLineHorizontalWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowLineHorizontalWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  active?: Maybe<Scalars['Boolean']>
  /** All values that are not equal to given value. */
  active_not?: Maybe<Scalars['Boolean']>
}

export type RowPeopleWithTextConnectInput = {
  /** Document to connect */
  where: RowPeopleWithTextWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowVacancyCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowVacancyCreateLocalizationInput>>
}

export type LinkInternalUpdateInput = {
  /** title input for default locale (nl) */
  title?: Maybe<Scalars['String']>
  page?: Maybe<PageUpdateOneInlineInput>
  /** description input for default locale (nl) */
  description?: Maybe<Scalars['RichTextAST']>
  rowPeopleWithText?: Maybe<RowPeopleWithTextUpdateManyInlineInput>
  rowHeroVideo?: Maybe<RowHeroUpdateManyInlineInput>
  rowRecentBlogPost?: Maybe<RowRecentBlogPostUpdateOneInlineInput>
  footerContactLink?: Maybe<FooterUpdateManyInlineInput>
  footerAdditionalLinks?: Maybe<FooterUpdateManyInlineInput>
  footerLinks?: Maybe<FooterUpdateManyInlineInput>
  footerReviewLink?: Maybe<FooterUpdateManyInlineInput>
  rowLinksWithText?: Maybe<RowLinksWithTextUpdateManyInlineInput>
  paperCard?: Maybe<PaperCardUpdateOneInlineInput>
  rowModulePage?: Maybe<RowModulePageUpdateOneInlineInput>
  /** Manage document localizations */
  localizations?: Maybe<LinkInternalUpdateLocalizationsInput>
}

/** An edge in a connection. */
export type RowLineHorizontalEdge = {
  __typename?: 'RowLineHorizontalEdge'
  /** The item at the end of the edge. */
  node: RowLineHorizontal
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type PageUpdateManyInput = {
  /** title input for default locale (nl) */
  title?: Maybe<Scalars['String']>
  /** metaTitle input for default locale (nl) */
  metaTitle?: Maybe<Scalars['String']>
  /** metaDescription input for default locale (nl) */
  metaDescription?: Maybe<Scalars['String']>
  metaRobots?: Maybe<MetaRobots>
  /** releaseDate input for default locale (nl) */
  releaseDate?: Maybe<Scalars['DateTime']>
  /** Optional updates to localizations */
  localizations?: Maybe<PageUpdateManyLocalizationsInput>
}

/** An edge in a connection. */
export type RowImageOrVideoEdge = {
  __typename?: 'RowImageOrVideoEdge'
  /** The item at the end of the edge. */
  node: RowImageOrVideo
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowPhonesSliderUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowPhonesSliderWhereUniqueInput
  /** Document to update */
  data: RowPhonesSliderUpdateInput
}

export type RowTitleOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'

export type RowColorSpeedBlockUpdateManyInlineInput = {
  /** Create and connect multiple RowColorSpeedBlock documents */
  create?: Maybe<Array<RowColorSpeedBlockCreateInput>>
  /** Connect multiple existing RowColorSpeedBlock documents */
  connect?: Maybe<Array<RowColorSpeedBlockConnectInput>>
  /** Override currently-connected documents with multiple existing RowColorSpeedBlock documents */
  set?: Maybe<Array<RowColorSpeedBlockWhereUniqueInput>>
  /** Update multiple RowColorSpeedBlock documents */
  update?: Maybe<Array<RowColorSpeedBlockUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowColorSpeedBlock documents */
  upsert?: Maybe<Array<RowColorSpeedBlockUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowColorSpeedBlock documents */
  disconnect?: Maybe<Array<RowColorSpeedBlockWhereUniqueInput>>
  /** Delete multiple RowColorSpeedBlock documents */
  delete?: Maybe<Array<RowColorSpeedBlockWhereUniqueInput>>
}

export type RowHeroCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowHeroCreateLocalizationInput>>
}

/** A connection to a list of items. */
export type RowModulePageConnection = {
  __typename?: 'RowModulePageConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowModulePageEdge>
  aggregate: Aggregate
}

export type RowModulePageUpdateManyInput = {
  name?: Maybe<Scalars['String']>
  /** description input for default locale (nl) */
  description?: Maybe<Scalars['RichTextAST']>
  /** Optional updates to localizations */
  localizations?: Maybe<RowModulePageUpdateManyLocalizationsInput>
}

export type RowExplanation = Node & {
  __typename?: 'RowExplanation'
  /** System stage field */
  stage: Stage
  /** Get the document in other stages */
  documentInStages: Array<RowExplanation>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  identifier: Scalars['String']
  subject: RichText
  explanation: RichText
  page: Array<Page>
  card?: Maybe<PaperCard>
  /** List of RowExplanation versions */
  history: Array<Version>
}

export type RowExplanationDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowExplanationPageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowExplanationCardArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowExplanationHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type PaperCardUpdateManyInlineInput = {
  /** Create and connect multiple PaperCard documents */
  create?: Maybe<Array<PaperCardCreateInput>>
  /** Connect multiple existing PaperCard documents */
  connect?: Maybe<Array<PaperCardConnectInput>>
  /** Override currently-connected documents with multiple existing PaperCard documents */
  set?: Maybe<Array<PaperCardWhereUniqueInput>>
  /** Update multiple PaperCard documents */
  update?: Maybe<Array<PaperCardUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple PaperCard documents */
  upsert?: Maybe<Array<PaperCardUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple PaperCard documents */
  disconnect?: Maybe<Array<PaperCardWhereUniqueInput>>
  /** Delete multiple PaperCard documents */
  delete?: Maybe<Array<PaperCardWhereUniqueInput>>
}

export type PersonUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: PersonWhereUniqueInput
  /** Document to update */
  data: PersonUpdateInput
}

export type RowColorSpeedBlockUpdateManyInput = {
  colTwo?: Maybe<Scalars['RichTextAST']>
  colOne?: Maybe<Scalars['RichTextAST']>
  colThree?: Maybe<Scalars['RichTextAST']>
  colFour?: Maybe<Scalars['RichTextAST']>
}

/** Identifies documents */
export type RowColumnTwoWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowColumnTwoWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowColumnTwoWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowColumnTwoWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  colOneIcon?: Maybe<AssetWhereInput>
  colTwoIcon?: Maybe<AssetWhereInput>
}

export type RowColumnTwoUpdateManyLocalizationDataInput = {
  colOne?: Maybe<Scalars['RichTextAST']>
  colTwo?: Maybe<Scalars['RichTextAST']>
}

export type RowLaptopWithTextConnectInput = {
  /** Document to connect */
  where: RowLaptopWithTextWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowPeopleWithTextUpdateManyInput = {
  /** text input for default locale (nl) */
  text?: Maybe<Scalars['RichTextAST']>
  /** Optional updates to localizations */
  localizations?: Maybe<RowPeopleWithTextUpdateManyLocalizationsInput>
}

/** References RowVacancy record uniquely */
export type RowVacancyWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type RowImageSwiperUpdateOneInlineInput = {
  /** Create and connect one RowImageSwiper document */
  create?: Maybe<RowImageSwiperCreateInput>
  /** Update single RowImageSwiper document */
  update?: Maybe<RowImageSwiperUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowImageSwiper document */
  upsert?: Maybe<RowImageSwiperUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowImageSwiper document */
  connect?: Maybe<RowImageSwiperWhereUniqueInput>
  /** Disconnect currently connected RowImageSwiper document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowImageSwiper document */
  delete?: Maybe<Scalars['Boolean']>
}

export type RowLinksWithTextUpdateLocalizationDataInput = {
  text?: Maybe<Scalars['RichTextAST']>
}

export type RowModuleUpdateOneInlineInput = {
  /** Create and connect one RowModule document */
  create?: Maybe<RowModuleCreateInput>
  /** Update single RowModule document */
  update?: Maybe<RowModuleUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowModule document */
  upsert?: Maybe<RowModuleUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowModule document */
  connect?: Maybe<RowModuleWhereUniqueInput>
  /** Disconnect currently connected RowModule document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowModule document */
  delete?: Maybe<Scalars['Boolean']>
}

export type RowReviewCreateOneInlineInput = {
  /** Create and connect one RowReview document */
  create?: Maybe<RowReviewCreateInput>
  /** Connect one existing RowReview document */
  connect?: Maybe<RowReviewWhereUniqueInput>
}

export type PageContentCreateInput = {
  RowLinksWithText?: Maybe<RowLinksWithTextCreateInput>
  RowColumnThree?: Maybe<RowColumnThreeCreateInput>
  RowColumnTwo?: Maybe<RowColumnTwoCreateInput>
  RowRecentBlogPost?: Maybe<RowRecentBlogPostCreateInput>
  RowPeopleWithText?: Maybe<RowPeopleWithTextCreateInput>
  RowColumnOne?: Maybe<RowColumnOneCreateInput>
  RowCompanySlider?: Maybe<RowCompanySliderCreateInput>
  RowHero?: Maybe<RowHeroCreateInput>
  RowYoutubeVideo?: Maybe<RowYoutubeVideoCreateInput>
  RowIpadHorizontal?: Maybe<RowIpadHorizontalCreateInput>
  RowColorSpeedBlock?: Maybe<RowColorSpeedBlockCreateInput>
  RowContact?: Maybe<RowContactCreateInput>
  RowGoogleMap?: Maybe<RowGoogleMapCreateInput>
  RowVacancy?: Maybe<RowVacancyCreateInput>
  RowLaptopWithText?: Maybe<RowLaptopWithTextCreateInput>
  RowIconWithTextList?: Maybe<RowIconWithTextListCreateInput>
  RowLineHorizontal?: Maybe<RowLineHorizontalCreateInput>
  RowIphoneWithText?: Maybe<RowIphoneWithTextCreateInput>
  RowIpadVertical?: Maybe<RowIpadVerticalCreateInput>
  RowLaptop?: Maybe<RowLaptopCreateInput>
  RowImageOrVideo?: Maybe<RowImageOrVideoCreateInput>
  RowPhonesSlider?: Maybe<RowPhonesSliderCreateInput>
  RowIframe?: Maybe<RowIframeCreateInput>
  RowQuote?: Maybe<RowQuoteCreateInput>
  RowColorBlock?: Maybe<RowColorBlockCreateInput>
  RowIntro?: Maybe<RowIntroCreateInput>
  RowTitle?: Maybe<RowTitleCreateInput>
  RowReview?: Maybe<RowReviewCreateInput>
  RowServiceList?: Maybe<RowServiceListCreateInput>
  RowCollaboration?: Maybe<RowCollaborationCreateInput>
  RowExplanation?: Maybe<RowExplanationCreateInput>
  RowColumnBoxed?: Maybe<RowColumnBoxedCreateInput>
  RowModule?: Maybe<RowModuleCreateInput>
  RowModulePage?: Maybe<RowModulePageCreateInput>
  RowCenteredText?: Maybe<RowCenteredTextCreateInput>
  RowImageSwiper?: Maybe<RowImageSwiperCreateInput>
}

/** A connection to a list of items. */
export type RowCompanySliderConnection = {
  __typename?: 'RowCompanySliderConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowCompanySliderEdge>
  aggregate: Aggregate
}

export type HeaderUpdateInput = {
  identity?: Maybe<Scalars['String']>
  menuPages?: Maybe<PageUpdateManyInlineInput>
  homePage?: Maybe<PageUpdateOneInlineInput>
  contactPage?: Maybe<PageUpdateOneInlineInput>
  contactAvatar?: Maybe<PersonUpdateOneInlineInput>
}

export type RowExplanationUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowExplanationWhereUniqueInput
  /** Document to update */
  data: RowExplanationUpdateInput
}

export type RowLinksWithTextUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowLinksWithTextUpdateManyLocalizationInput>>
}

export type AwardUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<AwardUpdateManyLocalizationInput>>
}

/** An edge in a connection. */
export type RowIframeEdge = {
  __typename?: 'RowIframeEdge'
  /** The item at the end of the edge. */
  node: RowIframe
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowIframeCreateOneInlineInput = {
  /** Create and connect one RowIframe document */
  create?: Maybe<RowIframeCreateInput>
  /** Connect one existing RowIframe document */
  connect?: Maybe<RowIframeWhereUniqueInput>
}

export type RowIntroCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowIntroCreateLocalizationInput>>
}

export type RowIphoneWithTextUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowIphoneWithTextWhereInput
  /** Update many input */
  data: RowIphoneWithTextUpdateManyInput
}

/** An edge in a connection. */
export type RowModulePageEdge = {
  __typename?: 'RowModulePageEdge'
  /** The item at the end of the edge. */
  node: RowModulePage
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowServiceListUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: Maybe<Scalars['String']>
}

export type PartnerUpdateOneInlineInput = {
  /** Create and connect one Partner document */
  create?: Maybe<PartnerCreateInput>
  /** Update single Partner document */
  update?: Maybe<PartnerUpdateWithNestedWhereUniqueInput>
  /** Upsert single Partner document */
  upsert?: Maybe<PartnerUpsertWithNestedWhereUniqueInput>
  /** Connect existing Partner document */
  connect?: Maybe<PartnerWhereUniqueInput>
  /** Disconnect currently connected Partner document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected Partner document */
  delete?: Maybe<Scalars['Boolean']>
}

export type AssetUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<AssetUpdateManyLocalizationInput>>
}

export type PaperCardUpsertInput = {
  /** Create document if it didn't exist */
  create: PaperCardCreateInput
  /** Update document if it exists */
  update: PaperCardUpdateInput
}

export type RowPeopleWithTextUpdateInput = {
  identity?: Maybe<Scalars['String']>
  /** text input for default locale (nl) */
  text?: Maybe<Scalars['RichTextAST']>
  links?: Maybe<LinkInternalUpdateManyInlineInput>
  page?: Maybe<PageUpdateManyInlineInput>
  /** Manage document localizations */
  localizations?: Maybe<RowPeopleWithTextUpdateLocalizationsInput>
}

/** Identifies documents */
export type RowYoutubeVideoWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowYoutubeVideoWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowYoutubeVideoWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowYoutubeVideoWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  videoId?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  videoId_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  videoId_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  videoId_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  videoId_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  videoId_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  videoId_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  videoId_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  videoId_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  videoId_not_ends_with?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  title_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  title_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  title_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  title_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  title_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  title_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  title_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  title_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  title_not_ends_with?: Maybe<Scalars['String']>
}

export type VacancyStatus = 'FRESH' | 'NOT_AVAILABLE' | 'RENEWED'

export type RowColumnBoxedCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  content: Scalars['RichTextAST']
}

export type RowContactCreateOneInlineInput = {
  /** Create and connect one RowContact document */
  create?: Maybe<RowContactCreateInput>
  /** Connect one existing RowContact document */
  connect?: Maybe<RowContactWhereUniqueInput>
}

export type RowHeroUpdateManyInput = {
  /** text input for default locale (nl) */
  text?: Maybe<Scalars['RichTextAST']>
  /** Optional updates to localizations */
  localizations?: Maybe<RowHeroUpdateManyLocalizationsInput>
}

export type ReviewCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  quote: Scalars['String']
}

export type PersonUpdateInput = {
  name?: Maybe<Scalars['String']>
  avatar?: Maybe<AssetUpdateOneInlineInput>
  page?: Maybe<PageUpdateManyInlineInput>
  header?: Maybe<HeaderUpdateManyInlineInput>
  rowHero?: Maybe<RowHeroUpdateManyInlineInput>
}

export type LinkInternalUpdateOneInlineInput = {
  /** Create and connect one LinkInternal document */
  create?: Maybe<LinkInternalCreateInput>
  /** Update single LinkInternal document */
  update?: Maybe<LinkInternalUpdateWithNestedWhereUniqueInput>
  /** Upsert single LinkInternal document */
  upsert?: Maybe<LinkInternalUpsertWithNestedWhereUniqueInput>
  /** Connect existing LinkInternal document */
  connect?: Maybe<LinkInternalWhereUniqueInput>
  /** Disconnect currently connected LinkInternal document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected LinkInternal document */
  delete?: Maybe<Scalars['Boolean']>
}

export type RowIpadHorizontalConnectInput = {
  /** Document to connect */
  where: RowIpadHorizontalWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowLineHorizontalUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowLineHorizontalWhereUniqueInput
  /** Upsert data */
  data: RowLineHorizontalUpsertInput
}

export type RowLinksWithTextUpdateManyInput = {
  /** text input for default locale (nl) */
  text?: Maybe<Scalars['RichTextAST']>
  /** Optional updates to localizations */
  localizations?: Maybe<RowLinksWithTextUpdateManyLocalizationsInput>
}

export type RowPhonesSliderCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  backgroundImage?: Maybe<AssetCreateOneInlineInput>
  phoneOneContent: AssetCreateOneInlineInput
  phoneTwoContent: AssetCreateOneInlineInput
  phoneThreeContent: AssetCreateOneInlineInput
  page?: Maybe<PageCreateManyInlineInput>
}

export type RowTitleUpdateManyLocalizationInput = {
  data: RowTitleUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowContact = Node & {
  __typename?: 'RowContact'
  /** System stage field */
  stage: Stage
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowContact>
  /** Get the document in other stages */
  documentInStages: Array<RowContact>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  text: RichText
  page: Array<Page>
  /** List of RowContact versions */
  history: Array<Version>
}

export type RowContactLocalizationsArgs = {
  locales?: Array<Locale>
  includeCurrent?: Scalars['Boolean']
}

export type RowContactDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowContactCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowContactUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowContactPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowContactPageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowContactHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

/** Identifies documents */
export type RowContactWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowContactWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowContactWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowContactWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
}

export type RowHeroUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowHeroWhereUniqueInput
  /** Document to update */
  data: RowHeroUpdateInput
}

export type RowIpadVerticalCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  backgroundImage?: Maybe<AssetCreateOneInlineInput>
  iPadContent: AssetCreateOneInlineInput
  page?: Maybe<PageCreateManyInlineInput>
}

export type RowModulePageCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  name: Scalars['String']
  /** description input for default locale (nl) */
  description: Scalars['RichTextAST']
  link?: Maybe<LinkInternalCreateOneInlineInput>
  page?: Maybe<PageCreateManyInlineInput>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowModulePageCreateLocalizationsInput>
}

/** Identifies documents */
export type RowPeopleWithTextWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowPeopleWithTextWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowPeopleWithTextWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowPeopleWithTextWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  links_every?: Maybe<LinkInternalWhereInput>
  links_some?: Maybe<LinkInternalWhereInput>
  links_none?: Maybe<LinkInternalWhereInput>
}

export type RowVacancyUpdateLocalizationInput = {
  data: RowVacancyUpdateLocalizationDataInput
  locale: Locale
}

export type PageUpdateInput = {
  /** url input for default locale (nl) */
  url?: Maybe<Scalars['String']>
  /** title input for default locale (nl) */
  title?: Maybe<Scalars['String']>
  /** metaTitle input for default locale (nl) */
  metaTitle?: Maybe<Scalars['String']>
  /** metaDescription input for default locale (nl) */
  metaDescription?: Maybe<Scalars['String']>
  metaRobots?: Maybe<MetaRobots>
  content?: Maybe<PageContentUpdateManyInlineInput>
  author?: Maybe<PersonUpdateOneInlineInput>
  logo?: Maybe<AssetUpdateOneInlineInput>
  /** releaseDate input for default locale (nl) */
  releaseDate?: Maybe<Scalars['DateTime']>
  asset?: Maybe<AssetUpdateOneInlineInput>
  internalLink?: Maybe<LinkInternalUpdateManyInlineInput>
  headerContact?: Maybe<HeaderUpdateManyInlineInput>
  headerHome?: Maybe<HeaderUpdateManyInlineInput>
  headerMenu?: Maybe<HeaderUpdateManyInlineInput>
  rowServicesWithText?: Maybe<RowLinksWithTextUpdateManyInlineInput>
  service?: Maybe<ServiceUpdateOneInlineInput>
  /** Manage document localizations */
  localizations?: Maybe<PageUpdateLocalizationsInput>
}

export type RowColorBlockOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identifier_ASC'
  | 'identifier_DESC'

export type RowPeopleWithTextOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'

/** References Service record uniquely */
export type ServiceWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type PartnerUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: PartnerWhereInput
  /** Update many input */
  data: PartnerUpdateManyInput
}

export type Award = Node & {
  __typename?: 'Award'
  /** System stage field */
  stage: Stage
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<Award>
  /** Get the document in other stages */
  documentInStages: Array<Award>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  name: Scalars['String']
  asset: Asset
  /** List of Award versions */
  history: Array<Version>
}

export type AwardLocalizationsArgs = {
  locales?: Array<Locale>
  includeCurrent?: Scalars['Boolean']
}

export type AwardDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type AwardCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type AwardUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type AwardPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type AwardAssetArgs = {
  locales?: Maybe<Array<Locale>>
}

export type AwardHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type CompanyUpdateManyInlineInput = {
  /** Create and connect multiple Company documents */
  create?: Maybe<Array<CompanyCreateInput>>
  /** Connect multiple existing Company documents */
  connect?: Maybe<Array<CompanyConnectInput>>
  /** Override currently-connected documents with multiple existing Company documents */
  set?: Maybe<Array<CompanyWhereUniqueInput>>
  /** Update multiple Company documents */
  update?: Maybe<Array<CompanyUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple Company documents */
  upsert?: Maybe<Array<CompanyUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple Company documents */
  disconnect?: Maybe<Array<CompanyWhereUniqueInput>>
  /** Delete multiple Company documents */
  delete?: Maybe<Array<CompanyWhereUniqueInput>>
}

export type RowIntroCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  /** content input for default locale (nl) */
  content: Scalars['RichTextAST']
  page?: Maybe<PageCreateManyInlineInput>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowIntroCreateLocalizationsInput>
}

export type RowIntroUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowIntroCreateLocalizationInput>>
  /** Localizations to update */
  update?: Maybe<Array<RowIntroUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowIntroUpsertLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
}

export type RowIpadHorizontal = Node & {
  __typename?: 'RowIpadHorizontal'
  /** System stage field */
  stage: Stage
  /** Get the document in other stages */
  documentInStages: Array<RowIpadHorizontal>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  backgroundImage?: Maybe<Asset>
  iPadContent: Asset
  page: Array<Page>
  /** List of RowIpadHorizontal versions */
  history: Array<Version>
}

export type RowIpadHorizontalDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowIpadHorizontalBackgroundImageArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowIpadHorizontalIPadContentArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowIpadHorizontalPageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowIpadHorizontalHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowLinksWithTextOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'

/** An edge in a connection. */
export type RowPhonesSliderEdge = {
  __typename?: 'RowPhonesSliderEdge'
  /** The item at the end of the edge. */
  node: RowPhonesSlider
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type AssetUpdateLocalizationDataInput = {
  handle?: Maybe<Scalars['String']>
  fileName?: Maybe<Scalars['String']>
  height?: Maybe<Scalars['Float']>
  width?: Maybe<Scalars['Float']>
  size?: Maybe<Scalars['Float']>
  mimeType?: Maybe<Scalars['String']>
  alt?: Maybe<Scalars['String']>
}

export type RowVacancyUpdateOneInlineInput = {
  /** Create and connect one RowVacancy document */
  create?: Maybe<RowVacancyCreateInput>
  /** Update single RowVacancy document */
  update?: Maybe<RowVacancyUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowVacancy document */
  upsert?: Maybe<RowVacancyUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowVacancy document */
  connect?: Maybe<RowVacancyWhereUniqueInput>
  /** Disconnect currently connected RowVacancy document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowVacancy document */
  delete?: Maybe<Scalars['Boolean']>
}

export type RowRecentBlogPostUpdateManyLocalizationInput = {
  data: RowRecentBlogPostUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowRecentBlogPostUpdateManyInlineInput = {
  /** Create and connect multiple RowRecentBlogPost documents */
  create?: Maybe<Array<RowRecentBlogPostCreateInput>>
  /** Connect multiple existing RowRecentBlogPost documents */
  connect?: Maybe<Array<RowRecentBlogPostConnectInput>>
  /** Override currently-connected documents with multiple existing RowRecentBlogPost documents */
  set?: Maybe<Array<RowRecentBlogPostWhereUniqueInput>>
  /** Update multiple RowRecentBlogPost documents */
  update?: Maybe<Array<RowRecentBlogPostUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowRecentBlogPost documents */
  upsert?: Maybe<Array<RowRecentBlogPostUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowRecentBlogPost documents */
  disconnect?: Maybe<Array<RowRecentBlogPostWhereUniqueInput>>
  /** Delete multiple RowRecentBlogPost documents */
  delete?: Maybe<Array<RowRecentBlogPostWhereUniqueInput>>
}

export type PageContentUpdateInput = {
  RowLinksWithText?: Maybe<RowLinksWithTextUpdateInput>
  RowColumnThree?: Maybe<RowColumnThreeUpdateInput>
  RowColumnTwo?: Maybe<RowColumnTwoUpdateInput>
  RowRecentBlogPost?: Maybe<RowRecentBlogPostUpdateInput>
  RowPeopleWithText?: Maybe<RowPeopleWithTextUpdateInput>
  RowColumnOne?: Maybe<RowColumnOneUpdateInput>
  RowCompanySlider?: Maybe<RowCompanySliderUpdateInput>
  RowHero?: Maybe<RowHeroUpdateInput>
  RowYoutubeVideo?: Maybe<RowYoutubeVideoUpdateInput>
  RowIpadHorizontal?: Maybe<RowIpadHorizontalUpdateInput>
  RowColorSpeedBlock?: Maybe<RowColorSpeedBlockUpdateInput>
  RowContact?: Maybe<RowContactUpdateInput>
  RowGoogleMap?: Maybe<RowGoogleMapUpdateInput>
  RowVacancy?: Maybe<RowVacancyUpdateInput>
  RowLaptopWithText?: Maybe<RowLaptopWithTextUpdateInput>
  RowIconWithTextList?: Maybe<RowIconWithTextListUpdateInput>
  RowLineHorizontal?: Maybe<RowLineHorizontalUpdateInput>
  RowIphoneWithText?: Maybe<RowIphoneWithTextUpdateInput>
  RowIpadVertical?: Maybe<RowIpadVerticalUpdateInput>
  RowLaptop?: Maybe<RowLaptopUpdateInput>
  RowImageOrVideo?: Maybe<RowImageOrVideoUpdateInput>
  RowPhonesSlider?: Maybe<RowPhonesSliderUpdateInput>
  RowIframe?: Maybe<RowIframeUpdateInput>
  RowQuote?: Maybe<RowQuoteUpdateInput>
  RowColorBlock?: Maybe<RowColorBlockUpdateInput>
  RowIntro?: Maybe<RowIntroUpdateInput>
  RowTitle?: Maybe<RowTitleUpdateInput>
  RowReview?: Maybe<RowReviewUpdateInput>
  RowServiceList?: Maybe<RowServiceListUpdateInput>
  RowCollaboration?: Maybe<RowCollaborationUpdateInput>
  RowExplanation?: Maybe<RowExplanationUpdateInput>
  RowColumnBoxed?: Maybe<RowColumnBoxedUpdateInput>
  RowModule?: Maybe<RowModuleUpdateInput>
  RowModulePage?: Maybe<RowModulePageUpdateInput>
  RowCenteredText?: Maybe<RowCenteredTextUpdateInput>
  RowImageSwiper?: Maybe<RowImageSwiperUpdateInput>
}

/** A connection to a list of items. */
export type HeaderConnection = {
  __typename?: 'HeaderConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<HeaderEdge>
  aggregate: Aggregate
}

export type RowIframeUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowIframeWhereUniqueInput
  /** Upsert data */
  data: RowIframeUpsertInput
}

export type RowIntroCreateOneInlineInput = {
  /** Create and connect one RowIntro document */
  create?: Maybe<RowIntroCreateInput>
  /** Connect one existing RowIntro document */
  connect?: Maybe<RowIntroWhereUniqueInput>
}

export type RowQuoteUpdateInput = {
  identity?: Maybe<Scalars['String']>
  clientName?: Maybe<Scalars['String']>
  clientTitle?: Maybe<Scalars['String']>
  clientQuote?: Maybe<Scalars['String']>
  functionalities?: Maybe<Scalars['RichTextAST']>
  page?: Maybe<PageUpdateManyInlineInput>
}

export type FooterAdditionalLinksCreateOneInlineInput = {
  /** Create and connect one FooterAdditionalLinks document */
  create?: Maybe<FooterAdditionalLinksCreateInput>
  /** Connect one existing FooterAdditionalLinks document */
  connect?: Maybe<FooterAdditionalLinksWhereUniqueInput>
}

export type ReviewCreateLocalizationInput = {
  /** Localization input */
  data: ReviewCreateLocalizationDataInput
  locale: Locale
}

export type ParnerListCreateManyInlineInput = {
  /** Create and connect multiple existing ParnerList documents */
  create?: Maybe<Array<ParnerListCreateInput>>
  /** Connect multiple existing ParnerList documents */
  connect?: Maybe<Array<ParnerListWhereUniqueInput>>
}

export type RowColorSpeedBlockUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowColorSpeedBlockWhereInput
  /** Update many input */
  data: RowColorSpeedBlockUpdateManyInput
}

/** An edge in a connection. */
export type RowRecentBlogPostEdge = {
  __typename?: 'RowRecentBlogPostEdge'
  /** The item at the end of the edge. */
  node: RowRecentBlogPost
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowVacancyUpdateLocalizationDataInput = {
  perks?: Maybe<Array<Scalars['String']>>
}

/** A connection to a list of items. */
export type ContactFormConnection = {
  __typename?: 'ContactFormConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<ContactFormEdge>
  aggregate: Aggregate
}

export type RowLaptopUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowLaptopWhereUniqueInput
  /** Document to update */
  data: RowLaptopUpdateInput
}

export type RowPhonesSliderUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowPhonesSliderWhereInput
  /** Update many input */
  data: RowPhonesSliderUpdateManyInput
}

export type RowRecentBlogPostUpdateManyInput = {
  /** header input for default locale (nl) */
  header?: Maybe<Scalars['RichTextAST']>
  /** forceLocalization input for default locale (nl) */
  forceLocalization?: Maybe<Scalars['String']>
  /** Optional updates to localizations */
  localizations?: Maybe<RowRecentBlogPostUpdateManyLocalizationsInput>
}

/** Identifies documents */
export type RowCollaborationWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowCollaborationWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowCollaborationWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowCollaborationWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identifier?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identifier_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identifier_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identifier_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identifier_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identifier_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identifier_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identifier_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identifier_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identifier_not_ends_with?: Maybe<Scalars['String']>
  partnerList?: Maybe<ParnerListWhereInput>
}

/** Identifies documents */
export type PartnerManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<PartnerWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<PartnerWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<PartnerWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  name?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  name_not_ends_with?: Maybe<Scalars['String']>
  url?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  url_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  url_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  url_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  url_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  url_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  url_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  url_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  url_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  url_not_ends_with?: Maybe<Scalars['String']>
  logo?: Maybe<AssetWhereInput>
  rowCollaboration_every?: Maybe<ParnerListWhereInput>
  rowCollaboration_some?: Maybe<ParnerListWhereInput>
  rowCollaboration_none?: Maybe<ParnerListWhereInput>
}

/** References RowCenteredText record uniquely */
export type RowCenteredTextWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  name?: Maybe<Scalars['String']>
}

export type RowCollaboration = Node & {
  __typename?: 'RowCollaboration'
  /** System stage field */
  stage: Stage
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowCollaboration>
  /** Get the document in other stages */
  documentInStages: Array<RowCollaboration>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  identifier: Scalars['String']
  content: RichText
  partnerList?: Maybe<ParnerList>
  page: Array<Page>
  /** List of RowCollaboration versions */
  history: Array<Version>
}

export type RowCollaborationLocalizationsArgs = {
  locales?: Array<Locale>
  includeCurrent?: Scalars['Boolean']
}

export type RowCollaborationDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowCollaborationCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowCollaborationUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowCollaborationPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowCollaborationPartnerListArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowCollaborationPageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowCollaborationHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

/** An edge in a connection. */
export type RowColumnOneEdge = {
  __typename?: 'RowColumnOneEdge'
  /** The item at the end of the edge. */
  node: RowColumnOne
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

/** Identifies documents */
export type RowPeopleWithTextManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowPeopleWithTextWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowPeopleWithTextWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowPeopleWithTextWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  links_every?: Maybe<LinkInternalWhereInput>
  links_some?: Maybe<LinkInternalWhereInput>
  links_none?: Maybe<LinkInternalWhereInput>
}

export type RowVacancyUpdateManyLocalizationInput = {
  data: RowVacancyUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowColorBlockBlockContentUpdateManyWithNestedWhereInput = {
  RowColumnThree?: Maybe<RowColumnThreeUpdateManyWithNestedWhereInput>
  RowColumnTwo?: Maybe<RowColumnTwoUpdateManyWithNestedWhereInput>
  RowColumnOne?: Maybe<RowColumnOneUpdateManyWithNestedWhereInput>
}

/** Custom type representing a rich text value comprising of raw rich text ast, html, markdown and text values */
export type RichText = {
  __typename?: 'RichText'
  /** Returns AST representation */
  raw: Scalars['RichTextAST']
  /** Returns HTMl representation */
  html: Scalars['String']
  /** Returns Markdown representation */
  markdown: Scalars['String']
  /** Returns plain-text contents of RichText */
  text: Scalars['String']
}

export type RowContactUpdateManyInput = {
  /** text input for default locale (nl) */
  text?: Maybe<Scalars['RichTextAST']>
  /** Optional updates to localizations */
  localizations?: Maybe<RowContactUpdateManyLocalizationsInput>
}

export type ReviewUpdateLocalizationInput = {
  data: ReviewUpdateLocalizationDataInput
  locale: Locale
}

export type RowColorSpeedBlockUpdateInput = {
  identifier?: Maybe<Scalars['String']>
  colorBlockTitle?: Maybe<RowTitleUpdateOneInlineInput>
  colTwo?: Maybe<Scalars['RichTextAST']>
  colOne?: Maybe<Scalars['RichTextAST']>
  colThree?: Maybe<Scalars['RichTextAST']>
  colFour?: Maybe<Scalars['RichTextAST']>
  page?: Maybe<PageUpdateManyInlineInput>
}

export type RowExplanationUpdateManyInlineInput = {
  /** Create and connect multiple RowExplanation documents */
  create?: Maybe<Array<RowExplanationCreateInput>>
  /** Connect multiple existing RowExplanation documents */
  connect?: Maybe<Array<RowExplanationConnectInput>>
  /** Override currently-connected documents with multiple existing RowExplanation documents */
  set?: Maybe<Array<RowExplanationWhereUniqueInput>>
  /** Update multiple RowExplanation documents */
  update?: Maybe<Array<RowExplanationUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowExplanation documents */
  upsert?: Maybe<Array<RowExplanationUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowExplanation documents */
  disconnect?: Maybe<Array<RowExplanationWhereUniqueInput>>
  /** Delete multiple RowExplanation documents */
  delete?: Maybe<Array<RowExplanationWhereUniqueInput>>
}

export type RowHeroUpsertInput = {
  /** Create document if it didn't exist */
  create: RowHeroCreateInput
  /** Update document if it exists */
  update: RowHeroUpdateInput
}

export type RowLinksWithText = Node & {
  __typename?: 'RowLinksWithText'
  /** System stage field */
  stage: Stage
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowLinksWithText>
  /** Get the document in other stages */
  documentInStages: Array<RowLinksWithText>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  text: RichText
  page: Array<Page>
  pages: Array<Page>
  links: Array<LinkInternal>
  /** List of RowLinksWithText versions */
  history: Array<Version>
}

export type RowLinksWithTextLocalizationsArgs = {
  locales?: Array<Locale>
  includeCurrent?: Scalars['Boolean']
}

export type RowLinksWithTextDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowLinksWithTextCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowLinksWithTextUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowLinksWithTextPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowLinksWithTextPageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowLinksWithTextPagesArgs = {
  where?: Maybe<PageWhereInput>
  orderBy?: Maybe<PageOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowLinksWithTextLinksArgs = {
  where?: Maybe<LinkInternalWhereInput>
  orderBy?: Maybe<LinkInternalOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowLinksWithTextHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type AwardCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  name: Scalars['String']
}

export type RowImageOrVideo = Node & {
  __typename?: 'RowImageOrVideo'
  /** System stage field */
  stage: Stage
  /** Get the document in other stages */
  documentInStages: Array<RowImageOrVideo>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  asset: Asset
  page: Array<Page>
  /** List of RowImageOrVideo versions */
  history: Array<Version>
}

export type RowImageOrVideoDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowImageOrVideoAssetArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowImageOrVideoPageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowImageOrVideoHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowLaptopUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: Maybe<Scalars['String']>
}

export type RowLaptopWithTextUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowLaptopWithTextWhereUniqueInput
  /** Document to update */
  data: RowLaptopWithTextUpdateInput
}

export type RowLinksWithTextUpsertInput = {
  /** Create document if it didn't exist */
  create: RowLinksWithTextCreateInput
  /** Update document if it exists */
  update: RowLinksWithTextUpdateInput
}

export type RowColorBlockBlockContentCreateOneInlineInput = {
  /** Create and connect one RowColorBlockBlockContent document */
  create?: Maybe<RowColorBlockBlockContentCreateInput>
  /** Connect one existing RowColorBlockBlockContent document */
  connect?: Maybe<RowColorBlockBlockContentWhereUniqueInput>
}

/** Identifies documents */
export type FooterWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<FooterWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<FooterWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<FooterWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  links_every?: Maybe<LinkInternalWhereInput>
  links_some?: Maybe<LinkInternalWhereInput>
  links_none?: Maybe<LinkInternalWhereInput>
  contactLink?: Maybe<LinkInternalWhereInput>
  reviewsLink?: Maybe<LinkInternalWhereInput>
}

/** References RowIpadVertical record uniquely */
export type RowIpadVerticalWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

/** References RowYoutubeVideo record uniquely */
export type RowYoutubeVideoWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

export type CompanyCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  name: Scalars['String']
  logo: AssetCreateOneInlineInput
  rowCompanySlider?: Maybe<RowCompanySliderCreateManyInlineInput>
}

/** References ContactForm record uniquely */
export type ContactFormWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

export type PaperCardUpdateInput = {
  title?: Maybe<Scalars['String']>
  headerBanner?: Maybe<AssetUpdateOneInlineInput>
  cardContent?: Maybe<Scalars['RichTextAST']>
  cardLink?: Maybe<LinkInternalUpdateOneInlineInput>
  buttonText?: Maybe<Scalars['String']>
  rowExplanation?: Maybe<RowExplanationUpdateOneInlineInput>
}

export type PartnerOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'url_ASC'
  | 'url_DESC'

export type RowImageSwiperUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowImageSwiperWhereUniqueInput
  /** Document to update */
  data: RowImageSwiperUpdateInput
}

export type RowModulePageUpdateInput = {
  name?: Maybe<Scalars['String']>
  /** description input for default locale (nl) */
  description?: Maybe<Scalars['RichTextAST']>
  link?: Maybe<LinkInternalUpdateOneInlineInput>
  page?: Maybe<PageUpdateManyInlineInput>
  /** Manage document localizations */
  localizations?: Maybe<RowModulePageUpdateLocalizationsInput>
}

/** A connection to a list of items. */
export type RowRecentBlogPostConnection = {
  __typename?: 'RowRecentBlogPostConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowRecentBlogPostEdge>
  aggregate: Aggregate
}

export type HeaderConnectInput = {
  /** Document to connect */
  where: HeaderWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

/** Identifies documents */
export type RowLaptopWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowLaptopWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowLaptopWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowLaptopWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  backgroundImage?: Maybe<AssetWhereInput>
  laptopContent?: Maybe<AssetWhereInput>
}

export type RowModulePageUpdateManyLocalizationInput = {
  data: RowModulePageUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowReviewOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'

export type RowIphoneWithTextUpdateManyInlineInput = {
  /** Create and connect multiple RowIphoneWithText documents */
  create?: Maybe<Array<RowIphoneWithTextCreateInput>>
  /** Connect multiple existing RowIphoneWithText documents */
  connect?: Maybe<Array<RowIphoneWithTextConnectInput>>
  /** Override currently-connected documents with multiple existing RowIphoneWithText documents */
  set?: Maybe<Array<RowIphoneWithTextWhereUniqueInput>>
  /** Update multiple RowIphoneWithText documents */
  update?: Maybe<Array<RowIphoneWithTextUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowIphoneWithText documents */
  upsert?: Maybe<Array<RowIphoneWithTextUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowIphoneWithText documents */
  disconnect?: Maybe<Array<RowIphoneWithTextWhereUniqueInput>>
  /** Delete multiple RowIphoneWithText documents */
  delete?: Maybe<Array<RowIphoneWithTextWhereUniqueInput>>
}

export type RowPhonesSliderConnectInput = {
  /** Document to connect */
  where: RowPhonesSliderWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowColorBlockBlockContentUpdateWithNestedWhereUniqueInput = {
  RowColumnThree?: Maybe<RowColumnThreeUpdateWithNestedWhereUniqueInput>
  RowColumnTwo?: Maybe<RowColumnTwoUpdateWithNestedWhereUniqueInput>
  RowColumnOne?: Maybe<RowColumnOneUpdateWithNestedWhereUniqueInput>
}

export type PageConnectInput = {
  /** Document to connect */
  where: PageWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type FooterUpdateOneInlineInput = {
  /** Create and connect one Footer document */
  create?: Maybe<FooterCreateInput>
  /** Update single Footer document */
  update?: Maybe<FooterUpdateWithNestedWhereUniqueInput>
  /** Upsert single Footer document */
  upsert?: Maybe<FooterUpsertWithNestedWhereUniqueInput>
  /** Connect existing Footer document */
  connect?: Maybe<FooterWhereUniqueInput>
  /** Disconnect currently connected Footer document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected Footer document */
  delete?: Maybe<Scalars['Boolean']>
}

export type RowCenteredTextUpdateManyInput = {
  /** text input for default locale (nl) */
  text?: Maybe<Scalars['RichTextAST']>
  /** Optional updates to localizations */
  localizations?: Maybe<RowCenteredTextUpdateManyLocalizationsInput>
}

export type RowColumnBoxedCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowColumnBoxedCreateLocalizationInput>>
}

export type RowColumnThreeCreateLocalizationInput = {
  /** Localization input */
  data: RowColumnThreeCreateLocalizationDataInput
  locale: Locale
}

export type RowCompanySliderUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowCompanySliderWhereUniqueInput
  /** Upsert data */
  data: RowCompanySliderUpsertInput
}

/** Identifies documents */
export type RowContactManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowContactWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowContactWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowContactWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
}

export type RowModulePageConnectInput = {
  /** Document to connect */
  where: RowModulePageWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowTitleCreateOneInlineInput = {
  /** Create and connect one RowTitle document */
  create?: Maybe<RowTitleCreateInput>
  /** Connect one existing RowTitle document */
  connect?: Maybe<RowTitleWhereUniqueInput>
}

export type RowRecentBlogPostUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowRecentBlogPostWhereUniqueInput
  /** Document to update */
  data: RowRecentBlogPostUpdateInput
}

export type RowIconWithTextListUpdateLocalizationDataInput = {
  text?: Maybe<Scalars['RichTextAST']>
  rowOne?: Maybe<Scalars['RichTextAST']>
  rowTwo?: Maybe<Scalars['RichTextAST']>
  rowThree?: Maybe<Scalars['RichTextAST']>
  rowFour?: Maybe<Scalars['RichTextAST']>
  rowFive?: Maybe<Scalars['RichTextAST']>
  rowSix?: Maybe<Scalars['RichTextAST']>
}

/** A connection to a list of items. */
export type RowModuleConnection = {
  __typename?: 'RowModuleConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowModuleEdge>
  aggregate: Aggregate
}

/** References RowColumnTwo record uniquely */
export type RowColumnTwoWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type LinkExternalUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<LinkExternalCreateLocalizationInput>>
  /** Localizations to update */
  update?: Maybe<Array<LinkExternalUpdateLocalizationInput>>
  upsert?: Maybe<Array<LinkExternalUpsertLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
}

export type ReviewCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<ReviewCreateLocalizationInput>>
}

export type ReviewUpsertLocalizationInput = {
  update: ReviewUpdateLocalizationDataInput
  create: ReviewCreateLocalizationDataInput
  locale: Locale
}

/** An edge in a connection. */
export type RowCenteredTextEdge = {
  __typename?: 'RowCenteredTextEdge'
  /** The item at the end of the edge. */
  node: RowCenteredText
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowLaptopWithTextUpdateOneInlineInput = {
  /** Create and connect one RowLaptopWithText document */
  create?: Maybe<RowLaptopWithTextCreateInput>
  /** Update single RowLaptopWithText document */
  update?: Maybe<RowLaptopWithTextUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowLaptopWithText document */
  upsert?: Maybe<RowLaptopWithTextUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowLaptopWithText document */
  connect?: Maybe<RowLaptopWithTextWhereUniqueInput>
  /** Disconnect currently connected RowLaptopWithText document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowLaptopWithText document */
  delete?: Maybe<Scalars['Boolean']>
}

export type RowLineHorizontalUpdateManyInlineInput = {
  /** Create and connect multiple RowLineHorizontal documents */
  create?: Maybe<Array<RowLineHorizontalCreateInput>>
  /** Connect multiple existing RowLineHorizontal documents */
  connect?: Maybe<Array<RowLineHorizontalConnectInput>>
  /** Override currently-connected documents with multiple existing RowLineHorizontal documents */
  set?: Maybe<Array<RowLineHorizontalWhereUniqueInput>>
  /** Update multiple RowLineHorizontal documents */
  update?: Maybe<Array<RowLineHorizontalUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowLineHorizontal documents */
  upsert?: Maybe<Array<RowLineHorizontalUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowLineHorizontal documents */
  disconnect?: Maybe<Array<RowLineHorizontalWhereUniqueInput>>
  /** Delete multiple RowLineHorizontal documents */
  delete?: Maybe<Array<RowLineHorizontalWhereUniqueInput>>
}

export type RowServiceListCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  identifier: Scalars['String']
  services?: Maybe<ServiceCreateManyInlineInput>
  page?: Maybe<PageCreateManyInlineInput>
}

export type _RelationInputKind = 'create' | 'update'

export type RowVacancyUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowVacancyUpdateManyLocalizationInput>>
}

export type RowTitleUpdateManyInput = {
  identity?: Maybe<Scalars['String']>
  /** rowTitle input for default locale (nl) */
  rowTitle?: Maybe<Scalars['RichTextAST']>
  /** Optional updates to localizations */
  localizations?: Maybe<RowTitleUpdateManyLocalizationsInput>
}

export type AwardUpdateLocalizationDataInput = {
  name?: Maybe<Scalars['String']>
}

/** References RowContact record uniquely */
export type RowContactWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type RowIframeUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowIframeWhereInput
  /** Update many input */
  data: RowIframeUpdateManyInput
}

export type RowQuoteUpdateManyInput = {
  clientName?: Maybe<Scalars['String']>
  clientTitle?: Maybe<Scalars['String']>
  clientQuote?: Maybe<Scalars['String']>
  functionalities?: Maybe<Scalars['RichTextAST']>
}

export type AssetConnectInput = {
  /** Document to connect */
  where: AssetWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowColumnTwoConnectInput = {
  /** Document to connect */
  where: RowColumnTwoWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowLineHorizontalOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'active_ASC'
  | 'active_DESC'

export type RowReviewUpdateManyInput = {
  identity?: Maybe<Scalars['String']>
}

export type FooterCreateManyInlineInput = {
  /** Create and connect multiple existing Footer documents */
  create?: Maybe<Array<FooterCreateInput>>
  /** Connect multiple existing Footer documents */
  connect?: Maybe<Array<FooterWhereUniqueInput>>
}

export type RowIconWithTextListCreateOneInlineInput = {
  /** Create and connect one RowIconWithTextList document */
  create?: Maybe<RowIconWithTextListCreateInput>
  /** Connect one existing RowIconWithTextList document */
  connect?: Maybe<RowIconWithTextListWhereUniqueInput>
}

export type RowServiceListUpdateInput = {
  identifier?: Maybe<Scalars['String']>
  services?: Maybe<ServiceUpdateManyInlineInput>
  page?: Maybe<PageUpdateManyInlineInput>
}

export type RowHeroCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  asset: AssetCreateOneInlineInput
  /** text input for default locale (nl) */
  text: Scalars['RichTextAST']
  links?: Maybe<RowHeroVideoLinksCreateManyInlineInput>
  contactPeople?: Maybe<PersonCreateManyInlineInput>
  page?: Maybe<PageCreateManyInlineInput>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowHeroCreateLocalizationsInput>
}

export type LinkInternalUpdateLocalizationDataInput = {
  title?: Maybe<Scalars['String']>
  description?: Maybe<Scalars['RichTextAST']>
}

/** Identifies documents */
export type ParnerListWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ParnerListWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ParnerListWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ParnerListWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  partners_every?: Maybe<PartnerWhereInput>
  partners_some?: Maybe<PartnerWhereInput>
  partners_none?: Maybe<PartnerWhereInput>
  rowCollaboration_every?: Maybe<RowCollaborationWhereInput>
  rowCollaboration_some?: Maybe<RowCollaborationWhereInput>
  rowCollaboration_none?: Maybe<RowCollaborationWhereInput>
}

export type RowIntroCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  content: Scalars['RichTextAST']
}

export type RowTitleCreateManyInlineInput = {
  /** Create and connect multiple existing RowTitle documents */
  create?: Maybe<Array<RowTitleCreateInput>>
  /** Connect multiple existing RowTitle documents */
  connect?: Maybe<Array<RowTitleWhereUniqueInput>>
}

export type LinkExternalConnectInput = {
  /** Document to connect */
  where: LinkExternalWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

/** References Review record uniquely */
export type ReviewWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

export type ReviewUpdateManyLocalizationDataInput = {
  quote?: Maybe<Scalars['String']>
}

/** Identifies documents */
export type RowCompanySliderManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowCompanySliderWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowCompanySliderWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowCompanySliderWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  companies_every?: Maybe<CompanyWhereInput>
  companies_some?: Maybe<CompanyWhereInput>
  companies_none?: Maybe<CompanyWhereInput>
}

export type RowIconWithTextListOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'

/** Identifies documents */
export type RowIframeManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowIframeWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowIframeWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowIframeWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  iframeUrl?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  iframeUrl_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  iframeUrl_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  iframeUrl_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  iframeUrl_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  iframeUrl_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  iframeUrl_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  iframeUrl_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  iframeUrl_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  iframeUrl_not_ends_with?: Maybe<Scalars['String']>
}

/** Identifies documents */
export type RowModuleManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowModuleWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowModuleWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowModuleWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  name?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  name_not_ends_with?: Maybe<Scalars['String']>
  link?: Maybe<LinkExternalWhereInput>
}

export type RowModulePageUpdateManyLocalizationDataInput = {
  description?: Maybe<Scalars['RichTextAST']>
}

export type FooterUpdateManyLocalizationDataInput = {
  text?: Maybe<Scalars['RichTextAST']>
  contact?: Maybe<Scalars['RichTextAST']>
  address?: Maybe<Scalars['RichTextAST']>
}

export type RowServiceListUpsertInput = {
  /** Create document if it didn't exist */
  create: RowServiceListCreateInput
  /** Update document if it exists */
  update: RowServiceListUpdateInput
}

export type PageUpdateOneInlineInput = {
  /** Create and connect one Page document */
  create?: Maybe<PageCreateInput>
  /** Update single Page document */
  update?: Maybe<PageUpdateWithNestedWhereUniqueInput>
  /** Upsert single Page document */
  upsert?: Maybe<PageUpsertWithNestedWhereUniqueInput>
  /** Connect existing Page document */
  connect?: Maybe<PageWhereUniqueInput>
  /** Disconnect currently connected Page document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected Page document */
  delete?: Maybe<Scalars['Boolean']>
}

/** Identifies documents */
export type RowColumnOneWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowColumnOneWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowColumnOneWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowColumnOneWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  colOneIcon?: Maybe<AssetWhereInput>
}

/** A connection to a list of items. */
export type RowColumnThreeConnection = {
  __typename?: 'RowColumnThreeConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowColumnThreeEdge>
  aggregate: Aggregate
}

export type RowIntroUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowIntroWhereInput
  /** Update many input */
  data: RowIntroUpdateManyInput
}

export type RowPeopleWithTextCreateLocalizationInput = {
  /** Localization input */
  data: RowPeopleWithTextCreateLocalizationDataInput
  locale: Locale
}

export type RowPhonesSliderUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: Maybe<Scalars['String']>
}

export type RowRecentBlogPostUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowRecentBlogPostWhereInput
  /** Update many input */
  data: RowRecentBlogPostUpdateManyInput
}

export type AssetCreateOneInlineInput = {
  /** Create and connect one Asset document */
  create?: Maybe<AssetCreateInput>
  /** Connect one existing Asset document */
  connect?: Maybe<AssetWhereUniqueInput>
}

/** A connection to a list of items. */
export type RowTitleConnection = {
  __typename?: 'RowTitleConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowTitleEdge>
  aggregate: Aggregate
}

export type HeaderUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: HeaderWhereUniqueInput
  /** Document to update */
  data: HeaderUpdateInput
}

export type RowCenteredTextCreateLocalizationInput = {
  /** Localization input */
  data: RowCenteredTextCreateLocalizationDataInput
  locale: Locale
}

/** References RowColorSpeedBlock record uniquely */
export type RowColorSpeedBlockWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identifier?: Maybe<Scalars['String']>
}

export type RowColumnThreeUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowColumnThreeUpdateManyLocalizationInput>>
}

/** A connection to a list of items. */
export type RowIpadVerticalConnection = {
  __typename?: 'RowIpadVerticalConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowIpadVerticalEdge>
  aggregate: Aggregate
}

export type RowPhonesSliderUpdateOneInlineInput = {
  /** Create and connect one RowPhonesSlider document */
  create?: Maybe<RowPhonesSliderCreateInput>
  /** Update single RowPhonesSlider document */
  update?: Maybe<RowPhonesSliderUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowPhonesSlider document */
  upsert?: Maybe<RowPhonesSliderUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowPhonesSlider document */
  connect?: Maybe<RowPhonesSliderWhereUniqueInput>
  /** Disconnect currently connected RowPhonesSlider document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowPhonesSlider document */
  delete?: Maybe<Scalars['Boolean']>
}

export type FooterUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<FooterUpdateManyLocalizationInput>>
}

export type HeaderUpdateOneInlineInput = {
  /** Create and connect one Header document */
  create?: Maybe<HeaderCreateInput>
  /** Update single Header document */
  update?: Maybe<HeaderUpdateWithNestedWhereUniqueInput>
  /** Upsert single Header document */
  upsert?: Maybe<HeaderUpsertWithNestedWhereUniqueInput>
  /** Connect existing Header document */
  connect?: Maybe<HeaderWhereUniqueInput>
  /** Disconnect currently connected Header document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected Header document */
  delete?: Maybe<Scalars['Boolean']>
}

export type ReviewUpdateOneInlineInput = {
  /** Create and connect one Review document */
  create?: Maybe<ReviewCreateInput>
  /** Update single Review document */
  update?: Maybe<ReviewUpdateWithNestedWhereUniqueInput>
  /** Upsert single Review document */
  upsert?: Maybe<ReviewUpsertWithNestedWhereUniqueInput>
  /** Connect existing Review document */
  connect?: Maybe<ReviewWhereUniqueInput>
  /** Disconnect currently connected Review document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected Review document */
  delete?: Maybe<Scalars['Boolean']>
}

export type RowColumnOneUpdateOneInlineInput = {
  /** Create and connect one RowColumnOne document */
  create?: Maybe<RowColumnOneCreateInput>
  /** Update single RowColumnOne document */
  update?: Maybe<RowColumnOneUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowColumnOne document */
  upsert?: Maybe<RowColumnOneUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowColumnOne document */
  connect?: Maybe<RowColumnOneWhereUniqueInput>
  /** Disconnect currently connected RowColumnOne document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowColumnOne document */
  delete?: Maybe<Scalars['Boolean']>
}

export type RowColumnThreeUpdateManyLocalizationInput = {
  data: RowColumnThreeUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowColorBlockBlockContentCreateInput = {
  RowColumnThree?: Maybe<RowColumnThreeCreateInput>
  RowColumnTwo?: Maybe<RowColumnTwoCreateInput>
  RowColumnOne?: Maybe<RowColumnOneCreateInput>
}

export type FooterUpdateLocalizationInput = {
  data: FooterUpdateLocalizationDataInput
  locale: Locale
}

export type HeaderUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: HeaderWhereInput
  /** Update many input */
  data: HeaderUpdateManyInput
}

export type LinkInternalUpsertInput = {
  /** Create document if it didn't exist */
  create: LinkInternalCreateInput
  /** Update document if it exists */
  update: LinkInternalUpdateInput
}

export type RowCenteredTextUpsertInput = {
  /** Create document if it didn't exist */
  create: RowCenteredTextCreateInput
  /** Update document if it exists */
  update: RowCenteredTextUpdateInput
}

export type RowColorBlockUpdateOneInlineInput = {
  /** Create and connect one RowColorBlock document */
  create?: Maybe<RowColorBlockCreateInput>
  /** Update single RowColorBlock document */
  update?: Maybe<RowColorBlockUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowColorBlock document */
  upsert?: Maybe<RowColorBlockUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowColorBlock document */
  connect?: Maybe<RowColorBlockWhereUniqueInput>
  /** Disconnect currently connected RowColorBlock document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowColorBlock document */
  delete?: Maybe<Scalars['Boolean']>
}

export type RowCompanySliderUpdateOneInlineInput = {
  /** Create and connect one RowCompanySlider document */
  create?: Maybe<RowCompanySliderCreateInput>
  /** Update single RowCompanySlider document */
  update?: Maybe<RowCompanySliderUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowCompanySlider document */
  upsert?: Maybe<RowCompanySliderUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowCompanySlider document */
  connect?: Maybe<RowCompanySliderWhereUniqueInput>
  /** Disconnect currently connected RowCompanySlider document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowCompanySlider document */
  delete?: Maybe<Scalars['Boolean']>
}

export type RowIconWithTextListUpsertInput = {
  /** Create document if it didn't exist */
  create: RowIconWithTextListCreateInput
  /** Update document if it exists */
  update: RowIconWithTextListUpdateInput
}

export type RowImageSwiperUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowImageSwiperWhereUniqueInput
  /** Upsert data */
  data: RowImageSwiperUpsertInput
}

export type AssetUpdateLocalizationInput = {
  data: AssetUpdateLocalizationDataInput
  locale: Locale
}

export type RowLinksWithTextCreateOneInlineInput = {
  /** Create and connect one RowLinksWithText document */
  create?: Maybe<RowLinksWithTextCreateInput>
  /** Connect one existing RowLinksWithText document */
  connect?: Maybe<RowLinksWithTextWhereUniqueInput>
}

export type RowModulePageUpsertInput = {
  /** Create document if it didn't exist */
  create: RowModulePageCreateInput
  /** Update document if it exists */
  update: RowModulePageUpdateInput
}

export type RowRecentBlogPostUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowRecentBlogPostCreateLocalizationInput>>
  /** Localizations to update */
  update?: Maybe<Array<RowRecentBlogPostUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowRecentBlogPostUpsertLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
}

/** Identifies documents */
export type RowReviewWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowReviewWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowReviewWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowReviewWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  reviews_every?: Maybe<ReviewWhereInput>
  reviews_some?: Maybe<ReviewWhereInput>
  reviews_none?: Maybe<ReviewWhereInput>
}

export type RowYoutubeVideoUpdateManyLocalizationDataInput = {
  videoId?: Maybe<Scalars['String']>
}

/** An edge in a connection. */
export type RowLaptopEdge = {
  __typename?: 'RowLaptopEdge'
  /** The item at the end of the edge. */
  node: RowLaptop
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowCollaborationUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowCollaborationWhereUniqueInput
  /** Upsert data */
  data: RowCollaborationUpsertInput
}

export type RowHeroUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowHeroUpdateManyLocalizationInput>>
}

export type RowLinksWithTextCreateLocalizationInput = {
  /** Localization input */
  data: RowLinksWithTextCreateLocalizationDataInput
  locale: Locale
}

/** An edge in a connection. */
export type RowServiceListEdge = {
  __typename?: 'RowServiceListEdge'
  /** The item at the end of the edge. */
  node: RowServiceList
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type ServiceUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: ServiceWhereInput
  /** Update many input */
  data: ServiceUpdateManyInput
}

export type ReviewUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: ReviewWhereUniqueInput
  /** Upsert data */
  data: ReviewUpsertInput
}

/** Identifies documents */
export type LinkExternalManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<LinkExternalWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<LinkExternalWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<LinkExternalWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  url?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  url_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  url_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  url_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  url_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  url_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  url_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  url_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  url_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  url_not_ends_with?: Maybe<Scalars['String']>
  rowGoogleMap_every?: Maybe<RowGoogleMapWhereInput>
  rowGoogleMap_some?: Maybe<RowGoogleMapWhereInput>
  rowGoogleMap_none?: Maybe<RowGoogleMapWhereInput>
  module?: Maybe<RowModuleWhereInput>
}

export type RowModuleCreateLocalizationInput = {
  /** Localization input */
  data: RowModuleCreateLocalizationDataInput
  locale: Locale
}

export type RowPhonesSliderUpdateInput = {
  backgroundImage?: Maybe<AssetUpdateOneInlineInput>
  phoneOneContent?: Maybe<AssetUpdateOneInlineInput>
  phoneTwoContent?: Maybe<AssetUpdateOneInlineInput>
  phoneThreeContent?: Maybe<AssetUpdateOneInlineInput>
  page?: Maybe<PageUpdateManyInlineInput>
}

/** A connection to a list of items. */
export type RowServiceListConnection = {
  __typename?: 'RowServiceListConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowServiceListEdge>
  aggregate: Aggregate
}

export type AssetUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: AssetWhereUniqueInput
  /** Document to update */
  data: AssetUpdateInput
}

export type RowIphoneWithTextConnectInput = {
  /** Document to connect */
  where: RowIphoneWithTextWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowModuleCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowModuleCreateLocalizationInput>>
}

export type RowTitle = Node & {
  __typename?: 'RowTitle'
  /** System stage field */
  stage: Stage
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowTitle>
  /** Get the document in other stages */
  documentInStages: Array<RowTitle>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  rowTitle: RichText
  page: Array<Page>
  rowColorBlock?: Maybe<RowColorSpeedBlock>
  rowColorBlockTitle?: Maybe<RowColorBlock>
  /** List of RowTitle versions */
  history: Array<Version>
}

export type RowTitleLocalizationsArgs = {
  locales?: Array<Locale>
  includeCurrent?: Scalars['Boolean']
}

export type RowTitleDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type RowTitleCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowTitleUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowTitlePublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowTitlePageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type RowTitleRowColorBlockArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowTitleRowColorBlockTitleArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowTitleHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

/** Identifies documents */
export type RowCollaborationManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowCollaborationWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowCollaborationWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowCollaborationWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identifier?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identifier_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identifier_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identifier_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identifier_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identifier_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identifier_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identifier_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identifier_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identifier_not_ends_with?: Maybe<Scalars['String']>
  partnerList?: Maybe<ParnerListWhereInput>
}

export type RowHeroVideoLinksUpdateWithNestedWhereUniqueInput = {
  LinkExternal?: Maybe<LinkExternalUpdateWithNestedWhereUniqueInput>
  LinkInternal?: Maybe<LinkInternalUpdateWithNestedWhereUniqueInput>
}

export type HeaderUpsertInput = {
  /** Create document if it didn't exist */
  create: HeaderCreateInput
  /** Update document if it exists */
  update: HeaderUpdateInput
}

export type ReviewCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  customerName: Scalars['String']
  rating: Scalars['Int']
  /** quote input for default locale (nl) */
  quote: Scalars['String']
  rowReview?: Maybe<RowReviewCreateManyInlineInput>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<ReviewCreateLocalizationsInput>
}

/** A connection to a list of items. */
export type RowColorSpeedBlockConnection = {
  __typename?: 'RowColorSpeedBlockConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowColorSpeedBlockEdge>
  aggregate: Aggregate
}

export type RowColumnBoxedUpsertInput = {
  /** Create document if it didn't exist */
  create: RowColumnBoxedCreateInput
  /** Update document if it exists */
  update: RowColumnBoxedUpdateInput
}

export type RowContactOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'

export type RowReviewUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowReviewWhereUniqueInput
  /** Upsert data */
  data: RowReviewUpsertInput
}

/** Locale system enumeration */
export type Locale =
  /** System locale */
  'nl' | 'en'

/** Identifies documents */
export type RowIntroWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowIntroWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowIntroWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowIntroWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
}

export type RowLineHorizontalUpdateInput = {
  page?: Maybe<PageUpdateManyInlineInput>
  active?: Maybe<Scalars['Boolean']>
}

export type RowPeopleWithTextUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowPeopleWithTextWhereUniqueInput
  /** Document to update */
  data: RowPeopleWithTextUpdateInput
}

export type RowYoutubeVideoUpdateManyInput = {
  /** videoId input for default locale (nl) */
  videoId?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
  /** Optional updates to localizations */
  localizations?: Maybe<RowYoutubeVideoUpdateManyLocalizationsInput>
}

export type Service = Node & {
  __typename?: 'Service'
  /** System stage field */
  stage: Stage
  /** Get the document in other stages */
  documentInStages: Array<Service>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  page?: Maybe<Page>
  content: RichText
  rowServiceList: Array<RowServiceList>
  /** List of Service versions */
  history: Array<Version>
}

export type ServiceDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type ServicePageArgs = {
  locales?: Maybe<Array<Locale>>
}

export type ServiceRowServiceListArgs = {
  where?: Maybe<RowServiceListWhereInput>
  orderBy?: Maybe<RowServiceListOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type ServiceHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type PageContentUpdateManyInlineInput = {
  /** Create and connect multiple PageContent documents */
  create?: Maybe<Array<PageContentCreateInput>>
  /** Connect multiple existing PageContent documents */
  connect?: Maybe<Array<PageContentConnectInput>>
  /** Override currently-connected documents with multiple existing PageContent documents */
  set?: Maybe<Array<PageContentWhereUniqueInput>>
  /** Update multiple PageContent documents */
  update?: Maybe<Array<PageContentUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple PageContent documents */
  upsert?: Maybe<Array<PageContentUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple PageContent documents */
  disconnect?: Maybe<Array<PageContentWhereUniqueInput>>
  /** Delete multiple PageContent documents */
  delete?: Maybe<Array<PageContentWhereUniqueInput>>
}

export type RowColumnTwoUpdateManyInput = {
  /** colOne input for default locale (nl) */
  colOne?: Maybe<Scalars['RichTextAST']>
  /** colTwo input for default locale (nl) */
  colTwo?: Maybe<Scalars['RichTextAST']>
  /** Optional updates to localizations */
  localizations?: Maybe<RowColumnTwoUpdateManyLocalizationsInput>
}

export type RowColumnBoxedOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'

export type RowExplanationUpsertInput = {
  /** Create document if it didn't exist */
  create: RowExplanationCreateInput
  /** Update document if it exists */
  update: RowExplanationUpdateInput
}

export type RowIphoneWithTextUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowIphoneWithTextUpdateManyLocalizationInput>>
}

export type RowCollaborationCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowCollaborationCreateLocalizationInput>>
}

/** A connection to a list of items. */
export type AwardConnection = {
  __typename?: 'AwardConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<AwardEdge>
  aggregate: Aggregate
}

export type ParnerListUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: Maybe<Scalars['String']>
}

/** Identifies documents */
export type RowCenteredTextManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowCenteredTextWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowCenteredTextWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowCenteredTextWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  name?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  name_not_ends_with?: Maybe<Scalars['String']>
}

export type RowLaptopUpdateManyInlineInput = {
  /** Create and connect multiple RowLaptop documents */
  create?: Maybe<Array<RowLaptopCreateInput>>
  /** Connect multiple existing RowLaptop documents */
  connect?: Maybe<Array<RowLaptopConnectInput>>
  /** Override currently-connected documents with multiple existing RowLaptop documents */
  set?: Maybe<Array<RowLaptopWhereUniqueInput>>
  /** Update multiple RowLaptop documents */
  update?: Maybe<Array<RowLaptopUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowLaptop documents */
  upsert?: Maybe<Array<RowLaptopUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowLaptop documents */
  disconnect?: Maybe<Array<RowLaptopWhereUniqueInput>>
  /** Delete multiple RowLaptop documents */
  delete?: Maybe<Array<RowLaptopWhereUniqueInput>>
}

export type AwardUpdateManyLocalizationDataInput = {
  name?: Maybe<Scalars['String']>
}

/** A connection to a list of items. */
export type PersonConnection = {
  __typename?: 'PersonConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<PersonEdge>
  aggregate: Aggregate
}

export type RowColumnBoxedUpdateOneInlineInput = {
  /** Create and connect one RowColumnBoxed document */
  create?: Maybe<RowColumnBoxedCreateInput>
  /** Update single RowColumnBoxed document */
  update?: Maybe<RowColumnBoxedUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowColumnBoxed document */
  upsert?: Maybe<RowColumnBoxedUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowColumnBoxed document */
  connect?: Maybe<RowColumnBoxedWhereUniqueInput>
  /** Disconnect currently connected RowColumnBoxed document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowColumnBoxed document */
  delete?: Maybe<Scalars['Boolean']>
}

export type RowCompanySliderCreateManyInlineInput = {
  /** Create and connect multiple existing RowCompanySlider documents */
  create?: Maybe<Array<RowCompanySliderCreateInput>>
  /** Connect multiple existing RowCompanySlider documents */
  connect?: Maybe<Array<RowCompanySliderWhereUniqueInput>>
}

export type RowContactUpdateOneInlineInput = {
  /** Create and connect one RowContact document */
  create?: Maybe<RowContactCreateInput>
  /** Update single RowContact document */
  update?: Maybe<RowContactUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowContact document */
  upsert?: Maybe<RowContactUpsertWithNestedWhereUniqueInput>
  /** Connect existing RowContact document */
  connect?: Maybe<RowContactWhereUniqueInput>
  /** Disconnect currently connected RowContact document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected RowContact document */
  delete?: Maybe<Scalars['Boolean']>
}

export type RowGoogleMapUpdateInput = {
  identity?: Maybe<Scalars['String']>
  /** address input for default locale (nl) */
  address?: Maybe<Scalars['RichTextAST']>
  /** businessInfo input for default locale (nl) */
  businessInfo?: Maybe<Scalars['RichTextAST']>
  socialLinks?: Maybe<LinkExternalUpdateManyInlineInput>
  page?: Maybe<PageUpdateManyInlineInput>
  location?: Maybe<Scalars['String']>
  /** Manage document localizations */
  localizations?: Maybe<RowGoogleMapUpdateLocalizationsInput>
}

export type RowIpadHorizontalUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: Maybe<Scalars['String']>
}

export type RowColorBlockBlockContentWhereUniqueInput = {
  RowColumnThree?: Maybe<RowColumnThreeWhereUniqueInput>
  RowColumnTwo?: Maybe<RowColumnTwoWhereUniqueInput>
  RowColumnOne?: Maybe<RowColumnOneWhereUniqueInput>
}

/** References Award record uniquely */
export type AwardWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

/** Identifies documents */
export type ContactFormWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ContactFormWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ContactFormWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ContactFormWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  name?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  name_not_ends_with?: Maybe<Scalars['String']>
  email?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  email_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  email_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  email_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  email_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  email_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  email_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  email_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  email_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  email_not_ends_with?: Maybe<Scalars['String']>
  phoneNumber?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  phoneNumber_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  phoneNumber_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  phoneNumber_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  phoneNumber_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  phoneNumber_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  phoneNumber_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  phoneNumber_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  phoneNumber_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  phoneNumber_not_ends_with?: Maybe<Scalars['String']>
  subject?: Maybe<ContactSubject>
  /** All values that are not equal to given value. */
  subject_not?: Maybe<ContactSubject>
  /** All values that are contained in given list. */
  subject_in?: Maybe<Array<ContactSubject>>
  /** All values that are not contained in given list. */
  subject_not_in?: Maybe<Array<ContactSubject>>
  message?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  message_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  message_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  message_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  message_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  message_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  message_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  message_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  message_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  message_not_ends_with?: Maybe<Scalars['String']>
}

export type ImageFit =
  /** Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio. */
  | 'clip'
  /** Resizes the image to fit the specified parameters exactly by removing any parts of the image that don't fit within the boundaries. */
  | 'crop'
  /** Resizes the image to fit the specified parameters exactly by scaling the image to the desired size. The aspect ratio of the image is not respected and the image can be distorted using this method. */
  | 'scale'
  /** Resizes the image to fit within the parameters, but as opposed to 'fit:clip' will not scale the image if the image is smaller than the output size. */
  | 'max'

export type RowRecentBlogPostCreateManyInlineInput = {
  /** Create and connect multiple existing RowRecentBlogPost documents */
  create?: Maybe<Array<RowRecentBlogPostCreateInput>>
  /** Connect multiple existing RowRecentBlogPost documents */
  connect?: Maybe<Array<RowRecentBlogPostWhereUniqueInput>>
}

export type ParnerListUpdateManyInlineInput = {
  /** Create and connect multiple ParnerList documents */
  create?: Maybe<Array<ParnerListCreateInput>>
  /** Connect multiple existing ParnerList documents */
  connect?: Maybe<Array<ParnerListConnectInput>>
  /** Override currently-connected documents with multiple existing ParnerList documents */
  set?: Maybe<Array<ParnerListWhereUniqueInput>>
  /** Update multiple ParnerList documents */
  update?: Maybe<Array<ParnerListUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple ParnerList documents */
  upsert?: Maybe<Array<ParnerListUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple ParnerList documents */
  disconnect?: Maybe<Array<ParnerListWhereUniqueInput>>
  /** Delete multiple ParnerList documents */
  delete?: Maybe<Array<ParnerListWhereUniqueInput>>
}

export type RowIpadHorizontalCreateManyInlineInput = {
  /** Create and connect multiple existing RowIpadHorizontal documents */
  create?: Maybe<Array<RowIpadHorizontalCreateInput>>
  /** Connect multiple existing RowIpadHorizontal documents */
  connect?: Maybe<Array<RowIpadHorizontalWhereUniqueInput>>
}

export type ServiceUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: ServiceWhereUniqueInput
  /** Document to update */
  data: ServiceUpdateInput
}

export type RowHeroVideoLinksUpdateInput = {
  LinkExternal?: Maybe<LinkExternalUpdateInput>
  LinkInternal?: Maybe<LinkInternalUpdateInput>
}

export type RowContactUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowContactWhereInput
  /** Update many input */
  data: RowContactUpdateManyInput
}

export type RowColumnOneUpsertLocalizationInput = {
  update: RowColumnOneUpdateLocalizationDataInput
  create: RowColumnOneCreateLocalizationDataInput
  locale: Locale
}

export type RowColumnTwoUpdateLocalizationInput = {
  data: RowColumnTwoUpdateLocalizationDataInput
  locale: Locale
}

/** An edge in a connection. */
export type RowIconWithTextListEdge = {
  __typename?: 'RowIconWithTextListEdge'
  /** The item at the end of the edge. */
  node: RowIconWithTextList
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

/** Identifies documents */
export type RowIphoneWithTextWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowIphoneWithTextWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowIphoneWithTextWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowIphoneWithTextWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  backgroundImageWithPhone?: Maybe<AssetWhereInput>
  iPhoneVideo?: Maybe<AssetWhereInput>
  themeImage?: Maybe<AssetWhereInput>
}

/** A connection to a list of items. */
export type RowLaptopConnection = {
  __typename?: 'RowLaptopConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowLaptopEdge>
  aggregate: Aggregate
}

export type RowTitleUpdateInput = {
  identity?: Maybe<Scalars['String']>
  /** rowTitle input for default locale (nl) */
  rowTitle?: Maybe<Scalars['RichTextAST']>
  page?: Maybe<PageUpdateManyInlineInput>
  rowColorBlock?: Maybe<RowColorSpeedBlockUpdateOneInlineInput>
  rowColorBlockTitle?: Maybe<RowColorBlockUpdateOneInlineInput>
  /** Manage document localizations */
  localizations?: Maybe<RowTitleUpdateLocalizationsInput>
}

/** Identifies documents */
export type LinkExternalWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<LinkExternalWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<LinkExternalWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<LinkExternalWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  title?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  title_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  title_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  title_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  title_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  title_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  title_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  title_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  title_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  title_not_ends_with?: Maybe<Scalars['String']>
  url?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  url_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  url_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  url_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  url_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  url_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  url_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  url_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  url_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  url_not_ends_with?: Maybe<Scalars['String']>
  rowGoogleMap_every?: Maybe<RowGoogleMapWhereInput>
  rowGoogleMap_some?: Maybe<RowGoogleMapWhereInput>
  rowGoogleMap_none?: Maybe<RowGoogleMapWhereInput>
  module?: Maybe<RowModuleWhereInput>
}

export type PageUpdateManyInlineInput = {
  /** Create and connect multiple Page documents */
  create?: Maybe<Array<PageCreateInput>>
  /** Connect multiple existing Page documents */
  connect?: Maybe<Array<PageConnectInput>>
  /** Override currently-connected documents with multiple existing Page documents */
  set?: Maybe<Array<PageWhereUniqueInput>>
  /** Update multiple Page documents */
  update?: Maybe<Array<PageUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple Page documents */
  upsert?: Maybe<Array<PageUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple Page documents */
  disconnect?: Maybe<Array<PageWhereUniqueInput>>
  /** Delete multiple Page documents */
  delete?: Maybe<Array<PageWhereUniqueInput>>
}

export type PartnerUpdateManyInput = {
  name?: Maybe<Scalars['String']>
  url?: Maybe<Scalars['String']>
}

export type RowHeroCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  text: Scalars['RichTextAST']
}

export type RowLaptopWithTextUpsertInput = {
  /** Create document if it didn't exist */
  create: RowLaptopWithTextCreateInput
  /** Update document if it exists */
  update: RowLaptopWithTextUpdateInput
}

export type RowModuleCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  description: Scalars['RichTextAST']
}

/** Identifies documents */
export type RowPhonesSliderManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowPhonesSliderWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowPhonesSliderWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowPhonesSliderWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  backgroundImage?: Maybe<AssetWhereInput>
  phoneOneContent?: Maybe<AssetWhereInput>
  phoneTwoContent?: Maybe<AssetWhereInput>
  phoneThreeContent?: Maybe<AssetWhereInput>
}

export type RowRecentBlogPostCreateLocalizationInput = {
  /** Localization input */
  data: RowRecentBlogPostCreateLocalizationDataInput
  locale: Locale
}

export type RowLaptopWithTextUpdateManyInput = {
  colOne?: Maybe<Scalars['RichTextAST']>
}

export type RowColumnTwoCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowColumnTwoCreateLocalizationInput>>
}

export type AwardUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: AwardWhereUniqueInput
  /** Upsert data */
  data: AwardUpsertInput
}

export type PersonUpsertInput = {
  /** Create document if it didn't exist */
  create: PersonCreateInput
  /** Update document if it exists */
  update: PersonUpdateInput
}

export type RowColorBlockBlockContent = RowColumnThree | RowColumnTwo | RowColumnOne

export type BatchPayload = {
  __typename?: 'BatchPayload'
  /** The number of nodes that have been affected by the Batch operation. */
  count: Scalars['Long']
}

export type RowColumnTwoCreateOneInlineInput = {
  /** Create and connect one RowColumnTwo document */
  create?: Maybe<RowColumnTwoCreateInput>
  /** Connect one existing RowColumnTwo document */
  connect?: Maybe<RowColumnTwoWhereUniqueInput>
}

export type MetaRobots = 'INDEX_FOLLOW' | 'INDEX_NOFOLLOW' | 'NOINDEX_FOLLOW' | 'NOINDEX_NOFOLLOW'

/** A connection to a list of items. */
export type PartnerConnection = {
  __typename?: 'PartnerConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<PartnerEdge>
  aggregate: Aggregate
}

/** Identifies documents */
export type RowColumnTwoManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowColumnTwoWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowColumnTwoWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowColumnTwoWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  identity?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  colOneIcon?: Maybe<AssetWhereInput>
  colTwoIcon?: Maybe<AssetWhereInput>
}

export type RowGoogleMapConnectInput = {
  /** Document to connect */
  where: RowGoogleMapWhereUniqueInput
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: Maybe<ConnectPositionInput>
}

export type RowGoogleMapCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowGoogleMapCreateLocalizationInput>>
}

/** References RowQuote record uniquely */
export type RowQuoteWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type RowTitleUpdateLocalizationInput = {
  data: RowTitleUpdateLocalizationDataInput
  locale: Locale
}

export type FooterAdditionalLinksUpsertWithNestedWhereUniqueInput = {
  LinkInternal?: Maybe<LinkInternalUpsertWithNestedWhereUniqueInput>
  LinkExternal?: Maybe<LinkExternalUpsertWithNestedWhereUniqueInput>
}

export type AwardUpdateLocalizationInput = {
  data: AwardUpdateLocalizationDataInput
  locale: Locale
}

export type PartnerCreateManyInlineInput = {
  /** Create and connect multiple existing Partner documents */
  create?: Maybe<Array<PartnerCreateInput>>
  /** Connect multiple existing Partner documents */
  connect?: Maybe<Array<PartnerWhereUniqueInput>>
}

export type RowCenteredTextUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowCenteredTextWhereUniqueInput
  /** Upsert data */
  data: RowCenteredTextUpsertInput
}

/** A connection to a list of items. */
export type RowGoogleMapConnection = {
  __typename?: 'RowGoogleMapConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowGoogleMapEdge>
  aggregate: Aggregate
}

export type RowLinksWithTextUpdateManyInlineInput = {
  /** Create and connect multiple RowLinksWithText documents */
  create?: Maybe<Array<RowLinksWithTextCreateInput>>
  /** Connect multiple existing RowLinksWithText documents */
  connect?: Maybe<Array<RowLinksWithTextConnectInput>>
  /** Override currently-connected documents with multiple existing RowLinksWithText documents */
  set?: Maybe<Array<RowLinksWithTextWhereUniqueInput>>
  /** Update multiple RowLinksWithText documents */
  update?: Maybe<Array<RowLinksWithTextUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowLinksWithText documents */
  upsert?: Maybe<Array<RowLinksWithTextUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowLinksWithText documents */
  disconnect?: Maybe<Array<RowLinksWithTextWhereUniqueInput>>
  /** Delete multiple RowLinksWithText documents */
  delete?: Maybe<Array<RowLinksWithTextWhereUniqueInput>>
}

export type RowPhonesSliderUpsertInput = {
  /** Create document if it didn't exist */
  create: RowPhonesSliderCreateInput
  /** Update document if it exists */
  update: RowPhonesSliderUpdateInput
}

export type AwardOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'name_ASC'
  | 'name_DESC'

export type AssetUpdateOneInlineInput = {
  /** Create and connect one Asset document */
  create?: Maybe<AssetCreateInput>
  /** Update single Asset document */
  update?: Maybe<AssetUpdateWithNestedWhereUniqueInput>
  /** Upsert single Asset document */
  upsert?: Maybe<AssetUpsertWithNestedWhereUniqueInput>
  /** Connect existing Asset document */
  connect?: Maybe<AssetWhereUniqueInput>
  /** Disconnect currently connected Asset document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Delete currently connected Asset document */
  delete?: Maybe<Scalars['Boolean']>
}

export type LinkInternalCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** title input for default locale (nl) */
  title: Scalars['String']
  page?: Maybe<PageCreateOneInlineInput>
  /** description input for default locale (nl) */
  description?: Maybe<Scalars['RichTextAST']>
  rowPeopleWithText?: Maybe<RowPeopleWithTextCreateManyInlineInput>
  rowHeroVideo?: Maybe<RowHeroCreateManyInlineInput>
  rowRecentBlogPost?: Maybe<RowRecentBlogPostCreateOneInlineInput>
  footerContactLink?: Maybe<FooterCreateManyInlineInput>
  footerAdditionalLinks?: Maybe<FooterCreateManyInlineInput>
  footerLinks?: Maybe<FooterCreateManyInlineInput>
  footerReviewLink?: Maybe<FooterCreateManyInlineInput>
  rowLinksWithText?: Maybe<RowLinksWithTextCreateManyInlineInput>
  paperCard?: Maybe<PaperCardCreateOneInlineInput>
  rowModulePage?: Maybe<RowModulePageCreateOneInlineInput>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<LinkInternalCreateLocalizationsInput>
}

export type RowModuleUpdateManyInlineInput = {
  /** Create and connect multiple RowModule documents */
  create?: Maybe<Array<RowModuleCreateInput>>
  /** Connect multiple existing RowModule documents */
  connect?: Maybe<Array<RowModuleConnectInput>>
  /** Override currently-connected documents with multiple existing RowModule documents */
  set?: Maybe<Array<RowModuleWhereUniqueInput>>
  /** Update multiple RowModule documents */
  update?: Maybe<Array<RowModuleUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowModule documents */
  upsert?: Maybe<Array<RowModuleUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple RowModule documents */
  disconnect?: Maybe<Array<RowModuleWhereUniqueInput>>
  /** Delete multiple RowModule documents */
  delete?: Maybe<Array<RowModuleWhereUniqueInput>>
}

/** Identifies documents */
export type PaperCardWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<PaperCardWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<PaperCardWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<PaperCardWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  title?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  title_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  title_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  title_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  title_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  title_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  title_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  title_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  title_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  title_not_ends_with?: Maybe<Scalars['String']>
  headerBanner?: Maybe<AssetWhereInput>
  cardLink?: Maybe<LinkInternalWhereInput>
  buttonText?: Maybe<Scalars['String']>
  /** All values that are not equal to given value. */
  buttonText_not?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  buttonText_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not contained in given list. */
  buttonText_not_in?: Maybe<Array<Scalars['String']>>
  /** All values containing the given string. */
  buttonText_contains?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  buttonText_not_contains?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  buttonText_starts_with?: Maybe<Scalars['String']>
  /** All values not starting with the given string. */
  buttonText_not_starts_with?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  buttonText_ends_with?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  buttonText_not_ends_with?: Maybe<Scalars['String']>
  rowExplanation?: Maybe<RowExplanationWhereInput>
}

export type RowColumnThreeCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  rowColorBlock?: Maybe<RowColorBlockCreateOneInlineInput>
  identity: Scalars['String']
  /** colOne input for default locale (nl) */
  colOne: Scalars['RichTextAST']
  colOneIcon?: Maybe<AssetCreateOneInlineInput>
  /** colTwo input for default locale (nl) */
  colTwo: Scalars['RichTextAST']
  colTwoIcon?: Maybe<AssetCreateOneInlineInput>
  /** colThree input for default locale (nl) */
  colThree: Scalars['RichTextAST']
  colThreeIcon?: Maybe<AssetCreateOneInlineInput>
  page?: Maybe<PageCreateManyInlineInput>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowColumnThreeCreateLocalizationsInput>
}

export type RowIframeUpdateLocalizationInput = {
  data: RowIframeUpdateLocalizationDataInput
  locale: Locale
}

export type RowLineHorizontalUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowLineHorizontalWhereInput
  /** Update many input */
  data: RowLineHorizontalUpdateManyInput
}

export type RowVacancyUpsertInput = {
  /** Create document if it didn't exist */
  create: RowVacancyCreateInput
  /** Update document if it exists */
  update: RowVacancyUpdateInput
}

export type RowYoutubeVideoCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  videoId: Scalars['String']
}

export type RowHeroVideoLinksCreateInput = {
  LinkExternal?: Maybe<LinkExternalCreateInput>
  LinkInternal?: Maybe<LinkInternalCreateInput>
}

export type CompanyUpsertInput = {
  /** Create document if it didn't exist */
  create: CompanyCreateInput
  /** Update document if it exists */
  update: CompanyUpdateInput
}

export type RowContactUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowContactCreateLocalizationInput>>
  /** Localizations to update */
  update?: Maybe<Array<RowContactUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowContactUpsertLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
}

/** A connection to a list of items. */
export type RowIpadHorizontalConnection = {
  __typename?: 'RowIpadHorizontalConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowIpadHorizontalEdge>
  aggregate: Aggregate
}

/** An edge in a connection. */
export type RowQuoteEdge = {
  __typename?: 'RowQuoteEdge'
  /** The item at the end of the edge. */
  node: RowQuote
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

/** Identifies documents */
export type AssetManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<AssetWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<AssetWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<AssetWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  personAvatar_every?: Maybe<PersonWhereInput>
  personAvatar_some?: Maybe<PersonWhereInput>
  personAvatar_none?: Maybe<PersonWhereInput>
  companyLogo_every?: Maybe<CompanyWhereInput>
  companyLogo_some?: Maybe<CompanyWhereInput>
  companyLogo_none?: Maybe<CompanyWhereInput>
  rowColumnThreeColOneIcon_every?: Maybe<RowColumnThreeWhereInput>
  rowColumnThreeColOneIcon_some?: Maybe<RowColumnThreeWhereInput>
  rowColumnThreeColOneIcon_none?: Maybe<RowColumnThreeWhereInput>
  rowColumnThreeColTwoIcon_every?: Maybe<RowColumnThreeWhereInput>
  rowColumnThreeColTwoIcon_some?: Maybe<RowColumnThreeWhereInput>
  rowColumnThreeColTwoIcon_none?: Maybe<RowColumnThreeWhereInput>
  rowColumnThreeColThreeIcon_every?: Maybe<RowColumnThreeWhereInput>
  rowColumnThreeColThreeIcon_some?: Maybe<RowColumnThreeWhereInput>
  rowColumnThreeColThreeIcon_none?: Maybe<RowColumnThreeWhereInput>
  rowColumnOneColOneIcon_every?: Maybe<RowColumnOneWhereInput>
  rowColumnOneColOneIcon_some?: Maybe<RowColumnOneWhereInput>
  rowColumnOneColOneIcon_none?: Maybe<RowColumnOneWhereInput>
  rowHeroAsset_every?: Maybe<RowHeroWhereInput>
  rowHeroAsset_some?: Maybe<RowHeroWhereInput>
  rowHeroAsset_none?: Maybe<RowHeroWhereInput>
  pageAsset_every?: Maybe<PageWhereInput>
  pageAsset_some?: Maybe<PageWhereInput>
  pageAsset_none?: Maybe<PageWhereInput>
  rowColumnTwoColOneIcon_every?: Maybe<RowColumnTwoWhereInput>
  rowColumnTwoColOneIcon_some?: Maybe<RowColumnTwoWhereInput>
  rowColumnTwoColOneIcon_none?: Maybe<RowColumnTwoWhereInput>
  rowColumnTwoColTwoIcon_every?: Maybe<RowColumnTwoWhereInput>
  rowColumnTwoColTwoIcon_some?: Maybe<RowColumnTwoWhereInput>
  rowColumnTwoColTwoIcon_none?: Maybe<RowColumnTwoWhereInput>
  awardAsset_every?: Maybe<AwardWhereInput>
  awardAsset_some?: Maybe<AwardWhereInput>
  awardAsset_none?: Maybe<AwardWhereInput>
  rowOneIconRowIconWithTextList_every?: Maybe<RowIconWithTextListWhereInput>
  rowOneIconRowIconWithTextList_some?: Maybe<RowIconWithTextListWhereInput>
  rowOneIconRowIconWithTextList_none?: Maybe<RowIconWithTextListWhereInput>
  rowTwoIconRowIconWithTextList_every?: Maybe<RowIconWithTextListWhereInput>
  rowTwoIconRowIconWithTextList_some?: Maybe<RowIconWithTextListWhereInput>
  rowTwoIconRowIconWithTextList_none?: Maybe<RowIconWithTextListWhereInput>
  rowThreeIconRowIconWithTextList_every?: Maybe<RowIconWithTextListWhereInput>
  rowThreeIconRowIconWithTextList_some?: Maybe<RowIconWithTextListWhereInput>
  rowThreeIconRowIconWithTextList_none?: Maybe<RowIconWithTextListWhereInput>
  rowFourIconRowIconWithTextList_every?: Maybe<RowIconWithTextListWhereInput>
  rowFourIconRowIconWithTextList_some?: Maybe<RowIconWithTextListWhereInput>
  rowFourIconRowIconWithTextList_none?: Maybe<RowIconWithTextListWhereInput>
  rowFiveIconRowIconWithTextList_every?: Maybe<RowIconWithTextListWhereInput>
  rowFiveIconRowIconWithTextList_some?: Maybe<RowIconWithTextListWhereInput>
  rowFiveIconRowIconWithTextList_none?: Maybe<RowIconWithTextListWhereInput>
  rowSixIconRowIconWithTextList_every?: Maybe<RowIconWithTextListWhereInput>
  rowSixIconRowIconWithTextList_some?: Maybe<RowIconWithTextListWhereInput>
  rowSixIconRowIconWithTextList_none?: Maybe<RowIconWithTextListWhereInput>
  rowIpadHorizontalBackgroundImage_every?: Maybe<RowIpadHorizontalWhereInput>
  rowIpadHorizontalBackgroundImage_some?: Maybe<RowIpadHorizontalWhereInput>
  rowIpadHorizontalBackgroundImage_none?: Maybe<RowIpadHorizontalWhereInput>
  rowIpadHorizontalIPadContent_every?: Maybe<RowIpadHorizontalWhereInput>
  rowIpadHorizontalIPadContent_some?: Maybe<RowIpadHorizontalWhereInput>
  rowIpadHorizontalIPadContent_none?: Maybe<RowIpadHorizontalWhereInput>
  rowIphoneWithTextBackgroundImage_every?: Maybe<RowIphoneWithTextWhereInput>
  rowIphoneWithTextBackgroundImage_some?: Maybe<RowIphoneWithTextWhereInput>
  rowIphoneWithTextBackgroundImage_none?: Maybe<RowIphoneWithTextWhereInput>
  rowIphoneWithTextIPhoneVideo_every?: Maybe<RowIphoneWithTextWhereInput>
  rowIphoneWithTextIPhoneVideo_some?: Maybe<RowIphoneWithTextWhereInput>
  rowIphoneWithTextIPhoneVideo_none?: Maybe<RowIphoneWithTextWhereInput>
  rowIphoneWithTextThemeImage_every?: Maybe<RowIphoneWithTextWhereInput>
  rowIphoneWithTextThemeImage_some?: Maybe<RowIphoneWithTextWhereInput>
  rowIphoneWithTextThemeImage_none?: Maybe<RowIphoneWithTextWhereInput>
  rowIpadVerticalBackgroundimage_every?: Maybe<RowIpadVerticalWhereInput>
  rowIpadVerticalBackgroundimage_some?: Maybe<RowIpadVerticalWhereInput>
  rowIpadVerticalBackgroundimage_none?: Maybe<RowIpadVerticalWhereInput>
  rowIpadVerticalIpadcontent_every?: Maybe<RowIpadVerticalWhereInput>
  rowIpadVerticalIpadcontent_some?: Maybe<RowIpadVerticalWhereInput>
  rowIpadVerticalIpadcontent_none?: Maybe<RowIpadVerticalWhereInput>
  rowLaptopBackgroundimage_every?: Maybe<RowLaptopWhereInput>
  rowLaptopBackgroundimage_some?: Maybe<RowLaptopWhereInput>
  rowLaptopBackgroundimage_none?: Maybe<RowLaptopWhereInput>
  rowLaptopLaptopcontent_every?: Maybe<RowLaptopWhereInput>
  rowLaptopLaptopcontent_some?: Maybe<RowLaptopWhereInput>
  rowLaptopLaptopcontent_none?: Maybe<RowLaptopWhereInput>
  rowVacancyPdf_every?: Maybe<RowVacancyWhereInput>
  rowVacancyPdf_some?: Maybe<RowVacancyWhereInput>
  rowVacancyPdf_none?: Maybe<RowVacancyWhereInput>
  rowImageOrVideoAsset_every?: Maybe<RowImageOrVideoWhereInput>
  rowImageOrVideoAsset_some?: Maybe<RowImageOrVideoWhereInput>
  rowImageOrVideoAsset_none?: Maybe<RowImageOrVideoWhereInput>
  rowLaptopWithTextBackgroundImage_every?: Maybe<RowLaptopWithTextWhereInput>
  rowLaptopWithTextBackgroundImage_some?: Maybe<RowLaptopWithTextWhereInput>
  rowLaptopWithTextBackgroundImage_none?: Maybe<RowLaptopWithTextWhereInput>
  rowLaptopWithTextLaptopContent_every?: Maybe<RowLaptopWithTextWhereInput>
  rowLaptopWithTextLaptopContent_some?: Maybe<RowLaptopWithTextWhereInput>
  rowLaptopWithTextLaptopContent_none?: Maybe<RowLaptopWithTextWhereInput>
  rowPhonesSliderPhoneOneContent_every?: Maybe<RowPhonesSliderWhereInput>
  rowPhonesSliderPhoneOneContent_some?: Maybe<RowPhonesSliderWhereInput>
  rowPhonesSliderPhoneOneContent_none?: Maybe<RowPhonesSliderWhereInput>
  rowPhonesSliderPhoneTwoContent_every?: Maybe<RowPhonesSliderWhereInput>
  rowPhonesSliderPhoneTwoContent_some?: Maybe<RowPhonesSliderWhereInput>
  rowPhonesSliderPhoneTwoContent_none?: Maybe<RowPhonesSliderWhereInput>
  rowPhonesSliderPhoneThreeContent_every?: Maybe<RowPhonesSliderWhereInput>
  rowPhonesSliderPhoneThreeContent_some?: Maybe<RowPhonesSliderWhereInput>
  rowPhonesSliderPhoneThreeContent_none?: Maybe<RowPhonesSliderWhereInput>
  rowPhonesSliderBackgroundImage_every?: Maybe<RowPhonesSliderWhereInput>
  rowPhonesSliderBackgroundImage_some?: Maybe<RowPhonesSliderWhereInput>
  rowPhonesSliderBackgroundImage_none?: Maybe<RowPhonesSliderWhereInput>
  pageLogo_every?: Maybe<PageWhereInput>
  pageLogo_some?: Maybe<PageWhereInput>
  pageLogo_none?: Maybe<PageWhereInput>
  partnerLogo_every?: Maybe<PartnerWhereInput>
  partnerLogo_some?: Maybe<PartnerWhereInput>
  partnerLogo_none?: Maybe<PartnerWhereInput>
  paperCardHeaderBanner_every?: Maybe<PaperCardWhereInput>
  paperCardHeaderBanner_some?: Maybe<PaperCardWhereInput>
  paperCardHeaderBanner_none?: Maybe<PaperCardWhereInput>
  rowImageSwiperAsset_every?: Maybe<RowImageSwiperWhereInput>
  rowImageSwiperAsset_some?: Maybe<RowImageSwiperWhereInput>
  rowImageSwiperAsset_none?: Maybe<RowImageSwiperWhereInput>
}

export type LinkInternalOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'title_ASC'
  | 'title_DESC'

export type PageCreateLocalizationInput = {
  /** Localization input */
  data: PageCreateLocalizationDataInput
  locale: Locale
}

export type ReviewUpdateLocalizationDataInput = {
  quote?: Maybe<Scalars['String']>
}

export type RowCenteredTextUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowCenteredTextWhereUniqueInput
  /** Document to update */
  data: RowCenteredTextUpdateInput
}

export type RowExplanationUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowExplanationWhereUniqueInput
  /** Upsert data */
  data: RowExplanationUpsertInput
}

export type RowGoogleMapUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowGoogleMapWhereInput
  /** Update many input */
  data: RowGoogleMapUpdateManyInput
}

export type RowIphoneWithTextUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowIphoneWithTextWhereUniqueInput
  /** Upsert data */
  data: RowIphoneWithTextUpsertInput
}

/** Input type representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba() */
export type RgbaInput = {
  r: Scalars['RGBAHue']
  g: Scalars['RGBAHue']
  b: Scalars['RGBAHue']
  a: Scalars['RGBATransparency']
}

export type RowVacancyCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  perks: Array<Scalars['String']>
}

export type ReviewCreateManyInlineInput = {
  /** Create and connect multiple existing Review documents */
  create?: Maybe<Array<ReviewCreateInput>>
  /** Connect multiple existing Review documents */
  connect?: Maybe<Array<ReviewWhereUniqueInput>>
}

export type RowCenteredTextCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  text: Scalars['RichTextAST']
}

export type RowContactUpsertInput = {
  /** Create document if it didn't exist */
  create: RowContactCreateInput
  /** Update document if it exists */
  update: RowContactUpdateInput
}

export type RowContactUpdateManyLocalizationDataInput = {
  text?: Maybe<Scalars['RichTextAST']>
}

export type RowIphoneWithTextUpsertInput = {
  /** Create document if it didn't exist */
  create: RowIphoneWithTextCreateInput
  /** Update document if it exists */
  update: RowIphoneWithTextUpdateInput
}

export type RowYoutubeVideoCreateLocalizationInput = {
  /** Localization input */
  data: RowYoutubeVideoCreateLocalizationDataInput
  locale: Locale
}

export type PartnerUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: PartnerWhereUniqueInput
  /** Document to update */
  data: PartnerUpdateInput
}

/** A connection to a list of items. */
export type RowColumnBoxedConnection = {
  __typename?: 'RowColumnBoxedConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<RowColumnBoxedEdge>
  aggregate: Aggregate
}

/** An edge in a connection. */
export type RowHeroEdge = {
  __typename?: 'RowHeroEdge'
  /** The item at the end of the edge. */
  node: RowHero
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

/** Identifies documents */
export type RowLineHorizontalManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowLineHorizontalWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowLineHorizontalWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowLineHorizontalWhereInput>>
  id?: Maybe<Scalars['ID']>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  active?: Maybe<Scalars['Boolean']>
  /** All values that are not equal to given value. */
  active_not?: Maybe<Scalars['Boolean']>
}

/** A full-width Youtube video */
export type RowYoutubeVideo = Node & {
  __typename?: 'RowYoutubeVideo'
  /** System stage field */
  stage: Stage
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowYoutubeVideo>
  /** Get the document in other stages */
  documentInStages: Array<RowYoutubeVideo>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  /** The unique identifier */
  videoId: Scalars['String']
  title: Scalars['String']
  page: Array<Page>
  /** List of RowYoutubeVideo versions */
  history: Array<Version>
}

/** A full-width Youtube video */
export type RowYoutubeVideoLocalizationsArgs = {
  locales?: Array<Locale>
  includeCurrent?: Scalars['Boolean']
}

/** A full-width Youtube video */
export type RowYoutubeVideoDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

/** A full-width Youtube video */
export type RowYoutubeVideoCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

/** A full-width Youtube video */
export type RowYoutubeVideoUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

/** A full-width Youtube video */
export type RowYoutubeVideoPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

/** A full-width Youtube video */
export type RowYoutubeVideoPageArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

/** A full-width Youtube video */
export type RowYoutubeVideoHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowColorSpeedBlockCreateManyInlineInput = {
  /** Create and connect multiple existing RowColorSpeedBlock documents */
  create?: Maybe<Array<RowColorSpeedBlockCreateInput>>
  /** Connect multiple existing RowColorSpeedBlock documents */
  connect?: Maybe<Array<RowColorSpeedBlockWhereUniqueInput>>
}

/** A connection to a list of items. */
export type CompanyConnection = {
  __typename?: 'CompanyConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<CompanyEdge>
  aggregate: Aggregate
}

/** A connection to a list of items. */
export type FooterConnection = {
  __typename?: 'FooterConnection'
  /** Information to aid in pagination. */
  pageInfo: PageInfo
  /** A list of edges. */
  edges: Array<FooterEdge>
  aggregate: Aggregate
}

export type LinkExternalUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: LinkExternalWhereUniqueInput
  /** Document to update */
  data: LinkExternalUpdateInput
}

export type RowColumnOneUpdateManyLocalizationDataInput = {
  colOne?: Maybe<Scalars['RichTextAST']>
}

export type RowColumnThreeCreateOneInlineInput = {
  /** Create and connect one RowColumnThree document */
  create?: Maybe<RowColumnThreeCreateInput>
  /** Connect one existing RowColumnThree document */
  connect?: Maybe<RowColumnThreeWhereUniqueInput>
}

export type RowIconWithTextListCreateManyInlineInput = {
  /** Create and connect multiple existing RowIconWithTextList documents */
  create?: Maybe<Array<RowIconWithTextListCreateInput>>
  /** Connect multiple existing RowIconWithTextList documents */
  connect?: Maybe<Array<RowIconWithTextListWhereUniqueInput>>
}

export type _MutationInputFieldKind =
  | 'scalar'
  | 'richText'
  | 'enum'
  | 'relation'
  | 'union'
  | 'virtual'

export type FooterUpdateManyInlineInput = {
  /** Create and connect multiple Footer documents */
  create?: Maybe<Array<FooterCreateInput>>
  /** Connect multiple existing Footer documents */
  connect?: Maybe<Array<FooterConnectInput>>
  /** Override currently-connected documents with multiple existing Footer documents */
  set?: Maybe<Array<FooterWhereUniqueInput>>
  /** Update multiple Footer documents */
  update?: Maybe<Array<FooterUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple Footer documents */
  upsert?: Maybe<Array<FooterUpsertWithNestedWhereUniqueInput>>
  /** Disconnect multiple Footer documents */
  disconnect?: Maybe<Array<FooterWhereUniqueInput>>
  /** Delete multiple Footer documents */
  delete?: Maybe<Array<FooterWhereUniqueInput>>
}

export type LinkInternalUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<LinkInternalCreateLocalizationInput>>
  /** Localizations to update */
  update?: Maybe<Array<LinkInternalUpdateLocalizationInput>>
  upsert?: Maybe<Array<LinkInternalUpsertLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
}

/** An edge in a connection. */
export type ReviewEdge = {
  __typename?: 'ReviewEdge'
  /** The item at the end of the edge. */
  node: Review
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
}

export type RowImageSwiperOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'name_ASC'
  | 'name_DESC'

/** References RowIpadHorizontal record uniquely */
export type RowIpadHorizontalWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

export type RowTitleCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  rowTitle: Scalars['RichTextAST']
}

export type CompanyUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: Maybe<Scalars['String']>
}

export type LinkExternalUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<LinkExternalUpdateManyLocalizationInput>>
}

export type Page = Node & {
  __typename?: 'Page'
  /** System stage field */
  stage: Stage
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<Page>
  /** Get the document in other stages */
  documentInStages: Array<Page>
  /** The unique identifier */
  id: Scalars['ID']
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  url: Scalars['String']
  /** Used in menu's, breadcrumbs, etc. */
  title: Scalars['String']
  metaTitle: Scalars['String']
  metaDescription: Scalars['String']
  metaRobots: MetaRobots
  content: Array<PageContent>
  author?: Maybe<Person>
  /** Displayed on cases overview page */
  logo?: Maybe<Asset>
  releaseDate?: Maybe<Scalars['DateTime']>
  asset?: Maybe<Asset>
  internalLink: Array<LinkInternal>
  headerContact: Array<Header>
  headerHome: Array<Header>
  headerMenu: Array<Header>
  rowServicesWithText: Array<RowLinksWithText>
  service?: Maybe<Service>
  /** List of Page versions */
  history: Array<Version>
}

export type PageLocalizationsArgs = {
  locales?: Array<Locale>
  includeCurrent?: Scalars['Boolean']
}

export type PageDocumentInStagesArgs = {
  stages?: Array<Stage>
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
}

export type PageCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type PageUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type PagePublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type PageContentArgs = {
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type PageAuthorArgs = {
  locales?: Maybe<Array<Locale>>
}

export type PageLogoArgs = {
  locales?: Maybe<Array<Locale>>
}

export type PageAssetArgs = {
  locales?: Maybe<Array<Locale>>
}

export type PageInternalLinkArgs = {
  where?: Maybe<LinkInternalWhereInput>
  orderBy?: Maybe<LinkInternalOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type PageHeaderContactArgs = {
  where?: Maybe<HeaderWhereInput>
  orderBy?: Maybe<HeaderOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type PageHeaderHomeArgs = {
  where?: Maybe<HeaderWhereInput>
  orderBy?: Maybe<HeaderOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type PageHeaderMenuArgs = {
  where?: Maybe<HeaderWhereInput>
  orderBy?: Maybe<HeaderOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type PageRowServicesWithTextArgs = {
  where?: Maybe<RowLinksWithTextWhereInput>
  orderBy?: Maybe<RowLinksWithTextOrderByInput>
  skip?: Maybe<Scalars['Int']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
}

export type PageServiceArgs = {
  locales?: Maybe<Array<Locale>>
}

export type PageHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowModuleUpdateManyInput = {
  name?: Maybe<Scalars['String']>
  /** description input for default locale (nl) */
  description?: Maybe<Scalars['RichTextAST']>
  /** Optional updates to localizations */
  localizations?: Maybe<RowModuleUpdateManyLocalizationsInput>
}

export type RowQuoteUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowQuoteWhereUniqueInput
  /** Upsert data */
  data: RowQuoteUpsertInput
}

export type ContactFormCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  name: Scalars['String']
  email: Scalars['String']
  phoneNumber?: Maybe<Scalars['String']>
  subject: ContactSubject
  message: Scalars['String']
}

export type RowColumnThreeUpdateManyInput = {
  /** colOne input for default locale (nl) */
  colOne?: Maybe<Scalars['RichTextAST']>
  /** colTwo input for default locale (nl) */
  colTwo?: Maybe<Scalars['RichTextAST']>
  /** colThree input for default locale (nl) */
  colThree?: Maybe<Scalars['RichTextAST']>
  /** Optional updates to localizations */
  localizations?: Maybe<RowColumnThreeUpdateManyLocalizationsInput>
}

export type RowColumnTwoCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  rowColorBlock?: Maybe<RowColorBlockCreateOneInlineInput>
  identity: Scalars['String']
  colOneIcon?: Maybe<AssetCreateOneInlineInput>
  /** colOne input for default locale (nl) */
  colOne: Scalars['RichTextAST']
  /** colTwo input for default locale (nl) */
  colTwo: Scalars['RichTextAST']
  colTwoIcon?: Maybe<AssetCreateOneInlineInput>
  page?: Maybe<PageCreateManyInlineInput>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowColumnTwoCreateLocalizationsInput>
}

export type RowTitleUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowTitleUpdateManyLocalizationInput>>
}

export type Cart = {
  __typename?: 'Cart'
  /**
   * An array of coupons that have been applied to the cart
   * @deprecated Use applied_coupons instead
   */
  applied_coupon?: Maybe<AppliedCoupon>
  /** An array of `AppliedCoupon` objects. Each object contains the `code` text attribute, which specifies the coupon code */
  applied_coupons?: Maybe<Array<Maybe<AppliedCoupon>>>
  /** Available payment methods */
  available_payment_methods?: Maybe<Array<Maybe<AvailablePaymentMethod>>>
  billing_address?: Maybe<BillingCartAddress>
  email?: Maybe<Scalars['String']>
  /** The ID of the cart. */
  id: Scalars['ID']
  is_virtual: Scalars['Boolean']
  items?: Maybe<Array<Maybe<CartItemInterface>>>
  prices?: Maybe<CartPrices>
  selected_payment_method?: Maybe<SelectedPaymentMethod>
  shipping_addresses: Array<Maybe<ShippingCartAddress>>
  total_quantity: Scalars['Float']
}

export type AppliedCoupon = {
  __typename?: 'AppliedCoupon'
  code: Scalars['String']
}

export type AvailablePaymentMethod = {
  __typename?: 'AvailablePaymentMethod'
  /** The payment method code */
  code: Scalars['String']
  /** The payment method title. */
  title: Scalars['String']
}

export type BillingCartAddress = CartAddressInterface & {
  __typename?: 'BillingCartAddress'
  city: Scalars['String']
  company?: Maybe<Scalars['String']>
  country: CartAddressCountry
  /** @deprecated The field is used only in shipping address */
  customer_notes?: Maybe<Scalars['String']>
  firstname: Scalars['String']
  lastname: Scalars['String']
  postcode?: Maybe<Scalars['String']>
  region?: Maybe<CartAddressRegion>
  street: Array<Maybe<Scalars['String']>>
  telephone: Scalars['String']
}

export type CartAddressInterface = {
  city: Scalars['String']
  company?: Maybe<Scalars['String']>
  country: CartAddressCountry
  firstname: Scalars['String']
  lastname: Scalars['String']
  postcode?: Maybe<Scalars['String']>
  region?: Maybe<CartAddressRegion>
  street: Array<Maybe<Scalars['String']>>
  telephone: Scalars['String']
}

export type CartAddressCountry = {
  __typename?: 'CartAddressCountry'
  code: Scalars['String']
  label: Scalars['String']
}

export type CartAddressRegion = {
  __typename?: 'CartAddressRegion'
  code?: Maybe<Scalars['String']>
  label?: Maybe<Scalars['String']>
  region_id?: Maybe<Scalars['Int']>
}

export type CartItemInterface = {
  id: Scalars['String']
  prices?: Maybe<CartItemPrices>
  product: ProductInterface
  quantity: Scalars['Float']
}

export type CartItemPrices = {
  __typename?: 'CartItemPrices'
  /** An array of discounts to be applied to the cart item */
  discounts?: Maybe<Array<Maybe<Discount>>>
  price: Money
  row_total: Money
  row_total_including_tax: Money
  /** The total of all discounts applied to the item */
  total_item_discount?: Maybe<Money>
}

/** Defines an individual discount. A discount can be applied to the cart as a whole or to an item. */
export type Discount = {
  __typename?: 'Discount'
  /** The amount of the discount */
  amount: Money
  /** A description of the discount */
  label: Scalars['String']
}

/** A Money object defines a monetary value, including a numeric value and a currency code. */
export type Money = {
  __typename?: 'Money'
  /** A three-letter currency code, such as USD or EUR */
  currency?: Maybe<CurrencyEnum>
  /** A number expressing a monetary value */
  value?: Maybe<Scalars['Float']>
}

/** The list of available currency codes */
export type CurrencyEnum =
  | 'AFN'
  | 'ALL'
  | 'AZN'
  | 'DZD'
  | 'AOA'
  | 'ARS'
  | 'AMD'
  | 'AWG'
  | 'AUD'
  | 'BSD'
  | 'BHD'
  | 'BDT'
  | 'BBD'
  | 'BYN'
  | 'BZD'
  | 'BMD'
  | 'BTN'
  | 'BOB'
  | 'BAM'
  | 'BWP'
  | 'BRL'
  | 'GBP'
  | 'BND'
  | 'BGN'
  | 'BUK'
  | 'BIF'
  | 'KHR'
  | 'CAD'
  | 'CVE'
  | 'CZK'
  | 'KYD'
  | 'GQE'
  | 'CLP'
  | 'CNY'
  | 'COP'
  | 'KMF'
  | 'CDF'
  | 'CRC'
  | 'HRK'
  | 'CUP'
  | 'DKK'
  | 'DJF'
  | 'DOP'
  | 'XCD'
  | 'EGP'
  | 'SVC'
  | 'ERN'
  | 'EEK'
  | 'ETB'
  | 'EUR'
  | 'FKP'
  | 'FJD'
  | 'GMD'
  | 'GEK'
  | 'GEL'
  | 'GHS'
  | 'GIP'
  | 'GTQ'
  | 'GNF'
  | 'GYD'
  | 'HTG'
  | 'HNL'
  | 'HKD'
  | 'HUF'
  | 'ISK'
  | 'INR'
  | 'IDR'
  | 'IRR'
  | 'IQD'
  | 'ILS'
  | 'JMD'
  | 'JPY'
  | 'JOD'
  | 'KZT'
  | 'KES'
  | 'KWD'
  | 'KGS'
  | 'LAK'
  | 'LVL'
  | 'LBP'
  | 'LSL'
  | 'LRD'
  | 'LYD'
  | 'LTL'
  | 'MOP'
  | 'MKD'
  | 'MGA'
  | 'MWK'
  | 'MYR'
  | 'MVR'
  | 'LSM'
  | 'MRO'
  | 'MUR'
  | 'MXN'
  | 'MDL'
  | 'MNT'
  | 'MAD'
  | 'MZN'
  | 'MMK'
  | 'NAD'
  | 'NPR'
  | 'ANG'
  | 'YTL'
  | 'NZD'
  | 'NIC'
  | 'NGN'
  | 'KPW'
  | 'NOK'
  | 'OMR'
  | 'PKR'
  | 'PAB'
  | 'PGK'
  | 'PYG'
  | 'PEN'
  | 'PHP'
  | 'PLN'
  | 'QAR'
  | 'RHD'
  | 'RON'
  | 'RUB'
  | 'RWF'
  | 'SHP'
  | 'STD'
  | 'SAR'
  | 'RSD'
  | 'SCR'
  | 'SLL'
  | 'SGD'
  | 'SKK'
  | 'SBD'
  | 'SOS'
  | 'ZAR'
  | 'KRW'
  | 'LKR'
  | 'SDG'
  | 'SRD'
  | 'SZL'
  | 'SEK'
  | 'CHF'
  | 'SYP'
  | 'TWD'
  | 'TJS'
  | 'TZS'
  | 'THB'
  | 'TOP'
  | 'TTD'
  | 'TND'
  | 'TMM'
  | 'USD'
  | 'UGX'
  | 'UAH'
  | 'AED'
  | 'UYU'
  | 'UZS'
  | 'VUV'
  | 'VEB'
  | 'VEF'
  | 'VND'
  | 'CHE'
  | 'CHW'
  | 'XOF'
  | 'WST'
  | 'YER'
  | 'ZMK'
  | 'ZWD'
  | 'TRY'
  | 'AZM'
  | 'ROL'
  | 'TRL'
  | 'XPF'

/** The ProductInterface contains attributes that are common to all types of products. Note that descriptions may not be available for custom and EAV attributes. */
export type ProductInterface = {
  activity?: Maybe<Scalars['String']>
  /** The attribute set assigned to the product. */
  attribute_set_id?: Maybe<Scalars['Int']>
  /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled */
  canonical_url?: Maybe<Scalars['String']>
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>
  category_gear?: Maybe<Scalars['String']>
  climate?: Maybe<Scalars['String']>
  collar?: Maybe<Scalars['String']>
  color?: Maybe<Scalars['String']>
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']>
  /** Timestamp indicating when the product was created. */
  created_at?: Maybe<Scalars['String']>
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>
  eco_collection?: Maybe<Scalars['Int']>
  erin_recommends?: Maybe<Scalars['Int']>
  features_bags?: Maybe<Scalars['String']>
  format?: Maybe<Scalars['Int']>
  gender?: Maybe<Scalars['String']>
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']>
  /** The ID number assigned to the product. */
  id?: Maybe<Scalars['Int']>
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>
  /** A number representing the product's manufacturer. */
  manufacturer?: Maybe<Scalars['Int']>
  material?: Maybe<Scalars['String']>
  /** An array of Media Gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use product's `media_gallery` instead
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']>
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']>
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']>
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']>
  new?: Maybe<Scalars['Int']>
  /** The beginning date for new product listings, and determines if the product is featured as a new product. */
  new_from_date?: Maybe<Scalars['String']>
  /** The end date for new product listings. */
  new_to_date?: Maybe<Scalars['String']>
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']>
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']>
  pattern?: Maybe<Scalars['String']>
  performance_fabric?: Maybe<Scalars['Int']>
  /**
   * A ProductPrices object, indicating the price of an item.
   * @deprecated Use price_range for product price information.
   */
  price?: Maybe<ProductPrices>
  /** A PriceRange object, indicating the range of prices for the product */
  price_range: PriceRange
  /** An array of TierPrice objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>
  /** An array of ProductLinks objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>
  /** Related Products */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>
  sale?: Maybe<Scalars['Int']>
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>
  size?: Maybe<Scalars['Int']>
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']>
  sleeve?: Maybe<Scalars['String']>
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>
  /** The beginning date that a product has a special price. */
  special_from_date?: Maybe<Scalars['String']>
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']>
  /** The end date that a product has a special price. */
  special_to_date?: Maybe<Scalars['String']>
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>
  strap_bags?: Maybe<Scalars['String']>
  style_bags?: Maybe<Scalars['String']>
  style_bottom?: Maybe<Scalars['String']>
  style_general?: Maybe<Scalars['String']>
  /** The file name of a swatch image */
  swatch_image?: Maybe<Scalars['String']>
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']>
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use __typename instead.
   */
  type_id?: Maybe<Scalars['String']>
  /** Timestamp indicating when the product was updated. */
  updated_at?: Maybe<Scalars['String']>
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']>
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']>
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>
}

/** CategoryInterface contains the full set of attributes that can be returned in a category search. */
export type CategoryInterface = {
  available_sort_by?: Maybe<Array<Maybe<Scalars['String']>>>
  /** Breadcrumbs, parent categories info. */
  breadcrumbs?: Maybe<Array<Maybe<Breadcrumb>>>
  /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Categories' is enabled */
  canonical_url?: Maybe<Scalars['String']>
  children_count?: Maybe<Scalars['String']>
  /** Category CMS Block. */
  cms_block?: Maybe<CmsBlock>
  /** Timestamp indicating when the category was created. */
  created_at?: Maybe<Scalars['String']>
  custom_layout_update_file?: Maybe<Scalars['String']>
  /** The attribute to use for sorting. */
  default_sort_by?: Maybe<Scalars['String']>
  /** An optional description of the category. */
  description?: Maybe<Scalars['String']>
  display_mode?: Maybe<Scalars['String']>
  filter_price_range?: Maybe<Scalars['Float']>
  /** An ID that uniquely identifies the category. */
  id?: Maybe<Scalars['Int']>
  image?: Maybe<Scalars['String']>
  include_in_menu?: Maybe<Scalars['Int']>
  is_anchor?: Maybe<Scalars['Int']>
  landing_page?: Maybe<Scalars['Int']>
  /** Indicates the depth of the category within the tree. */
  level?: Maybe<Scalars['Int']>
  meta_description?: Maybe<Scalars['String']>
  meta_keywords?: Maybe<Scalars['String']>
  meta_title?: Maybe<Scalars['String']>
  /** The display name of the category. */
  name?: Maybe<Scalars['String']>
  /** Category Path. */
  path?: Maybe<Scalars['String']>
  /** Category path in store. */
  path_in_store?: Maybe<Scalars['String']>
  /** The position of the category relative to other categories at the same level in tree. */
  position?: Maybe<Scalars['Int']>
  /** The number of products in the category that are marked as visible. By default, in complex products, parent products are visible, but their child products are not. */
  product_count?: Maybe<Scalars['Int']>
  /** The list of products assigned to the category. */
  products?: Maybe<CategoryProducts>
  /** Timestamp indicating when the category was updated. */
  updated_at?: Maybe<Scalars['String']>
  /** The url key assigned to the category. */
  url_key?: Maybe<Scalars['String']>
  /** The url path assigned to the category. */
  url_path?: Maybe<Scalars['String']>
  /** The part of the category URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>
}

/** CategoryInterface contains the full set of attributes that can be returned in a category search. */
export type CategoryInterfaceProductsArgs = {
  pageSize?: Maybe<Scalars['Int']>
  currentPage?: Maybe<Scalars['Int']>
  sort?: Maybe<ProductAttributeSortInput>
}

/** Breadcrumb item. */
export type Breadcrumb = {
  __typename?: 'Breadcrumb'
  /** Category ID. */
  category_id?: Maybe<Scalars['Int']>
  /** Category level. */
  category_level?: Maybe<Scalars['Int']>
  /** Category name. */
  category_name?: Maybe<Scalars['String']>
  /** Category URL key. */
  category_url_key?: Maybe<Scalars['String']>
  /** Category URL path. */
  category_url_path?: Maybe<Scalars['String']>
}

/** CMS block defines all CMS block information */
export type CmsBlock = {
  __typename?: 'CmsBlock'
  /** CMS block content */
  content?: Maybe<Scalars['String']>
  /** CMS block identifier */
  identifier?: Maybe<Scalars['String']>
  /** CMS block title */
  title?: Maybe<Scalars['String']>
}

/** ProductAttributeSortInput specifies the attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending order. It's possible to sort products using searchable attributes with enabled 'Use in Filter Options' option */
export type ProductAttributeSortInput = {
  /** Attribute label: Product Name */
  name?: Maybe<SortEnum>
  /** Sort by the position assigned to each product. */
  position?: Maybe<SortEnum>
  /** Attribute label: Price */
  price?: Maybe<SortEnum>
  /** Sort by the search relevance score (default). */
  relevance?: Maybe<SortEnum>
}

/** This enumeration indicates whether to return results in ascending or descending order */
export type SortEnum = 'ASC' | 'DESC'

/** The category products object returned in the Category query. */
export type CategoryProducts = {
  __typename?: 'CategoryProducts'
  /** An array of products that are assigned to the category. */
  items?: Maybe<Array<Maybe<ProductInterface>>>
  /** An object that includes the page_info and currentPage values specified in the query. */
  page_info?: Maybe<SearchResultPageInfo>
  /** The number of products in the category that are marked as visible. By default, in complex products, parent products are visible, but their child products are not. */
  total_count?: Maybe<Scalars['Int']>
}

/** SearchResultPageInfo provides navigation for the query response */
export type SearchResultPageInfo = {
  __typename?: 'SearchResultPageInfo'
  /** Specifies which page of results to return */
  current_page?: Maybe<Scalars['Int']>
  /** Specifies the maximum number of items to return */
  page_size?: Maybe<Scalars['Int']>
  /** Total pages */
  total_pages?: Maybe<Scalars['Int']>
}

export type ComplexTextValue = {
  __typename?: 'ComplexTextValue'
  /** HTML format */
  html: Scalars['String']
}

/** Product image information. Contains the image URL and label. */
export type ProductImage = MediaGalleryInterface & {
  __typename?: 'ProductImage'
  /** Whether the image is hidden from view. */
  disabled?: Maybe<Scalars['Boolean']>
  /** The label of the product image or video. */
  label?: Maybe<Scalars['String']>
  /** The media item's position after it has been sorted. */
  position?: Maybe<Scalars['Int']>
  /** The URL of the product image or video. */
  url?: Maybe<Scalars['String']>
}

/** Contains basic information about a product image or video. */
export type MediaGalleryInterface = {
  /** Whether the image is hidden from view. */
  disabled?: Maybe<Scalars['Boolean']>
  /** The label of the product image or video. */
  label?: Maybe<Scalars['String']>
  /** The media item's position after it has been sorted. */
  position?: Maybe<Scalars['Int']>
  /** The URL of the product image or video. */
  url?: Maybe<Scalars['String']>
}

/** MediaGalleryEntry defines characteristics about images and videos associated with a specific product. */
export type MediaGalleryEntry = {
  __typename?: 'MediaGalleryEntry'
  /** Contains a ProductMediaGalleryEntriesContent object. */
  content?: Maybe<ProductMediaGalleryEntriesContent>
  /** Whether the image is hidden from view. */
  disabled?: Maybe<Scalars['Boolean']>
  /** The path of the image on the server. */
  file?: Maybe<Scalars['String']>
  /** The identifier assigned to the object. */
  id?: Maybe<Scalars['Int']>
  /** The alt text displayed on the UI when the user points to the image. */
  label?: Maybe<Scalars['String']>
  /** image or video. */
  media_type?: Maybe<Scalars['String']>
  /** The media item's position after it has been sorted. */
  position?: Maybe<Scalars['Int']>
  /** Array of image types. It can have the following values: image, small_image, thumbnail. */
  types?: Maybe<Array<Maybe<Scalars['String']>>>
  /** Contains a ProductMediaGalleryEntriesVideoContent object. */
  video_content?: Maybe<ProductMediaGalleryEntriesVideoContent>
}

/** ProductMediaGalleryEntriesContent contains an image in base64 format and basic information about the image. */
export type ProductMediaGalleryEntriesContent = {
  __typename?: 'ProductMediaGalleryEntriesContent'
  /** The image in base64 format. */
  base64_encoded_data?: Maybe<Scalars['String']>
  /** The file name of the image. */
  name?: Maybe<Scalars['String']>
  /** The MIME type of the file, such as image/png. */
  type?: Maybe<Scalars['String']>
}

/** ProductMediaGalleryEntriesVideoContent contains a link to a video file and basic information about the video. */
export type ProductMediaGalleryEntriesVideoContent = {
  __typename?: 'ProductMediaGalleryEntriesVideoContent'
  /** Must be external-video. */
  media_type?: Maybe<Scalars['String']>
  /** A description of the video. */
  video_description?: Maybe<Scalars['String']>
  /** Optional data about the video. */
  video_metadata?: Maybe<Scalars['String']>
  /** Describes the video source. */
  video_provider?: Maybe<Scalars['String']>
  /** The title of the video. */
  video_title?: Maybe<Scalars['String']>
  /** The URL to the video. */
  video_url?: Maybe<Scalars['String']>
}

/** ProductPrices is deprecated, replaced by PriceRange. The ProductPrices object contains the regular price of an item, as well as its minimum and maximum prices. Only composite products, which include bundle, configurable, and grouped products, can contain a minimum and maximum price. */
export type ProductPrices = {
  __typename?: 'ProductPrices'
  /**
   * The highest possible final price for all the options defined within a composite product. If you are specifying a price range, this would be the to value.
   * @deprecated Use PriceRange.maximum_price.
   */
  maximalPrice?: Maybe<Price>
  /**
   * The lowest possible final price for all the options defined within a composite product. If you are specifying a price range, this would be the from value.
   * @deprecated Use PriceRange.minimum_price.
   */
  minimalPrice?: Maybe<Price>
  /**
   * The base price of a product.
   * @deprecated Use regular_price from PriceRange.minimum_price or PriceRange.maximum_price.
   */
  regularPrice?: Maybe<Price>
}

/** Price is deprecated, replaced by ProductPrice. The Price object defines the price of a product as well as any tax-related adjustments. */
export type Price = {
  __typename?: 'Price'
  /**
   * An array that provides information about tax, weee, or weee_tax adjustments.
   * @deprecated Price is deprecated, use ProductPrice.
   */
  adjustments?: Maybe<Array<Maybe<PriceAdjustment>>>
  /**
   * The price of a product plus a three-letter currency code.
   * @deprecated Price is deprecated, use ProductPrice.
   */
  amount?: Maybe<Money>
}

/** PriceAdjustment is deprecated. Taxes will be included or excluded in the price. The PricedAdjustment object defines the amount of money to apply as an adjustment, the type of adjustment to apply, and whether the item is included or excluded from the adjustment. */
export type PriceAdjustment = {
  __typename?: 'PriceAdjustment'
  /** The amount of the price adjustment and its currency code. */
  amount?: Maybe<Money>
  /**
   * Indicates whether the adjustment involves tax, weee, or weee_tax.
   * @deprecated PriceAdjustment is deprecated.
   */
  code?: Maybe<PriceAdjustmentCodesEnum>
  /**
   * Indicates whether the entity described by the code attribute is included or excluded from the adjustment.
   * @deprecated PriceAdjustment is deprecated.
   */
  description?: Maybe<PriceAdjustmentDescriptionEnum>
}

/** PriceAdjustment.code is deprecated. This enumeration contains values defined in modules other than the Catalog module. */
export type PriceAdjustmentCodesEnum = 'TAX' | 'WEEE' | 'WEEE_TAX'

/** PriceAdjustmentDescriptionEnum is deprecated. This enumeration states whether a price adjustment is included or excluded. */
export type PriceAdjustmentDescriptionEnum = 'INCLUDED' | 'EXCLUDED'

/** Price range for a product. If the product has a single price, the minimum and maximum price will be the same. */
export type PriceRange = {
  __typename?: 'PriceRange'
  /** The highest possible price for the product. */
  maximum_price?: Maybe<ProductPrice>
  /** The lowest possible price for the product. */
  minimum_price: ProductPrice
}

/** Represents a product price. */
export type ProductPrice = {
  __typename?: 'ProductPrice'
  /** The price discount. Represents the difference between the regular and final price. */
  discount?: Maybe<ProductDiscount>
  /** The final price of the product after discounts applied. */
  final_price: Money
  /** The multiple FPTs that can be applied to a product price. */
  fixed_product_taxes?: Maybe<Array<Maybe<FixedProductTax>>>
  /** The regular price of the product. */
  regular_price: Money
}

/** A discount applied to a product price. */
export type ProductDiscount = {
  __typename?: 'ProductDiscount'
  /** The actual value of the discount. */
  amount_off?: Maybe<Scalars['Float']>
  /** The discount expressed a percentage. */
  percent_off?: Maybe<Scalars['Float']>
}

/** A single FPT that can be applied to a product price. */
export type FixedProductTax = {
  __typename?: 'FixedProductTax'
  /** Amount of the FPT as a money object. */
  amount?: Maybe<Money>
  /** The label assigned to the FPT to be displayed on the frontend. */
  label?: Maybe<Scalars['String']>
}

/** A price based on the quantity purchased. */
export type TierPrice = {
  __typename?: 'TierPrice'
  /** The price discount that this tier represents. */
  discount?: Maybe<ProductDiscount>
  final_price?: Maybe<Money>
  /** The minimum number of items that must be purchased to qualify for this price tier. */
  quantity?: Maybe<Scalars['Float']>
}

/** ProductLinks contains information about linked products, including the link type and product type of each item. */
export type ProductLinksInterface = {
  /** One of related, associated, upsell, or crosssell. */
  link_type?: Maybe<Scalars['String']>
  /** The SKU of the linked product. */
  linked_product_sku?: Maybe<Scalars['String']>
  /** The type of linked product (simple, virtual, bundle, downloadable, grouped, configurable). */
  linked_product_type?: Maybe<Scalars['String']>
  /** The position within the list of product links. */
  position?: Maybe<Scalars['Int']>
  /** The identifier of the linked product. */
  sku?: Maybe<Scalars['String']>
}

/** This enumeration states whether a product stock status is in stock or out of stock */
export type ProductStockStatus = 'IN_STOCK' | 'OUT_OF_STOCK'

/** ProductTierPrices is deprecated and has been replaced by TierPrice. The ProductTierPrices object defines a tier price, which is a quantity discount offered to a specific customer group. */
export type ProductTierPrices = {
  __typename?: 'ProductTierPrices'
  /**
   * The ID of the customer group.
   * @deprecated customer_group_id is not relevant for storefront.
   */
  customer_group_id?: Maybe<Scalars['String']>
  /**
   * The percentage discount of the item.
   * @deprecated ProductTierPrices is deprecated. Use TierPrice.discount.
   */
  percentage_value?: Maybe<Scalars['Float']>
  /**
   * The number of items that must be purchased to qualify for tier pricing.
   * @deprecated ProductTierPrices is deprecated, use TierPrice.quantity.
   */
  qty?: Maybe<Scalars['Float']>
  /**
   * The price of the fixed price item.
   * @deprecated ProductTierPrices is deprecated. Use TierPrice.final_price
   */
  value?: Maybe<Scalars['Float']>
  /**
   * The ID assigned to the website.
   * @deprecated website_id is not relevant for storefront.
   */
  website_id?: Maybe<Scalars['Float']>
}

/** The object contains URL rewrite details */
export type UrlRewrite = {
  __typename?: 'UrlRewrite'
  /** Request parameters */
  parameters?: Maybe<Array<Maybe<HttpQueryParameter>>>
  /** Request URL */
  url?: Maybe<Scalars['String']>
}

/** The object details of target path parameters */
export type HttpQueryParameter = {
  __typename?: 'HttpQueryParameter'
  /** Parameter name */
  name?: Maybe<Scalars['String']>
  /** Parameter value */
  value?: Maybe<Scalars['String']>
}

/** Website is deprecated because it is should not be used on storefront. The type contains information about a website */
export type Website = {
  __typename?: 'Website'
  /**
   * A code assigned to the website to identify it
   * @deprecated The field should not be used on the storefront.
   */
  code?: Maybe<Scalars['String']>
  /**
   * The default group ID that the website has
   * @deprecated The field should not be used on the storefront.
   */
  default_group_id?: Maybe<Scalars['String']>
  /**
   * The ID number assigned to the website
   * @deprecated The field should not be used on the storefront.
   */
  id?: Maybe<Scalars['Int']>
  /**
   * Specifies if this is the default website
   * @deprecated The field should not be used on the storefront.
   */
  is_default?: Maybe<Scalars['Boolean']>
  /**
   * The website name. Websites use this name to identify it easier.
   * @deprecated The field should not be used on the storefront.
   */
  name?: Maybe<Scalars['String']>
  /**
   * The attribute to use for sorting websites
   * @deprecated The field should not be used on the storefront.
   */
  sort_order?: Maybe<Scalars['Int']>
}

export type CartPrices = {
  __typename?: 'CartPrices'
  applied_taxes?: Maybe<Array<Maybe<CartTaxItem>>>
  /** @deprecated Use discounts instead  */
  discount?: Maybe<CartDiscount>
  /** An array of applied discounts */
  discounts?: Maybe<Array<Maybe<Discount>>>
  grand_total?: Maybe<Money>
  subtotal_excluding_tax?: Maybe<Money>
  subtotal_including_tax?: Maybe<Money>
  subtotal_with_discount_excluding_tax?: Maybe<Money>
}

export type CartTaxItem = {
  __typename?: 'CartTaxItem'
  amount: Money
  label: Scalars['String']
}

export type CartDiscount = {
  __typename?: 'CartDiscount'
  amount: Money
  label: Array<Maybe<Scalars['String']>>
}

export type SelectedPaymentMethod = {
  __typename?: 'SelectedPaymentMethod'
  /** The payment method code */
  code: Scalars['String']
  /** The purchase order number. */
  purchase_order_number?: Maybe<Scalars['String']>
  /** The payment method title. */
  title: Scalars['String']
}

export type ShippingCartAddress = CartAddressInterface & {
  __typename?: 'ShippingCartAddress'
  available_shipping_methods?: Maybe<Array<Maybe<AvailableShippingMethod>>>
  /** @deprecated `cart_items_v2` should be used instead */
  cart_items?: Maybe<Array<Maybe<CartItemQuantity>>>
  cart_items_v2?: Maybe<Array<Maybe<CartItemInterface>>>
  city: Scalars['String']
  company?: Maybe<Scalars['String']>
  country: CartAddressCountry
  customer_notes?: Maybe<Scalars['String']>
  firstname: Scalars['String']
  /** @deprecated This information shoud not be exposed on frontend */
  items_weight?: Maybe<Scalars['Float']>
  lastname: Scalars['String']
  pickup_location_code?: Maybe<Scalars['String']>
  postcode?: Maybe<Scalars['String']>
  region?: Maybe<CartAddressRegion>
  selected_shipping_method?: Maybe<SelectedShippingMethod>
  street: Array<Maybe<Scalars['String']>>
  telephone: Scalars['String']
}

export type AvailableShippingMethod = {
  __typename?: 'AvailableShippingMethod'
  amount: Money
  available: Scalars['Boolean']
  /** @deprecated The field should not be used on the storefront */
  base_amount?: Maybe<Money>
  carrier_code: Scalars['String']
  carrier_title: Scalars['String']
  error_message?: Maybe<Scalars['String']>
  /** Could be null if method is not available */
  method_code?: Maybe<Scalars['String']>
  /** Could be null if method is not available */
  method_title?: Maybe<Scalars['String']>
  price_excl_tax: Money
  price_incl_tax: Money
}

/** Deprecated: `cart_items` field of `ShippingCartAddress` returns now  `CartItemInterface` instead of `CartItemQuantity` */
export type CartItemQuantity = {
  __typename?: 'CartItemQuantity'
  /** @deprecated `cart_items` field of `ShippingCartAddress` returns now `CartItemInterface` instead of `CartItemQuantity` */
  cart_item_id: Scalars['Int']
  /** @deprecated `cart_items` field of `ShippingCartAddress` returns now `CartItemInterface` instead of `CartItemQuantity` */
  quantity: Scalars['Float']
}

export type SelectedShippingMethod = {
  __typename?: 'SelectedShippingMethod'
  amount: Money
  /** @deprecated The field should not be used on the storefront */
  base_amount?: Maybe<Money>
  carrier_code: Scalars['String']
  carrier_title: Scalars['String']
  method_code: Scalars['String']
  method_title: Scalars['String']
}

/** CategoryFilterInput defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for. */
export type CategoryFilterInput = {
  /** Filter by category ID that uniquely identifies the category. */
  ids?: Maybe<FilterEqualTypeInput>
  /** Filter by the display name of the category. */
  name?: Maybe<FilterMatchTypeInput>
  /** Filter by the part of the URL that identifies the category. */
  url_key?: Maybe<FilterEqualTypeInput>
  /** Filter by the URL path for the category. */
  url_path?: Maybe<FilterEqualTypeInput>
}

/** Defines a filter that matches the input exactly. */
export type FilterEqualTypeInput = {
  /** A string to filter on */
  eq?: Maybe<Scalars['String']>
  /** An array of values to filter on */
  in?: Maybe<Array<Maybe<Scalars['String']>>>
}

/** Defines a filter that performs a fuzzy search. */
export type FilterMatchTypeInput = {
  /** One or more words to filter on */
  match?: Maybe<Scalars['String']>
}

/** A collection of CategoryTree objects and pagination information. */
export type CategoryResult = {
  __typename?: 'CategoryResult'
  /** A list of categories that match the filter criteria. */
  items?: Maybe<Array<Maybe<CategoryTree>>>
  /** An object that includes the page_info and currentPage values specified in the query. */
  page_info?: Maybe<SearchResultPageInfo>
  /** The total number of categories that match the criteria. */
  total_count?: Maybe<Scalars['Int']>
}

/** Category Tree implementation. */
export type CategoryTree = CategoryInterface & {
  __typename?: 'CategoryTree'
  available_sort_by?: Maybe<Array<Maybe<Scalars['String']>>>
  /** Breadcrumbs, parent categories info. */
  breadcrumbs?: Maybe<Array<Maybe<Breadcrumb>>>
  /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Categories' is enabled */
  canonical_url?: Maybe<Scalars['String']>
  /** Child categories tree. */
  children?: Maybe<Array<Maybe<CategoryTree>>>
  children_count?: Maybe<Scalars['String']>
  /** Category CMS Block. */
  cms_block?: Maybe<CmsBlock>
  /** Timestamp indicating when the category was created. */
  created_at?: Maybe<Scalars['String']>
  custom_layout_update_file?: Maybe<Scalars['String']>
  /** The attribute to use for sorting. */
  default_sort_by?: Maybe<Scalars['String']>
  /** An optional description of the category. */
  description?: Maybe<Scalars['String']>
  display_mode?: Maybe<Scalars['String']>
  filter_price_range?: Maybe<Scalars['Float']>
  /** An ID that uniquely identifies the category. */
  id?: Maybe<Scalars['Int']>
  image?: Maybe<Scalars['String']>
  include_in_menu?: Maybe<Scalars['Int']>
  is_anchor?: Maybe<Scalars['Int']>
  landing_page?: Maybe<Scalars['Int']>
  /** Indicates the depth of the category within the tree. */
  level?: Maybe<Scalars['Int']>
  meta_description?: Maybe<Scalars['String']>
  meta_keywords?: Maybe<Scalars['String']>
  meta_title?: Maybe<Scalars['String']>
  /** The display name of the category. */
  name?: Maybe<Scalars['String']>
  /** Category Path. */
  path?: Maybe<Scalars['String']>
  /** Category path in store. */
  path_in_store?: Maybe<Scalars['String']>
  /** The position of the category relative to other categories at the same level in tree. */
  position?: Maybe<Scalars['Int']>
  /** The number of products in the category that are marked as visible. By default, in complex products, parent products are visible, but their child products are not. */
  product_count?: Maybe<Scalars['Int']>
  /** The list of products assigned to the category. */
  products?: Maybe<CategoryProducts>
  /** Timestamp indicating when the category was updated. */
  updated_at?: Maybe<Scalars['String']>
  /** The url key assigned to the category. */
  url_key?: Maybe<Scalars['String']>
  /** The url path assigned to the category. */
  url_path?: Maybe<Scalars['String']>
  /** The part of the category URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>
}

/** Category Tree implementation. */
export type CategoryTreeProductsArgs = {
  pageSize?: Maybe<Scalars['Int']>
  currentPage?: Maybe<Scalars['Int']>
  sort?: Maybe<ProductAttributeSortInput>
}

/** Defines all Checkout Agreement information */
export type CheckoutAgreement = {
  __typename?: 'CheckoutAgreement'
  /** Checkout Agreement identifier */
  agreement_id: Scalars['Int']
  /** Checkout Agreement checkbox text */
  checkbox_text: Scalars['String']
  /** Checkout Agreement content */
  content: Scalars['String']
  /** Checkout Agreement content height */
  content_height?: Maybe<Scalars['String']>
  /** Is Checkout Agreement content in HTML format */
  is_html: Scalars['Boolean']
  mode: CheckoutAgreementMode
  /** Checkout Agreement name */
  name: Scalars['String']
}

export type CheckoutAgreementMode = 'AUTO' | 'MANUAL'

/** CMS blocks information */
export type CmsBlocks = {
  __typename?: 'CmsBlocks'
  /** An array of CMS blocks */
  items?: Maybe<Array<Maybe<CmsBlock>>>
}

/** CMS page defines all CMS page information */
export type CmsPage = {
  __typename?: 'CmsPage'
  /** CMS page content */
  content?: Maybe<Scalars['String']>
  /** CMS page content heading */
  content_heading?: Maybe<Scalars['String']>
  /** Identifier of the CMS page */
  identifier?: Maybe<Scalars['String']>
  /** CMS page meta description */
  meta_description?: Maybe<Scalars['String']>
  /** CMS page meta keywords */
  meta_keywords?: Maybe<Scalars['String']>
  /** CMS page meta title */
  meta_title?: Maybe<Scalars['String']>
  /** CMS page content heading */
  page_layout?: Maybe<Scalars['String']>
  /** CMS page title */
  title?: Maybe<Scalars['String']>
  /** URL key of CMS page */
  url_key?: Maybe<Scalars['String']>
}

export type Country = {
  __typename?: 'Country'
  available_regions?: Maybe<Array<Maybe<Region>>>
  full_name_english?: Maybe<Scalars['String']>
  full_name_locale?: Maybe<Scalars['String']>
  id?: Maybe<Scalars['String']>
  three_letter_abbreviation?: Maybe<Scalars['String']>
  two_letter_abbreviation?: Maybe<Scalars['String']>
}

export type Region = {
  __typename?: 'Region'
  code?: Maybe<Scalars['String']>
  id?: Maybe<Scalars['Int']>
  name?: Maybe<Scalars['String']>
}

export type Currency = {
  __typename?: 'Currency'
  available_currency_codes?: Maybe<Array<Maybe<Scalars['String']>>>
  base_currency_code?: Maybe<Scalars['String']>
  base_currency_symbol?: Maybe<Scalars['String']>
  /** @deprecated Symbol was missed. Use `default_display_currency_code`. */
  default_display_currecy_code?: Maybe<Scalars['String']>
  /** @deprecated Symbol was missed. Use `default_display_currency_symbol`. */
  default_display_currecy_symbol?: Maybe<Scalars['String']>
  default_display_currency_code?: Maybe<Scalars['String']>
  default_display_currency_symbol?: Maybe<Scalars['String']>
  exchange_rates?: Maybe<Array<Maybe<ExchangeRate>>>
}

export type ExchangeRate = {
  __typename?: 'ExchangeRate'
  currency_to?: Maybe<Scalars['String']>
  rate?: Maybe<Scalars['Float']>
}

/** AttributeInput specifies the attribute_code and entity_type to search */
export type AttributeInput = {
  /** The unique identifier for an attribute code. This value should be in lowercase letters without spaces. */
  attribute_code?: Maybe<Scalars['String']>
  /** The type of entity that defines the attribute */
  entity_type?: Maybe<Scalars['String']>
}

/** CustomAttributeMetadata defines an array of attribute_codes and entity_types */
export type CustomAttributeMetadata = {
  __typename?: 'CustomAttributeMetadata'
  /** An array of attributes */
  items?: Maybe<Array<Maybe<Attribute>>>
}

/** Attribute contains the attribute_type of the specified attribute_code and entity_type */
export type Attribute = {
  __typename?: 'Attribute'
  /** The unique identifier for an attribute code. This value should be in lowercase letters without spaces. */
  attribute_code?: Maybe<Scalars['String']>
  /** Attribute options list. */
  attribute_options?: Maybe<Array<Maybe<AttributeOption>>>
  /** The data type of the attribute */
  attribute_type?: Maybe<Scalars['String']>
  /** The type of entity that defines the attribute */
  entity_type?: Maybe<Scalars['String']>
  /** The frontend input type of the attribute */
  input_type?: Maybe<Scalars['String']>
}

/** Attribute option. */
export type AttributeOption = {
  __typename?: 'AttributeOption'
  /** Attribute option label. */
  label?: Maybe<Scalars['String']>
  /** Attribute option value. */
  value?: Maybe<Scalars['String']>
}

/** Customer defines the customer name and address and other details */
export type Customer = {
  __typename?: 'Customer'
  /** An array containing the customer's shipping and billing addresses */
  addresses?: Maybe<Array<Maybe<CustomerAddress>>>
  /** Timestamp indicating when the account was created */
  created_at?: Maybe<Scalars['String']>
  /** The customer's date of birth */
  date_of_birth?: Maybe<Scalars['String']>
  /** The ID assigned to the billing address */
  default_billing?: Maybe<Scalars['String']>
  /** The ID assigned to the shipping address */
  default_shipping?: Maybe<Scalars['String']>
  /**
   * The customer's date of birth
   * @deprecated Use `date_of_birth` instead
   */
  dob?: Maybe<Scalars['String']>
  /** The customer's email address. Required */
  email?: Maybe<Scalars['String']>
  /** The customer's first name */
  firstname?: Maybe<Scalars['String']>
  /** The customer's gender (Male - 1, Female - 2) */
  gender?: Maybe<Scalars['Int']>
  /** @deprecated Customer group should not be exposed in the storefront scenarios */
  group_id?: Maybe<Scalars['Int']>
  /**
   * The ID assigned to the customer
   * @deprecated id is not needed as part of Customer because on server side it can be identified based on customer token used for authentication. There is no need to know customer ID on the client side.
   */
  id?: Maybe<Scalars['Int']>
  /** Indicates whether the customer is subscribed to the company's newsletter */
  is_subscribed?: Maybe<Scalars['Boolean']>
  /** The customer's family name */
  lastname?: Maybe<Scalars['String']>
  /** The customer's middle name */
  middlename?: Maybe<Scalars['String']>
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: Maybe<Scalars['String']>
  /** A value such as Sr., Jr., or III */
  suffix?: Maybe<Scalars['String']>
  /** The customer's Value-added tax (VAT) number (for corporate customers) */
  taxvat?: Maybe<Scalars['String']>
  /** The wishlist query returns the contents of a customer's wish lists */
  wishlist: Wishlist
}

/** CustomerAddress contains detailed information about a customer's billing and shipping addresses */
export type CustomerAddress = {
  __typename?: 'CustomerAddress'
  /** The city or town */
  city?: Maybe<Scalars['String']>
  /** The customer's company */
  company?: Maybe<Scalars['String']>
  /** The customer's country */
  country_code?: Maybe<CountryCodeEnum>
  /**
   * The customer's country
   * @deprecated Use `country_code` instead.
   */
  country_id?: Maybe<Scalars['String']>
  /** @deprecated Custom attributes should not be put into container */
  custom_attributes?: Maybe<Array<Maybe<CustomerAddressAttribute>>>
  /**
   * The customer ID
   * @deprecated customer_id is not needed as part of CustomerAddress, address ID (id) is unique identifier for the addresses.
   */
  customer_id?: Maybe<Scalars['Int']>
  /** Indicates whether the address is the default billing address */
  default_billing?: Maybe<Scalars['Boolean']>
  /** Indicates whether the address is the default shipping address */
  default_shipping?: Maybe<Scalars['Boolean']>
  /** Address extension attributes */
  extension_attributes?: Maybe<Array<Maybe<CustomerAddressAttribute>>>
  /** The fax number */
  fax?: Maybe<Scalars['String']>
  /** The first name of the person associated with the shipping/billing address */
  firstname?: Maybe<Scalars['String']>
  /** The ID assigned to the address object */
  id?: Maybe<Scalars['Int']>
  /** The family name of the person associated with the shipping/billing address */
  lastname?: Maybe<Scalars['String']>
  /** The middle name of the person associated with the shipping/billing address */
  middlename?: Maybe<Scalars['String']>
  /** The customer's ZIP or postal code */
  postcode?: Maybe<Scalars['String']>
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: Maybe<Scalars['String']>
  /** An object containing the region name, region code, and region ID */
  region?: Maybe<CustomerAddressRegion>
  /** The unique ID for a pre-defined region */
  region_id?: Maybe<Scalars['Int']>
  /** An array of strings that define the street number and name */
  street?: Maybe<Array<Maybe<Scalars['String']>>>
  /** A value such as Sr., Jr., or III */
  suffix?: Maybe<Scalars['String']>
  /** The telephone number */
  telephone?: Maybe<Scalars['String']>
  /** The customer's Value-added tax (VAT) number (for corporate customers) */
  vat_id?: Maybe<Scalars['String']>
}

/** The list of countries codes */
export type CountryCodeEnum =
  /** Afghanistan */
  | 'AF'
  /** Åland Islands */
  | 'AX'
  /** Albania */
  | 'AL'
  /** Algeria */
  | 'DZ'
  /** American Samoa */
  | 'AS'
  /** Andorra */
  | 'AD'
  /** Angola */
  | 'AO'
  /** Anguilla */
  | 'AI'
  /** Antarctica */
  | 'AQ'
  /** Antigua & Barbuda */
  | 'AG'
  /** Argentina */
  | 'AR'
  /** Armenia */
  | 'AM'
  /** Aruba */
  | 'AW'
  /** Australia */
  | 'AU'
  /** Austria */
  | 'AT'
  /** Azerbaijan */
  | 'AZ'
  /** Bahamas */
  | 'BS'
  /** Bahrain */
  | 'BH'
  /** Bangladesh */
  | 'BD'
  /** Barbados */
  | 'BB'
  /** Belarus */
  | 'BY'
  /** Belgium */
  | 'BE'
  /** Belize */
  | 'BZ'
  /** Benin */
  | 'BJ'
  /** Bermuda */
  | 'BM'
  /** Bhutan */
  | 'BT'
  /** Bolivia */
  | 'BO'
  /** Bosnia & Herzegovina */
  | 'BA'
  /** Botswana */
  | 'BW'
  /** Bouvet Island */
  | 'BV'
  /** Brazil */
  | 'BR'
  /** British Indian Ocean Territory */
  | 'IO'
  /** British Virgin Islands */
  | 'VG'
  /** Brunei */
  | 'BN'
  /** Bulgaria */
  | 'BG'
  /** Burkina Faso */
  | 'BF'
  /** Burundi */
  | 'BI'
  /** Cambodia */
  | 'KH'
  /** Cameroon */
  | 'CM'
  /** Canada */
  | 'CA'
  /** Cape Verde */
  | 'CV'
  /** Cayman Islands */
  | 'KY'
  /** Central African Republic */
  | 'CF'
  /** Chad */
  | 'TD'
  /** Chile */
  | 'CL'
  /** China */
  | 'CN'
  /** Christmas Island */
  | 'CX'
  /** Cocos (Keeling) Islands */
  | 'CC'
  /** Colombia */
  | 'CO'
  /** Comoros */
  | 'KM'
  /** Congo-Brazzaville */
  | 'CG'
  /** Congo-Kinshasa */
  | 'CD'
  /** Cook Islands */
  | 'CK'
  /** Costa Rica */
  | 'CR'
  /** Côte d’Ivoire */
  | 'CI'
  /** Croatia */
  | 'HR'
  /** Cuba */
  | 'CU'
  /** Cyprus */
  | 'CY'
  /** Czech Republic */
  | 'CZ'
  /** Denmark */
  | 'DK'
  /** Djibouti */
  | 'DJ'
  /** Dominica */
  | 'DM'
  /** Dominican Republic */
  | 'DO'
  /** Ecuador */
  | 'EC'
  /** Egypt */
  | 'EG'
  /** El Salvador */
  | 'SV'
  /** Equatorial Guinea */
  | 'GQ'
  /** Eritrea */
  | 'ER'
  /** Estonia */
  | 'EE'
  /** Ethiopia */
  | 'ET'
  /** Falkland Islands */
  | 'FK'
  /** Faroe Islands */
  | 'FO'
  /** Fiji */
  | 'FJ'
  /** Finland */
  | 'FI'
  /** France */
  | 'FR'
  /** French Guiana */
  | 'GF'
  /** French Polynesia */
  | 'PF'
  /** French Southern Territories */
  | 'TF'
  /** Gabon */
  | 'GA'
  /** Gambia */
  | 'GM'
  /** Georgia */
  | 'GE'
  /** Germany */
  | 'DE'
  /** Ghana */
  | 'GH'
  /** Gibraltar */
  | 'GI'
  /** Greece */
  | 'GR'
  /** Greenland */
  | 'GL'
  /** Grenada */
  | 'GD'
  /** Guadeloupe */
  | 'GP'
  /** Guam */
  | 'GU'
  /** Guatemala */
  | 'GT'
  /** Guernsey */
  | 'GG'
  /** Guinea */
  | 'GN'
  /** Guinea-Bissau */
  | 'GW'
  /** Guyana */
  | 'GY'
  /** Haiti */
  | 'HT'
  /** Heard &amp; McDonald Islands */
  | 'HM'
  /** Honduras */
  | 'HN'
  /** Hong Kong SAR China */
  | 'HK'
  /** Hungary */
  | 'HU'
  /** Iceland */
  | 'IS'
  /** India */
  | 'IN'
  /** Indonesia */
  | 'ID'
  /** Iran */
  | 'IR'
  /** Iraq */
  | 'IQ'
  /** Ireland */
  | 'IE'
  /** Isle of Man */
  | 'IM'
  /** Israel */
  | 'IL'
  /** Italy */
  | 'IT'
  /** Jamaica */
  | 'JM'
  /** Japan */
  | 'JP'
  /** Jersey */
  | 'JE'
  /** Jordan */
  | 'JO'
  /** Kazakhstan */
  | 'KZ'
  /** Kenya */
  | 'KE'
  /** Kiribati */
  | 'KI'
  /** Kuwait */
  | 'KW'
  /** Kyrgyzstan */
  | 'KG'
  /** Laos */
  | 'LA'
  /** Latvia */
  | 'LV'
  /** Lebanon */
  | 'LB'
  /** Lesotho */
  | 'LS'
  /** Liberia */
  | 'LR'
  /** Libya */
  | 'LY'
  /** Liechtenstein */
  | 'LI'
  /** Lithuania */
  | 'LT'
  /** Luxembourg */
  | 'LU'
  /** Macau SAR China */
  | 'MO'
  /** Macedonia */
  | 'MK'
  /** Madagascar */
  | 'MG'
  /** Malawi */
  | 'MW'
  /** Malaysia */
  | 'MY'
  /** Maldives */
  | 'MV'
  /** Mali */
  | 'ML'
  /** Malta */
  | 'MT'
  /** Marshall Islands */
  | 'MH'
  /** Martinique */
  | 'MQ'
  /** Mauritania */
  | 'MR'
  /** Mauritius */
  | 'MU'
  /** Mayotte */
  | 'YT'
  /** Mexico */
  | 'MX'
  /** Micronesia */
  | 'FM'
  /** Moldova */
  | 'MD'
  /** Monaco */
  | 'MC'
  /** Mongolia */
  | 'MN'
  /** Montenegro */
  | 'ME'
  /** Montserrat */
  | 'MS'
  /** Morocco */
  | 'MA'
  /** Mozambique */
  | 'MZ'
  /** Myanmar (Burma) */
  | 'MM'
  /** Namibia */
  | 'NA'
  /** Nauru */
  | 'NR'
  /** Nepal */
  | 'NP'
  /** Netherlands */
  | 'NL'
  /** Netherlands Antilles */
  | 'AN'
  /** New Caledonia */
  | 'NC'
  /** New Zealand */
  | 'NZ'
  /** Nicaragua */
  | 'NI'
  /** Niger */
  | 'NE'
  /** Nigeria */
  | 'NG'
  /** Niue */
  | 'NU'
  /** Norfolk Island */
  | 'NF'
  /** Northern Mariana Islands */
  | 'MP'
  /** North Korea */
  | 'KP'
  /** Norway */
  | 'NO'
  /** Oman */
  | 'OM'
  /** Pakistan */
  | 'PK'
  /** Palau */
  | 'PW'
  /** Palestinian Territories */
  | 'PS'
  /** Panama */
  | 'PA'
  /** Papua New Guinea */
  | 'PG'
  /** Paraguay */
  | 'PY'
  /** Peru */
  | 'PE'
  /** Philippines */
  | 'PH'
  /** Pitcairn Islands */
  | 'PN'
  /** Poland */
  | 'PL'
  /** Portugal */
  | 'PT'
  /** Qatar */
  | 'QA'
  /** Réunion */
  | 'RE'
  /** Romania */
  | 'RO'
  /** Russia */
  | 'RU'
  /** Rwanda */
  | 'RW'
  /** Samoa */
  | 'WS'
  /** San Marino */
  | 'SM'
  /** São Tomé & Príncipe */
  | 'ST'
  /** Saudi Arabia */
  | 'SA'
  /** Senegal */
  | 'SN'
  /** Serbia */
  | 'RS'
  /** Seychelles */
  | 'SC'
  /** Sierra Leone */
  | 'SL'
  /** Singapore */
  | 'SG'
  /** Slovakia */
  | 'SK'
  /** Slovenia */
  | 'SI'
  /** Solomon Islands */
  | 'SB'
  /** Somalia */
  | 'SO'
  /** South Africa */
  | 'ZA'
  /** South Georgia & South Sandwich Islands */
  | 'GS'
  /** South Korea */
  | 'KR'
  /** Spain */
  | 'ES'
  /** Sri Lanka */
  | 'LK'
  /** St. Barthélemy */
  | 'BL'
  /** St. Helena */
  | 'SH'
  /** St. Kitts & Nevis */
  | 'KN'
  /** St. Lucia */
  | 'LC'
  /** St. Martin */
  | 'MF'
  /** St. Pierre & Miquelon */
  | 'PM'
  /** St. Vincent & Grenadines */
  | 'VC'
  /** Sudan */
  | 'SD'
  /** Suriname */
  | 'SR'
  /** Svalbard & Jan Mayen */
  | 'SJ'
  /** Swaziland */
  | 'SZ'
  /** Sweden */
  | 'SE'
  /** Switzerland */
  | 'CH'
  /** Syria */
  | 'SY'
  /** Taiwan */
  | 'TW'
  /** Tajikistan */
  | 'TJ'
  /** Tanzania */
  | 'TZ'
  /** Thailand */
  | 'TH'
  /** Timor-Leste */
  | 'TL'
  /** Togo */
  | 'TG'
  /** Tokelau */
  | 'TK'
  /** Tonga */
  | 'TO'
  /** Trinidad & Tobago */
  | 'TT'
  /** Tunisia */
  | 'TN'
  /** Turkey */
  | 'TR'
  /** Turkmenistan */
  | 'TM'
  /** Turks & Caicos Islands */
  | 'TC'
  /** Tuvalu */
  | 'TV'
  /** Uganda */
  | 'UG'
  /** Ukraine */
  | 'UA'
  /** United Arab Emirates */
  | 'AE'
  /** United Kingdom */
  | 'GB'
  /** United States */
  | 'US'
  /** Uruguay */
  | 'UY'
  /** U.S. Outlying Islands */
  | 'UM'
  /** U.S. Virgin Islands */
  | 'VI'
  /** Uzbekistan */
  | 'UZ'
  /** Vanuatu */
  | 'VU'
  /** Vatican City */
  | 'VA'
  /** Venezuela */
  | 'VE'
  /** Vietnam */
  | 'VN'
  /** Wallis & Futuna */
  | 'WF'
  /** Western Sahara */
  | 'EH'
  /** Yemen */
  | 'YE'
  /** Zambia */
  | 'ZM'
  /** Zimbabwe */
  | 'ZW'

export type CustomerAddressAttribute = {
  __typename?: 'CustomerAddressAttribute'
  /** Attribute code */
  attribute_code?: Maybe<Scalars['String']>
  /** Attribute value */
  value?: Maybe<Scalars['String']>
}

/** CustomerAddressRegion defines the customer's state or province */
export type CustomerAddressRegion = {
  __typename?: 'CustomerAddressRegion'
  /** The state or province name */
  region?: Maybe<Scalars['String']>
  /** The address region code */
  region_code?: Maybe<Scalars['String']>
  /** The unique ID for a pre-defined region */
  region_id?: Maybe<Scalars['Int']>
}

export type Wishlist = {
  __typename?: 'Wishlist'
  /** Wishlist unique identifier */
  id?: Maybe<Scalars['ID']>
  /** An array of items in the customer's wish list */
  items?: Maybe<Array<Maybe<WishlistItem>>>
  /** The number of items in the wish list */
  items_count?: Maybe<Scalars['Int']>
  /** An encrypted code that Magento uses to link to the wish list */
  sharing_code?: Maybe<Scalars['String']>
  /** The time of the last modification to the wish list */
  updated_at?: Maybe<Scalars['String']>
}

export type WishlistItem = {
  __typename?: 'WishlistItem'
  /** The time when the customer added the item to the wish list */
  added_at?: Maybe<Scalars['String']>
  /** The customer's comment about this item */
  description?: Maybe<Scalars['String']>
  /** The wish list item ID */
  id?: Maybe<Scalars['Int']>
  product?: Maybe<ProductInterface>
  /** The quantity of this wish list item */
  qty?: Maybe<Scalars['Float']>
}

export type CustomerDownloadableProducts = {
  __typename?: 'CustomerDownloadableProducts'
  /** List of purchased downloadable items */
  items?: Maybe<Array<Maybe<CustomerDownloadableProduct>>>
}

export type CustomerDownloadableProduct = {
  __typename?: 'CustomerDownloadableProduct'
  date?: Maybe<Scalars['String']>
  download_url?: Maybe<Scalars['String']>
  order_increment_id?: Maybe<Scalars['String']>
  remaining_downloads?: Maybe<Scalars['String']>
  status?: Maybe<Scalars['String']>
}

export type CustomerOrders = {
  __typename?: 'CustomerOrders'
  /** Array of orders */
  items?: Maybe<Array<Maybe<CustomerOrder>>>
}

/** Order mapping fields */
export type CustomerOrder = {
  __typename?: 'CustomerOrder'
  created_at?: Maybe<Scalars['String']>
  grand_total?: Maybe<Scalars['Float']>
  id?: Maybe<Scalars['Int']>
  /** @deprecated Use the order_number instead. */
  increment_id?: Maybe<Scalars['String']>
  /** The order number */
  order_number: Scalars['String']
  status?: Maybe<Scalars['String']>
}

export type CustomerPaymentTokens = {
  __typename?: 'CustomerPaymentTokens'
  /** An array of payment tokens */
  items: Array<Maybe<PaymentToken>>
}

/** The stored payment method available to the customer */
export type PaymentToken = {
  __typename?: 'PaymentToken'
  /** Stored account details */
  details?: Maybe<Scalars['String']>
  /** The payment method code associated with the token */
  payment_method_code: Scalars['String']
  /** The public hash of the token */
  public_hash: Scalars['String']
  type: PaymentTokenTypeEnum
}

/** The list of available payment token types */
export type PaymentTokenTypeEnum = 'card' | 'account'

/** The required input to request the secure URL for Payments Pro Hosted Solution payment. */
export type HostedProUrlInput = {
  /** The unique ID that identifies the customer's cart */
  cart_id: Scalars['String']
}

export type HostedProUrl = {
  __typename?: 'HostedProUrl'
  /** Secure Url generated by PayPal */
  secure_form_url?: Maybe<Scalars['String']>
}

/** Input required to fetch payment token information for Payflow Link and Payments Advanced payment methods. */
export type PayflowLinkTokenInput = {
  /** The unique ID that identifies the customer's cart */
  cart_id: Scalars['String']
}

/** Contains information used to generate PayPal iframe for transaction. Applies to Payflow Link and Payments Advanced payment methods. */
export type PayflowLinkToken = {
  __typename?: 'PayflowLinkToken'
  /** Mode for Payflow transaction */
  mode?: Maybe<PayflowLinkMode>
  /** PayPal URL used for requesting Payflow form */
  paypal_url?: Maybe<Scalars['String']>
  /** Secure token generated by PayPal */
  secure_token?: Maybe<Scalars['String']>
  /** Secure token ID generated by PayPal */
  secure_token_id?: Maybe<Scalars['String']>
}

/** Mode for payment: TEST or LIVE. Applies to Payflow Link and Payments Advanced payment methods. */
export type PayflowLinkMode = 'TEST' | 'LIVE'

export type IsEmailAvailableOutput = {
  __typename?: 'IsEmailAvailableOutput'
  /** Is email availabel value */
  is_email_available?: Maybe<Scalars['Boolean']>
}

/** AreaInput defines the parameters which will be used for filter by specified location. */
export type AreaInput = {
  /** The radius for the search in KM. */
  radius: Scalars['Int']
  /** The country code where search must be performed. Required parameter together with region, city or postcode. */
  search_term: Scalars['String']
}

/** PickupLocationFilterInput defines the list of attributes and filters for the search. */
export type PickupLocationFilterInput = {
  /** Filter by city. */
  city?: Maybe<FilterTypeInput>
  /** Filter by country. */
  country_id?: Maybe<FilterTypeInput>
  /** Filter by pickup location name. */
  name?: Maybe<FilterTypeInput>
  /** Filter by pickup location code. */
  pickup_location_code?: Maybe<FilterTypeInput>
  /** Filter by postcode. */
  postcode?: Maybe<FilterTypeInput>
  /** Filter by region. */
  region?: Maybe<FilterTypeInput>
  /** Filter by region id. */
  region_id?: Maybe<FilterTypeInput>
  /** Filter by street. */
  street?: Maybe<FilterTypeInput>
}

/** FilterTypeInput specifies which action will be performed in a query  */
export type FilterTypeInput = {
  /** Equals */
  eq?: Maybe<Scalars['String']>
  finset?: Maybe<Array<Maybe<Scalars['String']>>>
  /** From. Must be used with 'to' */
  from?: Maybe<Scalars['String']>
  /** Greater than */
  gt?: Maybe<Scalars['String']>
  /** Greater than or equal to */
  gteq?: Maybe<Scalars['String']>
  /** In. The value can contain a set of comma-separated values */
  in?: Maybe<Array<Maybe<Scalars['String']>>>
  /** Like. The specified value can contain % (percent signs) to allow matching of 0 or more characters */
  like?: Maybe<Scalars['String']>
  /** Less than */
  lt?: Maybe<Scalars['String']>
  /** Less than or equal to */
  lteq?: Maybe<Scalars['String']>
  /** More than or equal to */
  moreq?: Maybe<Scalars['String']>
  /** Not equal to */
  neq?: Maybe<Scalars['String']>
  /** Not in. The value can contain a set of comma-separated values */
  nin?: Maybe<Array<Maybe<Scalars['String']>>>
  /** Not null */
  notnull?: Maybe<Scalars['String']>
  /** Is null */
  null?: Maybe<Scalars['String']>
  /** To. Must be used with 'from' */
  to?: Maybe<Scalars['String']>
}

/** PickupLocationSortInput specifies attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending order. */
export type PickupLocationSortInput = {
  /** City where pickup location is placed. */
  city?: Maybe<SortEnum>
  /** Name of the contact person. */
  contact_name?: Maybe<SortEnum>
  /** Id of the country in two letters. */
  country_id?: Maybe<SortEnum>
  /** Description of the pickup location. */
  description?: Maybe<SortEnum>
  /** Distance to the address, requested by distance filter. Applicable only with distance filter. If distance sort order is present, all other sort orders will be ignored. */
  distance?: Maybe<SortEnum>
  /** Contact email of the pickup location. */
  email?: Maybe<SortEnum>
  /** Contact fax of the pickup location. */
  fax?: Maybe<SortEnum>
  /** Geographic latitude where pickup location is placed. */
  latitude?: Maybe<SortEnum>
  /** Geographic longitude where pickup location is placed. */
  longitude?: Maybe<SortEnum>
  /** The pickup location name. Customer use this to identify the pickup location. */
  name?: Maybe<SortEnum>
  /** Contact phone number of the pickup location. */
  phone?: Maybe<SortEnum>
  /** A code assigned to pickup location to identify the source. */
  pickup_location_code?: Maybe<SortEnum>
  /** Postcode where pickup location is placed. */
  postcode?: Maybe<SortEnum>
  /** Name of the region. */
  region?: Maybe<SortEnum>
  /** Id of the region. */
  region_id?: Maybe<SortEnum>
  /** Street where pickup location is placed. */
  street?: Maybe<SortEnum>
}

/** Top level object returned in a pickup locations search. */
export type PickupLocations = {
  __typename?: 'PickupLocations'
  /** An array of pickup locations that match the specific search request. */
  items?: Maybe<Array<Maybe<PickupLocation>>>
  /** An object that includes the page_info and currentPage values specified in the query. */
  page_info?: Maybe<SearchResultPageInfo>
  /** The number of products returned. */
  total_count?: Maybe<Scalars['Int']>
}

/** Defines Pickup Location information. */
export type PickupLocation = {
  __typename?: 'PickupLocation'
  city?: Maybe<Scalars['String']>
  contact_name?: Maybe<Scalars['String']>
  country_id?: Maybe<Scalars['String']>
  description?: Maybe<Scalars['String']>
  email?: Maybe<Scalars['String']>
  fax?: Maybe<Scalars['String']>
  latitude?: Maybe<Scalars['Float']>
  longitude?: Maybe<Scalars['Float']>
  name?: Maybe<Scalars['String']>
  phone?: Maybe<Scalars['String']>
  pickup_location_code?: Maybe<Scalars['String']>
  postcode?: Maybe<Scalars['String']>
  region?: Maybe<Scalars['String']>
  region_id?: Maybe<Scalars['Int']>
  street?: Maybe<Scalars['String']>
}

/** ProductAttributeFilterInput defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for. */
export type ProductAttributeFilterInput = {
  /** Attribute label: Activity */
  activity?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Category Gear */
  category_gear?: Maybe<FilterEqualTypeInput>
  /** Filter product by category id */
  category_id?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Climate */
  climate?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Collar */
  collar?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Color */
  color?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Description */
  description?: Maybe<FilterMatchTypeInput>
  /** Attribute label: Eco Collection */
  eco_collection?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Erin Recommends */
  erin_recommends?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Features */
  features_bags?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Format */
  format?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Gender */
  gender?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Material */
  material?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Product Name */
  name?: Maybe<FilterMatchTypeInput>
  /** Attribute label: New */
  new?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Pattern */
  pattern?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Performance Fabric */
  performance_fabric?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Price */
  price?: Maybe<FilterRangeTypeInput>
  /** Attribute label: Sale */
  sale?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Short Description */
  short_description?: Maybe<FilterMatchTypeInput>
  /** Attribute label: Size */
  size?: Maybe<FilterEqualTypeInput>
  /** Attribute label: SKU */
  sku?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Sleeve */
  sleeve?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Strap/Handle */
  strap_bags?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Style Bags */
  style_bags?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Style Bottom */
  style_bottom?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Style General */
  style_general?: Maybe<FilterEqualTypeInput>
  /** The part of the URL that identifies the product */
  url_key?: Maybe<FilterEqualTypeInput>
}

/** Defines a filter that matches a range of values, such as prices or dates. */
export type FilterRangeTypeInput = {
  /** The beginning of the range */
  from?: Maybe<Scalars['String']>
  /** The end of the range */
  to?: Maybe<Scalars['String']>
}

/** The Products object is the top-level object returned in a product search. */
export type Products = {
  __typename?: 'Products'
  /** Layered navigation aggregations. */
  aggregations?: Maybe<Array<Maybe<Aggregation>>>
  /**
   * Layered navigation filters array.
   * @deprecated Use aggregations instead
   */
  filters?: Maybe<Array<Maybe<LayerFilter>>>
  /** An array of products that match the specified search criteria. */
  items?: Maybe<Array<Maybe<ProductInterface>>>
  /** An object that includes the page_info and currentPage values specified in the query. */
  page_info?: Maybe<SearchResultPageInfo>
  /** An object that includes the default sort field and all available sort fields. */
  sort_fields?: Maybe<SortFields>
  /** The number of products that are marked as visible. By default, in complex products, parent products are visible, but their child products are not. */
  total_count?: Maybe<Scalars['Int']>
}

/** A bucket that contains information for each filterable option (such as price, category ID, and custom attributes). */
export type Aggregation = {
  __typename?: 'Aggregation'
  /** Attribute code of the aggregation group. */
  attribute_code: Scalars['String']
  /** The number of options in the aggregation group. */
  count?: Maybe<Scalars['Int']>
  /** The aggregation display name. */
  label?: Maybe<Scalars['String']>
  /** Array of options for the aggregation. */
  options?: Maybe<Array<Maybe<AggregationOption>>>
}

export type AggregationOption = AggregationOptionInterface & {
  __typename?: 'AggregationOption'
  /** The number of items that match the aggregation option. */
  count?: Maybe<Scalars['Int']>
  /** Aggregation option display label. */
  label?: Maybe<Scalars['String']>
  /** The internal ID that represents the value of the option. */
  value: Scalars['String']
}

export type AggregationOptionInterface = {
  /** The number of items that match the aggregation option. */
  count?: Maybe<Scalars['Int']>
  /** Aggregation option display label. */
  label?: Maybe<Scalars['String']>
  /** The internal ID that represents the value of the option. */
  value: Scalars['String']
}

export type LayerFilter = {
  __typename?: 'LayerFilter'
  /**
   * Array of filter items.
   * @deprecated Use Aggregation.options instead.
   */
  filter_items?: Maybe<Array<Maybe<LayerFilterItemInterface>>>
  /**
   * Count of filter items in filter group.
   * @deprecated Use Aggregation.count instead.
   */
  filter_items_count?: Maybe<Scalars['Int']>
  /**
   * Layered navigation filter name.
   * @deprecated Use Aggregation.label instead.
   */
  name?: Maybe<Scalars['String']>
  /**
   * Request variable name for filter query.
   * @deprecated Use Aggregation.attribute_code instead.
   */
  request_var?: Maybe<Scalars['String']>
}

export type LayerFilterItemInterface = {
  /**
   * Count of items by filter.
   * @deprecated Use AggregationOption.count instead.
   */
  items_count?: Maybe<Scalars['Int']>
  /**
   * Filter label.
   * @deprecated Use AggregationOption.label instead.
   */
  label?: Maybe<Scalars['String']>
  /**
   * Value for filter request variable to be used in query.
   * @deprecated Use AggregationOption.value instead.
   */
  value_string?: Maybe<Scalars['String']>
}

/** SortFields contains a default value for sort fields and all available sort fields. */
export type SortFields = {
  __typename?: 'SortFields'
  /** Default value of sort fields. */
  default?: Maybe<Scalars['String']>
  /** Available sort fields. */
  options?: Maybe<Array<Maybe<SortField>>>
}

export type SortField = {
  __typename?: 'SortField'
  /** Label of sort field. */
  label?: Maybe<Scalars['String']>
  /** Attribute code of sort field. */
  value?: Maybe<Scalars['String']>
}

/** The type contains information about a store config */
export type StoreConfig = {
  __typename?: 'StoreConfig'
  /** Footer Miscellaneous HTML */
  absolute_footer?: Maybe<Scalars['String']>
  /** Enable autocomplete on login and forgot password forms */
  autocomplete_on_storefront?: Maybe<Scalars['Boolean']>
  /** Base currency code */
  base_currency_code?: Maybe<Scalars['String']>
  /** Base link URL for the store */
  base_link_url?: Maybe<Scalars['String']>
  /** Base media URL for the store */
  base_media_url?: Maybe<Scalars['String']>
  /** Base static URL for the store */
  base_static_url?: Maybe<Scalars['String']>
  /** Base URL for the store */
  base_url?: Maybe<Scalars['String']>
  /** Default Sort By. */
  catalog_default_sort_by?: Maybe<Scalars['String']>
  /** Corresponds to the 'Display Prices In Product Lists' field. It indicates how FPT information is displayed on category pages */
  category_fixed_product_tax_display_setting?: Maybe<FixedProductTaxDisplaySettings>
  /** Category URL Suffix. */
  category_url_suffix?: Maybe<Scalars['String']>
  /** CMS Home Page */
  cms_home_page?: Maybe<Scalars['String']>
  /** CMS No Cookies Page */
  cms_no_cookies?: Maybe<Scalars['String']>
  /** CMS No Route Page */
  cms_no_route?: Maybe<Scalars['String']>
  /** A code assigned to the store to identify it */
  code?: Maybe<Scalars['String']>
  /** Copyright */
  copyright?: Maybe<Scalars['String']>
  /** Default Meta Description */
  default_description?: Maybe<Scalars['String']>
  /** Default display currency code */
  default_display_currency_code?: Maybe<Scalars['String']>
  /** Default Meta Keywords */
  default_keywords?: Maybe<Scalars['String']>
  /** Default Page Title */
  default_title?: Maybe<Scalars['String']>
  /** Display Demo Store Notice */
  demonotice?: Maybe<Scalars['Int']>
  /** Default Web URL */
  front?: Maybe<Scalars['String']>
  /** Products per Page on Grid Default Value. */
  grid_per_page?: Maybe<Scalars['Int']>
  /** Products per Page on Grid Allowed Values. */
  grid_per_page_values?: Maybe<Scalars['String']>
  /** Scripts and Style Sheets */
  head_includes?: Maybe<Scalars['String']>
  /** Favicon Icon */
  head_shortcut_icon?: Maybe<Scalars['String']>
  /** Logo Image */
  header_logo_src?: Maybe<Scalars['String']>
  /** The ID number assigned to the store */
  id?: Maybe<Scalars['Int']>
  /** List Mode. */
  list_mode?: Maybe<Scalars['String']>
  /** Products per Page on List Default Value. */
  list_per_page?: Maybe<Scalars['Int']>
  /** Products per Page on List Allowed Values. */
  list_per_page_values?: Maybe<Scalars['String']>
  /** Store locale */
  locale?: Maybe<Scalars['String']>
  /** Logo Image Alt */
  logo_alt?: Maybe<Scalars['String']>
  /** Logo Attribute Height */
  logo_height?: Maybe<Scalars['Int']>
  /** Logo Attribute Width */
  logo_width?: Maybe<Scalars['Int']>
  /** The minimum number of characters required for a valid password. */
  minimum_password_length?: Maybe<Scalars['String']>
  /** Default No-route URL */
  no_route?: Maybe<Scalars['String']>
  /** Corresponds to the 'Display Prices On Product View Page' field. It indicates how FPT information is displayed on product pages */
  product_fixed_product_tax_display_setting?: Maybe<FixedProductTaxDisplaySettings>
  /** Product URL Suffix. */
  product_url_suffix?: Maybe<Scalars['String']>
  /** The number of different character classes required in a password (lowercase, uppercase, digits, special characters). */
  required_character_classes_number?: Maybe<Scalars['String']>
  /** The ID of the root category */
  root_category_id?: Maybe<Scalars['Int']>
  /** Corresponds to the 'Display Prices In Sales Modules' field. It indicates how FPT information is displayed on cart, checkout, and order pages */
  sales_fixed_product_tax_display_setting?: Maybe<FixedProductTaxDisplaySettings>
  /** Secure base link URL for the store */
  secure_base_link_url?: Maybe<Scalars['String']>
  /** Secure base media URL for the store */
  secure_base_media_url?: Maybe<Scalars['String']>
  /** Secure base static URL for the store */
  secure_base_static_url?: Maybe<Scalars['String']>
  /** Secure base URL for the store */
  secure_base_url?: Maybe<Scalars['String']>
  /** Email to a Friend configuration. */
  send_friend?: Maybe<SendFriendConfiguration>
  /** Show Breadcrumbs for CMS Pages */
  show_cms_breadcrumbs?: Maybe<Scalars['Int']>
  /** Name of the store */
  store_name?: Maybe<Scalars['String']>
  /** Timezone of the store */
  timezone?: Maybe<Scalars['String']>
  /** Page Title Prefix */
  title_prefix?: Maybe<Scalars['String']>
  /** Page Title Separator. */
  title_separator?: Maybe<Scalars['String']>
  /** Page Title Suffix */
  title_suffix?: Maybe<Scalars['String']>
  /** The ID number assigned to the website store belongs */
  website_id?: Maybe<Scalars['Int']>
  /** The unit of weight */
  weight_unit?: Maybe<Scalars['String']>
  /** Welcome Text */
  welcome?: Maybe<Scalars['String']>
}

/** This enumeration display settings for the fixed product tax */
export type FixedProductTaxDisplaySettings =
  /** The displayed price includes the FPT amount without displaying the ProductPrice.fixed_product_taxes values. This value corresponds to 'Including FPT only' */
  | 'INCLUDE_FPT_WITHOUT_DETAILS'
  /** The displayed price includes the FPT amount while displaying the values of ProductPrice.fixed_product_taxes separately. This value corresponds to 'Including FPT and FPT description' */
  | 'INCLUDE_FPT_WITH_DETAILS'
  /** The displayed price does not include the FPT amount. The values of ProductPrice.fixed_product_taxes and the price including the FPT are displayed separately. This value corresponds to 'Excluding FPT, Including FPT description and final price' */
  | 'EXCLUDE_FPT_AND_INCLUDE_WITH_DETAILS'
  /** The displayed price does not include the FPT amount. The values from ProductPrice.fixed_product_taxes are not displayed. This value corresponds to 'Excluding FPT' */
  | 'EXCLUDE_FPT_WITHOUT_DETAILS'
  /** The FPT feature is not enabled. You can omit  ProductPrice.fixed_product_taxes from your query */
  | 'FPT_DISABLED'

export type SendFriendConfiguration = {
  __typename?: 'SendFriendConfiguration'
  /** Indicates whether the Email to a Friend feature is enabled. */
  enabled_for_customers: Scalars['Boolean']
  /** Indicates whether the Email to a Friend feature is enabled for guests. */
  enabled_for_guests: Scalars['Boolean']
}

/** EntityUrl is an output object containing the `id`, `relative_url`, and `type` attributes */
export type EntityUrl = {
  __typename?: 'EntityUrl'
  /** @deprecated The canonical_url field is deprecated, use relative_url instead. */
  canonical_url?: Maybe<Scalars['String']>
  /** The ID assigned to the object associated with the specified url. This could be a product ID, category ID, or page ID. */
  id?: Maybe<Scalars['Int']>
  /** 301 or 302 HTTP code for url permanent or temporary redirect or 0 for the 200 no redirect */
  redirectCode?: Maybe<Scalars['Int']>
  /** The internal relative URL. If the specified  url is a redirect, the query returns the redirected URL, not the original. */
  relative_url?: Maybe<Scalars['String']>
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>
}

/** This enumeration defines the entity type. */
export type UrlRewriteEntityTypeEnum = 'CMS_PAGE' | 'PRODUCT' | 'CATEGORY'

/** Deprecated: `Wishlist` type should be used instead */
export type WishlistOutput = {
  __typename?: 'WishlistOutput'
  /**
   * An array of items in the customer's wish list
   * @deprecated Use field `items` from type `Wishlist` instead
   */
  items?: Maybe<Array<Maybe<WishlistItem>>>
  /**
   * The number of items in the wish list
   * @deprecated Use field `items_count` from type `Wishlist` instead
   */
  items_count?: Maybe<Scalars['Int']>
  /**
   * When multiple wish lists are enabled, the name the customer assigns to the wishlist
   * @deprecated This field is related to Commerce functionality and is always `null` in Open Source edition
   */
  name?: Maybe<Scalars['String']>
  /**
   * An encrypted code that Magento uses to link to the wish list
   * @deprecated Use field `sharing_code` from type `Wishlist` instead
   */
  sharing_code?: Maybe<Scalars['String']>
  /**
   * The time of the last modification to the wish list
   * @deprecated Use field `updated_at` from type `Wishlist` instead
   */
  updated_at?: Maybe<Scalars['String']>
}

export type AddBundleProductsToCartInput = {
  cart_id: Scalars['String']
  cart_items: Array<Maybe<BundleProductCartItemInput>>
}

export type BundleProductCartItemInput = {
  bundle_options: Array<Maybe<BundleOptionInput>>
  customizable_options?: Maybe<Array<Maybe<CustomizableOptionInput>>>
  data: CartItemInput
}

export type BundleOptionInput = {
  id: Scalars['Int']
  quantity: Scalars['Float']
  value: Array<Maybe<Scalars['String']>>
}

export type CustomizableOptionInput = {
  id: Scalars['Int']
  value_string: Scalars['String']
}

export type CartItemInput = {
  quantity: Scalars['Float']
  sku: Scalars['String']
}

export type AddBundleProductsToCartOutput = {
  __typename?: 'AddBundleProductsToCartOutput'
  cart: Cart
}

export type AddConfigurableProductsToCartInput = {
  cart_id: Scalars['String']
  cart_items: Array<Maybe<ConfigurableProductCartItemInput>>
}

export type ConfigurableProductCartItemInput = {
  customizable_options?: Maybe<Array<Maybe<CustomizableOptionInput>>>
  data: CartItemInput
  /** Configurable product SKU. */
  parent_sku?: Maybe<Scalars['String']>
  variant_sku?: Maybe<Scalars['String']>
}

export type AddConfigurableProductsToCartOutput = {
  __typename?: 'AddConfigurableProductsToCartOutput'
  cart: Cart
}

export type AddDownloadableProductsToCartInput = {
  cart_id: Scalars['String']
  cart_items: Array<Maybe<DownloadableProductCartItemInput>>
}

export type DownloadableProductCartItemInput = {
  customizable_options?: Maybe<Array<Maybe<CustomizableOptionInput>>>
  data: CartItemInput
  downloadable_product_links?: Maybe<Array<Maybe<DownloadableProductLinksInput>>>
}

export type DownloadableProductLinksInput = {
  link_id: Scalars['Int']
}

export type AddDownloadableProductsToCartOutput = {
  __typename?: 'AddDownloadableProductsToCartOutput'
  cart: Cart
}

export type AddSimpleProductsToCartInput = {
  cart_id: Scalars['String']
  cart_items: Array<Maybe<SimpleProductCartItemInput>>
}

export type SimpleProductCartItemInput = {
  customizable_options?: Maybe<Array<Maybe<CustomizableOptionInput>>>
  data: CartItemInput
}

export type AddSimpleProductsToCartOutput = {
  __typename?: 'AddSimpleProductsToCartOutput'
  cart: Cart
}

export type AddVirtualProductsToCartInput = {
  cart_id: Scalars['String']
  cart_items: Array<Maybe<VirtualProductCartItemInput>>
}

export type VirtualProductCartItemInput = {
  customizable_options?: Maybe<Array<Maybe<CustomizableOptionInput>>>
  data: CartItemInput
}

export type AddVirtualProductsToCartOutput = {
  __typename?: 'AddVirtualProductsToCartOutput'
  cart: Cart
}

export type ApplyCouponToCartInput = {
  cart_id: Scalars['String']
  coupon_code: Scalars['String']
}

export type ApplyCouponToCartOutput = {
  __typename?: 'ApplyCouponToCartOutput'
  cart: Cart
}

export type CustomerInput = {
  /** The customer's date of birth */
  date_of_birth?: Maybe<Scalars['String']>
  /** Deprecated: Use `date_of_birth` instead */
  dob?: Maybe<Scalars['String']>
  /** The customer's email address. Required for customer creation */
  email?: Maybe<Scalars['String']>
  /** The customer's first name */
  firstname?: Maybe<Scalars['String']>
  /** The customer's gender (Male - 1, Female - 2) */
  gender?: Maybe<Scalars['Int']>
  /** Indicates whether the customer is subscribed to the company's newsletter */
  is_subscribed?: Maybe<Scalars['Boolean']>
  /** The customer's family name */
  lastname?: Maybe<Scalars['String']>
  /** The customer's middle name */
  middlename?: Maybe<Scalars['String']>
  /** The customer's password */
  password?: Maybe<Scalars['String']>
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: Maybe<Scalars['String']>
  /** A value such as Sr., Jr., or III */
  suffix?: Maybe<Scalars['String']>
  /** The customer's Tax/VAT number (for corporate customers) */
  taxvat?: Maybe<Scalars['String']>
}

export type CustomerOutput = {
  __typename?: 'CustomerOutput'
  customer: Customer
}

export type CustomerAddressInput = {
  /** The city or town */
  city?: Maybe<Scalars['String']>
  /** The customer's company */
  company?: Maybe<Scalars['String']>
  /** The customer's country */
  country_code?: Maybe<CountryCodeEnum>
  /** Deprecated: use `country_code` instead. */
  country_id?: Maybe<CountryCodeEnum>
  /** Deprecated: Custom attributes should not be put into container. */
  custom_attributes?: Maybe<Array<Maybe<CustomerAddressAttributeInput>>>
  /** Indicates whether the address is the default billing address */
  default_billing?: Maybe<Scalars['Boolean']>
  /** Indicates whether the address is the default shipping address */
  default_shipping?: Maybe<Scalars['Boolean']>
  /** The fax number */
  fax?: Maybe<Scalars['String']>
  /** The first name of the person associated with the shipping/billing address */
  firstname?: Maybe<Scalars['String']>
  /** The family name of the person associated with the shipping/billing address */
  lastname?: Maybe<Scalars['String']>
  /** The middle name of the person associated with the shipping/billing address */
  middlename?: Maybe<Scalars['String']>
  /** The customer's ZIP or postal code */
  postcode?: Maybe<Scalars['String']>
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: Maybe<Scalars['String']>
  /** An object containing the region name, region code, and region ID */
  region?: Maybe<CustomerAddressRegionInput>
  /** An array of strings that define the street number and name */
  street?: Maybe<Array<Maybe<Scalars['String']>>>
  /** A value such as Sr., Jr., or III */
  suffix?: Maybe<Scalars['String']>
  /** The telephone number */
  telephone?: Maybe<Scalars['String']>
  /** The customer's Tax/VAT number (for corporate customers) */
  vat_id?: Maybe<Scalars['String']>
}

export type CustomerAddressAttributeInput = {
  /** Attribute code */
  attribute_code: Scalars['String']
  /** Attribute value */
  value: Scalars['String']
}

/** CustomerAddressRegionInput defines the customer's state or province */
export type CustomerAddressRegionInput = {
  /** The state or province name */
  region?: Maybe<Scalars['String']>
  /** The address region code */
  region_code?: Maybe<Scalars['String']>
  /** The unique ID for a pre-defined region */
  region_id?: Maybe<Scalars['Int']>
}

export type CreateEmptyCartInput = {
  cart_id?: Maybe<Scalars['String']>
}

/** Input required to fetch payment token information for Payflow Pro and Payments Pro payment methods. */
export type PayflowProTokenInput = {
  /** The unique ID that identifies the customer's cart */
  cart_id: Scalars['String']
  /** A set of relative URLs that PayPal uses for callback. */
  urls: PayflowProUrlInput
}

/** A set of relative URLs that PayPal will use in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for Payflow Pro and Payment Pro payment methods. */
export type PayflowProUrlInput = {
  /** The relative URL of the page that PayPal will redirect to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html. */
  cancel_url: Scalars['String']
  /** The relative URL of the transaction error page that PayPal will redirect to upon payment error. If the full URL to this page is https://www.example.com/paypal/action/error.html, the relative URL is paypal/action/error.html. */
  error_url: Scalars['String']
  /** The relative URL of the final confirmation page that PayPal will redirect to upon payment success. If the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html. */
  return_url: Scalars['String']
}

/** Contains the secure information used to authorize transaction. Applies to Payflow Pro and Payments Pro payment methods. */
export type CreatePayflowProTokenOutput = {
  __typename?: 'CreatePayflowProTokenOutput'
  response_message: Scalars['String']
  result: Scalars['Int']
  result_code: Scalars['Int']
  secure_token: Scalars['String']
  secure_token_id: Scalars['String']
}

/** Defines the attributes required to receive a payment token for Express Checkout and Payments Standard payment methods. */
export type PaypalExpressTokenInput = {
  /** The unique ID that identifies the customer's cart */
  cart_id: Scalars['String']
  /** Payment method code */
  code: Scalars['String']
  /** Indicates whether the buyer selected the quick checkout button. The default value is false */
  express_button?: Maybe<Scalars['Boolean']>
  /** A set of relative URLs that PayPal uses in response to various actions during the authorization process */
  urls: PaypalExpressUrlsInput
  /** Indicates whether the buyer clicked the PayPal credit button. The default value is false */
  use_paypal_credit?: Maybe<Scalars['Boolean']>
}

/** A set of relative URLs that PayPal will use in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for Express Checkout and Payments Standard payment methods. */
export type PaypalExpressUrlsInput = {
  /** The relative URL of the page that PayPal will redirect to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html. */
  cancel_url: Scalars['String']
  /** The relative URL of the page that PayPal will redirect to when the payment has been put on hold for additional review. This condition mostly applies to ACH transactions, and is not applicable to most PayPal solutions. If the full URL to this page is https://www.example.com/paypal/action/success_pending.html, the relative URL is paypal/action/success_pending.html.  */
  pending_url?: Maybe<Scalars['String']>
  /** The relative URL of the final confirmation page that PayPal will redirect to upon payment success. If the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html. */
  return_url: Scalars['String']
  /** The relative URL of the order confirmation page that PayPal will redirect to when the payment is successful and additional confirmation is not needed. Not applicable to most PayPal solutions. If the full URL to this page is https://www.example.com/paypal/action/success.html, the relative URL is paypal/action/success.html. */
  success_url?: Maybe<Scalars['String']>
}

/** Contains the token returned by PayPal and a set of URLs that allow the buyer to authorize payment and adjust checkout details. Applies to Express Checkout and Payments Standard payment methods. */
export type PaypalExpressTokenOutput = {
  __typename?: 'PaypalExpressTokenOutput'
  /** A set of URLs that allow the buyer to authorize payment and adjust checkout details */
  paypal_urls?: Maybe<PaypalExpressUrlList>
  /** The token returned by PayPal */
  token?: Maybe<Scalars['String']>
}

/** A set of URLs that allow the buyer to authorize payment and adjust checkout details for Express Checkout and Payments Standard transactions. */
export type PaypalExpressUrlList = {
  __typename?: 'PaypalExpressUrlList'
  /** The PayPal URL that allows the buyer to edit their checkout details */
  edit?: Maybe<Scalars['String']>
  /** The URL to the PayPal login page */
  start?: Maybe<Scalars['String']>
}

export type DeletePaymentTokenOutput = {
  __typename?: 'DeletePaymentTokenOutput'
  customerPaymentTokens?: Maybe<CustomerPaymentTokens>
  result: Scalars['Boolean']
}

export type CustomerToken = {
  __typename?: 'CustomerToken'
  createdAt?: Maybe<Scalars['DateTime']>
  /** The customer token */
  token?: Maybe<Scalars['String']>
  valid?: Maybe<Scalars['Boolean']>
}

/** Input required to complete payment. Applies to Payflow Pro and Payments Pro payment methods. */
export type PayflowProResponseInput = {
  cart_id: Scalars['String']
  paypal_payload: Scalars['String']
}

export type PayflowProResponseOutput = {
  __typename?: 'PayflowProResponseOutput'
  cart: Cart
}

export type PlaceOrderInput = {
  cart_id: Scalars['String']
}

export type PlaceOrderOutput = {
  __typename?: 'PlaceOrderOutput'
  order: Order
}

export type Order = {
  __typename?: 'Order'
  /** @deprecated The order_id field is deprecated, use order_number instead. */
  order_id?: Maybe<Scalars['String']>
  order_number: Scalars['String']
}

export type RemoveCouponFromCartInput = {
  cart_id: Scalars['String']
}

export type RemoveCouponFromCartOutput = {
  __typename?: 'RemoveCouponFromCartOutput'
  cart?: Maybe<Cart>
}

export type RemoveItemFromCartInput = {
  cart_id: Scalars['String']
  cart_item_id: Scalars['Int']
}

export type RemoveItemFromCartOutput = {
  __typename?: 'RemoveItemFromCartOutput'
  cart: Cart
}

export type ReorderItemsOutput = {
  __typename?: 'ReorderItemsOutput'
  /** Contains detailed information about the customer's cart. */
  cart: Cart
  /** An array of reordering errors. */
  userInputErrors: Array<Maybe<CheckoutUserInputError>>
}

/** An error encountered while adding an item the the cart. */
export type CheckoutUserInputError = {
  __typename?: 'CheckoutUserInputError'
  /** Checkout-specific error code */
  code: CheckoutUserInputErrorCodes
  /** Localized error message */
  message: Scalars['String']
  /** Path to the input field that caused an error. See the GraphQL specification about path errors for details: http://spec.graphql.org/draft/#sec-Errors */
  path: Array<Maybe<Scalars['String']>>
}

export type CheckoutUserInputErrorCodes =
  | 'REORDER_NOT_AVAILABLE'
  | 'PRODUCT_NOT_FOUND'
  | 'NOT_SALABLE'
  | 'INSUFFICIENT_STOCK'
  | 'UNDEFINED'

export type RevokeCustomerTokenOutput = {
  __typename?: 'RevokeCustomerTokenOutput'
  result: Scalars['Boolean']
}

export type SendEmailToFriendInput = {
  product_id: Scalars['Int']
  recipients: Array<Maybe<SendEmailToFriendRecipientInput>>
  sender: SendEmailToFriendSenderInput
}

export type SendEmailToFriendRecipientInput = {
  email: Scalars['String']
  name: Scalars['String']
}

export type SendEmailToFriendSenderInput = {
  email: Scalars['String']
  message: Scalars['String']
  name: Scalars['String']
}

export type SendEmailToFriendOutput = {
  __typename?: 'SendEmailToFriendOutput'
  recipients?: Maybe<Array<Maybe<SendEmailToFriendRecipient>>>
  sender?: Maybe<SendEmailToFriendSender>
}

export type SendEmailToFriendRecipient = {
  __typename?: 'SendEmailToFriendRecipient'
  email: Scalars['String']
  name: Scalars['String']
}

export type SendEmailToFriendSender = {
  __typename?: 'SendEmailToFriendSender'
  email: Scalars['String']
  message: Scalars['String']
  name: Scalars['String']
}

export type SetBillingAddressOnCartInput = {
  billing_address: BillingAddressInput
  cart_id: Scalars['String']
}

export type BillingAddressInput = {
  address?: Maybe<CartAddressInput>
  customer_address_id?: Maybe<Scalars['Int']>
  /** Set billing address same as shipping */
  same_as_shipping?: Maybe<Scalars['Boolean']>
  /** Deprecated: use `same_as_shipping` field instead */
  use_for_shipping?: Maybe<Scalars['Boolean']>
}

export type CartAddressInput = {
  city: Scalars['String']
  company?: Maybe<Scalars['String']>
  country_code: Scalars['String']
  firstname: Scalars['String']
  lastname: Scalars['String']
  postcode?: Maybe<Scalars['String']>
  region?: Maybe<Scalars['String']>
  region_id?: Maybe<Scalars['Int']>
  /** Determines whether to save the address in the customer's address book. The default value is true */
  save_in_address_book?: Maybe<Scalars['Boolean']>
  street: Array<Maybe<Scalars['String']>>
  telephone: Scalars['String']
}

export type SetBillingAddressOnCartOutput = {
  __typename?: 'SetBillingAddressOnCartOutput'
  cart: Cart
}

export type SetGuestEmailOnCartInput = {
  cart_id: Scalars['String']
  email: Scalars['String']
}

export type SetGuestEmailOnCartOutput = {
  __typename?: 'SetGuestEmailOnCartOutput'
  cart: Cart
}

export type SetPaymentMethodAndPlaceOrderInput = {
  cart_id: Scalars['String']
  payment_method: PaymentMethodInput
}

export type PaymentMethodInput = {
  braintree?: Maybe<BraintreeInput>
  braintree_cc_vault?: Maybe<BraintreeCcVaultInput>
  /** Payment method code */
  code: Scalars['String']
  /** Required input for PayPal Hosted pro payments */
  hosted_pro?: Maybe<HostedProInput>
  /** Required input for Payflow Express Checkout payments */
  payflow_express?: Maybe<PayflowExpressInput>
  /** Required input for PayPal Payflow Link and Payments Advanced payments */
  payflow_link?: Maybe<PayflowLinkInput>
  /** Required input type for PayPal Payflow Pro and Payment Pro payments */
  payflowpro?: Maybe<PayflowProInput>
  /** Required input for Express Checkout and Payments Standard payments */
  paypal_express?: Maybe<PaypalExpressInput>
  /** Purchase order number */
  purchase_order_number?: Maybe<Scalars['String']>
}

export type BraintreeInput = {
  /** Contains a fingerprint provided by Braintree JS SDK and should be sent with sale transaction details to the Braintree payment gateway. Should be specified only in a case if Kount (advanced fraud protection) is enabled for Braintree payment integration. */
  device_data?: Maybe<Scalars['String']>
  /** States whether an entered by a customer credit/debit card should be tokenized for later usage. Required only if Vault is enabled for Braintree payment integration. */
  is_active_payment_token_enabler: Scalars['Boolean']
  /** The one-time payment token generated by Braintree payment gateway based on card details. Required field to make sale transaction. */
  payment_method_nonce: Scalars['String']
}

export type BraintreeCcVaultInput = {
  device_data?: Maybe<Scalars['String']>
  public_hash: Scalars['String']
}

/** A set of relative URLs that PayPal will use in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for Payments Pro Hosted Solution payment method. */
export type HostedProInput = {
  /** The relative URL of the page that PayPal will redirect to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html. */
  cancel_url: Scalars['String']
  /** The relative URL of the final confirmation page that PayPal will redirect to upon payment success. If the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html. */
  return_url: Scalars['String']
}

/** Required input for Payflow Express Checkout payments */
export type PayflowExpressInput = {
  /** The unique ID of the PayPal user */
  payer_id: Scalars['String']
  /** The token returned by the createPaypalExpressToken mutation */
  token: Scalars['String']
}

/** A set of relative URLs that PayPal will use in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for Payflow Link and Payments Advanced payment methods. */
export type PayflowLinkInput = {
  /** The relative URL of the page that PayPal will redirect to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html. */
  cancel_url: Scalars['String']
  /** The relative URL of the transaction error page that PayPal will redirect to upon payment error. If the full URL to this page is https://www.example.com/paypal/action/error.html, the relative URL is paypal/action/error.html. */
  error_url: Scalars['String']
  /** The relative URL of the order confirmation page that PayPal will redirect to when the payment is successful and additional confirmation is not needed. If the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html. */
  return_url: Scalars['String']
}

/** Required input for Payflow Pro and Payments Pro payment methods. */
export type PayflowProInput = {
  /** Required input for credit card related information */
  cc_details: CreditCardDetailsInput
}

/** Required fields for Payflow Pro and Payments Pro credit card payments */
export type CreditCardDetailsInput = {
  /** Credit card expiration month */
  cc_exp_month: Scalars['Int']
  /** Credit card expiration year */
  cc_exp_year: Scalars['Int']
  /** Last 4 digits of the credit card */
  cc_last_4: Scalars['Int']
  /** Credit card type */
  cc_type: Scalars['String']
}

/** Required input for Express Checkout and Payments Standard payments */
export type PaypalExpressInput = {
  /** The unique ID of the PayPal user */
  payer_id: Scalars['String']
  /** The token returned by the createPaypalExpressToken mutation */
  token: Scalars['String']
}

export type SetPaymentMethodOnCartInput = {
  cart_id: Scalars['String']
  payment_method: PaymentMethodInput
}

export type SetPaymentMethodOnCartOutput = {
  __typename?: 'SetPaymentMethodOnCartOutput'
  cart: Cart
}

export type SetShippingAddressesOnCartInput = {
  cart_id: Scalars['String']
  shipping_addresses: Array<Maybe<ShippingAddressInput>>
}

export type ShippingAddressInput = {
  address?: Maybe<CartAddressInput>
  customer_address_id?: Maybe<Scalars['Int']>
  customer_notes?: Maybe<Scalars['String']>
  /** The code of Pickup Location which will be used for In-Store Pickup. */
  pickup_location_code?: Maybe<Scalars['String']>
}

export type SetShippingAddressesOnCartOutput = {
  __typename?: 'SetShippingAddressesOnCartOutput'
  cart: Cart
}

export type SetShippingMethodsOnCartInput = {
  cart_id: Scalars['String']
  shipping_methods: Array<Maybe<ShippingMethodInput>>
}

export type ShippingMethodInput = {
  carrier_code: Scalars['String']
  method_code: Scalars['String']
}

export type SetShippingMethodsOnCartOutput = {
  __typename?: 'SetShippingMethodsOnCartOutput'
  cart: Cart
}

export type UpdateCartItemsInput = {
  cart_id: Scalars['String']
  cart_items: Array<Maybe<CartItemUpdateInput>>
}

export type CartItemUpdateInput = {
  cart_item_id: Scalars['Int']
  customizable_options?: Maybe<Array<Maybe<CustomizableOptionInput>>>
  quantity?: Maybe<Scalars['Float']>
}

export type UpdateCartItemsOutput = {
  __typename?: 'UpdateCartItemsOutput'
  cart: Cart
}

/** This enumeration the price type. */
export type PriceTypeEnum = 'FIXED' | 'PERCENT' | 'DYNAMIC'

/** ProductLinks is an implementation of ProductLinksInterface. */
export type ProductLinks = ProductLinksInterface & {
  __typename?: 'ProductLinks'
  /** One of related, associated, upsell, or crosssell. */
  link_type?: Maybe<Scalars['String']>
  /** The SKU of the linked product. */
  linked_product_sku?: Maybe<Scalars['String']>
  /** The type of linked product (simple, virtual, bundle, downloadable, grouped, configurable). */
  linked_product_type?: Maybe<Scalars['String']>
  /** The position within the list of product links. */
  position?: Maybe<Scalars['Int']>
  /** The identifier of the linked product. */
  sku?: Maybe<Scalars['String']>
}

/** PhysicalProductInterface contains attributes specific to tangible products. */
export type PhysicalProductInterface = {
  /** The weight of the item, in units defined by the store. */
  weight?: Maybe<Scalars['Float']>
}

/** CustomizableAreaOption contains information about a text area that is defined as part of a customizable option. */
export type CustomizableAreaOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableAreaOption'
  /** Option ID. */
  option_id?: Maybe<Scalars['Int']>
  /** The Stock Keeping Unit of the base product. */
  product_sku?: Maybe<Scalars['String']>
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>
  /** An object that defines a text area. */
  value?: Maybe<CustomizableAreaValue>
}

/** The CustomizableOptionInterface contains basic information about a customizable option. It can be implemented by several types of configurable options. */
export type CustomizableOptionInterface = {
  /** Option ID. */
  option_id?: Maybe<Scalars['Int']>
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>
}

/** CustomizableAreaValue defines the price and sku of a product whose page contains a customized text area. */
export type CustomizableAreaValue = {
  __typename?: 'CustomizableAreaValue'
  /** The maximum number of characters that can be entered for this customizable option. */
  max_characters?: Maybe<Scalars['Int']>
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>
}

/** CustomizableDateOption contains information about a date picker that is defined as part of a customizable option. */
export type CustomizableDateOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableDateOption'
  /** Option ID. */
  option_id?: Maybe<Scalars['Int']>
  /** The Stock Keeping Unit of the base product. */
  product_sku?: Maybe<Scalars['String']>
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>
  /** An object that defines a date field in a customizable option. */
  value?: Maybe<CustomizableDateValue>
}

/** CustomizableDateValue defines the price and sku of a product whose page contains a customized date picker. */
export type CustomizableDateValue = {
  __typename?: 'CustomizableDateValue'
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>
}

/** CustomizableDropDownOption contains information about a drop down menu that is defined as part of a customizable option. */
export type CustomizableDropDownOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableDropDownOption'
  /** Option ID. */
  option_id?: Maybe<Scalars['Int']>
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>
  /** An array that defines the set of options for a drop down menu. */
  value?: Maybe<Array<Maybe<CustomizableDropDownValue>>>
}

/** CustomizableDropDownValue defines the price and sku of a product whose page contains a customized drop down menu. */
export type CustomizableDropDownValue = {
  __typename?: 'CustomizableDropDownValue'
  /** The ID assigned to the value. */
  option_type_id?: Maybe<Scalars['Int']>
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>
}

/** CustomizableMultipleOption contains information about a multiselect that is defined as part of a customizable option. */
export type CustomizableMultipleOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableMultipleOption'
  /** Option ID. */
  option_id?: Maybe<Scalars['Int']>
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>
  /** An array that defines the set of options for a multiselect. */
  value?: Maybe<Array<Maybe<CustomizableMultipleValue>>>
}

/** CustomizableMultipleValue defines the price and sku of a product whose page contains a customized multiselect. */
export type CustomizableMultipleValue = {
  __typename?: 'CustomizableMultipleValue'
  /** The ID assigned to the value. */
  option_type_id?: Maybe<Scalars['Int']>
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>
}

/** CustomizableFieldOption contains information about a text field that is defined as part of a customizable option. */
export type CustomizableFieldOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableFieldOption'
  /** Option ID. */
  option_id?: Maybe<Scalars['Int']>
  /** The Stock Keeping Unit of the base product. */
  product_sku?: Maybe<Scalars['String']>
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>
  /** An object that defines a text field. */
  value?: Maybe<CustomizableFieldValue>
}

/** CustomizableFieldValue defines the price and sku of a product whose page contains a customized text field. */
export type CustomizableFieldValue = {
  __typename?: 'CustomizableFieldValue'
  /** The maximum number of characters that can be entered for this customizable option. */
  max_characters?: Maybe<Scalars['Int']>
  /** The price of the custom value. */
  price?: Maybe<Scalars['Float']>
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>
}

/** CustomizableFileOption contains information about a file picker that is defined as part of a customizable option. */
export type CustomizableFileOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableFileOption'
  /** Option ID. */
  option_id?: Maybe<Scalars['Int']>
  /** The Stock Keeping Unit of the base product. */
  product_sku?: Maybe<Scalars['String']>
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>
  /** An object that defines a file value. */
  value?: Maybe<CustomizableFileValue>
}

/** CustomizableFileValue defines the price and sku of a product whose page contains a customized file picker. */
export type CustomizableFileValue = {
  __typename?: 'CustomizableFileValue'
  /** The file extension to accept. */
  file_extension?: Maybe<Scalars['String']>
  /** The maximum width of an image. */
  image_size_x?: Maybe<Scalars['Int']>
  /** The maximum height of an image. */
  image_size_y?: Maybe<Scalars['Int']>
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>
}

/** Contains information about a product video. */
export type ProductVideo = MediaGalleryInterface & {
  __typename?: 'ProductVideo'
  /** Whether the image is hidden from view. */
  disabled?: Maybe<Scalars['Boolean']>
  /** The label of the product image or video. */
  label?: Maybe<Scalars['String']>
  /** The media item's position after it has been sorted. */
  position?: Maybe<Scalars['Int']>
  /** The URL of the product image or video. */
  url?: Maybe<Scalars['String']>
  /** Contains a ProductMediaGalleryEntriesVideoContent object. */
  video_content?: Maybe<ProductMediaGalleryEntriesVideoContent>
}

/** CustomizableProductInterface contains information about customizable product options. */
export type CustomizableProductInterface = {
  /** An array of options for a customizable product. */
  options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>
}

/** CustomizableRadioOption contains information about a set of radio buttons that are defined as part of a customizable option. */
export type CustomizableRadioOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableRadioOption'
  /** Option ID. */
  option_id?: Maybe<Scalars['Int']>
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>
  /** An array that defines a set of radio buttons. */
  value?: Maybe<Array<Maybe<CustomizableRadioValue>>>
}

/** CustomizableRadioValue defines the price and sku of a product whose page contains a customized set of radio buttons. */
export type CustomizableRadioValue = {
  __typename?: 'CustomizableRadioValue'
  /** The ID assigned to the value. */
  option_type_id?: Maybe<Scalars['Int']>
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>
  /** The order in which the radio button is displayed. */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>
}

/** CustomizableCheckbbixOption contains information about a set of checkbox values that are defined as part of a customizable option. */
export type CustomizableCheckboxOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableCheckboxOption'
  /** Option ID. */
  option_id?: Maybe<Scalars['Int']>
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>
  /** An array that defines a set of checkbox values. */
  value?: Maybe<Array<Maybe<CustomizableCheckboxValue>>>
}

/** CustomizableCheckboxValue defines the price and sku of a product whose page contains a customized set of checkbox values. */
export type CustomizableCheckboxValue = {
  __typename?: 'CustomizableCheckboxValue'
  /** The ID assigned to the value. */
  option_type_id?: Maybe<Scalars['Int']>
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>
  /** The order in which the checkbox value is displayed. */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>
}

/** A virtual product is non-tangible product that does not require shipping and is not kept in inventory. */
export type VirtualProduct = ProductInterface &
  CustomizableProductInterface & {
    __typename?: 'VirtualProduct'
    activity?: Maybe<Scalars['String']>
    /** The attribute set assigned to the product. */
    attribute_set_id?: Maybe<Scalars['Int']>
    /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled */
    canonical_url?: Maybe<Scalars['String']>
    /** The categories assigned to a product. */
    categories?: Maybe<Array<Maybe<CategoryInterface>>>
    category_gear?: Maybe<Scalars['String']>
    climate?: Maybe<Scalars['String']>
    collar?: Maybe<Scalars['String']>
    color?: Maybe<Scalars['String']>
    /** The product's country of origin. */
    country_of_manufacture?: Maybe<Scalars['String']>
    /** Timestamp indicating when the product was created. */
    created_at?: Maybe<Scalars['String']>
    /** Crosssell Products */
    crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>
    /** Detailed information about the product. The value can include simple HTML tags. */
    description?: Maybe<ComplexTextValue>
    eco_collection?: Maybe<Scalars['Int']>
    erin_recommends?: Maybe<Scalars['Int']>
    features_bags?: Maybe<Scalars['String']>
    format?: Maybe<Scalars['Int']>
    gender?: Maybe<Scalars['String']>
    /** Indicates whether a gift message is available. */
    gift_message_available?: Maybe<Scalars['String']>
    /** The ID number assigned to the product. */
    id?: Maybe<Scalars['Int']>
    /** The relative path to the main image on the product page. */
    image?: Maybe<ProductImage>
    /** A number representing the product's manufacturer. */
    manufacturer?: Maybe<Scalars['Int']>
    material?: Maybe<Scalars['String']>
    /** An array of Media Gallery objects. */
    media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>
    /**
     * An array of MediaGalleryEntry objects.
     * @deprecated Use product's `media_gallery` instead
     */
    media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>
    /** A brief overview of the product for search results listings, maximum 255 characters. */
    meta_description?: Maybe<Scalars['String']>
    /** A comma-separated list of keywords that are visible only to search engines. */
    meta_keyword?: Maybe<Scalars['String']>
    /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
    meta_title?: Maybe<Scalars['String']>
    /** The product name. Customers use this name to identify the product. */
    name?: Maybe<Scalars['String']>
    new?: Maybe<Scalars['Int']>
    /** The beginning date for new product listings, and determines if the product is featured as a new product. */
    new_from_date?: Maybe<Scalars['String']>
    /** The end date for new product listings. */
    new_to_date?: Maybe<Scalars['String']>
    /** Product stock only x left count */
    only_x_left_in_stock?: Maybe<Scalars['Float']>
    /** An array of options for a customizable product. */
    options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>
    /** If the product has multiple options, determines where they appear on the product page. */
    options_container?: Maybe<Scalars['String']>
    pattern?: Maybe<Scalars['String']>
    performance_fabric?: Maybe<Scalars['Int']>
    /**
     * A ProductPrices object, indicating the price of an item.
     * @deprecated Use price_range for product price information.
     */
    price?: Maybe<ProductPrices>
    /** A PriceRange object, indicating the range of prices for the product */
    price_range: PriceRange
    /** An array of TierPrice objects. */
    price_tiers?: Maybe<Array<Maybe<TierPrice>>>
    /** An array of ProductLinks objects. */
    product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>
    /** Related Products */
    related_products?: Maybe<Array<Maybe<ProductInterface>>>
    sale?: Maybe<Scalars['Int']>
    /** A short description of the product. Its use depends on the theme. */
    short_description?: Maybe<ComplexTextValue>
    size?: Maybe<Scalars['Int']>
    /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
    sku?: Maybe<Scalars['String']>
    sleeve?: Maybe<Scalars['String']>
    /** The relative path to the small image, which is used on catalog pages. */
    small_image?: Maybe<ProductImage>
    /** The beginning date that a product has a special price. */
    special_from_date?: Maybe<Scalars['String']>
    /** The discounted price of the product. */
    special_price?: Maybe<Scalars['Float']>
    /** The end date that a product has a special price. */
    special_to_date?: Maybe<Scalars['String']>
    /** Stock status of the product */
    stock_status?: Maybe<ProductStockStatus>
    strap_bags?: Maybe<Scalars['String']>
    style_bags?: Maybe<Scalars['String']>
    style_bottom?: Maybe<Scalars['String']>
    style_general?: Maybe<Scalars['String']>
    /** The file name of a swatch image */
    swatch_image?: Maybe<Scalars['String']>
    /** The relative path to the product's thumbnail image. */
    thumbnail?: Maybe<ProductImage>
    /**
     * The price when tier pricing is in effect and the items purchased threshold has been reached.
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_price?: Maybe<Scalars['Float']>
    /**
     * An array of ProductTierPrices objects.
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>
    /**
     * One of simple, virtual, bundle, downloadable, grouped, or configurable.
     * @deprecated Use __typename instead.
     */
    type_id?: Maybe<Scalars['String']>
    /** Timestamp indicating when the product was updated. */
    updated_at?: Maybe<Scalars['String']>
    /** Upsell Products */
    upsell_products?: Maybe<Array<Maybe<ProductInterface>>>
    /** The part of the URL that identifies the product */
    url_key?: Maybe<Scalars['String']>
    /** @deprecated Use product's `canonical_url` or url rewrites instead */
    url_path?: Maybe<Scalars['String']>
    /** URL rewrites list */
    url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>
    /** The part of the product URL that is appended after the url key */
    url_suffix?: Maybe<Scalars['String']>
    /**
     * An array of websites in which the product is available.
     * @deprecated The field should not be used on the storefront.
     */
    websites?: Maybe<Array<Maybe<Website>>>
  }

/** A simple product is tangible and are usually sold as single units or in fixed quantities. */
export type SimpleProduct = ProductInterface &
  PhysicalProductInterface &
  CustomizableProductInterface & {
    __typename?: 'SimpleProduct'
    activity?: Maybe<Scalars['String']>
    /** The attribute set assigned to the product. */
    attribute_set_id?: Maybe<Scalars['Int']>
    /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled */
    canonical_url?: Maybe<Scalars['String']>
    /** The categories assigned to a product. */
    categories?: Maybe<Array<Maybe<CategoryInterface>>>
    category_gear?: Maybe<Scalars['String']>
    climate?: Maybe<Scalars['String']>
    collar?: Maybe<Scalars['String']>
    color?: Maybe<Scalars['String']>
    /** The product's country of origin. */
    country_of_manufacture?: Maybe<Scalars['String']>
    /** Timestamp indicating when the product was created. */
    created_at?: Maybe<Scalars['String']>
    /** Crosssell Products */
    crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>
    /** Detailed information about the product. The value can include simple HTML tags. */
    description?: Maybe<ComplexTextValue>
    eco_collection?: Maybe<Scalars['Int']>
    erin_recommends?: Maybe<Scalars['Int']>
    features_bags?: Maybe<Scalars['String']>
    format?: Maybe<Scalars['Int']>
    gender?: Maybe<Scalars['String']>
    /** Indicates whether a gift message is available. */
    gift_message_available?: Maybe<Scalars['String']>
    /** The ID number assigned to the product. */
    id?: Maybe<Scalars['Int']>
    /** The relative path to the main image on the product page. */
    image?: Maybe<ProductImage>
    /** A number representing the product's manufacturer. */
    manufacturer?: Maybe<Scalars['Int']>
    material?: Maybe<Scalars['String']>
    /** An array of Media Gallery objects. */
    media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>
    /**
     * An array of MediaGalleryEntry objects.
     * @deprecated Use product's `media_gallery` instead
     */
    media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>
    /** A brief overview of the product for search results listings, maximum 255 characters. */
    meta_description?: Maybe<Scalars['String']>
    /** A comma-separated list of keywords that are visible only to search engines. */
    meta_keyword?: Maybe<Scalars['String']>
    /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
    meta_title?: Maybe<Scalars['String']>
    /** The product name. Customers use this name to identify the product. */
    name?: Maybe<Scalars['String']>
    new?: Maybe<Scalars['Int']>
    /** The beginning date for new product listings, and determines if the product is featured as a new product. */
    new_from_date?: Maybe<Scalars['String']>
    /** The end date for new product listings. */
    new_to_date?: Maybe<Scalars['String']>
    /** Product stock only x left count */
    only_x_left_in_stock?: Maybe<Scalars['Float']>
    /** An array of options for a customizable product. */
    options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>
    /** If the product has multiple options, determines where they appear on the product page. */
    options_container?: Maybe<Scalars['String']>
    pattern?: Maybe<Scalars['String']>
    performance_fabric?: Maybe<Scalars['Int']>
    /**
     * A ProductPrices object, indicating the price of an item.
     * @deprecated Use price_range for product price information.
     */
    price?: Maybe<ProductPrices>
    /** A PriceRange object, indicating the range of prices for the product */
    price_range: PriceRange
    /** An array of TierPrice objects. */
    price_tiers?: Maybe<Array<Maybe<TierPrice>>>
    /** An array of ProductLinks objects. */
    product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>
    /** Related Products */
    related_products?: Maybe<Array<Maybe<ProductInterface>>>
    sale?: Maybe<Scalars['Int']>
    /** A short description of the product. Its use depends on the theme. */
    short_description?: Maybe<ComplexTextValue>
    size?: Maybe<Scalars['Int']>
    /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
    sku?: Maybe<Scalars['String']>
    sleeve?: Maybe<Scalars['String']>
    /** The relative path to the small image, which is used on catalog pages. */
    small_image?: Maybe<ProductImage>
    /** The beginning date that a product has a special price. */
    special_from_date?: Maybe<Scalars['String']>
    /** The discounted price of the product. */
    special_price?: Maybe<Scalars['Float']>
    /** The end date that a product has a special price. */
    special_to_date?: Maybe<Scalars['String']>
    /** Stock status of the product */
    stock_status?: Maybe<ProductStockStatus>
    strap_bags?: Maybe<Scalars['String']>
    style_bags?: Maybe<Scalars['String']>
    style_bottom?: Maybe<Scalars['String']>
    style_general?: Maybe<Scalars['String']>
    /** The file name of a swatch image */
    swatch_image?: Maybe<Scalars['String']>
    /** The relative path to the product's thumbnail image. */
    thumbnail?: Maybe<ProductImage>
    /**
     * The price when tier pricing is in effect and the items purchased threshold has been reached.
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_price?: Maybe<Scalars['Float']>
    /**
     * An array of ProductTierPrices objects.
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>
    /**
     * One of simple, virtual, bundle, downloadable, grouped, or configurable.
     * @deprecated Use __typename instead.
     */
    type_id?: Maybe<Scalars['String']>
    /** Timestamp indicating when the product was updated. */
    updated_at?: Maybe<Scalars['String']>
    /** Upsell Products */
    upsell_products?: Maybe<Array<Maybe<ProductInterface>>>
    /** The part of the URL that identifies the product */
    url_key?: Maybe<Scalars['String']>
    /** @deprecated Use product's `canonical_url` or url rewrites instead */
    url_path?: Maybe<Scalars['String']>
    /** URL rewrites list */
    url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>
    /** The part of the product URL that is appended after the url key */
    url_suffix?: Maybe<Scalars['String']>
    /**
     * An array of websites in which the product is available.
     * @deprecated The field should not be used on the storefront.
     */
    websites?: Maybe<Array<Maybe<Website>>>
    /** The weight of the item, in units defined by the store. */
    weight?: Maybe<Scalars['Float']>
  }

/** ProductFilterInput is deprecated, use @ProductAttributeFilterInput instead. ProductFilterInput defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for. */
export type ProductFilterInput = {
  /** Category ID the product belongs to. */
  category_id?: Maybe<FilterTypeInput>
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<FilterTypeInput>
  /** Timestamp indicating when the product was created. */
  created_at?: Maybe<FilterTypeInput>
  /** The name of a custom layout. */
  custom_layout?: Maybe<FilterTypeInput>
  /** XML code that is applied as a layout update to the product page. */
  custom_layout_update?: Maybe<FilterTypeInput>
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<FilterTypeInput>
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<FilterTypeInput>
  /** Indicates whether additional attributes have been created for the product. */
  has_options?: Maybe<FilterTypeInput>
  /** The relative path to the main image on the product page. */
  image?: Maybe<FilterTypeInput>
  /** The label assigned to a product image. */
  image_label?: Maybe<FilterTypeInput>
  /** A number representing the product's manufacturer. */
  manufacturer?: Maybe<FilterTypeInput>
  /** The numeric maximal price of the product. Do not include the currency code. */
  max_price?: Maybe<FilterTypeInput>
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<FilterTypeInput>
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<FilterTypeInput>
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<FilterTypeInput>
  /** The numeric minimal price of the product. Do not include the currency code. */
  min_price?: Maybe<FilterTypeInput>
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<FilterTypeInput>
  /** The beginning date for new product listings, and determines if the product is featured as a new product. */
  news_from_date?: Maybe<FilterTypeInput>
  /** The end date for new product listings. */
  news_to_date?: Maybe<FilterTypeInput>
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<FilterTypeInput>
  /** The keyword required to perform a logical OR comparison. */
  or?: Maybe<ProductFilterInput>
  /** The price of an item. */
  price?: Maybe<FilterTypeInput>
  /** Indicates whether the product has required options. */
  required_options?: Maybe<FilterTypeInput>
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<FilterTypeInput>
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<FilterTypeInput>
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<FilterTypeInput>
  /** The label assigned to a product's small image. */
  small_image_label?: Maybe<FilterTypeInput>
  /** The beginning date that a product has a special price. */
  special_from_date?: Maybe<FilterTypeInput>
  /** The discounted price of the product. Do not include the currency code. */
  special_price?: Maybe<FilterTypeInput>
  /** The end date that a product has a special price. */
  special_to_date?: Maybe<FilterTypeInput>
  /** The file name of a swatch image */
  swatch_image?: Maybe<FilterTypeInput>
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<FilterTypeInput>
  /** The label assigned to a product's thumbnail image. */
  thumbnail_label?: Maybe<FilterTypeInput>
  /** The price when tier pricing is in effect and the items purchased threshold has been reached. */
  tier_price?: Maybe<FilterTypeInput>
  /** Timestamp indicating when the product was updated. */
  updated_at?: Maybe<FilterTypeInput>
  /** The part of the URL that identifies the product */
  url_key?: Maybe<FilterTypeInput>
  url_path?: Maybe<FilterTypeInput>
  /** The weight of the item, in units defined by the store. */
  weight?: Maybe<FilterTypeInput>
}

/** ProductSortInput is deprecated, use @ProductAttributeSortInput instead. ProductSortInput specifies the attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending order. */
export type ProductSortInput = {
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<SortEnum>
  /** Timestamp indicating when the product was created. */
  created_at?: Maybe<SortEnum>
  /** The name of a custom layout. */
  custom_layout?: Maybe<SortEnum>
  /** XML code that is applied as a layout update to the product page. */
  custom_layout_update?: Maybe<SortEnum>
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<SortEnum>
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<SortEnum>
  /** Indicates whether additional attributes have been created for the product. */
  has_options?: Maybe<SortEnum>
  /** The relative path to the main image on the product page. */
  image?: Maybe<SortEnum>
  /** The label assigned to a product image. */
  image_label?: Maybe<SortEnum>
  /** A number representing the product's manufacturer. */
  manufacturer?: Maybe<SortEnum>
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<SortEnum>
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<SortEnum>
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<SortEnum>
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<SortEnum>
  /** The beginning date for new product listings, and determines if the product is featured as a new product. */
  news_from_date?: Maybe<SortEnum>
  /** The end date for new product listings. */
  news_to_date?: Maybe<SortEnum>
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<SortEnum>
  /** The price of the item. */
  price?: Maybe<SortEnum>
  /** Indicates whether the product has required options. */
  required_options?: Maybe<SortEnum>
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<SortEnum>
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<SortEnum>
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<SortEnum>
  /** The label assigned to a product's small image. */
  small_image_label?: Maybe<SortEnum>
  /** The beginning date that a product has a special price. */
  special_from_date?: Maybe<SortEnum>
  /** The discounted price of the product. */
  special_price?: Maybe<SortEnum>
  /** The end date that a product has a special price. */
  special_to_date?: Maybe<SortEnum>
  /** The file name of a swatch image */
  swatch_image?: Maybe<SortEnum>
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<SortEnum>
  /** The label assigned to a product's thumbnail image. */
  thumbnail_label?: Maybe<SortEnum>
  /** The price when tier pricing is in effect and the items purchased threshold has been reached. */
  tier_price?: Maybe<SortEnum>
  /** Timestamp indicating when the product was updated. */
  updated_at?: Maybe<SortEnum>
  /** The part of the URL that identifies the product */
  url_key?: Maybe<SortEnum>
  url_path?: Maybe<SortEnum>
  /** The weight of the item, in units defined by the store. */
  weight?: Maybe<SortEnum>
}

export type LayerFilterItem = LayerFilterItemInterface & {
  __typename?: 'LayerFilterItem'
  /**
   * Count of items by filter.
   * @deprecated Use AggregationOption.count instead.
   */
  items_count?: Maybe<Scalars['Int']>
  /**
   * Filter label.
   * @deprecated Use AggregationOption.label instead.
   */
  label?: Maybe<Scalars['String']>
  /**
   * Value for filter request variable to be used in query.
   * @deprecated Use AggregationOption.value instead.
   */
  value_string?: Maybe<Scalars['String']>
}

/** Simple Cart Item */
export type SimpleCartItem = CartItemInterface & {
  __typename?: 'SimpleCartItem'
  customizable_options?: Maybe<Array<Maybe<SelectedCustomizableOption>>>
  id: Scalars['String']
  prices?: Maybe<CartItemPrices>
  product: ProductInterface
  quantity: Scalars['Float']
}

export type SelectedCustomizableOption = {
  __typename?: 'SelectedCustomizableOption'
  id: Scalars['Int']
  is_required: Scalars['Boolean']
  label: Scalars['String']
  sort_order: Scalars['Int']
  values: Array<Maybe<SelectedCustomizableOptionValue>>
}

export type SelectedCustomizableOptionValue = {
  __typename?: 'SelectedCustomizableOptionValue'
  id: Scalars['Int']
  label: Scalars['String']
  price: CartItemSelectedOptionValuePrice
  value: Scalars['String']
}

export type CartItemSelectedOptionValuePrice = {
  __typename?: 'CartItemSelectedOptionValuePrice'
  type: PriceTypeEnum
  units: Scalars['String']
  value: Scalars['Float']
}

/** Virtual Cart Item */
export type VirtualCartItem = CartItemInterface & {
  __typename?: 'VirtualCartItem'
  customizable_options?: Maybe<Array<Maybe<SelectedCustomizableOption>>>
  id: Scalars['String']
  prices?: Maybe<CartItemPrices>
  product: ProductInterface
  quantity: Scalars['Float']
}

/** Downloadable Cart Item */
export type DownloadableCartItem = CartItemInterface & {
  __typename?: 'DownloadableCartItem'
  customizable_options?: Maybe<Array<Maybe<SelectedCustomizableOption>>>
  id: Scalars['String']
  /** An array containing information about the links for the added to cart downloadable product */
  links?: Maybe<Array<Maybe<DownloadableProductLinks>>>
  prices?: Maybe<CartItemPrices>
  product: ProductInterface
  quantity: Scalars['Float']
  /** DownloadableProductSamples defines characteristics of a downloadable product */
  samples?: Maybe<Array<Maybe<DownloadableProductSamples>>>
}

/** DownloadableProductLinks defines characteristics of a downloadable product */
export type DownloadableProductLinks = {
  __typename?: 'DownloadableProductLinks'
  /** @deprecated This information should not be exposed on frontend */
  id?: Maybe<Scalars['Int']>
  /** @deprecated This information should not be exposed on frontend */
  is_shareable?: Maybe<Scalars['Boolean']>
  /** @deprecated `sample_url` serves to get the downloadable sample */
  link_type?: Maybe<DownloadableFileTypeEnum>
  /** @deprecated This information should not be exposed on frontend */
  number_of_downloads?: Maybe<Scalars['Int']>
  /** The price of the downloadable product */
  price?: Maybe<Scalars['Float']>
  /** @deprecated `sample_url` serves to get the downloadable sample */
  sample_file?: Maybe<Scalars['String']>
  /** @deprecated `sample_url` serves to get the downloadable sample */
  sample_type?: Maybe<DownloadableFileTypeEnum>
  /** URL to the downloadable sample */
  sample_url?: Maybe<Scalars['String']>
  /** A number indicating the sort order */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name of the link */
  title?: Maybe<Scalars['String']>
}

export type DownloadableFileTypeEnum = 'FILE' | 'URL'

/** DownloadableProductSamples defines characteristics of a downloadable product */
export type DownloadableProductSamples = {
  __typename?: 'DownloadableProductSamples'
  /** @deprecated This information should not be exposed on frontend */
  id?: Maybe<Scalars['Int']>
  /** @deprecated `sample_url` serves to get the downloadable sample */
  sample_file?: Maybe<Scalars['String']>
  /** @deprecated `sample_url` serves to get the downloadable sample */
  sample_type?: Maybe<DownloadableFileTypeEnum>
  /** URL to the downloadable sample */
  sample_url?: Maybe<Scalars['String']>
  /** A number indicating the sort order */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name of the sample */
  title?: Maybe<Scalars['String']>
}

/** DownloadableProduct defines a product that the customer downloads */
export type DownloadableProduct = ProductInterface &
  CustomizableProductInterface & {
    __typename?: 'DownloadableProduct'
    activity?: Maybe<Scalars['String']>
    /** The attribute set assigned to the product. */
    attribute_set_id?: Maybe<Scalars['Int']>
    /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled */
    canonical_url?: Maybe<Scalars['String']>
    /** The categories assigned to a product. */
    categories?: Maybe<Array<Maybe<CategoryInterface>>>
    category_gear?: Maybe<Scalars['String']>
    climate?: Maybe<Scalars['String']>
    collar?: Maybe<Scalars['String']>
    color?: Maybe<Scalars['String']>
    /** The product's country of origin. */
    country_of_manufacture?: Maybe<Scalars['String']>
    /** Timestamp indicating when the product was created. */
    created_at?: Maybe<Scalars['String']>
    /** Crosssell Products */
    crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>
    /** Detailed information about the product. The value can include simple HTML tags. */
    description?: Maybe<ComplexTextValue>
    /** An array containing information about the links for this downloadable product */
    downloadable_product_links?: Maybe<Array<Maybe<DownloadableProductLinks>>>
    /** An array containing information about samples of this downloadable product. */
    downloadable_product_samples?: Maybe<Array<Maybe<DownloadableProductSamples>>>
    eco_collection?: Maybe<Scalars['Int']>
    erin_recommends?: Maybe<Scalars['Int']>
    features_bags?: Maybe<Scalars['String']>
    format?: Maybe<Scalars['Int']>
    gender?: Maybe<Scalars['String']>
    /** Indicates whether a gift message is available. */
    gift_message_available?: Maybe<Scalars['String']>
    /** The ID number assigned to the product. */
    id?: Maybe<Scalars['Int']>
    /** The relative path to the main image on the product page. */
    image?: Maybe<ProductImage>
    /** A value of 1 indicates that each link in the array must be purchased separately */
    links_purchased_separately?: Maybe<Scalars['Int']>
    /** The heading above the list of downloadable products */
    links_title?: Maybe<Scalars['String']>
    /** A number representing the product's manufacturer. */
    manufacturer?: Maybe<Scalars['Int']>
    material?: Maybe<Scalars['String']>
    /** An array of Media Gallery objects. */
    media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>
    /**
     * An array of MediaGalleryEntry objects.
     * @deprecated Use product's `media_gallery` instead
     */
    media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>
    /** A brief overview of the product for search results listings, maximum 255 characters. */
    meta_description?: Maybe<Scalars['String']>
    /** A comma-separated list of keywords that are visible only to search engines. */
    meta_keyword?: Maybe<Scalars['String']>
    /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
    meta_title?: Maybe<Scalars['String']>
    /** The product name. Customers use this name to identify the product. */
    name?: Maybe<Scalars['String']>
    new?: Maybe<Scalars['Int']>
    /** The beginning date for new product listings, and determines if the product is featured as a new product. */
    new_from_date?: Maybe<Scalars['String']>
    /** The end date for new product listings. */
    new_to_date?: Maybe<Scalars['String']>
    /** Product stock only x left count */
    only_x_left_in_stock?: Maybe<Scalars['Float']>
    /** An array of options for a customizable product. */
    options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>
    /** If the product has multiple options, determines where they appear on the product page. */
    options_container?: Maybe<Scalars['String']>
    pattern?: Maybe<Scalars['String']>
    performance_fabric?: Maybe<Scalars['Int']>
    /**
     * A ProductPrices object, indicating the price of an item.
     * @deprecated Use price_range for product price information.
     */
    price?: Maybe<ProductPrices>
    /** A PriceRange object, indicating the range of prices for the product */
    price_range: PriceRange
    /** An array of TierPrice objects. */
    price_tiers?: Maybe<Array<Maybe<TierPrice>>>
    /** An array of ProductLinks objects. */
    product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>
    /** Related Products */
    related_products?: Maybe<Array<Maybe<ProductInterface>>>
    sale?: Maybe<Scalars['Int']>
    /** A short description of the product. Its use depends on the theme. */
    short_description?: Maybe<ComplexTextValue>
    size?: Maybe<Scalars['Int']>
    /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
    sku?: Maybe<Scalars['String']>
    sleeve?: Maybe<Scalars['String']>
    /** The relative path to the small image, which is used on catalog pages. */
    small_image?: Maybe<ProductImage>
    /** The beginning date that a product has a special price. */
    special_from_date?: Maybe<Scalars['String']>
    /** The discounted price of the product. */
    special_price?: Maybe<Scalars['Float']>
    /** The end date that a product has a special price. */
    special_to_date?: Maybe<Scalars['String']>
    /** Stock status of the product */
    stock_status?: Maybe<ProductStockStatus>
    strap_bags?: Maybe<Scalars['String']>
    style_bags?: Maybe<Scalars['String']>
    style_bottom?: Maybe<Scalars['String']>
    style_general?: Maybe<Scalars['String']>
    /** The file name of a swatch image */
    swatch_image?: Maybe<Scalars['String']>
    /** The relative path to the product's thumbnail image. */
    thumbnail?: Maybe<ProductImage>
    /**
     * The price when tier pricing is in effect and the items purchased threshold has been reached.
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_price?: Maybe<Scalars['Float']>
    /**
     * An array of ProductTierPrices objects.
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>
    /**
     * One of simple, virtual, bundle, downloadable, grouped, or configurable.
     * @deprecated Use __typename instead.
     */
    type_id?: Maybe<Scalars['String']>
    /** Timestamp indicating when the product was updated. */
    updated_at?: Maybe<Scalars['String']>
    /** Upsell Products */
    upsell_products?: Maybe<Array<Maybe<ProductInterface>>>
    /** The part of the URL that identifies the product */
    url_key?: Maybe<Scalars['String']>
    /** @deprecated Use product's `canonical_url` or url rewrites instead */
    url_path?: Maybe<Scalars['String']>
    /** URL rewrites list */
    url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>
    /** The part of the product URL that is appended after the url key */
    url_suffix?: Maybe<Scalars['String']>
    /**
     * An array of websites in which the product is available.
     * @deprecated The field should not be used on the storefront.
     */
    websites?: Maybe<Array<Maybe<Website>>>
  }

export type BundleCartItem = CartItemInterface & {
  __typename?: 'BundleCartItem'
  bundle_options: Array<Maybe<SelectedBundleOption>>
  customizable_options: Array<Maybe<SelectedCustomizableOption>>
  id: Scalars['String']
  prices?: Maybe<CartItemPrices>
  product: ProductInterface
  quantity: Scalars['Float']
}

export type SelectedBundleOption = {
  __typename?: 'SelectedBundleOption'
  id: Scalars['Int']
  label: Scalars['String']
  type: Scalars['String']
  values: Array<Maybe<SelectedBundleOptionValue>>
}

export type SelectedBundleOptionValue = {
  __typename?: 'SelectedBundleOptionValue'
  id: Scalars['Int']
  label: Scalars['String']
  price: Scalars['Float']
  quantity: Scalars['Float']
}

/** BundleItem defines an individual item in a bundle product. */
export type BundleItem = {
  __typename?: 'BundleItem'
  /** An ID assigned to each type of item in a bundle product. */
  option_id?: Maybe<Scalars['Int']>
  /** An array of additional options for this bundle item. */
  options?: Maybe<Array<Maybe<BundleItemOption>>>
  /** he relative position of this item compared to the other bundle items. */
  position?: Maybe<Scalars['Int']>
  /** Indicates whether the item must be included in the bundle. */
  required?: Maybe<Scalars['Boolean']>
  /** The SKU of the bundle product. */
  sku?: Maybe<Scalars['String']>
  /** The display name of the item. */
  title?: Maybe<Scalars['String']>
  /** The input type that the customer uses to select the item. Examples include radio button and checkbox. */
  type?: Maybe<Scalars['String']>
}

/** BundleItemOption defines characteristics and options for a specific bundle item. */
export type BundleItemOption = {
  __typename?: 'BundleItemOption'
  /** Indicates whether the customer can change the number of items for this option. */
  can_change_quantity?: Maybe<Scalars['Boolean']>
  /** The ID assigned to the bundled item option. */
  id?: Maybe<Scalars['Int']>
  /** Indicates whether this option is the default option. */
  is_default?: Maybe<Scalars['Boolean']>
  /** The text that identifies the bundled item option. */
  label?: Maybe<Scalars['String']>
  /** When a bundle item contains multiple options, the relative position of this option compared to the other options. */
  position?: Maybe<Scalars['Int']>
  /** The price of the selected option. */
  price?: Maybe<Scalars['Float']>
  /** One of FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>
  /** Contains details about this product option. */
  product?: Maybe<ProductInterface>
  /**
   * Indicates the quantity of this specific bundle item.
   * @deprecated The `qty` is deprecated. Use `quantity` instead.
   */
  qty?: Maybe<Scalars['Float']>
  /** Indicates the quantity of this specific bundle item. */
  quantity?: Maybe<Scalars['Float']>
}

/** BundleProduct defines basic features of a bundle product and contains multiple BundleItems. */
export type BundleProduct = ProductInterface &
  PhysicalProductInterface &
  CustomizableProductInterface & {
    __typename?: 'BundleProduct'
    activity?: Maybe<Scalars['String']>
    /** The attribute set assigned to the product. */
    attribute_set_id?: Maybe<Scalars['Int']>
    /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled */
    canonical_url?: Maybe<Scalars['String']>
    /** The categories assigned to a product. */
    categories?: Maybe<Array<Maybe<CategoryInterface>>>
    category_gear?: Maybe<Scalars['String']>
    climate?: Maybe<Scalars['String']>
    collar?: Maybe<Scalars['String']>
    color?: Maybe<Scalars['String']>
    /** The product's country of origin. */
    country_of_manufacture?: Maybe<Scalars['String']>
    /** Timestamp indicating when the product was created. */
    created_at?: Maybe<Scalars['String']>
    /** Crosssell Products */
    crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>
    /** Detailed information about the product. The value can include simple HTML tags. */
    description?: Maybe<ComplexTextValue>
    /** Indicates whether the bundle product has a dynamic price. */
    dynamic_price?: Maybe<Scalars['Boolean']>
    /** Indicates whether the bundle product has a dynamic SK. */
    dynamic_sku?: Maybe<Scalars['Boolean']>
    /** Indicates whether the bundle product has a dynamically calculated weight. */
    dynamic_weight?: Maybe<Scalars['Boolean']>
    eco_collection?: Maybe<Scalars['Int']>
    erin_recommends?: Maybe<Scalars['Int']>
    features_bags?: Maybe<Scalars['String']>
    format?: Maybe<Scalars['Int']>
    gender?: Maybe<Scalars['String']>
    /** Indicates whether a gift message is available. */
    gift_message_available?: Maybe<Scalars['String']>
    /** The ID number assigned to the product. */
    id?: Maybe<Scalars['Int']>
    /** The relative path to the main image on the product page. */
    image?: Maybe<ProductImage>
    /** An array containing information about individual bundle items. */
    items?: Maybe<Array<Maybe<BundleItem>>>
    /** A number representing the product's manufacturer. */
    manufacturer?: Maybe<Scalars['Int']>
    material?: Maybe<Scalars['String']>
    /** An array of Media Gallery objects. */
    media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>
    /**
     * An array of MediaGalleryEntry objects.
     * @deprecated Use product's `media_gallery` instead
     */
    media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>
    /** A brief overview of the product for search results listings, maximum 255 characters. */
    meta_description?: Maybe<Scalars['String']>
    /** A comma-separated list of keywords that are visible only to search engines. */
    meta_keyword?: Maybe<Scalars['String']>
    /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
    meta_title?: Maybe<Scalars['String']>
    /** The product name. Customers use this name to identify the product. */
    name?: Maybe<Scalars['String']>
    new?: Maybe<Scalars['Int']>
    /** The beginning date for new product listings, and determines if the product is featured as a new product. */
    new_from_date?: Maybe<Scalars['String']>
    /** The end date for new product listings. */
    new_to_date?: Maybe<Scalars['String']>
    /** Product stock only x left count */
    only_x_left_in_stock?: Maybe<Scalars['Float']>
    /** An array of options for a customizable product. */
    options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>
    /** If the product has multiple options, determines where they appear on the product page. */
    options_container?: Maybe<Scalars['String']>
    pattern?: Maybe<Scalars['String']>
    performance_fabric?: Maybe<Scalars['Int']>
    /**
     * A ProductPrices object, indicating the price of an item.
     * @deprecated Use price_range for product price information.
     */
    price?: Maybe<ProductPrices>
    /** A PriceRange object, indicating the range of prices for the product */
    price_range: PriceRange
    /** An array of TierPrice objects. */
    price_tiers?: Maybe<Array<Maybe<TierPrice>>>
    /** One of PRICE_RANGE or AS_LOW_AS. */
    price_view?: Maybe<PriceViewEnum>
    /** An array of ProductLinks objects. */
    product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>
    /** Related Products */
    related_products?: Maybe<Array<Maybe<ProductInterface>>>
    sale?: Maybe<Scalars['Int']>
    /** Indicates whether to ship bundle items together or individually. */
    ship_bundle_items?: Maybe<ShipBundleItemsEnum>
    /** A short description of the product. Its use depends on the theme. */
    short_description?: Maybe<ComplexTextValue>
    size?: Maybe<Scalars['Int']>
    /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
    sku?: Maybe<Scalars['String']>
    sleeve?: Maybe<Scalars['String']>
    /** The relative path to the small image, which is used on catalog pages. */
    small_image?: Maybe<ProductImage>
    /** The beginning date that a product has a special price. */
    special_from_date?: Maybe<Scalars['String']>
    /** The discounted price of the product. */
    special_price?: Maybe<Scalars['Float']>
    /** The end date that a product has a special price. */
    special_to_date?: Maybe<Scalars['String']>
    /** Stock status of the product */
    stock_status?: Maybe<ProductStockStatus>
    strap_bags?: Maybe<Scalars['String']>
    style_bags?: Maybe<Scalars['String']>
    style_bottom?: Maybe<Scalars['String']>
    style_general?: Maybe<Scalars['String']>
    /** The file name of a swatch image */
    swatch_image?: Maybe<Scalars['String']>
    /** The relative path to the product's thumbnail image. */
    thumbnail?: Maybe<ProductImage>
    /**
     * The price when tier pricing is in effect and the items purchased threshold has been reached.
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_price?: Maybe<Scalars['Float']>
    /**
     * An array of ProductTierPrices objects.
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>
    /**
     * One of simple, virtual, bundle, downloadable, grouped, or configurable.
     * @deprecated Use __typename instead.
     */
    type_id?: Maybe<Scalars['String']>
    /** Timestamp indicating when the product was updated. */
    updated_at?: Maybe<Scalars['String']>
    /** Upsell Products */
    upsell_products?: Maybe<Array<Maybe<ProductInterface>>>
    /** The part of the URL that identifies the product */
    url_key?: Maybe<Scalars['String']>
    /** @deprecated Use product's `canonical_url` or url rewrites instead */
    url_path?: Maybe<Scalars['String']>
    /** URL rewrites list */
    url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>
    /** The part of the product URL that is appended after the url key */
    url_suffix?: Maybe<Scalars['String']>
    /**
     * An array of websites in which the product is available.
     * @deprecated The field should not be used on the storefront.
     */
    websites?: Maybe<Array<Maybe<Website>>>
    /** The weight of the item, in units defined by the store. */
    weight?: Maybe<Scalars['Float']>
  }

/** This enumeration defines whether a bundle product's price is displayed as the lowest possible value or as a range. */
export type PriceViewEnum = 'PRICE_RANGE' | 'AS_LOW_AS'

/** This enumeration defines whether bundle items must be shipped together. */
export type ShipBundleItemsEnum = 'TOGETHER' | 'SEPARATELY'

/** GroupedProduct defines a grouped product */
export type GroupedProduct = ProductInterface &
  PhysicalProductInterface & {
    __typename?: 'GroupedProduct'
    activity?: Maybe<Scalars['String']>
    /** The attribute set assigned to the product. */
    attribute_set_id?: Maybe<Scalars['Int']>
    /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled */
    canonical_url?: Maybe<Scalars['String']>
    /** The categories assigned to a product. */
    categories?: Maybe<Array<Maybe<CategoryInterface>>>
    category_gear?: Maybe<Scalars['String']>
    climate?: Maybe<Scalars['String']>
    collar?: Maybe<Scalars['String']>
    color?: Maybe<Scalars['String']>
    /** The product's country of origin. */
    country_of_manufacture?: Maybe<Scalars['String']>
    /** Timestamp indicating when the product was created. */
    created_at?: Maybe<Scalars['String']>
    /** Crosssell Products */
    crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>
    /** Detailed information about the product. The value can include simple HTML tags. */
    description?: Maybe<ComplexTextValue>
    eco_collection?: Maybe<Scalars['Int']>
    erin_recommends?: Maybe<Scalars['Int']>
    features_bags?: Maybe<Scalars['String']>
    format?: Maybe<Scalars['Int']>
    gender?: Maybe<Scalars['String']>
    /** Indicates whether a gift message is available. */
    gift_message_available?: Maybe<Scalars['String']>
    /** The ID number assigned to the product. */
    id?: Maybe<Scalars['Int']>
    /** The relative path to the main image on the product page. */
    image?: Maybe<ProductImage>
    /** An array containing grouped product items */
    items?: Maybe<Array<Maybe<GroupedProductItem>>>
    /** A number representing the product's manufacturer. */
    manufacturer?: Maybe<Scalars['Int']>
    material?: Maybe<Scalars['String']>
    /** An array of Media Gallery objects. */
    media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>
    /**
     * An array of MediaGalleryEntry objects.
     * @deprecated Use product's `media_gallery` instead
     */
    media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>
    /** A brief overview of the product for search results listings, maximum 255 characters. */
    meta_description?: Maybe<Scalars['String']>
    /** A comma-separated list of keywords that are visible only to search engines. */
    meta_keyword?: Maybe<Scalars['String']>
    /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
    meta_title?: Maybe<Scalars['String']>
    /** The product name. Customers use this name to identify the product. */
    name?: Maybe<Scalars['String']>
    new?: Maybe<Scalars['Int']>
    /** The beginning date for new product listings, and determines if the product is featured as a new product. */
    new_from_date?: Maybe<Scalars['String']>
    /** The end date for new product listings. */
    new_to_date?: Maybe<Scalars['String']>
    /** Product stock only x left count */
    only_x_left_in_stock?: Maybe<Scalars['Float']>
    /** If the product has multiple options, determines where they appear on the product page. */
    options_container?: Maybe<Scalars['String']>
    pattern?: Maybe<Scalars['String']>
    performance_fabric?: Maybe<Scalars['Int']>
    /**
     * A ProductPrices object, indicating the price of an item.
     * @deprecated Use price_range for product price information.
     */
    price?: Maybe<ProductPrices>
    /** A PriceRange object, indicating the range of prices for the product */
    price_range: PriceRange
    /** An array of TierPrice objects. */
    price_tiers?: Maybe<Array<Maybe<TierPrice>>>
    /** An array of ProductLinks objects. */
    product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>
    /** Related Products */
    related_products?: Maybe<Array<Maybe<ProductInterface>>>
    sale?: Maybe<Scalars['Int']>
    /** A short description of the product. Its use depends on the theme. */
    short_description?: Maybe<ComplexTextValue>
    size?: Maybe<Scalars['Int']>
    /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
    sku?: Maybe<Scalars['String']>
    sleeve?: Maybe<Scalars['String']>
    /** The relative path to the small image, which is used on catalog pages. */
    small_image?: Maybe<ProductImage>
    /** The beginning date that a product has a special price. */
    special_from_date?: Maybe<Scalars['String']>
    /** The discounted price of the product. */
    special_price?: Maybe<Scalars['Float']>
    /** The end date that a product has a special price. */
    special_to_date?: Maybe<Scalars['String']>
    /** Stock status of the product */
    stock_status?: Maybe<ProductStockStatus>
    strap_bags?: Maybe<Scalars['String']>
    style_bags?: Maybe<Scalars['String']>
    style_bottom?: Maybe<Scalars['String']>
    style_general?: Maybe<Scalars['String']>
    /** The file name of a swatch image */
    swatch_image?: Maybe<Scalars['String']>
    /** The relative path to the product's thumbnail image. */
    thumbnail?: Maybe<ProductImage>
    /**
     * The price when tier pricing is in effect and the items purchased threshold has been reached.
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_price?: Maybe<Scalars['Float']>
    /**
     * An array of ProductTierPrices objects.
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>
    /**
     * One of simple, virtual, bundle, downloadable, grouped, or configurable.
     * @deprecated Use __typename instead.
     */
    type_id?: Maybe<Scalars['String']>
    /** Timestamp indicating when the product was updated. */
    updated_at?: Maybe<Scalars['String']>
    /** Upsell Products */
    upsell_products?: Maybe<Array<Maybe<ProductInterface>>>
    /** The part of the URL that identifies the product */
    url_key?: Maybe<Scalars['String']>
    /** @deprecated Use product's `canonical_url` or url rewrites instead */
    url_path?: Maybe<Scalars['String']>
    /** URL rewrites list */
    url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>
    /** The part of the product URL that is appended after the url key */
    url_suffix?: Maybe<Scalars['String']>
    /**
     * An array of websites in which the product is available.
     * @deprecated The field should not be used on the storefront.
     */
    websites?: Maybe<Array<Maybe<Website>>>
    /** The weight of the item, in units defined by the store. */
    weight?: Maybe<Scalars['Float']>
  }

/** GroupedProductItem contains information about an individual grouped product item */
export type GroupedProductItem = {
  __typename?: 'GroupedProductItem'
  /** The relative position of this item compared to the other group items */
  position?: Maybe<Scalars['Int']>
  /** The ProductInterface object, which contains details about this product option */
  product?: Maybe<ProductInterface>
  /** The quantity of this grouped product item */
  qty?: Maybe<Scalars['Float']>
}

/** Deprecated: use type `PaypalExpressTokenOutput` instead */
export type PaypalExpressToken = {
  __typename?: 'PaypalExpressToken'
  /**
   * A set of URLs that allow the buyer to authorize payment and adjust checkout details
   * @deprecated Use field `paypal_urls` of type `PaypalExpressTokenOutput` instead
   */
  paypal_urls?: Maybe<PaypalExpressUrlList>
  /**
   * The token returned by PayPal
   * @deprecated Use field `token` of type `PaypalExpressTokenOutput` instead
   */
  token?: Maybe<Scalars['String']>
}

/** Contains the secure information used to authorize transaction. Applies to Payflow Pro and Payments Pro payment methods. */
export type PayflowProToken = {
  __typename?: 'PayflowProToken'
  response_message: Scalars['String']
  result: Scalars['Int']
  result_code: Scalars['Int']
  secure_token: Scalars['String']
  secure_token_id: Scalars['String']
}

/** ConfigurableProduct defines basic features of a configurable product and its simple product variants */
export type ConfigurableProduct = ProductInterface &
  PhysicalProductInterface &
  CustomizableProductInterface & {
    __typename?: 'ConfigurableProduct'
    activity?: Maybe<Scalars['String']>
    /** The attribute set assigned to the product. */
    attribute_set_id?: Maybe<Scalars['Int']>
    /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled */
    canonical_url?: Maybe<Scalars['String']>
    /** The categories assigned to a product. */
    categories?: Maybe<Array<Maybe<CategoryInterface>>>
    category_gear?: Maybe<Scalars['String']>
    climate?: Maybe<Scalars['String']>
    collar?: Maybe<Scalars['String']>
    color?: Maybe<Scalars['String']>
    /** An array of linked simple product items */
    configurable_options?: Maybe<Array<Maybe<ConfigurableProductOptions>>>
    /** The product's country of origin. */
    country_of_manufacture?: Maybe<Scalars['String']>
    /** Timestamp indicating when the product was created. */
    created_at?: Maybe<Scalars['String']>
    /** Crosssell Products */
    crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>
    /** Detailed information about the product. The value can include simple HTML tags. */
    description?: Maybe<ComplexTextValue>
    eco_collection?: Maybe<Scalars['Int']>
    erin_recommends?: Maybe<Scalars['Int']>
    features_bags?: Maybe<Scalars['String']>
    format?: Maybe<Scalars['Int']>
    gender?: Maybe<Scalars['String']>
    /** Indicates whether a gift message is available. */
    gift_message_available?: Maybe<Scalars['String']>
    /** The ID number assigned to the product. */
    id?: Maybe<Scalars['Int']>
    /** The relative path to the main image on the product page. */
    image?: Maybe<ProductImage>
    /** A number representing the product's manufacturer. */
    manufacturer?: Maybe<Scalars['Int']>
    material?: Maybe<Scalars['String']>
    /** An array of Media Gallery objects. */
    media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>
    /**
     * An array of MediaGalleryEntry objects.
     * @deprecated Use product's `media_gallery` instead
     */
    media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>
    /** A brief overview of the product for search results listings, maximum 255 characters. */
    meta_description?: Maybe<Scalars['String']>
    /** A comma-separated list of keywords that are visible only to search engines. */
    meta_keyword?: Maybe<Scalars['String']>
    /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
    meta_title?: Maybe<Scalars['String']>
    /** The product name. Customers use this name to identify the product. */
    name?: Maybe<Scalars['String']>
    new?: Maybe<Scalars['Int']>
    /** The beginning date for new product listings, and determines if the product is featured as a new product. */
    new_from_date?: Maybe<Scalars['String']>
    /** The end date for new product listings. */
    new_to_date?: Maybe<Scalars['String']>
    /** Product stock only x left count */
    only_x_left_in_stock?: Maybe<Scalars['Float']>
    /** An array of options for a customizable product. */
    options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>
    /** If the product has multiple options, determines where they appear on the product page. */
    options_container?: Maybe<Scalars['String']>
    pattern?: Maybe<Scalars['String']>
    performance_fabric?: Maybe<Scalars['Int']>
    /**
     * A ProductPrices object, indicating the price of an item.
     * @deprecated Use price_range for product price information.
     */
    price?: Maybe<ProductPrices>
    /** A PriceRange object, indicating the range of prices for the product */
    price_range: PriceRange
    /** An array of TierPrice objects. */
    price_tiers?: Maybe<Array<Maybe<TierPrice>>>
    /** An array of ProductLinks objects. */
    product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>
    /** Related Products */
    related_products?: Maybe<Array<Maybe<ProductInterface>>>
    sale?: Maybe<Scalars['Int']>
    /** A short description of the product. Its use depends on the theme. */
    short_description?: Maybe<ComplexTextValue>
    size?: Maybe<Scalars['Int']>
    /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
    sku?: Maybe<Scalars['String']>
    sleeve?: Maybe<Scalars['String']>
    /** The relative path to the small image, which is used on catalog pages. */
    small_image?: Maybe<ProductImage>
    /** The beginning date that a product has a special price. */
    special_from_date?: Maybe<Scalars['String']>
    /** The discounted price of the product. */
    special_price?: Maybe<Scalars['Float']>
    /** The end date that a product has a special price. */
    special_to_date?: Maybe<Scalars['String']>
    /** Stock status of the product */
    stock_status?: Maybe<ProductStockStatus>
    strap_bags?: Maybe<Scalars['String']>
    style_bags?: Maybe<Scalars['String']>
    style_bottom?: Maybe<Scalars['String']>
    style_general?: Maybe<Scalars['String']>
    /** The file name of a swatch image */
    swatch_image?: Maybe<Scalars['String']>
    /** The relative path to the product's thumbnail image. */
    thumbnail?: Maybe<ProductImage>
    /**
     * The price when tier pricing is in effect and the items purchased threshold has been reached.
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_price?: Maybe<Scalars['Float']>
    /**
     * An array of ProductTierPrices objects.
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>
    /**
     * One of simple, virtual, bundle, downloadable, grouped, or configurable.
     * @deprecated Use __typename instead.
     */
    type_id?: Maybe<Scalars['String']>
    /** Timestamp indicating when the product was updated. */
    updated_at?: Maybe<Scalars['String']>
    /** Upsell Products */
    upsell_products?: Maybe<Array<Maybe<ProductInterface>>>
    /** The part of the URL that identifies the product */
    url_key?: Maybe<Scalars['String']>
    /** @deprecated Use product's `canonical_url` or url rewrites instead */
    url_path?: Maybe<Scalars['String']>
    /** URL rewrites list */
    url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>
    /** The part of the product URL that is appended after the url key */
    url_suffix?: Maybe<Scalars['String']>
    /** An array of variants of products */
    variants?: Maybe<Array<Maybe<ConfigurableVariant>>>
    /**
     * An array of websites in which the product is available.
     * @deprecated The field should not be used on the storefront.
     */
    websites?: Maybe<Array<Maybe<Website>>>
    /** The weight of the item, in units defined by the store. */
    weight?: Maybe<Scalars['Float']>
  }

/** ConfigurableProductOptions defines configurable attributes for the specified product */
export type ConfigurableProductOptions = {
  __typename?: 'ConfigurableProductOptions'
  /** A string that identifies the attribute */
  attribute_code?: Maybe<Scalars['String']>
  /**
   * The ID assigned to the attribute
   * @deprecated Use attribute_id_v2 instead
   */
  attribute_id?: Maybe<Scalars['String']>
  /** The ID assigned to the attribute */
  attribute_id_v2?: Maybe<Scalars['Int']>
  /** The configurable option ID number assigned by the system */
  id?: Maybe<Scalars['Int']>
  /** A string that describes the configurable product option, which is displayed on the UI */
  label?: Maybe<Scalars['String']>
  /** A number that indicates the order in which the attribute is displayed */
  position?: Maybe<Scalars['Int']>
  /** This is the same as a product's id field */
  product_id?: Maybe<Scalars['Int']>
  /** Indicates whether the option is the default */
  use_default?: Maybe<Scalars['Boolean']>
  /** An array that defines the value_index codes assigned to the configurable product */
  values?: Maybe<Array<Maybe<ConfigurableProductOptionsValues>>>
}

/** ConfigurableProductOptionsValues contains the index number assigned to a configurable product option */
export type ConfigurableProductOptionsValues = {
  __typename?: 'ConfigurableProductOptionsValues'
  /** The label of the product on the default store */
  default_label?: Maybe<Scalars['String']>
  /** The label of the product */
  label?: Maybe<Scalars['String']>
  /** The label of the product on the current store */
  store_label?: Maybe<Scalars['String']>
  /** Swatch data for configurable product option */
  swatch_data?: Maybe<SwatchDataInterface>
  /** Indicates whether to use the default_label */
  use_default_value?: Maybe<Scalars['Boolean']>
  /** A unique index number assigned to the configurable product option */
  value_index?: Maybe<Scalars['Int']>
}

export type SwatchDataInterface = {
  /** Value of swatch item (HEX color code, image link or textual value) */
  value?: Maybe<Scalars['String']>
}

/** An array containing all the simple product variants of a configurable product */
export type ConfigurableVariant = {
  __typename?: 'ConfigurableVariant'
  attributes?: Maybe<Array<Maybe<ConfigurableAttributeOption>>>
  product?: Maybe<SimpleProduct>
}

/** ConfigurableAttributeOption contains the value_index (and other related information) assigned to a configurable product option */
export type ConfigurableAttributeOption = {
  __typename?: 'ConfigurableAttributeOption'
  /** The ID assigned to the attribute */
  code?: Maybe<Scalars['String']>
  /** A string that describes the configurable attribute option */
  label?: Maybe<Scalars['String']>
  /** A unique index number assigned to the configurable product option */
  value_index?: Maybe<Scalars['Int']>
}

export type ConfigurableCartItem = CartItemInterface & {
  __typename?: 'ConfigurableCartItem'
  configurable_options: Array<Maybe<SelectedConfigurableOption>>
  customizable_options: Array<Maybe<SelectedCustomizableOption>>
  id: Scalars['String']
  prices?: Maybe<CartItemPrices>
  product: ProductInterface
  quantity: Scalars['Float']
}

export type SelectedConfigurableOption = {
  __typename?: 'SelectedConfigurableOption'
  id: Scalars['Int']
  option_label: Scalars['String']
  value_id: Scalars['Int']
  value_label: Scalars['String']
}

export type SwatchLayerFilterItemInterface = {
  /** Data required to render swatch filter item */
  swatch_data?: Maybe<SwatchData>
}

export type SwatchData = {
  __typename?: 'SwatchData'
  /** Type of swatch filter item: 1 - text, 2 - image */
  type?: Maybe<Scalars['String']>
  /** Value for swatch item (text or image link) */
  value?: Maybe<Scalars['String']>
}

export type SwatchLayerFilterItem = LayerFilterItemInterface &
  SwatchLayerFilterItemInterface & {
    __typename?: 'SwatchLayerFilterItem'
    /**
     * Count of items by filter.
     * @deprecated Use AggregationOption.count instead.
     */
    items_count?: Maybe<Scalars['Int']>
    /**
     * Filter label.
     * @deprecated Use AggregationOption.label instead.
     */
    label?: Maybe<Scalars['String']>
    /** Data required to render swatch filter item */
    swatch_data?: Maybe<SwatchData>
    /**
     * Value for filter request variable to be used in query.
     * @deprecated Use AggregationOption.value instead.
     */
    value_string?: Maybe<Scalars['String']>
  }

export type ImageSwatchData = SwatchDataInterface & {
  __typename?: 'ImageSwatchData'
  /** Thumbnail swatch image URL */
  thumbnail?: Maybe<Scalars['String']>
  /** Value of swatch item (HEX color code, image link or textual value) */
  value?: Maybe<Scalars['String']>
}

export type TextSwatchData = SwatchDataInterface & {
  __typename?: 'TextSwatchData'
  /** Value of swatch item (HEX color code, image link or textual value) */
  value?: Maybe<Scalars['String']>
}

export type ColorSwatchData = SwatchDataInterface & {
  __typename?: 'ColorSwatchData'
  /** Value of swatch item (HEX color code, image link or textual value) */
  value?: Maybe<Scalars['String']>
}

export type HistoryStatePage = {
  __typename?: 'HistoryStatePage'
  href: Scalars['String']
  as: Scalars['String']
  x: Scalars['Int']
  y: Scalars['Int']
  title: Scalars['String']
}

export type Direction = 'BACK' | 'FORWARD'

export type Phase = 'LOADING' | 'LOCATION_CHANGED' | 'REGISTERED'

export type HistoryState = {
  __typename?: 'HistoryState'
  idx: Scalars['Int']
  pages: Array<HistoryStatePage>
  direction: Direction
  phase: Phase
}
