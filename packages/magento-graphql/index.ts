// Do not edit this file: autogenerated by graphql-code-generator
export type Maybe<T> = T | null
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] }
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> }
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> }
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  /**
   * A date string, such as 2007-12-03 (YYYY-MM-DD), compliant with ISO 8601 standard for
   * representation of dates using the Gregorian calendar.
   */
  Date: any
  /**
   * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the date-timeformat
   * outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representationof
   * dates and times using the Gregorian calendar.
   */
  DateTime: any
  Hex: any
  /** Raw JSON value */
  Json: any
  /**
   * The Long scalar type represents non-fractional signed whole numeric values. Long can represent
   * values between -(2^63) and 2^63 - 1.
   */
  Long: any
  RGBAHue: any
  RGBATransparency: any
  /** Slate-compatible RichText AST */
  RichTextAST: any
}

export type Query = {
  __typename?: 'Query'
  /** Get a list of available store views and their config information. */
  availableStores?: Maybe<Array<Maybe<StoreConfig>>>
  /** Returns information about shopping cart */
  cart?: Maybe<Cart>
  categories?: Maybe<CategoryResult>
  /**
   * The category query searches for categories that match the criteria specified in the search and
   * filter attributes.
   *
   * @deprecated Use 'categoryList' query instead of 'category' query
   */
  category?: Maybe<CategoryTree>
  /** Returns an array of categories based on the specified filters. */
  categoryList?: Maybe<Array<Maybe<CategoryTree>>>
  /** The Checkout Agreements information */
  checkoutAgreements?: Maybe<Array<Maybe<CheckoutAgreement>>>
  /** The CMS block query returns information about CMS blocks */
  cmsBlocks?: Maybe<CmsBlocks>
  /** The CMS page query returns information about a CMS page */
  cmsPage?: Maybe<CmsPage>
  /** Return products that have been added to the specified compare list */
  compareList?: Maybe<CompareList>
  /** The countries query provides information for all countries. */
  countries?: Maybe<Array<Maybe<Country>>>
  /** The countries query provides information for a single country. */
  country?: Maybe<Country>
  /** The currency query returns information about store currency. */
  currency?: Maybe<Currency>
  /** The customAttributeMetadata query returns the attribute type, given an attribute code and entity type */
  customAttributeMetadata?: Maybe<CustomAttributeMetadata>
  /** The customer query returns information about a customer account */
  customer?: Maybe<Customer>
  /** Returns information about the customer shopping cart */
  customerCart: Cart
  /** The query returns the contents of a customer's downloadable products */
  customerDownloadableProducts?: Maybe<CustomerDownloadableProducts>
  /** @deprecated Use orders from customer instead */
  customerOrders?: Maybe<CustomerOrders>
  /** Return a list of customer payment tokens */
  customerPaymentTokens?: Maybe<CustomerPaymentTokens>
  customerToken?: Maybe<CustomerToken>
  /** Retrieve a single footer */
  footer?: Maybe<Footer>
  /** Retrieve secure PayPal url for Payments Pro Hosted Solution transaction. */
  getHostedProUrl?: Maybe<HostedProUrl>
  /**
   * Retrieve payment credentials for transaction. Use this query for Payflow Link and Payments
   * Advanced payment methods.
   */
  getPayflowLinkToken?: Maybe<PayflowLinkToken>
  historyState: HistoryState
  isEmailAvailable?: Maybe<IsEmailAvailableOutput>
  mollieCustomerOrder?: Maybe<CustomerOrder>
  /** Retrieve multiple pages */
  pages: Array<Page>
  /** Retrieve multiple pages using the Relay connection interface */
  pagesConnection: PageConnection
  /** The pickup locations query searches for locations that match the search request requirements. */
  pickupLocations?: Maybe<PickupLocations>
  /** Retrieves metadata required by clients to render the Reviews section. */
  productReviewRatingsMetadata: ProductReviewRatingsMetadata
  /** Retrieve multiple productpages */
  productpages: Array<Product>
  /**
   * The products query searches for products that match the criteria specified in the search and
   * filter attributes.
   */
  products?: Maybe<Products>
  /** The store config query */
  storeConfig?: Maybe<StoreConfig>
  /**
   * The urlResolver query returns the relative URL for a specified product, category or CMS page,
   * using as input a url_key appended by the url_suffix, if one exists
   */
  urlResolver?: Maybe<EntityUrl>
  /** Retrieve a single usps */
  usps?: Maybe<Usps>
  /**
   * The wishlist query returns the contents of a customer's wish list
   *
   * @deprecated Moved under `Customer` `wishlist`
   */
  wishlist?: Maybe<WishlistOutput>
}

export type QueryAvailableStoresArgs = {
  useCurrentGroup?: Maybe<Scalars['Boolean']>
}

export type QueryCartArgs = {
  cart_id: Scalars['String']
}

export type QueryCategoriesArgs = {
  currentPage?: Maybe<Scalars['Int']>
  filters?: Maybe<CategoryFilterInput>
  pageSize?: Maybe<Scalars['Int']>
}

export type QueryCategoryArgs = {
  id?: Maybe<Scalars['Int']>
}

export type QueryCategoryListArgs = {
  filters?: Maybe<CategoryFilterInput>
}

export type QueryCmsBlocksArgs = {
  identifiers?: Maybe<Array<Maybe<Scalars['String']>>>
}

export type QueryCmsPageArgs = {
  id?: Maybe<Scalars['Int']>
  identifier?: Maybe<Scalars['String']>
}

export type QueryCompareListArgs = {
  uid: Scalars['ID']
}

export type QueryCountryArgs = {
  id?: Maybe<Scalars['String']>
}

export type QueryCustomAttributeMetadataArgs = {
  attributes: Array<AttributeInput>
}

export type QueryFooterArgs = {
  locales?: Array<Locale>
  stage?: Stage
  where: FooterWhereUniqueInput
}

export type QueryGetHostedProUrlArgs = {
  input: HostedProUrlInput
}

export type QueryGetPayflowLinkTokenArgs = {
  input: PayflowLinkTokenInput
}

export type QueryIsEmailAvailableArgs = {
  email: Scalars['String']
}

export type QueryMollieCustomerOrderArgs = {
  hash?: Maybe<Scalars['String']>
}

export type QueryPagesArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Array<Locale>
  orderBy?: Maybe<PageOrderByInput>
  skip?: Maybe<Scalars['Int']>
  stage?: Stage
  where?: Maybe<PageWhereInput>
}

export type QueryPagesConnectionArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Array<Locale>
  orderBy?: Maybe<PageOrderByInput>
  skip?: Maybe<Scalars['Int']>
  stage?: Stage
  where?: Maybe<PageWhereInput>
}

export type QueryPickupLocationsArgs = {
  area?: Maybe<AreaInput>
  currentPage?: Maybe<Scalars['Int']>
  filters?: Maybe<PickupLocationFilterInput>
  pageSize?: Maybe<Scalars['Int']>
  productsInfo?: Maybe<Array<Maybe<ProductInfoInput>>>
  sort?: Maybe<PickupLocationSortInput>
}

export type QueryProductpagesArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Array<Locale>
  orderBy?: Maybe<ProductOrderByInput>
  skip?: Maybe<Scalars['Int']>
  stage?: Stage
  where?: Maybe<ProductWhereInput>
}

export type QueryProductsArgs = {
  currentPage?: Maybe<Scalars['Int']>
  filter?: Maybe<ProductAttributeFilterInput>
  pageSize?: Maybe<Scalars['Int']>
  search?: Maybe<Scalars['String']>
  sort?: Maybe<ProductAttributeSortInput>
}

export type QueryUrlResolverArgs = {
  url: Scalars['String']
}

export type QueryUspsArgs = {
  locales?: Array<Locale>
  stage?: Stage
  where: UspsWhereUniqueInput
}

/** The type contains information about a store config */
export type StoreConfig = {
  __typename?: 'StoreConfig'
  /** Footer Miscellaneous HTML */
  absolute_footer?: Maybe<Scalars['String']>
  /** Indicates whether guest users can write product reviews. Possible values: 1 (Yes) and 0 (No) */
  allow_guests_to_write_product_reviews?: Maybe<Scalars['String']>
  /** The value of the Allow Gift Messages for Order Items option */
  allow_items?: Maybe<Scalars['String']>
  /** The value of the Allow Gift Messages on Order Level option */
  allow_order?: Maybe<Scalars['String']>
  /** Enable autocomplete on login and forgot password forms */
  autocomplete_on_storefront?: Maybe<Scalars['Boolean']>
  /** Base currency code */
  base_currency_code?: Maybe<Scalars['String']>
  /** Base link URL for the store */
  base_link_url?: Maybe<Scalars['String']>
  /** Base media URL for the store */
  base_media_url?: Maybe<Scalars['String']>
  /** Base static URL for the store */
  base_static_url?: Maybe<Scalars['String']>
  /** Base URL for the store */
  base_url?: Maybe<Scalars['String']>
  /** Braintree cc vault status. */
  braintree_cc_vault_active?: Maybe<Scalars['String']>
  /** Default Sort By. */
  catalog_default_sort_by?: Maybe<Scalars['String']>
  /**
   * Corresponds to the 'Display Prices In Product Lists' field. It indicates how FPT information is
   * displayed on category pages
   */
  category_fixed_product_tax_display_setting?: Maybe<FixedProductTaxDisplaySettings>
  /** Category URL Suffix. */
  category_url_suffix?: Maybe<Scalars['String']>
  /** CMS Home Page */
  cms_home_page?: Maybe<Scalars['String']>
  /** CMS No Cookies Page */
  cms_no_cookies?: Maybe<Scalars['String']>
  /** CMS No Route Page */
  cms_no_route?: Maybe<Scalars['String']>
  /**
   * A code assigned to the store to identify it
   *
   * @deprecated Use `store_code` instead.
   */
  code?: Maybe<Scalars['String']>
  /**
   * The configuration setting determines which thumbnail should be used in the cart for
   * configurable products.
   */
  configurable_thumbnail_source?: Maybe<Scalars['String']>
  /** Copyright */
  copyright?: Maybe<Scalars['String']>
  /** Default Meta Description */
  default_description?: Maybe<Scalars['String']>
  /** Default display currency code */
  default_display_currency_code?: Maybe<Scalars['String']>
  /** Default Meta Keywords */
  default_keywords?: Maybe<Scalars['String']>
  /** Default Page Title */
  default_title?: Maybe<Scalars['String']>
  /** Display Demo Store Notice */
  demonotice?: Maybe<Scalars['Int']>
  /** Default Web URL */
  front?: Maybe<Scalars['String']>
  /** Products per Page on Grid Default Value. */
  grid_per_page?: Maybe<Scalars['Int']>
  /** Products per Page on Grid Allowed Values. */
  grid_per_page_values?: Maybe<Scalars['String']>
  /** Scripts and Style Sheets */
  head_includes?: Maybe<Scalars['String']>
  /** Favicon Icon */
  head_shortcut_icon?: Maybe<Scalars['String']>
  /** Logo Image */
  header_logo_src?: Maybe<Scalars['String']>
  /**
   * The ID number assigned to the store
   *
   * @deprecated Use `store_code` instead.
   */
  id?: Maybe<Scalars['Int']>
  /** Indicates whether the store view has been designated as the default within the store group */
  is_default_store?: Maybe<Scalars['Boolean']>
  /** Indicates whether the store group has been designated as the default within the website */
  is_default_store_group?: Maybe<Scalars['Boolean']>
  /** List Mode. */
  list_mode?: Maybe<Scalars['String']>
  /** Products per Page on List Default Value. */
  list_per_page?: Maybe<Scalars['Int']>
  /** Products per Page on List Allowed Values. */
  list_per_page_values?: Maybe<Scalars['String']>
  /** Store locale */
  locale?: Maybe<Scalars['String']>
  /** Logo Image Alt */
  logo_alt?: Maybe<Scalars['String']>
  /** Logo Attribute Height */
  logo_height?: Maybe<Scalars['Int']>
  /** Logo Attribute Width */
  logo_width?: Maybe<Scalars['Int']>
  /** Indicates whether wishlists are enabled (1) or disabled (0) */
  magento_wishlist_general_is_enabled?: Maybe<Scalars['String']>
  /** The minimum number of characters required for a valid password. */
  minimum_password_length?: Maybe<Scalars['String']>
  /** Default No-route URL */
  no_route?: Maybe<Scalars['String']>
  /** Payflow Pro vault status. */
  payment_payflowpro_cc_vault_active?: Maybe<Scalars['String']>
  /**
   * Corresponds to the 'Display Prices On Product View Page' field. It indicates how FPT
   * information is displayed on product pages
   */
  product_fixed_product_tax_display_setting?: Maybe<FixedProductTaxDisplaySettings>
  /** Indicates whether product reviews are enabled. Possible values: 1 (Yes) and 0 (No) */
  product_reviews_enabled?: Maybe<Scalars['String']>
  /** Product URL Suffix. */
  product_url_suffix?: Maybe<Scalars['String']>
  /**
   * The number of different character classes required in a password (lowercase, uppercase, digits,
   * special characters).
   */
  required_character_classes_number?: Maybe<Scalars['String']>
  /**
   * The ID of the root category
   *
   * @deprecated Use `root_category_uid` instead
   */
  root_category_id?: Maybe<Scalars['Int']>
  /** The unique ID for a `CategoryInterface` object. */
  root_category_uid?: Maybe<Scalars['ID']>
  /**
   * Corresponds to the 'Display Prices In Sales Modules' field. It indicates how FPT information is
   * displayed on cart, checkout, and order pages
   */
  sales_fixed_product_tax_display_setting?: Maybe<FixedProductTaxDisplaySettings>
  /** Secure base link URL for the store */
  secure_base_link_url?: Maybe<Scalars['String']>
  /** Secure base media URL for the store */
  secure_base_media_url?: Maybe<Scalars['String']>
  /** Secure base static URL for the store */
  secure_base_static_url?: Maybe<Scalars['String']>
  /** Secure base URL for the store */
  secure_base_url?: Maybe<Scalars['String']>
  /** Email to a Friend configuration. */
  send_friend?: Maybe<SendFriendConfiguration>
  /** Show Breadcrumbs for CMS Pages */
  show_cms_breadcrumbs?: Maybe<Scalars['Int']>
  /**
   * The unique ID of the store view. In the Admin, this is called the Store View Code. When making
   * a GraphQL call, assign this value to the `Store` header to provide the scope
   */
  store_code?: Maybe<Scalars['ID']>
  /** The unique ID assigned to the store group. In the Admin, this is called the Store Name */
  store_group_code?: Maybe<Scalars['ID']>
  /** The label assigned to the store group */
  store_group_name?: Maybe<Scalars['String']>
  /** The label assigned to the store view */
  store_name?: Maybe<Scalars['String']>
  /** The store view sort order */
  store_sort_order?: Maybe<Scalars['Int']>
  /** Timezone of the store */
  timezone?: Maybe<Scalars['String']>
  /** Page Title Prefix */
  title_prefix?: Maybe<Scalars['String']>
  /** Page Title Separator. */
  title_separator?: Maybe<Scalars['String']>
  /** Page Title Suffix */
  title_suffix?: Maybe<Scalars['String']>
  /** The configuration determines if the store code should be used in the URL */
  use_store_in_url?: Maybe<Scalars['Boolean']>
  /** The unique ID for the website */
  website_code?: Maybe<Scalars['ID']>
  /**
   * The ID number assigned to the website store
   *
   * @deprecated The field should not be used on the storefront
   */
  website_id?: Maybe<Scalars['Int']>
  /** The label assigned to the website */
  website_name?: Maybe<Scalars['String']>
  /** The unit of weight */
  weight_unit?: Maybe<Scalars['String']>
  /** Welcome Text */
  welcome?: Maybe<Scalars['String']>
}

/** This enumeration display settings for the fixed product tax */
export type FixedProductTaxDisplaySettings =
  /**
   * The displayed price does not include the FPT amount. The values of
   * ProductPrice.fixed_product_taxes and the price including the FPT are displayed separately. This
   * value corresponds to 'Excluding FPT, Including FPT description and final price'
   */
  | 'EXCLUDE_FPT_AND_INCLUDE_WITH_DETAILS'
  /**
   * The displayed price does not include the FPT amount. The values from
   * ProductPrice.fixed_product_taxes are not displayed. This value corresponds to 'Excluding FPT'
   */
  | 'EXCLUDE_FPT_WITHOUT_DETAILS'
  /** The FPT feature is not enabled. You can omit ProductPrice.fixed_product_taxes from your query */
  | 'FPT_DISABLED'
  /**
   * The displayed price includes the FPT amount without displaying the
   * ProductPrice.fixed_product_taxes values. This value corresponds to 'Including FPT only'
   */
  | 'INCLUDE_FPT_WITHOUT_DETAILS'
  /**
   * The displayed price includes the FPT amount while displaying the values of
   * ProductPrice.fixed_product_taxes separately. This value corresponds to 'Including FPT and FPT
   * description'
   */
  | 'INCLUDE_FPT_WITH_DETAILS'

export type SendFriendConfiguration = {
  __typename?: 'SendFriendConfiguration'
  /** Indicates whether the Email to a Friend feature is enabled. */
  enabled_for_customers: Scalars['Boolean']
  /** Indicates whether the Email to a Friend feature is enabled for guests. */
  enabled_for_guests: Scalars['Boolean']
}

export type Cart = {
  __typename?: 'Cart'
  /**
   * An array of coupons that have been applied to the cart
   *
   * @deprecated Use applied_coupons instead
   */
  applied_coupon?: Maybe<AppliedCoupon>
  /**
   * An array of `AppliedCoupon` objects. Each object contains the `code` text attribute, which
   * specifies the coupon code
   */
  applied_coupons?: Maybe<Array<Maybe<AppliedCoupon>>>
  /** Available payment methods */
  available_payment_methods?: Maybe<Array<Maybe<AvailablePaymentMethod>>>
  billing_address?: Maybe<BillingCartAddress>
  email?: Maybe<Scalars['String']>
  /** The entered gift message for the cart */
  gift_message?: Maybe<GiftMessage>
  /** The unique ID for a `Cart` object */
  id: Scalars['ID']
  is_virtual: Scalars['Boolean']
  items?: Maybe<Array<Maybe<CartItemInterface>>>
  /** Available issuers for the selected payment method */
  mollie_available_issuers?: Maybe<Array<Maybe<MollieIssuer>>>
  prices?: Maybe<CartPrices>
  selected_payment_method?: Maybe<SelectedPaymentMethod>
  shipping_addresses: Array<Maybe<ShippingCartAddress>>
  total_quantity: Scalars['Float']
}

export type AppliedCoupon = {
  __typename?: 'AppliedCoupon'
  code: Scalars['String']
}

export type AvailablePaymentMethod = {
  __typename?: 'AvailablePaymentMethod'
  /** The payment method code */
  code: Scalars['String']
  /** Available issuers for this payment method */
  mollie_available_issuers?: Maybe<Array<Maybe<MollieIssuer>>>
  /** Retrieve meta information for this payment method (image) */
  mollie_meta: MolliePaymentMethodMeta
  /** The payment method title. */
  title: Scalars['String']
}

export type MollieIssuer = {
  __typename?: 'MollieIssuer'
  code?: Maybe<Scalars['String']>
  image: Scalars['String']
  name?: Maybe<Scalars['String']>
  svg: Scalars['String']
}

export type MolliePaymentMethodMeta = {
  __typename?: 'MolliePaymentMethodMeta'
  image?: Maybe<Scalars['String']>
}

export type BillingCartAddress = CartAddressInterface & {
  __typename?: 'BillingCartAddress'
  city: Scalars['String']
  company?: Maybe<Scalars['String']>
  country: CartAddressCountry
  /** @deprecated The field is used only in shipping address */
  customer_notes?: Maybe<Scalars['String']>
  firstname: Scalars['String']
  lastname: Scalars['String']
  postcode?: Maybe<Scalars['String']>
  region?: Maybe<CartAddressRegion>
  street: Array<Maybe<Scalars['String']>>
  telephone: Scalars['String']
}

export type CartAddressInterface = {
  city: Scalars['String']
  company?: Maybe<Scalars['String']>
  country: CartAddressCountry
  firstname: Scalars['String']
  lastname: Scalars['String']
  postcode?: Maybe<Scalars['String']>
  region?: Maybe<CartAddressRegion>
  street: Array<Maybe<Scalars['String']>>
  telephone: Scalars['String']
}

export type CartAddressCountry = {
  __typename?: 'CartAddressCountry'
  code: Scalars['String']
  label: Scalars['String']
}

export type CartAddressRegion = {
  __typename?: 'CartAddressRegion'
  code?: Maybe<Scalars['String']>
  label?: Maybe<Scalars['String']>
  region_id?: Maybe<Scalars['Int']>
}

/** Contains the text of a gift message, its sender, and recipient */
export type GiftMessage = {
  __typename?: 'GiftMessage'
  /** Sender name */
  from: Scalars['String']
  /** Gift message text */
  message: Scalars['String']
  /** Recipient name */
  to: Scalars['String']
}

export type CartItemInterface = {
  /** @deprecated Use `uid` instead */
  id: Scalars['String']
  prices?: Maybe<CartItemPrices>
  product: ProductInterface
  quantity: Scalars['Float']
  /** The unique ID for a `CartItemInterface` object */
  uid: Scalars['ID']
}

export type CartItemPrices = {
  __typename?: 'CartItemPrices'
  /** An array of discounts to be applied to the cart item */
  discounts?: Maybe<Array<Maybe<Discount>>>
  price: Money
  row_total: Money
  row_total_including_tax: Money
  /** The total of all discounts applied to the item */
  total_item_discount?: Maybe<Money>
}

/** Defines an individual discount. A discount can be applied to the cart as a whole or to an item. */
export type Discount = {
  __typename?: 'Discount'
  /** The amount of the discount */
  amount: Money
  /** A description of the discount */
  label: Scalars['String']
}

/** A Money object defines a monetary value, including a numeric value and a currency code. */
export type Money = {
  __typename?: 'Money'
  /** A three-letter currency code, such as USD or EUR */
  currency?: Maybe<CurrencyEnum>
  /** A number expressing a monetary value */
  value?: Maybe<Scalars['Float']>
}

/** The list of available currency codes */
export type CurrencyEnum =
  | 'AED'
  | 'AFN'
  | 'ALL'
  | 'AMD'
  | 'ANG'
  | 'AOA'
  | 'ARS'
  | 'AUD'
  | 'AWG'
  | 'AZM'
  | 'AZN'
  | 'BAM'
  | 'BBD'
  | 'BDT'
  | 'BGN'
  | 'BHD'
  | 'BIF'
  | 'BMD'
  | 'BND'
  | 'BOB'
  | 'BRL'
  | 'BSD'
  | 'BTN'
  | 'BUK'
  | 'BWP'
  | 'BYN'
  | 'BZD'
  | 'CAD'
  | 'CDF'
  | 'CHE'
  | 'CHF'
  | 'CHW'
  | 'CLP'
  | 'CNY'
  | 'COP'
  | 'CRC'
  | 'CUP'
  | 'CVE'
  | 'CZK'
  | 'DJF'
  | 'DKK'
  | 'DOP'
  | 'DZD'
  | 'EEK'
  | 'EGP'
  | 'ERN'
  | 'ETB'
  | 'EUR'
  | 'FJD'
  | 'FKP'
  | 'GBP'
  | 'GEK'
  | 'GEL'
  | 'GHS'
  | 'GIP'
  | 'GMD'
  | 'GNF'
  | 'GQE'
  | 'GTQ'
  | 'GYD'
  | 'HKD'
  | 'HNL'
  | 'HRK'
  | 'HTG'
  | 'HUF'
  | 'IDR'
  | 'ILS'
  | 'INR'
  | 'IQD'
  | 'IRR'
  | 'ISK'
  | 'JMD'
  | 'JOD'
  | 'JPY'
  | 'KES'
  | 'KGS'
  | 'KHR'
  | 'KMF'
  | 'KPW'
  | 'KRW'
  | 'KWD'
  | 'KYD'
  | 'KZT'
  | 'LAK'
  | 'LBP'
  | 'LKR'
  | 'LRD'
  | 'LSL'
  | 'LSM'
  | 'LTL'
  | 'LVL'
  | 'LYD'
  | 'MAD'
  | 'MDL'
  | 'MGA'
  | 'MKD'
  | 'MMK'
  | 'MNT'
  | 'MOP'
  | 'MRO'
  | 'MUR'
  | 'MVR'
  | 'MWK'
  | 'MXN'
  | 'MYR'
  | 'MZN'
  | 'NAD'
  | 'NGN'
  | 'NIC'
  | 'NOK'
  | 'NPR'
  | 'NZD'
  | 'OMR'
  | 'PAB'
  | 'PEN'
  | 'PGK'
  | 'PHP'
  | 'PKR'
  | 'PLN'
  | 'PYG'
  | 'QAR'
  | 'RHD'
  | 'ROL'
  | 'RON'
  | 'RSD'
  | 'RUB'
  | 'RWF'
  | 'SAR'
  | 'SBD'
  | 'SCR'
  | 'SDG'
  | 'SEK'
  | 'SGD'
  | 'SHP'
  | 'SKK'
  | 'SLL'
  | 'SOS'
  | 'SRD'
  | 'STD'
  | 'SVC'
  | 'SYP'
  | 'SZL'
  | 'THB'
  | 'TJS'
  | 'TMM'
  | 'TND'
  | 'TOP'
  | 'TRL'
  | 'TRY'
  | 'TTD'
  | 'TWD'
  | 'TZS'
  | 'UAH'
  | 'UGX'
  | 'USD'
  | 'UYU'
  | 'UZS'
  | 'VEB'
  | 'VEF'
  | 'VND'
  | 'VUV'
  | 'WST'
  | 'XCD'
  | 'XOF'
  | 'XPF'
  | 'YER'
  | 'YTL'
  | 'ZAR'
  | 'ZMK'
  | 'ZWD'

/**
 * The ProductInterface contains attributes that are common to all types of products. Note that
 * descriptions may not be available for custom and EAV attributes.
 */
export type ProductInterface = {
  activity?: Maybe<Scalars['String']>
  /**
   * The attribute set assigned to the product.
   *
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: Maybe<Scalars['Int']>
  backorder_delivery_date?: Maybe<Scalars['String']>
  backorder_delivery_period?: Maybe<Scalars['Int']>
  /**
   * Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link
   * Meta Tag For Products' is enabled
   */
  canonical_url?: Maybe<Scalars['String']>
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>
  category_gear?: Maybe<Scalars['String']>
  climate?: Maybe<Scalars['String']>
  collar?: Maybe<Scalars['String']>
  color?: Maybe<Scalars['Int']>
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']>
  /**
   * Timestamp indicating when the product was created.
   *
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>
  default_configuration_json?: Maybe<Scalars['String']>
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>
  eco_collection?: Maybe<Scalars['Int']>
  erin_recommends?: Maybe<Scalars['Int']>
  features_bags?: Maybe<Scalars['String']>
  format?: Maybe<Scalars['Int']>
  gender?: Maybe<Scalars['String']>
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']>
  /**
   * The ID number assigned to the product.
   *
   * @deprecated Use the `uid` field instead.
   */
  id?: Maybe<Scalars['Int']>
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>
  in_stock_delivery_period?: Maybe<Scalars['Int']>
  /** A number representing the product's manufacturer. */
  manufacturer?: Maybe<Scalars['Int']>
  material?: Maybe<Scalars['String']>
  /** An array of Media Gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>
  /**
   * An array of MediaGalleryEntry objects.
   *
   * @deprecated Use product's `media_gallery` instead
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']>
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']>
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']>
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']>
  new?: Maybe<Scalars['Int']>
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   *
   * @deprecated The field should not be used on the storefront.
   */
  new_from_date?: Maybe<Scalars['String']>
  /**
   * The end date for new product listings.
   *
   * @deprecated The field should not be used on the storefront.
   */
  new_to_date?: Maybe<Scalars['String']>
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']>
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']>
  pattern?: Maybe<Scalars['String']>
  performance_fabric?: Maybe<Scalars['Int']>
  /**
   * A ProductPrices object, indicating the price of an item.
   *
   * @deprecated Use price_range for product price information.
   */
  price?: Maybe<ProductPrices>
  /** A PriceRange object, indicating the range of prices for the product */
  price_range: PriceRange
  /** An array of TierPrice objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>
  /** An array of ProductLinks objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>
  /** The average of all the ratings given to the product. */
  rating_summary: Scalars['Float']
  /** Related Products */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>
  /** The total count of all the reviews given to the product. */
  review_count: Scalars['Int']
  /** The list of products reviews. */
  reviews: ProductReviews
  sale?: Maybe<Scalars['Int']>
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>
  size?: Maybe<Scalars['Int']>
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']>
  sleeve?: Maybe<Scalars['String']>
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>
  /**
   * The beginning date that a product has a special price.
   *
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: Maybe<Scalars['String']>
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']>
  /** The end date that a product has a special price. */
  special_to_date?: Maybe<Scalars['String']>
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>
  strap_bags?: Maybe<Scalars['String']>
  style_bags?: Maybe<Scalars['String']>
  style_bottom?: Maybe<Scalars['String']>
  style_general?: Maybe<Scalars['String']>
  /** The file name of a swatch image */
  swatch_image?: Maybe<Scalars['String']>
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   *
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']>
  /**
   * An array of ProductTierPrices objects.
   *
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   *
   * @deprecated Use __typename instead.
   */
  type_id?: Maybe<Scalars['String']>
  /** The unique ID for a `ProductInterface` object. */
  uid: Scalars['ID']
  /**
   * Timestamp indicating when the product was updated.
   *
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']>
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']>
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>
  varying_simple_prices?: Maybe<Scalars['Int']>
  /**
   * An array of websites in which the product is available.
   *
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>
}

/**
 * The ProductInterface contains attributes that are common to all types of products. Note that
 * descriptions may not be available for custom and EAV attributes.
 */
export type ProductInterfaceReviewsArgs = {
  currentPage?: Maybe<Scalars['Int']>
  pageSize?: Maybe<Scalars['Int']>
}

/** CategoryInterface contains the full set of attributes that can be returned in a category search. */
export type CategoryInterface = {
  available_sort_by?: Maybe<Array<Maybe<Scalars['String']>>>
  /** Breadcrumbs, parent categories info. */
  breadcrumbs?: Maybe<Array<Maybe<Breadcrumb>>>
  /**
   * Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link
   * Meta Tag For Categories' is enabled
   */
  canonical_url?: Maybe<Scalars['String']>
  children_count?: Maybe<Scalars['String']>
  /** Category CMS Block. */
  cms_block?: Maybe<CmsBlock>
  /**
   * Timestamp indicating when the category was created.
   *
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>
  custom_layout_update_file?: Maybe<Scalars['String']>
  /** The attribute to use for sorting. */
  default_sort_by?: Maybe<Scalars['String']>
  /** An optional description of the category. */
  description?: Maybe<Scalars['String']>
  display_mode?: Maybe<Scalars['String']>
  filter_price_range?: Maybe<Scalars['Float']>
  /**
   * An ID that uniquely identifies the category.
   *
   * @deprecated Use the `uid` argument instead.
   */
  id?: Maybe<Scalars['Int']>
  image?: Maybe<Scalars['String']>
  include_in_menu?: Maybe<Scalars['Int']>
  is_anchor?: Maybe<Scalars['Int']>
  landing_page?: Maybe<Scalars['Int']>
  /** Indicates the depth of the category within the tree. */
  level?: Maybe<Scalars['Int']>
  meta_description?: Maybe<Scalars['String']>
  meta_keywords?: Maybe<Scalars['String']>
  meta_title?: Maybe<Scalars['String']>
  /** The display name of the category. */
  name?: Maybe<Scalars['String']>
  /** Category Path. */
  path?: Maybe<Scalars['String']>
  /** Category path in store. */
  path_in_store?: Maybe<Scalars['String']>
  /** The position of the category relative to other categories at the same level in tree. */
  position?: Maybe<Scalars['Int']>
  /**
   * The number of products in the category that are marked as visible. By default, in complex
   * products, parent products are visible, but their child products are not.
   */
  product_count?: Maybe<Scalars['Int']>
  /** The list of products assigned to the category. */
  products?: Maybe<CategoryProducts>
  /** The unique ID for a `CategoryInterface` object. */
  uid: Scalars['ID']
  /**
   * Timestamp indicating when the category was updated.
   *
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>
  /** The url key assigned to the category. */
  url_key?: Maybe<Scalars['String']>
  /** The url path assigned to the category. */
  url_path?: Maybe<Scalars['String']>
  /** The part of the category URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>
}

/** CategoryInterface contains the full set of attributes that can be returned in a category search. */
export type CategoryInterfaceProductsArgs = {
  currentPage?: Maybe<Scalars['Int']>
  pageSize?: Maybe<Scalars['Int']>
  sort?: Maybe<ProductAttributeSortInput>
}

/** Breadcrumb item. */
export type Breadcrumb = {
  __typename?: 'Breadcrumb'
  /**
   * Category ID.
   *
   * @deprecated Use the `category_uid` argument instead.
   */
  category_id?: Maybe<Scalars['Int']>
  /** Category level. */
  category_level?: Maybe<Scalars['Int']>
  /** Category name. */
  category_name?: Maybe<Scalars['String']>
  /** The unique ID for a `Breadcrumb` object. */
  category_uid: Scalars['ID']
  /** Category URL key. */
  category_url_key?: Maybe<Scalars['String']>
  /** Category URL path. */
  category_url_path?: Maybe<Scalars['String']>
}

/** CMS block defines all CMS block information */
export type CmsBlock = {
  __typename?: 'CmsBlock'
  /** CMS block content */
  content?: Maybe<Scalars['String']>
  /** CMS block identifier */
  identifier?: Maybe<Scalars['String']>
  /** CMS block title */
  title?: Maybe<Scalars['String']>
}

/**
 * ProductAttributeSortInput specifies the attribute to use for sorting search results and indicates
 * whether the results are sorted in ascending or descending order. It's possible to sort products
 * using searchable attributes with enabled 'Use in Filter Options' option
 */
export type ProductAttributeSortInput = {
  /** Attribute label: Product Name */
  name?: Maybe<SortEnum>
  /** Sort by the position assigned to each product. */
  position?: Maybe<SortEnum>
  /** Attribute label: Price */
  price?: Maybe<SortEnum>
  /** Sort by the search relevance score (default). */
  relevance?: Maybe<SortEnum>
}

/** This enumeration indicates whether to return results in ascending or descending order */
export type SortEnum = 'ASC' | 'DESC'

/** The category products object returned in the Category query. */
export type CategoryProducts = {
  __typename?: 'CategoryProducts'
  /** An array of products that are assigned to the category. */
  items?: Maybe<Array<Maybe<ProductInterface>>>
  /** An object that includes the page_info and currentPage values specified in the query. */
  page_info?: Maybe<SearchResultPageInfo>
  /**
   * The number of products in the category that are marked as visible. By default, in complex
   * products, parent products are visible, but their child products are not.
   */
  total_count?: Maybe<Scalars['Int']>
}

/** SearchResultPageInfo provides navigation for the query response */
export type SearchResultPageInfo = {
  __typename?: 'SearchResultPageInfo'
  /** Specifies which page of results to return */
  current_page?: Maybe<Scalars['Int']>
  /** Specifies the maximum number of items to return */
  page_size?: Maybe<Scalars['Int']>
  /** Total pages */
  total_pages?: Maybe<Scalars['Int']>
}

export type ComplexTextValue = {
  __typename?: 'ComplexTextValue'
  /** HTML format */
  html: Scalars['String']
}

/** Product image information. Contains the image URL and label. */
export type ProductImage = MediaGalleryInterface & {
  __typename?: 'ProductImage'
  /** Whether the image is hidden from view. */
  disabled?: Maybe<Scalars['Boolean']>
  /** The label of the product image or video. */
  label?: Maybe<Scalars['String']>
  /** The media item's position after it has been sorted. */
  position?: Maybe<Scalars['Int']>
  /** The URL of the product image or video. */
  url?: Maybe<Scalars['String']>
}

/** Contains basic information about a product image or video. */
export type MediaGalleryInterface = {
  /** Whether the image is hidden from view. */
  disabled?: Maybe<Scalars['Boolean']>
  /** The label of the product image or video. */
  label?: Maybe<Scalars['String']>
  /** The media item's position after it has been sorted. */
  position?: Maybe<Scalars['Int']>
  /** The URL of the product image or video. */
  url?: Maybe<Scalars['String']>
}

/** MediaGalleryEntry defines characteristics about images and videos associated with a specific product. */
export type MediaGalleryEntry = {
  __typename?: 'MediaGalleryEntry'
  /** Contains a ProductMediaGalleryEntriesContent object. */
  content?: Maybe<ProductMediaGalleryEntriesContent>
  /** Whether the image is hidden from view. */
  disabled?: Maybe<Scalars['Boolean']>
  /** The path of the image on the server. */
  file?: Maybe<Scalars['String']>
  /**
   * The identifier assigned to the object.
   *
   * @deprecated Use `uid` instead.
   */
  id?: Maybe<Scalars['Int']>
  /** The alt text displayed on the UI when the user points to the image. */
  label?: Maybe<Scalars['String']>
  /** Image or video. */
  media_type?: Maybe<Scalars['String']>
  /** The media item's position after it has been sorted. */
  position?: Maybe<Scalars['Int']>
  /** Array of image types. It can have the following values: image, small_image, thumbnail. */
  types?: Maybe<Array<Maybe<Scalars['String']>>>
  /** The unique ID for a `MediaGalleryEntry` object. */
  uid: Scalars['ID']
  /** Contains a ProductMediaGalleryEntriesVideoContent object. */
  video_content?: Maybe<ProductMediaGalleryEntriesVideoContent>
}

/** ProductMediaGalleryEntriesContent contains an image in base64 format and basic information about the image. */
export type ProductMediaGalleryEntriesContent = {
  __typename?: 'ProductMediaGalleryEntriesContent'
  /** The image in base64 format. */
  base64_encoded_data?: Maybe<Scalars['String']>
  /** The file name of the image. */
  name?: Maybe<Scalars['String']>
  /** The MIME type of the file, such as image/png. */
  type?: Maybe<Scalars['String']>
}

/**
 * ProductMediaGalleryEntriesVideoContent contains a link to a video file and basic information
 * about the video.
 */
export type ProductMediaGalleryEntriesVideoContent = {
  __typename?: 'ProductMediaGalleryEntriesVideoContent'
  /** Must be external-video. */
  media_type?: Maybe<Scalars['String']>
  /** A description of the video. */
  video_description?: Maybe<Scalars['String']>
  /** Optional data about the video. */
  video_metadata?: Maybe<Scalars['String']>
  /** Describes the video source. */
  video_provider?: Maybe<Scalars['String']>
  /** The title of the video. */
  video_title?: Maybe<Scalars['String']>
  /** The URL to the video. */
  video_url?: Maybe<Scalars['String']>
}

/**
 * ProductPrices is deprecated, replaced by PriceRange. The ProductPrices object contains the
 * regular price of an item, as well as its minimum and maximum prices. Only composite products,
 * which include bundle, configurable, and grouped products, can contain a minimum and maximum price.
 */
export type ProductPrices = {
  __typename?: 'ProductPrices'
  /**
   * The highest possible final price for all the options defined within a composite product. If you
   * are specifying a price range, this would be the to value.
   *
   * @deprecated Use PriceRange.maximum_price.
   */
  maximalPrice?: Maybe<Price>
  /**
   * The lowest possible final price for all the options defined within a composite product. If you
   * are specifying a price range, this would be the from value.
   *
   * @deprecated Use PriceRange.minimum_price.
   */
  minimalPrice?: Maybe<Price>
  /**
   * The base price of a product.
   *
   * @deprecated Use regular_price from PriceRange.minimum_price or PriceRange.maximum_price.
   */
  regularPrice?: Maybe<Price>
}

/**
 * Price is deprecated, replaced by ProductPrice. The Price object defines the price of a product as
 * well as any tax-related adjustments.
 */
export type Price = {
  __typename?: 'Price'
  /**
   * An array that provides information about tax, weee, or weee_tax adjustments.
   *
   * @deprecated Price is deprecated, use ProductPrice.
   */
  adjustments?: Maybe<Array<Maybe<PriceAdjustment>>>
  /**
   * The price of a product plus a three-letter currency code.
   *
   * @deprecated Price is deprecated, use ProductPrice.
   */
  amount?: Maybe<Money>
}

/**
 * PriceAdjustment is deprecated. Taxes will be included or excluded in the price. The
 * PricedAdjustment object defines the amount of money to apply as an adjustment, the type of
 * adjustment to apply, and whether the item is included or excluded from the adjustment.
 */
export type PriceAdjustment = {
  __typename?: 'PriceAdjustment'
  /** The amount of the price adjustment and its currency code. */
  amount?: Maybe<Money>
  /**
   * Indicates whether the adjustment involves tax, weee, or weee_tax.
   *
   * @deprecated PriceAdjustment is deprecated.
   */
  code?: Maybe<PriceAdjustmentCodesEnum>
  /**
   * Indicates whether the entity described by the code attribute is included or excluded from the adjustment.
   *
   * @deprecated PriceAdjustment is deprecated.
   */
  description?: Maybe<PriceAdjustmentDescriptionEnum>
}

/**
 * PriceAdjustment.code is deprecated. This enumeration contains values defined in modules other
 * than the Catalog module.
 */
export type PriceAdjustmentCodesEnum = 'TAX' | 'WEEE' | 'WEEE_TAX'

/**
 * PriceAdjustmentDescriptionEnum is deprecated. This enumeration states whether a price adjustment
 * is included or excluded.
 */
export type PriceAdjustmentDescriptionEnum = 'EXCLUDED' | 'INCLUDED'

/**
 * Price range for a product. If the product has a single price, the minimum and maximum price will
 * be the same.
 */
export type PriceRange = {
  __typename?: 'PriceRange'
  /** The highest possible price for the product. */
  maximum_price?: Maybe<ProductPrice>
  /** The lowest possible price for the product. */
  minimum_price: ProductPrice
}

/** Represents a product price. */
export type ProductPrice = {
  __typename?: 'ProductPrice'
  /** The price discount. Represents the difference between the regular and final price. */
  discount?: Maybe<ProductDiscount>
  /** The final price of the product after discounts applied. */
  final_price: Money
  /** The multiple FPTs that can be applied to a product price. */
  fixed_product_taxes?: Maybe<Array<Maybe<FixedProductTax>>>
  /** The regular price of the product. */
  regular_price: Money
}

/** A discount applied to a product price. */
export type ProductDiscount = {
  __typename?: 'ProductDiscount'
  /** The actual value of the discount. */
  amount_off?: Maybe<Scalars['Float']>
  /** The discount expressed a percentage. */
  percent_off?: Maybe<Scalars['Float']>
}

/** A single FPT that can be applied to a product price. */
export type FixedProductTax = {
  __typename?: 'FixedProductTax'
  /** Amount of the FPT as a money object. */
  amount?: Maybe<Money>
  /** The label assigned to the FPT to be displayed on the frontend. */
  label?: Maybe<Scalars['String']>
}

/** A price based on the quantity purchased. */
export type TierPrice = {
  __typename?: 'TierPrice'
  /** The price discount that this tier represents. */
  discount?: Maybe<ProductDiscount>
  final_price?: Maybe<Money>
  /** The minimum number of items that must be purchased to qualify for this price tier. */
  quantity?: Maybe<Scalars['Float']>
}

/**
 * ProductLinks contains information about linked products, including the link type and product type
 * of each item.
 */
export type ProductLinksInterface = {
  /** One of related, associated, upsell, or crosssell. */
  link_type?: Maybe<Scalars['String']>
  /** The SKU of the linked product. */
  linked_product_sku?: Maybe<Scalars['String']>
  /** The type of linked product (simple, virtual, bundle, downloadable, grouped, configurable). */
  linked_product_type?: Maybe<Scalars['String']>
  /** The position within the list of product links. */
  position?: Maybe<Scalars['Int']>
  /** The identifier of the linked product. */
  sku?: Maybe<Scalars['String']>
}

export type ProductReviews = {
  __typename?: 'ProductReviews'
  /** An array of product reviews. */
  items: Array<Maybe<ProductReview>>
  /** Metadata for pagination rendering. */
  page_info: SearchResultPageInfo
}

/** Details of a product review */
export type ProductReview = {
  __typename?: 'ProductReview'
  /** The average rating for product review. */
  average_rating: Scalars['Float']
  /** Date indicating when the review was created. */
  created_at: Scalars['String']
  /** The customer's nickname. Defaults to the customer name, if logged in */
  nickname: Scalars['String']
  /** Contains details about the reviewed product */
  product: ProductInterface
  /** An array of ratings by rating category, such as quality, price, and value */
  ratings_breakdown: Array<Maybe<ProductReviewRating>>
  /** The summary (title) of the review */
  summary: Scalars['String']
  /** The review text. */
  text: Scalars['String']
}

export type ProductReviewRating = {
  __typename?: 'ProductReviewRating'
  /** The label assigned to an aspect of a product that is being rated, such as quality or price */
  name: Scalars['String']
  /** The rating value given by customer. By default, possible values range from 1 to 5. */
  value: Scalars['String']
}

/** This enumeration states whether a product stock status is in stock or out of stock */
export type ProductStockStatus = 'IN_STOCK' | 'OUT_OF_STOCK'

/**
 * ProductTierPrices is deprecated and has been replaced by TierPrice. The ProductTierPrices object
 * defines a tier price, which is a quantity discount offered to a specific customer group.
 */
export type ProductTierPrices = {
  __typename?: 'ProductTierPrices'
  /**
   * The ID of the customer group.
   *
   * @deprecated Customer_group_id is not relevant for storefront.
   */
  customer_group_id?: Maybe<Scalars['String']>
  /**
   * The percentage discount of the item.
   *
   * @deprecated ProductTierPrices is deprecated. Use TierPrice.discount.
   */
  percentage_value?: Maybe<Scalars['Float']>
  /**
   * The number of items that must be purchased to qualify for tier pricing.
   *
   * @deprecated ProductTierPrices is deprecated, use TierPrice.quantity.
   */
  qty?: Maybe<Scalars['Float']>
  /**
   * The price of the fixed price item.
   *
   * @deprecated ProductTierPrices is deprecated. Use TierPrice.final_price
   */
  value?: Maybe<Scalars['Float']>
  /**
   * The ID assigned to the website.
   *
   * @deprecated Website_id is not relevant for storefront.
   */
  website_id?: Maybe<Scalars['Float']>
}

/** The object contains URL rewrite details */
export type UrlRewrite = {
  __typename?: 'UrlRewrite'
  /** Request parameters */
  parameters?: Maybe<Array<Maybe<HttpQueryParameter>>>
  /** Request URL */
  url?: Maybe<Scalars['String']>
}

/** The object details of target path parameters */
export type HttpQueryParameter = {
  __typename?: 'HttpQueryParameter'
  /** Parameter name */
  name?: Maybe<Scalars['String']>
  /** Parameter value */
  value?: Maybe<Scalars['String']>
}

/**
 * Website is deprecated because it is should not be used on storefront. The type contains
 * information about a website
 */
export type Website = {
  __typename?: 'Website'
  /**
   * A code assigned to the website to identify it
   *
   * @deprecated The field should not be used on the storefront.
   */
  code?: Maybe<Scalars['String']>
  /**
   * The default group ID that the website has
   *
   * @deprecated The field should not be used on the storefront.
   */
  default_group_id?: Maybe<Scalars['String']>
  /**
   * The ID number assigned to the website
   *
   * @deprecated The field should not be used on the storefront.
   */
  id?: Maybe<Scalars['Int']>
  /**
   * Specifies if this is the default website
   *
   * @deprecated The field should not be used on the storefront.
   */
  is_default?: Maybe<Scalars['Boolean']>
  /**
   * The website name. Websites use this name to identify it easier.
   *
   * @deprecated The field should not be used on the storefront.
   */
  name?: Maybe<Scalars['String']>
  /**
   * The attribute to use for sorting websites
   *
   * @deprecated The field should not be used on the storefront.
   */
  sort_order?: Maybe<Scalars['Int']>
}

export type CartPrices = {
  __typename?: 'CartPrices'
  applied_taxes?: Maybe<Array<Maybe<CartTaxItem>>>
  /** @deprecated Use discounts instead */
  discount?: Maybe<CartDiscount>
  /** An array of applied discounts */
  discounts?: Maybe<Array<Maybe<Discount>>>
  grand_total?: Maybe<Money>
  subtotal_excluding_tax?: Maybe<Money>
  subtotal_including_tax?: Maybe<Money>
  subtotal_with_discount_excluding_tax?: Maybe<Money>
}

export type CartTaxItem = {
  __typename?: 'CartTaxItem'
  amount: Money
  label: Scalars['String']
}

export type CartDiscount = {
  __typename?: 'CartDiscount'
  amount: Money
  label: Array<Maybe<Scalars['String']>>
}

export type SelectedPaymentMethod = {
  __typename?: 'SelectedPaymentMethod'
  /** The payment method code */
  code: Scalars['String']
  /** Retrieve meta information for this payment method (image) */
  mollie_meta: MolliePaymentMethodMeta
  /** The purchase order number. */
  purchase_order_number?: Maybe<Scalars['String']>
  /** The payment method title. */
  title: Scalars['String']
}

export type ShippingCartAddress = CartAddressInterface & {
  __typename?: 'ShippingCartAddress'
  available_shipping_methods?: Maybe<Array<Maybe<AvailableShippingMethod>>>
  /** @deprecated  `cart_items_v2` should be used instead */
  cart_items?: Maybe<Array<Maybe<CartItemQuantity>>>
  cart_items_v2?: Maybe<Array<Maybe<CartItemInterface>>>
  city: Scalars['String']
  company?: Maybe<Scalars['String']>
  country: CartAddressCountry
  customer_notes?: Maybe<Scalars['String']>
  firstname: Scalars['String']
  /** @deprecated This information shoud not be exposed on frontend */
  items_weight?: Maybe<Scalars['Float']>
  lastname: Scalars['String']
  pickup_location_code?: Maybe<Scalars['String']>
  postcode?: Maybe<Scalars['String']>
  region?: Maybe<CartAddressRegion>
  selected_shipping_method?: Maybe<SelectedShippingMethod>
  street: Array<Maybe<Scalars['String']>>
  telephone: Scalars['String']
}

export type AvailableShippingMethod = {
  __typename?: 'AvailableShippingMethod'
  amount: Money
  available: Scalars['Boolean']
  /** @deprecated The field should not be used on the storefront */
  base_amount?: Maybe<Money>
  carrier_code: Scalars['String']
  carrier_title: Scalars['String']
  error_message?: Maybe<Scalars['String']>
  /** Could be null if method is not available */
  method_code?: Maybe<Scalars['String']>
  /** Could be null if method is not available */
  method_title?: Maybe<Scalars['String']>
  price_excl_tax: Money
  price_incl_tax: Money
}

/**
 * Deprecated: `cart_items` field of `ShippingCartAddress` returns now `CartItemInterface` instead
 * of `CartItemQuantity`
 */
export type CartItemQuantity = {
  __typename?: 'CartItemQuantity'
  /**
   * @deprecated  `cart_items` field of `ShippingCartAddress` returns now `CartItemInterface`
   *   instead of `CartItemQuantity`
   */
  cart_item_id: Scalars['Int']
  /**
   * @deprecated  `cart_items` field of `ShippingCartAddress` returns now `CartItemInterface`
   *   instead of `CartItemQuantity`
   */
  quantity: Scalars['Float']
}

export type SelectedShippingMethod = {
  __typename?: 'SelectedShippingMethod'
  amount: Money
  /** @deprecated The field should not be used on the storefront */
  base_amount?: Maybe<Money>
  carrier_code: Scalars['String']
  carrier_title: Scalars['String']
  method_code: Scalars['String']
  method_title: Scalars['String']
}

/**
 * CategoryFilterInput defines the filters to be used in the search. A filter contains at least one
 * attribute, a comparison operator, and the value that is being searched for.
 */
export type CategoryFilterInput = {
  /** Filter by the unique category ID for a `CategoryInterface` object. */
  category_uid?: Maybe<FilterEqualTypeInput>
  /** Deprecated: use 'category_uid' to filter uniquely identifiers of categories. */
  ids?: Maybe<FilterEqualTypeInput>
  /** Filter by the display name of the category. */
  name?: Maybe<FilterMatchTypeInput>
  /** Filter by the unique parent category ID for a `CategoryInterface` object. */
  parent_category_uid?: Maybe<FilterEqualTypeInput>
  /** Filter by the unique parent category ID for a `CategoryInterface` object. */
  parent_id?: Maybe<FilterEqualTypeInput>
  /** Filter by the part of the URL that identifies the category. */
  url_key?: Maybe<FilterEqualTypeInput>
  /** Filter by the URL path for the category. */
  url_path?: Maybe<FilterEqualTypeInput>
}

/** Defines a filter that matches the input exactly. */
export type FilterEqualTypeInput = {
  /** A string to filter on */
  eq?: Maybe<Scalars['String']>
  /** An array of values to filter on */
  in?: Maybe<Array<Maybe<Scalars['String']>>>
}

/** Defines a filter that performs a fuzzy search. */
export type FilterMatchTypeInput = {
  /** One or more words to filter on */
  match?: Maybe<Scalars['String']>
}

/** A collection of CategoryTree objects and pagination information. */
export type CategoryResult = {
  __typename?: 'CategoryResult'
  /** A list of categories that match the filter criteria. */
  items?: Maybe<Array<Maybe<CategoryTree>>>
  /** An object that includes the page_info and currentPage values specified in the query. */
  page_info?: Maybe<SearchResultPageInfo>
  /** The total number of categories that match the criteria. */
  total_count?: Maybe<Scalars['Int']>
}

/** Category Tree implementation. */
export type CategoryTree = CategoryInterface & {
  __typename?: 'CategoryTree'
  available_sort_by?: Maybe<Array<Maybe<Scalars['String']>>>
  /** Breadcrumbs, parent categories info. */
  breadcrumbs?: Maybe<Array<Maybe<Breadcrumb>>>
  /**
   * Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link
   * Meta Tag For Categories' is enabled
   */
  canonical_url?: Maybe<Scalars['String']>
  /** Child categories tree. */
  children?: Maybe<Array<Maybe<CategoryTree>>>
  children_count?: Maybe<Scalars['String']>
  /** Category CMS Block. */
  cms_block?: Maybe<CmsBlock>
  /**
   * Timestamp indicating when the category was created.
   *
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>
  custom_layout_update_file?: Maybe<Scalars['String']>
  /** The attribute to use for sorting. */
  default_sort_by?: Maybe<Scalars['String']>
  /** An optional description of the category. */
  description?: Maybe<Scalars['String']>
  display_mode?: Maybe<Scalars['String']>
  filter_price_range?: Maybe<Scalars['Float']>
  /**
   * An ID that uniquely identifies the category.
   *
   * @deprecated Use the `uid` argument instead.
   */
  id?: Maybe<Scalars['Int']>
  image?: Maybe<Scalars['String']>
  include_in_menu?: Maybe<Scalars['Int']>
  is_anchor?: Maybe<Scalars['Int']>
  landing_page?: Maybe<Scalars['Int']>
  /** Indicates the depth of the category within the tree. */
  level?: Maybe<Scalars['Int']>
  meta_description?: Maybe<Scalars['String']>
  meta_keywords?: Maybe<Scalars['String']>
  meta_title?: Maybe<Scalars['String']>
  /** The display name of the category. */
  name?: Maybe<Scalars['String']>
  /** Category Path. */
  path?: Maybe<Scalars['String']>
  /** Category path in store. */
  path_in_store?: Maybe<Scalars['String']>
  /** The position of the category relative to other categories at the same level in tree. */
  position?: Maybe<Scalars['Int']>
  /**
   * The number of products in the category that are marked as visible. By default, in complex
   * products, parent products are visible, but their child products are not.
   */
  product_count?: Maybe<Scalars['Int']>
  /** The list of products assigned to the category. */
  products?: Maybe<CategoryProducts>
  /** The unique ID for a `CategoryInterface` object. */
  uid: Scalars['ID']
  /**
   * Timestamp indicating when the category was updated.
   *
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>
  /** The url key assigned to the category. */
  url_key?: Maybe<Scalars['String']>
  /** The url path assigned to the category. */
  url_path?: Maybe<Scalars['String']>
  /** The part of the category URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>
}

/** Category Tree implementation. */
export type CategoryTreeProductsArgs = {
  currentPage?: Maybe<Scalars['Int']>
  pageSize?: Maybe<Scalars['Int']>
  sort?: Maybe<ProductAttributeSortInput>
}

/** Defines all Checkout Agreement information */
export type CheckoutAgreement = {
  __typename?: 'CheckoutAgreement'
  /** Checkout Agreement identifier */
  agreement_id: Scalars['Int']
  /** Checkout Agreement checkbox text */
  checkbox_text: Scalars['String']
  /** Checkout Agreement content */
  content: Scalars['String']
  /** Checkout Agreement content height */
  content_height?: Maybe<Scalars['String']>
  /** Is Checkout Agreement content in HTML format */
  is_html: Scalars['Boolean']
  mode: CheckoutAgreementMode
  /** Checkout Agreement name */
  name: Scalars['String']
}

export type CheckoutAgreementMode = 'AUTO' | 'MANUAL'

/** CMS blocks information */
export type CmsBlocks = {
  __typename?: 'CmsBlocks'
  /** An array of CMS blocks */
  items?: Maybe<Array<Maybe<CmsBlock>>>
}

/** CMS page defines all CMS page information */
export type CmsPage = {
  __typename?: 'CmsPage'
  /** CMS page content */
  content?: Maybe<Scalars['String']>
  /** CMS page content heading */
  content_heading?: Maybe<Scalars['String']>
  /** Identifier of the CMS page */
  identifier?: Maybe<Scalars['String']>
  /** CMS page meta description */
  meta_description?: Maybe<Scalars['String']>
  /** CMS page meta keywords */
  meta_keywords?: Maybe<Scalars['String']>
  /** CMS page meta title */
  meta_title?: Maybe<Scalars['String']>
  /** CMS page content heading */
  page_layout?: Maybe<Scalars['String']>
  /** CMS page title */
  title?: Maybe<Scalars['String']>
  /** URL key of CMS page */
  url_key?: Maybe<Scalars['String']>
}

export type CompareList = {
  __typename?: 'CompareList'
  /** An array of attributes that can be used for comparing products */
  attributes?: Maybe<Array<Maybe<ComparableAttribute>>>
  /** The number of items in the compare list */
  item_count: Scalars['Int']
  /** An array of products to compare */
  items?: Maybe<Array<Maybe<ComparableItem>>>
  /** The unique ID assigned to the compare list */
  uid: Scalars['ID']
}

export type ComparableAttribute = {
  __typename?: 'ComparableAttribute'
  /** An attribute code that is enabled for product comparisons */
  code: Scalars['String']
  /** The label of the attribute code */
  label: Scalars['String']
}

export type ComparableItem = {
  __typename?: 'ComparableItem'
  /** An array of product attributes that can be used to compare products */
  attributes: Array<Maybe<ProductAttribute>>
  /** Contains details about a product in a compare list */
  product: ProductInterface
  /** The unique ID of an item in a compare list */
  uid: Scalars['ID']
}

export type ProductAttribute = {
  __typename?: 'ProductAttribute'
  /** The unique identifier for a product attribute code. */
  code: Scalars['String']
  /** The display value of the attribute */
  value: Scalars['String']
}

export type Country = {
  __typename?: 'Country'
  available_regions?: Maybe<Array<Maybe<Region>>>
  full_name_english?: Maybe<Scalars['String']>
  full_name_locale?: Maybe<Scalars['String']>
  /** The unique ID for a `Country` object. */
  id?: Maybe<Scalars['String']>
  three_letter_abbreviation?: Maybe<Scalars['String']>
  two_letter_abbreviation?: Maybe<Scalars['String']>
}

export type Region = {
  __typename?: 'Region'
  code?: Maybe<Scalars['String']>
  /** The unique ID for a `Region` object. */
  id?: Maybe<Scalars['Int']>
  name?: Maybe<Scalars['String']>
}

export type Currency = {
  __typename?: 'Currency'
  available_currency_codes?: Maybe<Array<Maybe<Scalars['String']>>>
  base_currency_code?: Maybe<Scalars['String']>
  base_currency_symbol?: Maybe<Scalars['String']>
  /** @deprecated Symbol was missed. Use `default_display_currency_code`. */
  default_display_currecy_code?: Maybe<Scalars['String']>
  /** @deprecated Symbol was missed. Use `default_display_currency_symbol`. */
  default_display_currecy_symbol?: Maybe<Scalars['String']>
  default_display_currency_code?: Maybe<Scalars['String']>
  default_display_currency_symbol?: Maybe<Scalars['String']>
  exchange_rates?: Maybe<Array<Maybe<ExchangeRate>>>
}

export type ExchangeRate = {
  __typename?: 'ExchangeRate'
  currency_to?: Maybe<Scalars['String']>
  rate?: Maybe<Scalars['Float']>
}

/** AttributeInput specifies the attribute_code and entity_type to search */
export type AttributeInput = {
  /** The unique identifier for an attribute code. This value should be in lowercase letters without spaces. */
  attribute_code?: Maybe<Scalars['String']>
  /** The type of entity that defines the attribute */
  entity_type?: Maybe<Scalars['String']>
}

/** CustomAttributeMetadata defines an array of attribute_codes and entity_types */
export type CustomAttributeMetadata = {
  __typename?: 'CustomAttributeMetadata'
  /** An array of attributes */
  items?: Maybe<Array<Maybe<Attribute>>>
}

/** Attribute contains the attribute_type of the specified attribute_code and entity_type */
export type Attribute = {
  __typename?: 'Attribute'
  /** The unique identifier for an attribute code. This value should be in lowercase letters without spaces. */
  attribute_code?: Maybe<Scalars['String']>
  /** Attribute options list. */
  attribute_options?: Maybe<Array<Maybe<AttributeOption>>>
  /** The data type of the attribute */
  attribute_type?: Maybe<Scalars['String']>
  /** The type of entity that defines the attribute */
  entity_type?: Maybe<Scalars['String']>
  /** The frontend input type of the attribute */
  input_type?: Maybe<Scalars['String']>
}

/** Attribute option. */
export type AttributeOption = {
  __typename?: 'AttributeOption'
  /** Attribute option label. */
  label?: Maybe<Scalars['String']>
  /** Attribute option value. */
  value?: Maybe<Scalars['String']>
}

/** Customer defines the customer name and address and other details */
export type Customer = {
  __typename?: 'Customer'
  /** An array containing the customer's shipping and billing addresses */
  addresses?: Maybe<Array<Maybe<CustomerAddress>>>
  /** Indicates whether the customer has enabled remote shopping assistance */
  allow_remote_shopping_assistance: Scalars['Boolean']
  /** The contents of the customer's compare list */
  compare_list?: Maybe<CompareList>
  /** Timestamp indicating when the account was created */
  created_at?: Maybe<Scalars['String']>
  /** The customer's date of birth */
  date_of_birth?: Maybe<Scalars['String']>
  /** The ID assigned to the billing address */
  default_billing?: Maybe<Scalars['String']>
  /** The ID assigned to the shipping address */
  default_shipping?: Maybe<Scalars['String']>
  /**
   * The customer's date of birth
   *
   * @deprecated Use `date_of_birth` instead
   */
  dob?: Maybe<Scalars['String']>
  /** The customer's email address. Required */
  email?: Maybe<Scalars['String']>
  /** The customer's first name */
  firstname?: Maybe<Scalars['String']>
  /** The customer's gender (Male - 1, Female - 2) */
  gender?: Maybe<Scalars['Int']>
  /** @deprecated Customer group should not be exposed in the storefront scenarios */
  group_id?: Maybe<Scalars['Int']>
  /**
   * The ID assigned to the customer
   *
   * @deprecated Id is not needed as part of Customer because on server side it can be identified
   *   based on customer token used for authentication. There is no need to know customer ID on the
   *   client side.
   */
  id?: Maybe<Scalars['Int']>
  /** Indicates whether the customer is subscribed to the company's newsletter */
  is_subscribed?: Maybe<Scalars['Boolean']>
  /** The customer's family name */
  lastname?: Maybe<Scalars['String']>
  /** The customer's middle name */
  middlename?: Maybe<Scalars['String']>
  orders?: Maybe<CustomerOrders>
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: Maybe<Scalars['String']>
  /** Contains the customer's product reviews */
  reviews: ProductReviews
  /** A value such as Sr., Jr., or III */
  suffix?: Maybe<Scalars['String']>
  /** The customer's Value-added tax (VAT) number (for corporate customers) */
  taxvat?: Maybe<Scalars['String']>
  /**
   * Contains a customer's wish lists
   *
   * @deprecated Use `Customer.wishlists` or `Customer.wishlist_v2`
   */
  wishlist: Wishlist
  /** Retrieve the specified wish list identified by the unique ID for a `Wishlist` object */
  wishlist_v2?: Maybe<Wishlist>
  /**
   * An array of wishlists. In Magento Open Source, customers are limited to one wish list. The
   * number of wish lists is configurable for Magento Commerce
   */
  wishlists: Array<Maybe<Wishlist>>
}

/** Customer defines the customer name and address and other details */
export type CustomerOrdersArgs = {
  currentPage?: Maybe<Scalars['Int']>
  filter?: Maybe<CustomerOrdersFilterInput>
  pageSize?: Maybe<Scalars['Int']>
}

/** Customer defines the customer name and address and other details */
export type CustomerReviewsArgs = {
  currentPage?: Maybe<Scalars['Int']>
  pageSize?: Maybe<Scalars['Int']>
}

/** Customer defines the customer name and address and other details */
export type CustomerWishlist_V2Args = {
  id: Scalars['ID']
}

/** Customer defines the customer name and address and other details */
export type CustomerWishlistsArgs = {
  currentPage?: Maybe<Scalars['Int']>
  pageSize?: Maybe<Scalars['Int']>
}

/** CustomerAddress contains detailed information about a customer's billing and shipping addresses */
export type CustomerAddress = {
  __typename?: 'CustomerAddress'
  /** The city or town */
  city?: Maybe<Scalars['String']>
  /** The customer's company */
  company?: Maybe<Scalars['String']>
  /** The customer's country */
  country_code?: Maybe<CountryCodeEnum>
  /**
   * The customer's country
   *
   * @deprecated Use `country_code` instead.
   */
  country_id?: Maybe<Scalars['String']>
  /** @deprecated Custom attributes should not be put into container */
  custom_attributes?: Maybe<Array<Maybe<CustomerAddressAttribute>>>
  /**
   * The customer ID
   *
   * @deprecated Customer_id is not needed as part of CustomerAddress, address ID (id) is unique
   *   identifier for the addresses.
   */
  customer_id?: Maybe<Scalars['Int']>
  /** Indicates whether the address is the default billing address */
  default_billing?: Maybe<Scalars['Boolean']>
  /** Indicates whether the address is the default shipping address */
  default_shipping?: Maybe<Scalars['Boolean']>
  /** Address extension attributes */
  extension_attributes?: Maybe<Array<Maybe<CustomerAddressAttribute>>>
  /** The fax number */
  fax?: Maybe<Scalars['String']>
  /** The first name of the person associated with the shipping/billing address */
  firstname?: Maybe<Scalars['String']>
  /** The ID assigned to the address object */
  id?: Maybe<Scalars['Int']>
  /** The family name of the person associated with the shipping/billing address */
  lastname?: Maybe<Scalars['String']>
  /** The middle name of the person associated with the shipping/billing address */
  middlename?: Maybe<Scalars['String']>
  /** The customer's ZIP or postal code */
  postcode?: Maybe<Scalars['String']>
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: Maybe<Scalars['String']>
  /** An object containing the region name, region code, and region ID */
  region?: Maybe<CustomerAddressRegion>
  /** The unique ID for a pre-defined region */
  region_id?: Maybe<Scalars['Int']>
  /** An array of strings that define the street number and name */
  street?: Maybe<Array<Maybe<Scalars['String']>>>
  /** A value such as Sr., Jr., or III */
  suffix?: Maybe<Scalars['String']>
  /** The telephone number */
  telephone?: Maybe<Scalars['String']>
  /** The customer's Value-added tax (VAT) number (for corporate customers) */
  vat_id?: Maybe<Scalars['String']>
}

/** The list of countries codes */
export type CountryCodeEnum =
  /** Andorra */
  | 'AD'
  /** United Arab Emirates */
  | 'AE'
  /** Afghanistan */
  | 'AF'
  /** Antigua & Barbuda */
  | 'AG'
  /** Anguilla */
  | 'AI'
  /** Albania */
  | 'AL'
  /** Armenia */
  | 'AM'
  /** Netherlands Antilles */
  | 'AN'
  /** Angola */
  | 'AO'
  /** Antarctica */
  | 'AQ'
  /** Argentina */
  | 'AR'
  /** American Samoa */
  | 'AS'
  /** Austria */
  | 'AT'
  /** Australia */
  | 'AU'
  /** Aruba */
  | 'AW'
  /** Åland Islands */
  | 'AX'
  /** Azerbaijan */
  | 'AZ'
  /** Bosnia & Herzegovina */
  | 'BA'
  /** Barbados */
  | 'BB'
  /** Bangladesh */
  | 'BD'
  /** Belgium */
  | 'BE'
  /** Burkina Faso */
  | 'BF'
  /** Bulgaria */
  | 'BG'
  /** Bahrain */
  | 'BH'
  /** Burundi */
  | 'BI'
  /** Benin */
  | 'BJ'
  /** St. Barthélemy */
  | 'BL'
  /** Bermuda */
  | 'BM'
  /** Brunei */
  | 'BN'
  /** Bolivia */
  | 'BO'
  /** Brazil */
  | 'BR'
  /** Bahamas */
  | 'BS'
  /** Bhutan */
  | 'BT'
  /** Bouvet Island */
  | 'BV'
  /** Botswana */
  | 'BW'
  /** Belarus */
  | 'BY'
  /** Belize */
  | 'BZ'
  /** Canada */
  | 'CA'
  /** Cocos (Keeling) Islands */
  | 'CC'
  /** Congo-Kinshasa */
  | 'CD'
  /** Central African Republic */
  | 'CF'
  /** Congo-Brazzaville */
  | 'CG'
  /** Switzerland */
  | 'CH'
  /** Côte d’Ivoire */
  | 'CI'
  /** Cook Islands */
  | 'CK'
  /** Chile */
  | 'CL'
  /** Cameroon */
  | 'CM'
  /** China */
  | 'CN'
  /** Colombia */
  | 'CO'
  /** Costa Rica */
  | 'CR'
  /** Cuba */
  | 'CU'
  /** Cape Verde */
  | 'CV'
  /** Christmas Island */
  | 'CX'
  /** Cyprus */
  | 'CY'
  /** Czech Republic */
  | 'CZ'
  /** Germany */
  | 'DE'
  /** Djibouti */
  | 'DJ'
  /** Denmark */
  | 'DK'
  /** Dominica */
  | 'DM'
  /** Dominican Republic */
  | 'DO'
  /** Algeria */
  | 'DZ'
  /** Ecuador */
  | 'EC'
  /** Estonia */
  | 'EE'
  /** Egypt */
  | 'EG'
  /** Western Sahara */
  | 'EH'
  /** Eritrea */
  | 'ER'
  /** Spain */
  | 'ES'
  /** Ethiopia */
  | 'ET'
  /** Finland */
  | 'FI'
  /** Fiji */
  | 'FJ'
  /** Falkland Islands */
  | 'FK'
  /** Micronesia */
  | 'FM'
  /** Faroe Islands */
  | 'FO'
  /** France */
  | 'FR'
  /** Gabon */
  | 'GA'
  /** United Kingdom */
  | 'GB'
  /** Grenada */
  | 'GD'
  /** Georgia */
  | 'GE'
  /** French Guiana */
  | 'GF'
  /** Guernsey */
  | 'GG'
  /** Ghana */
  | 'GH'
  /** Gibraltar */
  | 'GI'
  /** Greenland */
  | 'GL'
  /** Gambia */
  | 'GM'
  /** Guinea */
  | 'GN'
  /** Guadeloupe */
  | 'GP'
  /** Equatorial Guinea */
  | 'GQ'
  /** Greece */
  | 'GR'
  /** South Georgia & South Sandwich Islands */
  | 'GS'
  /** Guatemala */
  | 'GT'
  /** Guam */
  | 'GU'
  /** Guinea-Bissau */
  | 'GW'
  /** Guyana */
  | 'GY'
  /** Hong Kong SAR China */
  | 'HK'
  /** Heard & McDonald Islands */
  | 'HM'
  /** Honduras */
  | 'HN'
  /** Croatia */
  | 'HR'
  /** Haiti */
  | 'HT'
  /** Hungary */
  | 'HU'
  /** Indonesia */
  | 'ID'
  /** Ireland */
  | 'IE'
  /** Israel */
  | 'IL'
  /** Isle of Man */
  | 'IM'
  /** India */
  | 'IN'
  /** British Indian Ocean Territory */
  | 'IO'
  /** Iraq */
  | 'IQ'
  /** Iran */
  | 'IR'
  /** Iceland */
  | 'IS'
  /** Italy */
  | 'IT'
  /** Jersey */
  | 'JE'
  /** Jamaica */
  | 'JM'
  /** Jordan */
  | 'JO'
  /** Japan */
  | 'JP'
  /** Kenya */
  | 'KE'
  /** Kyrgyzstan */
  | 'KG'
  /** Cambodia */
  | 'KH'
  /** Kiribati */
  | 'KI'
  /** Comoros */
  | 'KM'
  /** St. Kitts & Nevis */
  | 'KN'
  /** North Korea */
  | 'KP'
  /** South Korea */
  | 'KR'
  /** Kuwait */
  | 'KW'
  /** Cayman Islands */
  | 'KY'
  /** Kazakhstan */
  | 'KZ'
  /** Laos */
  | 'LA'
  /** Lebanon */
  | 'LB'
  /** St. Lucia */
  | 'LC'
  /** Liechtenstein */
  | 'LI'
  /** Sri Lanka */
  | 'LK'
  /** Liberia */
  | 'LR'
  /** Lesotho */
  | 'LS'
  /** Lithuania */
  | 'LT'
  /** Luxembourg */
  | 'LU'
  /** Latvia */
  | 'LV'
  /** Libya */
  | 'LY'
  /** Morocco */
  | 'MA'
  /** Monaco */
  | 'MC'
  /** Moldova */
  | 'MD'
  /** Montenegro */
  | 'ME'
  /** St. Martin */
  | 'MF'
  /** Madagascar */
  | 'MG'
  /** Marshall Islands */
  | 'MH'
  /** Macedonia */
  | 'MK'
  /** Mali */
  | 'ML'
  /** Myanmar (Burma) */
  | 'MM'
  /** Mongolia */
  | 'MN'
  /** Macau SAR China */
  | 'MO'
  /** Northern Mariana Islands */
  | 'MP'
  /** Martinique */
  | 'MQ'
  /** Mauritania */
  | 'MR'
  /** Montserrat */
  | 'MS'
  /** Malta */
  | 'MT'
  /** Mauritius */
  | 'MU'
  /** Maldives */
  | 'MV'
  /** Malawi */
  | 'MW'
  /** Mexico */
  | 'MX'
  /** Malaysia */
  | 'MY'
  /** Mozambique */
  | 'MZ'
  /** Namibia */
  | 'NA'
  /** New Caledonia */
  | 'NC'
  /** Niger */
  | 'NE'
  /** Norfolk Island */
  | 'NF'
  /** Nigeria */
  | 'NG'
  /** Nicaragua */
  | 'NI'
  /** Netherlands */
  | 'NL'
  /** Norway */
  | 'NO'
  /** Nepal */
  | 'NP'
  /** Nauru */
  | 'NR'
  /** Niue */
  | 'NU'
  /** New Zealand */
  | 'NZ'
  /** Oman */
  | 'OM'
  /** Panama */
  | 'PA'
  /** Peru */
  | 'PE'
  /** French Polynesia */
  | 'PF'
  /** Papua New Guinea */
  | 'PG'
  /** Philippines */
  | 'PH'
  /** Pakistan */
  | 'PK'
  /** Poland */
  | 'PL'
  /** St. Pierre & Miquelon */
  | 'PM'
  /** Pitcairn Islands */
  | 'PN'
  /** Palestinian Territories */
  | 'PS'
  /** Portugal */
  | 'PT'
  /** Palau */
  | 'PW'
  /** Paraguay */
  | 'PY'
  /** Qatar */
  | 'QA'
  /** Réunion */
  | 'RE'
  /** Romania */
  | 'RO'
  /** Serbia */
  | 'RS'
  /** Russia */
  | 'RU'
  /** Rwanda */
  | 'RW'
  /** Saudi Arabia */
  | 'SA'
  /** Solomon Islands */
  | 'SB'
  /** Seychelles */
  | 'SC'
  /** Sudan */
  | 'SD'
  /** Sweden */
  | 'SE'
  /** Singapore */
  | 'SG'
  /** St. Helena */
  | 'SH'
  /** Slovenia */
  | 'SI'
  /** Svalbard & Jan Mayen */
  | 'SJ'
  /** Slovakia */
  | 'SK'
  /** Sierra Leone */
  | 'SL'
  /** San Marino */
  | 'SM'
  /** Senegal */
  | 'SN'
  /** Somalia */
  | 'SO'
  /** Suriname */
  | 'SR'
  /** São Tomé & Príncipe */
  | 'ST'
  /** El Salvador */
  | 'SV'
  /** Syria */
  | 'SY'
  /** Swaziland */
  | 'SZ'
  /** Turks & Caicos Islands */
  | 'TC'
  /** Chad */
  | 'TD'
  /** French Southern Territories */
  | 'TF'
  /** Togo */
  | 'TG'
  /** Thailand */
  | 'TH'
  /** Tajikistan */
  | 'TJ'
  /** Tokelau */
  | 'TK'
  /** Timor-Leste */
  | 'TL'
  /** Turkmenistan */
  | 'TM'
  /** Tunisia */
  | 'TN'
  /** Tonga */
  | 'TO'
  /** Turkey */
  | 'TR'
  /** Trinidad & Tobago */
  | 'TT'
  /** Tuvalu */
  | 'TV'
  /** Taiwan */
  | 'TW'
  /** Tanzania */
  | 'TZ'
  /** Ukraine */
  | 'UA'
  /** Uganda */
  | 'UG'
  /** U.S. Outlying Islands */
  | 'UM'
  /** United States */
  | 'US'
  /** Uruguay */
  | 'UY'
  /** Uzbekistan */
  | 'UZ'
  /** Vatican City */
  | 'VA'
  /** St. Vincent & Grenadines */
  | 'VC'
  /** Venezuela */
  | 'VE'
  /** British Virgin Islands */
  | 'VG'
  /** U.S. Virgin Islands */
  | 'VI'
  /** Vietnam */
  | 'VN'
  /** Vanuatu */
  | 'VU'
  /** Wallis & Futuna */
  | 'WF'
  /** Samoa */
  | 'WS'
  /** Yemen */
  | 'YE'
  /** Mayotte */
  | 'YT'
  /** South Africa */
  | 'ZA'
  /** Zambia */
  | 'ZM'
  /** Zimbabwe */
  | 'ZW'

export type CustomerAddressAttribute = {
  __typename?: 'CustomerAddressAttribute'
  /** Attribute code */
  attribute_code?: Maybe<Scalars['String']>
  /** Attribute value */
  value?: Maybe<Scalars['String']>
}

/** CustomerAddressRegion defines the customer's state or province */
export type CustomerAddressRegion = {
  __typename?: 'CustomerAddressRegion'
  /** The state or province name */
  region?: Maybe<Scalars['String']>
  /** The address region code */
  region_code?: Maybe<Scalars['String']>
  /** The unique ID for a pre-defined region */
  region_id?: Maybe<Scalars['Int']>
}

/** Identifies the filter to use for filtering orders. */
export type CustomerOrdersFilterInput = {
  /** Filters by order number. */
  number?: Maybe<FilterStringTypeInput>
}

/** Defines a filter for an input string. */
export type FilterStringTypeInput = {
  /** Filters items that are exactly the same as the specified string. */
  eq?: Maybe<Scalars['String']>
  /** Filters items that are exactly the same as entries specified in an array of strings. */
  in?: Maybe<Array<Maybe<Scalars['String']>>>
  /** Defines a filter that performs a fuzzy search using the specified string. */
  match?: Maybe<Scalars['String']>
}

/** The collection of orders that match the conditions defined in the filter */
export type CustomerOrders = {
  __typename?: 'CustomerOrders'
  /** An array of customer orders */
  items: Array<Maybe<CustomerOrder>>
  /** An object that includes the current_page, page_info, and page_size values specified in the query */
  page_info?: Maybe<SearchResultPageInfo>
  /** The total count of customer orders */
  total_count?: Maybe<Scalars['Int']>
}

/** Contains details about each of the customer's orders */
export type CustomerOrder = {
  __typename?: 'CustomerOrder'
  /** The billing address for the order */
  billing_address?: Maybe<OrderAddress>
  /** The shipping carrier for the order delivery */
  carrier?: Maybe<Scalars['String']>
  /** Comments about the order */
  comments?: Maybe<Array<Maybe<SalesCommentItem>>>
  /** @deprecated Use the order_date attribute instead */
  created_at?: Maybe<Scalars['String']>
  /** A list of credit memos */
  credit_memos?: Maybe<Array<Maybe<CreditMemo>>>
  /** The entered gift message for the order */
  gift_message?: Maybe<GiftMessage>
  /** @deprecated Use the totals.grand_total attribute instead */
  grand_total?: Maybe<Scalars['Float']>
  /** The unique ID for a `CustomerOrder` object */
  id: Scalars['ID']
  /** @deprecated Use the id attribute instead */
  increment_id?: Maybe<Scalars['String']>
  /** A list of invoices for the order */
  invoices: Array<Maybe<Invoice>>
  /** An array containing the items purchased in this order */
  items?: Maybe<Array<Maybe<OrderItemInterface>>>
  /** The order number */
  number: Scalars['String']
  /** The date the order was placed */
  order_date: Scalars['String']
  /** @deprecated Use the number attribute instead */
  order_number: Scalars['String']
  /** Payment details for the order */
  payment_methods?: Maybe<Array<Maybe<OrderPaymentMethod>>>
  /** A list of shipments for the order */
  shipments?: Maybe<Array<Maybe<OrderShipment>>>
  /** The shipping address for the order */
  shipping_address?: Maybe<OrderAddress>
  /** The delivery method for the order */
  shipping_method?: Maybe<Scalars['String']>
  /** The current status of the order */
  status: Scalars['String']
  /** Contains details about the calculated totals for this order */
  total?: Maybe<OrderTotal>
}

/** OrderAddress contains detailed information about an order's billing and shipping addresses */
export type OrderAddress = {
  __typename?: 'OrderAddress'
  /** The city or town */
  city: Scalars['String']
  /** The customer's company */
  company?: Maybe<Scalars['String']>
  /** The customer's country */
  country_code?: Maybe<CountryCodeEnum>
  /** The fax number */
  fax?: Maybe<Scalars['String']>
  /** The first name of the person associated with the shipping/billing address */
  firstname: Scalars['String']
  /** The family name of the person associated with the shipping/billing address */
  lastname: Scalars['String']
  /** The middle name of the person associated with the shipping/billing address */
  middlename?: Maybe<Scalars['String']>
  /** The customer's order ZIP or postal code */
  postcode?: Maybe<Scalars['String']>
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: Maybe<Scalars['String']>
  /** The state or province name */
  region?: Maybe<Scalars['String']>
  /** The unique ID for a `Region` object of a pre-defined region */
  region_id?: Maybe<Scalars['ID']>
  /** An array of strings that define the street number and name */
  street: Array<Maybe<Scalars['String']>>
  /** A value such as Sr., Jr., or III */
  suffix?: Maybe<Scalars['String']>
  /** The telephone number */
  telephone: Scalars['String']
  /** The customer's Value-added tax (VAT) number (for corporate customers) */
  vat_id?: Maybe<Scalars['String']>
}

/** Comment item details */
export type SalesCommentItem = {
  __typename?: 'SalesCommentItem'
  /** The text of the message */
  message: Scalars['String']
  /** The timestamp of the comment */
  timestamp: Scalars['String']
}

/** Credit memo details */
export type CreditMemo = {
  __typename?: 'CreditMemo'
  /** Comments on the credit memo */
  comments?: Maybe<Array<Maybe<SalesCommentItem>>>
  /** The unique ID for a `CreditMemo` object */
  id: Scalars['ID']
  /** An array containing details about refunded items */
  items?: Maybe<Array<Maybe<CreditMemoItemInterface>>>
  /** The sequential credit memo number */
  number: Scalars['String']
  /** Contains details about the total refunded amount */
  total?: Maybe<CreditMemoTotal>
}

/** Credit memo item details */
export type CreditMemoItemInterface = {
  /** Contains information about the final discount amount for the base product, including discounts on options */
  discounts?: Maybe<Array<Maybe<Discount>>>
  /** The unique ID for a `CreditMemoItemInterface` object */
  id: Scalars['ID']
  /** The order item the credit memo is applied to */
  order_item?: Maybe<OrderItemInterface>
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>
  /** The sale price for the base product, including selected options */
  product_sale_price: Money
  /** SKU of the base product */
  product_sku: Scalars['String']
  /** The number of refunded items */
  quantity_refunded?: Maybe<Scalars['Float']>
}

/** Order item details */
export type OrderItemInterface = {
  /** The final discount information for the product */
  discounts?: Maybe<Array<Maybe<Discount>>>
  /** The entered option for the base product, such as a logo or image */
  entered_options?: Maybe<Array<Maybe<OrderItemOption>>>
  /** The unique ID for a `OrderItemInterface` object */
  id: Scalars['ID']
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>
  /** The sale price of the base product, including selected options */
  product_sale_price: Money
  /** The SKU of the base product */
  product_sku: Scalars['String']
  /** The type of product, such as simple, configurable, etc. */
  product_type?: Maybe<Scalars['String']>
  /** URL key of the base product */
  product_url_key?: Maybe<Scalars['String']>
  /** The number of canceled items */
  quantity_canceled?: Maybe<Scalars['Float']>
  /** The number of invoiced items */
  quantity_invoiced?: Maybe<Scalars['Float']>
  /** The number of units ordered for this item */
  quantity_ordered?: Maybe<Scalars['Float']>
  /** The number of refunded items */
  quantity_refunded?: Maybe<Scalars['Float']>
  /** The number of returned items */
  quantity_returned?: Maybe<Scalars['Float']>
  /** The number of shipped items */
  quantity_shipped?: Maybe<Scalars['Float']>
  /** The selected options for the base product, such as color or size */
  selected_options?: Maybe<Array<Maybe<OrderItemOption>>>
  /** The status of the order item */
  status?: Maybe<Scalars['String']>
}

/** Represents order item options like selected or entered */
export type OrderItemOption = {
  __typename?: 'OrderItemOption'
  /** The name of the option */
  label: Scalars['String']
  /** The value of the option */
  value: Scalars['String']
}

/** Credit memo price details */
export type CreditMemoTotal = {
  __typename?: 'CreditMemoTotal'
  /** An adjustment manually applied to the order */
  adjustment: Money
  /** The final base grand total amount in the base currency */
  base_grand_total: Money
  /** The applied discounts to the credit memo */
  discounts?: Maybe<Array<Maybe<Discount>>>
  /** The final total amount, including shipping, discounts, and taxes */
  grand_total: Money
  /** Contains details about the shipping and handling costs for the credit memo */
  shipping_handling?: Maybe<ShippingHandling>
  /** The subtotal of the invoice, excluding shipping, discounts, and taxes */
  subtotal: Money
  /** The credit memo tax details */
  taxes?: Maybe<Array<Maybe<TaxItem>>>
  /** The shipping amount for the credit memo */
  total_shipping: Money
  /** The amount of tax applied to the credit memo */
  total_tax: Money
}

/** The Shipping handling details */
export type ShippingHandling = {
  __typename?: 'ShippingHandling'
  /** The shipping amount, excluding tax */
  amount_excluding_tax?: Maybe<Money>
  /** The shipping amount, including tax */
  amount_including_tax?: Maybe<Money>
  /** The applied discounts to the shipping */
  discounts?: Maybe<Array<Maybe<ShippingDiscount>>>
  /** Contains details about taxes applied for shipping */
  taxes?: Maybe<Array<Maybe<TaxItem>>>
  /** The total amount for shipping */
  total_amount: Money
}

/** Defines an individual shipping discount. This discount can be applied to shipping. */
export type ShippingDiscount = {
  __typename?: 'ShippingDiscount'
  /** The amount of the discount */
  amount: Money
}

/** The tax item details */
export type TaxItem = {
  __typename?: 'TaxItem'
  /** The amount of tax applied to the item */
  amount: Money
  /** The rate used to calculate the tax */
  rate: Scalars['Float']
  /** A title that describes the tax */
  title: Scalars['String']
}

/** Invoice details */
export type Invoice = {
  __typename?: 'Invoice'
  /** Comments on the invoice */
  comments?: Maybe<Array<Maybe<SalesCommentItem>>>
  /** The unique ID for a `Invoice` object */
  id: Scalars['ID']
  /** Invoiced product details */
  items?: Maybe<Array<Maybe<InvoiceItemInterface>>>
  /** Sequential invoice number */
  number: Scalars['String']
  /** Invoice total amount details */
  total?: Maybe<InvoiceTotal>
}

/** Invoice item details */
export type InvoiceItemInterface = {
  /** Contains information about the final discount amount for the base product, including discounts on options */
  discounts?: Maybe<Array<Maybe<Discount>>>
  /** The unique ID for a `InvoiceItemInterface` object */
  id: Scalars['ID']
  /** Contains details about an individual order item */
  order_item?: Maybe<OrderItemInterface>
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>
  /** The sale price for the base product including selected options */
  product_sale_price: Money
  /** The SKU of the base product */
  product_sku: Scalars['String']
  /** The number of invoiced items */
  quantity_invoiced?: Maybe<Scalars['Float']>
}

/** Contains price details from an invoice */
export type InvoiceTotal = {
  __typename?: 'InvoiceTotal'
  /** The final base grand total amount in the base currency */
  base_grand_total: Money
  /** The applied discounts to the invoice */
  discounts?: Maybe<Array<Maybe<Discount>>>
  /** The final total amount, including shipping, discounts, and taxes */
  grand_total: Money
  /** Contains details about the shipping and handling costs for the invoice */
  shipping_handling?: Maybe<ShippingHandling>
  /** The subtotal of the invoice, excluding shipping, discounts, and taxes */
  subtotal: Money
  /** The invoice tax details */
  taxes?: Maybe<Array<Maybe<TaxItem>>>
  /** The shipping amount for the invoice */
  total_shipping: Money
  /** The amount of tax applied to the invoice */
  total_tax: Money
}

/** Contains details about the payment method used to pay for the order */
export type OrderPaymentMethod = {
  __typename?: 'OrderPaymentMethod'
  /** Additional data per payment method type */
  additional_data?: Maybe<Array<Maybe<KeyValue>>>
  /** The label that describes the payment method */
  name: Scalars['String']
  /** The payment method code that indicates how the order was paid for */
  type: Scalars['String']
}

/** The key-value type */
export type KeyValue = {
  __typename?: 'KeyValue'
  /** The name part of the name/value pair */
  name?: Maybe<Scalars['String']>
  /** The value part of the name/value pair */
  value?: Maybe<Scalars['String']>
}

/** Order shipment details */
export type OrderShipment = {
  __typename?: 'OrderShipment'
  /** Comments added to the shipment */
  comments?: Maybe<Array<Maybe<SalesCommentItem>>>
  /** The unique ID for a `OrderShipment` object */
  id: Scalars['ID']
  /** Contains items included in the shipment */
  items?: Maybe<Array<Maybe<ShipmentItemInterface>>>
  /** The sequential credit shipment number */
  number: Scalars['String']
  /** Contains shipment tracking details */
  tracking?: Maybe<Array<Maybe<ShipmentTracking>>>
}

/** Order shipment item details */
export type ShipmentItemInterface = {
  /** The unique ID for a `ShipmentItemInterface` object */
  id: Scalars['ID']
  /** Associated order item */
  order_item?: Maybe<OrderItemInterface>
  /** Name of the base product */
  product_name?: Maybe<Scalars['String']>
  /** Sale price for the base product */
  product_sale_price: Money
  /** SKU of the base product */
  product_sku: Scalars['String']
  /** Number of shipped items */
  quantity_shipped: Scalars['Float']
}

/** Order shipment tracking details */
export type ShipmentTracking = {
  __typename?: 'ShipmentTracking'
  /** The shipping carrier for the order delivery */
  carrier: Scalars['String']
  /** The tracking number of the order shipment */
  number?: Maybe<Scalars['String']>
  /** The shipment tracking title */
  title: Scalars['String']
}

/** Contains details about the sales total amounts used to calculate the final price */
export type OrderTotal = {
  __typename?: 'OrderTotal'
  /** The final base grand total amount in the base currency */
  base_grand_total: Money
  /** The applied discounts to the order */
  discounts?: Maybe<Array<Maybe<Discount>>>
  /** The final total amount, including shipping, discounts, and taxes */
  grand_total: Money
  /** Contains details about the shipping and handling costs for the order */
  shipping_handling?: Maybe<ShippingHandling>
  /** The subtotal of the order, excluding shipping, discounts, and taxes */
  subtotal: Money
  /** The order tax details */
  taxes?: Maybe<Array<Maybe<TaxItem>>>
  /** The shipping amount for the order */
  total_shipping: Money
  /** The amount of tax applied to the order */
  total_tax: Money
}

export type Wishlist = {
  __typename?: 'Wishlist'
  /** The unique ID for a `Wishlist` object */
  id?: Maybe<Scalars['ID']>
  /** @deprecated Use field `items_v2` from type `Wishlist` instead */
  items?: Maybe<Array<Maybe<WishlistItem>>>
  /** The number of items in the wish list */
  items_count?: Maybe<Scalars['Int']>
  /** An array of items in the customer's wish list */
  items_v2?: Maybe<WishlistItems>
  /** An encrypted code that Magento uses to link to the wish list */
  sharing_code?: Maybe<Scalars['String']>
  /** The time of the last modification to the wish list */
  updated_at?: Maybe<Scalars['String']>
}

export type WishlistItems_V2Args = {
  currentPage?: Maybe<Scalars['Int']>
  pageSize?: Maybe<Scalars['Int']>
}

export type WishlistItem = {
  __typename?: 'WishlistItem'
  /** The time when the customer added the item to the wish list */
  added_at?: Maybe<Scalars['String']>
  /** The customer's comment about this item */
  description?: Maybe<Scalars['String']>
  /** The unique ID for a `WishlistItem` object */
  id?: Maybe<Scalars['Int']>
  product?: Maybe<ProductInterface>
  /** The quantity of this wish list item */
  qty?: Maybe<Scalars['Float']>
}

export type WishlistItems = {
  __typename?: 'WishlistItems'
  /** A list of items in the wish list */
  items: Array<Maybe<WishlistItemInterface>>
  /** Contains pagination metadata */
  page_info?: Maybe<SearchResultPageInfo>
}

export type WishlistItemInterface = {
  /** The date and time the item was added to the wish list */
  added_at: Scalars['String']
  /** Custom options selected for the wish list item */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>
  /** The description of the item */
  description?: Maybe<Scalars['String']>
  /** The unique ID for a `WishlistItemInterface` object */
  id: Scalars['ID']
  /** Product details of the wish list item */
  product?: Maybe<ProductInterface>
  /** The quantity of this wish list item */
  quantity: Scalars['Float']
}

export type SelectedCustomizableOption = {
  __typename?: 'SelectedCustomizableOption'
  /**
   * The unique ID for a `CustomizableRadioOption`, `CustomizableDropDownOption`,
   * `CustomizableMultipleOption`, etc. of `CustomizableOptionInterface` objects
   */
  customizable_option_uid: Scalars['ID']
  /** @deprecated Use SelectedCustomizableOption.customizable_option_uid instead */
  id: Scalars['Int']
  is_required: Scalars['Boolean']
  label: Scalars['String']
  sort_order: Scalars['Int']
  type: Scalars['String']
  values: Array<Maybe<SelectedCustomizableOptionValue>>
}

export type SelectedCustomizableOptionValue = {
  __typename?: 'SelectedCustomizableOptionValue'
  /**
   * The unique ID for a `CustomizableMultipleValue`, `CustomizableRadioValue`,
   * `CustomizableCheckboxValue`, `CustomizableDropDownValue`, etc. objects
   */
  customizable_option_value_uid: Scalars['ID']
  /** @deprecated Use SelectedCustomizableOptionValue.customizable_option_value_uid instead */
  id: Scalars['Int']
  label: Scalars['String']
  price: CartItemSelectedOptionValuePrice
  value: Scalars['String']
}

export type CartItemSelectedOptionValuePrice = {
  __typename?: 'CartItemSelectedOptionValuePrice'
  type: PriceTypeEnum
  units: Scalars['String']
  value: Scalars['Float']
}

/** This enumeration the price type. */
export type PriceTypeEnum = 'DYNAMIC' | 'FIXED' | 'PERCENT'

export type CustomerDownloadableProducts = {
  __typename?: 'CustomerDownloadableProducts'
  /** List of purchased downloadable items */
  items?: Maybe<Array<Maybe<CustomerDownloadableProduct>>>
}

export type CustomerDownloadableProduct = {
  __typename?: 'CustomerDownloadableProduct'
  date?: Maybe<Scalars['String']>
  download_url?: Maybe<Scalars['String']>
  order_increment_id?: Maybe<Scalars['String']>
  remaining_downloads?: Maybe<Scalars['String']>
  status?: Maybe<Scalars['String']>
}

export type CustomerPaymentTokens = {
  __typename?: 'CustomerPaymentTokens'
  /** An array of payment tokens */
  items: Array<Maybe<PaymentToken>>
}

/** The stored payment method available to the customer */
export type PaymentToken = {
  __typename?: 'PaymentToken'
  /** Stored account details */
  details?: Maybe<Scalars['String']>
  /** The payment method code associated with the token */
  payment_method_code: Scalars['String']
  /** The public hash of the token */
  public_hash: Scalars['String']
  type: PaymentTokenTypeEnum
}

/** The list of available payment token types */
export type PaymentTokenTypeEnum = 'account' | 'card'

/** The required input to request the secure URL for Payments Pro Hosted Solution payment. */
export type HostedProUrlInput = {
  /** The unique ID that identifies the customer's cart */
  cart_id: Scalars['String']
}

/** Contains secure URL used for Payments Pro Hosted Solution payment method. */
export type HostedProUrl = {
  __typename?: 'HostedProUrl'
  /** Secure Url generated by PayPal */
  secure_form_url?: Maybe<Scalars['String']>
}

/** Input required to fetch payment token information for Payflow Link and Payments Advanced payment methods. */
export type PayflowLinkTokenInput = {
  /** The unique ID that identifies the customer's cart */
  cart_id: Scalars['String']
}

/**
 * Contains information used to generate PayPal iframe for transaction. Applies to Payflow Link and
 * Payments Advanced payment methods.
 */
export type PayflowLinkToken = {
  __typename?: 'PayflowLinkToken'
  /** Mode for Payflow transaction */
  mode?: Maybe<PayflowLinkMode>
  /** PayPal URL used for requesting Payflow form */
  paypal_url?: Maybe<Scalars['String']>
  /** Secure token generated by PayPal */
  secure_token?: Maybe<Scalars['String']>
  /** Secure token ID generated by PayPal */
  secure_token_id?: Maybe<Scalars['String']>
}

/** Mode for payment: TEST or LIVE. Applies to Payflow Link and Payments Advanced payment methods. */
export type PayflowLinkMode = 'LIVE' | 'TEST'

export type IsEmailAvailableOutput = {
  __typename?: 'IsEmailAvailableOutput'
  /** Is email availabel value */
  is_email_available?: Maybe<Scalars['Boolean']>
}

/** AreaInput defines the parameters which will be used for filter by specified location. */
export type AreaInput = {
  /** The radius for the search in KM. */
  radius: Scalars['Int']
  /**
   * The country code where search must be performed. Required parameter together with region, city
   * or postcode.
   */
  search_term: Scalars['String']
}

/** PickupLocationFilterInput defines the list of attributes and filters for the search. */
export type PickupLocationFilterInput = {
  /** Filter by city. */
  city?: Maybe<FilterTypeInput>
  /** Filter by country. */
  country_id?: Maybe<FilterTypeInput>
  /** Filter by pickup location name. */
  name?: Maybe<FilterTypeInput>
  /** Filter by pickup location code. */
  pickup_location_code?: Maybe<FilterTypeInput>
  /** Filter by postcode. */
  postcode?: Maybe<FilterTypeInput>
  /** Filter by region. */
  region?: Maybe<FilterTypeInput>
  /** Filter by region id. */
  region_id?: Maybe<FilterTypeInput>
  /** Filter by street. */
  street?: Maybe<FilterTypeInput>
}

/** FilterTypeInput specifies which action will be performed in a query */
export type FilterTypeInput = {
  /** Equals */
  eq?: Maybe<Scalars['String']>
  finset?: Maybe<Array<Maybe<Scalars['String']>>>
  /** From. Must be used with 'to' */
  from?: Maybe<Scalars['String']>
  /** Greater than */
  gt?: Maybe<Scalars['String']>
  /** Greater than or equal to */
  gteq?: Maybe<Scalars['String']>
  /** In. The value can contain a set of comma-separated values */
  in?: Maybe<Array<Maybe<Scalars['String']>>>
  /** Like. The specified value can contain % (percent signs) to allow matching of 0 or more characters */
  like?: Maybe<Scalars['String']>
  /** Less than */
  lt?: Maybe<Scalars['String']>
  /** Less than or equal to */
  lteq?: Maybe<Scalars['String']>
  /** More than or equal to */
  moreq?: Maybe<Scalars['String']>
  /** Not equal to */
  neq?: Maybe<Scalars['String']>
  /** Not in. The value can contain a set of comma-separated values */
  nin?: Maybe<Array<Maybe<Scalars['String']>>>
  /** Not null */
  notnull?: Maybe<Scalars['String']>
  /** Is null */
  null?: Maybe<Scalars['String']>
  /** To. Must be used with 'from' */
  to?: Maybe<Scalars['String']>
}

/**
 * PickupLocationSortInput specifies attribute to use for sorting search results and indicates
 * whether the results are sorted in ascending or descending order.
 */
export type PickupLocationSortInput = {
  /** City where pickup location is placed. */
  city?: Maybe<SortEnum>
  /** Name of the contact person. */
  contact_name?: Maybe<SortEnum>
  /** Id of the country in two letters. */
  country_id?: Maybe<SortEnum>
  /** Description of the pickup location. */
  description?: Maybe<SortEnum>
  /**
   * Distance to the address, requested by distance filter. Applicable only with distance filter. If
   * distance sort order is present, all other sort orders will be ignored.
   */
  distance?: Maybe<SortEnum>
  /** Contact email of the pickup location. */
  email?: Maybe<SortEnum>
  /** Contact fax of the pickup location. */
  fax?: Maybe<SortEnum>
  /** Geographic latitude where pickup location is placed. */
  latitude?: Maybe<SortEnum>
  /** Geographic longitude where pickup location is placed. */
  longitude?: Maybe<SortEnum>
  /** The pickup location name. Customer use this to identify the pickup location. */
  name?: Maybe<SortEnum>
  /** Contact phone number of the pickup location. */
  phone?: Maybe<SortEnum>
  /** A code assigned to pickup location to identify the source. */
  pickup_location_code?: Maybe<SortEnum>
  /** Postcode where pickup location is placed. */
  postcode?: Maybe<SortEnum>
  /** Name of the region. */
  region?: Maybe<SortEnum>
  /** Id of the region. */
  region_id?: Maybe<SortEnum>
  /** Street where pickup location is placed. */
  street?: Maybe<SortEnum>
}

/** Product Information used for Pickup Locations search. */
export type ProductInfoInput = {
  /** Product SKU. */
  sku: Scalars['String']
}

/** Top level object returned in a pickup locations search. */
export type PickupLocations = {
  __typename?: 'PickupLocations'
  /** An array of pickup locations that match the specific search request. */
  items?: Maybe<Array<Maybe<PickupLocation>>>
  /** An object that includes the page_info and currentPage values specified in the query. */
  page_info?: Maybe<SearchResultPageInfo>
  /** The number of products returned. */
  total_count?: Maybe<Scalars['Int']>
}

/** Defines Pickup Location information. */
export type PickupLocation = {
  __typename?: 'PickupLocation'
  city?: Maybe<Scalars['String']>
  contact_name?: Maybe<Scalars['String']>
  country_id?: Maybe<Scalars['String']>
  description?: Maybe<Scalars['String']>
  email?: Maybe<Scalars['String']>
  fax?: Maybe<Scalars['String']>
  latitude?: Maybe<Scalars['Float']>
  longitude?: Maybe<Scalars['Float']>
  name?: Maybe<Scalars['String']>
  phone?: Maybe<Scalars['String']>
  pickup_location_code?: Maybe<Scalars['String']>
  postcode?: Maybe<Scalars['String']>
  region?: Maybe<Scalars['String']>
  region_id?: Maybe<Scalars['Int']>
  street?: Maybe<Scalars['String']>
}

export type ProductReviewRatingsMetadata = {
  __typename?: 'ProductReviewRatingsMetadata'
  /** List of product reviews sorted by position */
  items: Array<Maybe<ProductReviewRatingMetadata>>
}

export type ProductReviewRatingMetadata = {
  __typename?: 'ProductReviewRatingMetadata'
  /** An encoded rating ID. */
  id: Scalars['String']
  /** The label assigned to an aspect of a product that is being rated, such as quality or price */
  name: Scalars['String']
  /** List of product review ratings sorted by position. */
  values: Array<Maybe<ProductReviewRatingValueMetadata>>
}

export type ProductReviewRatingValueMetadata = {
  __typename?: 'ProductReviewRatingValueMetadata'
  /** A ratings scale, such as the number of stars awarded */
  value: Scalars['String']
  /** An encoded rating value id. */
  value_id: Scalars['String']
}

/**
 * ProductAttributeFilterInput defines the filters to be used in the search. A filter contains at
 * least one attribute, a comparison operator, and the value that is being searched for.
 */
export type ProductAttributeFilterInput = {
  /** Attribute label: Activity */
  activity?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Category Gear */
  category_gear?: Maybe<FilterEqualTypeInput>
  /** Deprecated: use `category_uid` to filter product by category id. */
  category_id?: Maybe<FilterEqualTypeInput>
  /** Filter product by the unique ID for a `CategoryInterface` object. */
  category_uid?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Climate */
  climate?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Collar */
  collar?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Color */
  color?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Default configuration Json */
  default_configuration_json?: Maybe<FilterMatchTypeInput>
  /** Attribute label: Description */
  description?: Maybe<FilterMatchTypeInput>
  /** Attribute label: Eco Collection */
  eco_collection?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Erin Recommends */
  erin_recommends?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Features */
  features_bags?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Format */
  format?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Gender */
  gender?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Material */
  material?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Product Name */
  name?: Maybe<FilterMatchTypeInput>
  /** Attribute label: New */
  new?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Pattern */
  pattern?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Performance Fabric */
  performance_fabric?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Price */
  price?: Maybe<FilterRangeTypeInput>
  /** Attribute label: Sale */
  sale?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Short Description */
  short_description?: Maybe<FilterMatchTypeInput>
  /** Attribute label: Size */
  size?: Maybe<FilterEqualTypeInput>
  /** Attribute label: SKU */
  sku?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Sleeve */
  sleeve?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Strap/Handle */
  strap_bags?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Style Bags */
  style_bags?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Style Bottom */
  style_bottom?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Style General */
  style_general?: Maybe<FilterEqualTypeInput>
  /** The part of the URL that identifies the product */
  url_key?: Maybe<FilterEqualTypeInput>
  /** Attribute label: Varying simple prices */
  varying_simple_prices?: Maybe<FilterEqualTypeInput>
}

/** Defines a filter that matches a range of values, such as prices or dates. */
export type FilterRangeTypeInput = {
  /** The beginning of the range */
  from?: Maybe<Scalars['String']>
  /** The end of the range */
  to?: Maybe<Scalars['String']>
}

/** The Products object is the top-level object returned in a product search. */
export type Products = {
  __typename?: 'Products'
  /** Layered navigation aggregations. */
  aggregations?: Maybe<Array<Maybe<Aggregation>>>
  /**
   * Layered navigation filters array.
   *
   * @deprecated Use aggregations instead
   */
  filters?: Maybe<Array<Maybe<LayerFilter>>>
  /** An array of products that match the specified search criteria. */
  items?: Maybe<Array<Maybe<ProductInterface>>>
  /** An object that includes the page_info and currentPage values specified in the query. */
  page_info?: Maybe<SearchResultPageInfo>
  /** An object that includes the default sort field and all available sort fields. */
  sort_fields?: Maybe<SortFields>
  /**
   * The number of products that are marked as visible. By default, in complex products, parent
   * products are visible, but their child products are not.
   */
  total_count?: Maybe<Scalars['Int']>
}

/**
 * A bucket that contains information for each filterable option (such as price, category `UID`, and
 * custom attributes).
 */
export type Aggregation = {
  __typename?: 'Aggregation'
  /** Attribute code of the aggregation group. */
  attribute_code: Scalars['String']
  /** The number of options in the aggregation group. */
  count?: Maybe<Scalars['Int']>
  /** The aggregation display name. */
  label?: Maybe<Scalars['String']>
  /** Array of options for the aggregation. */
  options?: Maybe<Array<Maybe<AggregationOption>>>
}

export type AggregationOption = AggregationOptionInterface & {
  __typename?: 'AggregationOption'
  /** The number of items that match the aggregation option. */
  count?: Maybe<Scalars['Int']>
  /** Aggregation option display label. */
  label?: Maybe<Scalars['String']>
  /** The internal ID that represents the value of the option. */
  value: Scalars['String']
}

export type AggregationOptionInterface = {
  /** The number of items that match the aggregation option. */
  count?: Maybe<Scalars['Int']>
  /** Aggregation option display label. */
  label?: Maybe<Scalars['String']>
  /** The internal ID that represents the value of the option. */
  value: Scalars['String']
}

export type LayerFilter = {
  __typename?: 'LayerFilter'
  /**
   * Array of filter items.
   *
   * @deprecated Use Aggregation.options instead.
   */
  filter_items?: Maybe<Array<Maybe<LayerFilterItemInterface>>>
  /**
   * Count of filter items in filter group.
   *
   * @deprecated Use Aggregation.count instead.
   */
  filter_items_count?: Maybe<Scalars['Int']>
  /**
   * Layered navigation filter name.
   *
   * @deprecated Use Aggregation.label instead.
   */
  name?: Maybe<Scalars['String']>
  /**
   * Request variable name for filter query.
   *
   * @deprecated Use Aggregation.attribute_code instead.
   */
  request_var?: Maybe<Scalars['String']>
}

export type LayerFilterItemInterface = {
  /**
   * Count of items by filter.
   *
   * @deprecated Use AggregationOption.count instead.
   */
  items_count?: Maybe<Scalars['Int']>
  /**
   * Filter label.
   *
   * @deprecated Use AggregationOption.label instead.
   */
  label?: Maybe<Scalars['String']>
  /**
   * Value for filter request variable to be used in query.
   *
   * @deprecated Use AggregationOption.value instead.
   */
  value_string?: Maybe<Scalars['String']>
}

/** SortFields contains a default value for sort fields and all available sort fields. */
export type SortFields = {
  __typename?: 'SortFields'
  /** Default value of sort fields. */
  default?: Maybe<Scalars['String']>
  /** Available sort fields. */
  options?: Maybe<Array<Maybe<SortField>>>
}

export type SortField = {
  __typename?: 'SortField'
  /** Label of sort field. */
  label?: Maybe<Scalars['String']>
  /** Attribute code of sort field. */
  value?: Maybe<Scalars['String']>
}

/** EntityUrl is an output object containing the `id`, `relative_url`, and `type` attributes */
export type EntityUrl = {
  __typename?: 'EntityUrl'
  /** @deprecated The canonical_url field is deprecated, use relative_url instead. */
  canonical_url?: Maybe<Scalars['String']>
  /**
   * The unique ID for a `ProductInterface`, `CategoryInterface`, `CmsPage`, etc. object associated
   * with the specified url. This could be a product UID, category UID, or cms page UID.
   */
  entity_uid?: Maybe<Scalars['ID']>
  /**
   * The ID assigned to the object associated with the specified url. This could be a product ID,
   * category ID, or page ID.
   *
   * @deprecated Use `entity_uid` instead.
   */
  id?: Maybe<Scalars['Int']>
  /** 301 or 302 HTTP code for url permanent or temporary redirect or 0 for the 200 no redirect */
  redirectCode?: Maybe<Scalars['Int']>
  /**
   * The internal relative URL. If the specified url is a redirect, the query returns the redirected
   * URL, not the original.
   */
  relative_url?: Maybe<Scalars['String']>
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>
}

/** This enumeration defines the entity type. */
export type UrlRewriteEntityTypeEnum = 'CATEGORY' | 'CMS_PAGE' | 'PRODUCT'

/** Deprecated: `Wishlist` type should be used instead */
export type WishlistOutput = {
  __typename?: 'WishlistOutput'
  /**
   * An array of items in the customer's wish list
   *
   * @deprecated Use field `items` from type `Wishlist` instead
   */
  items?: Maybe<Array<Maybe<WishlistItem>>>
  /**
   * The number of items in the wish list
   *
   * @deprecated Use field `items_count` from type `Wishlist` instead
   */
  items_count?: Maybe<Scalars['Int']>
  /**
   * When multiple wish lists are enabled, the name the customer assigns to the wishlist
   *
   * @deprecated This field is related to Commerce functionality and is always `null` in Open Source edition
   */
  name?: Maybe<Scalars['String']>
  /**
   * An encrypted code that Magento uses to link to the wish list
   *
   * @deprecated Use field `sharing_code` from type `Wishlist` instead
   */
  sharing_code?: Maybe<Scalars['String']>
  /**
   * The time of the last modification to the wish list
   *
   * @deprecated Use field `updated_at` from type `Wishlist` instead
   */
  updated_at?: Maybe<Scalars['String']>
}

export type Mutation = {
  __typename?: 'Mutation'
  addBundleProductsToCart?: Maybe<AddBundleProductsToCartOutput>
  addConfigurableProductsToCart?: Maybe<AddConfigurableProductsToCartOutput>
  addDownloadableProductsToCart?: Maybe<AddDownloadableProductsToCartOutput>
  /** Add any type of product to the cart */
  addProductsToCart?: Maybe<AddProductsToCartOutput>
  /** Add products to the specified compare list */
  addProductsToCompareList?: Maybe<CompareList>
  /** Adds one or more products to the specified wish list. This mutation supports all product types */
  addProductsToWishlist?: Maybe<AddProductsToWishlistOutput>
  addSimpleProductsToCart?: Maybe<AddSimpleProductsToCartOutput>
  addVirtualProductsToCart?: Maybe<AddVirtualProductsToCartOutput>
  applyCouponToCart?: Maybe<ApplyCouponToCartOutput>
  /** Assign the specified compare list to the logged in customer */
  assignCompareListToCustomer?: Maybe<AssignCompareListToCustomerOutput>
  /** Changes the password for the logged-in customer */
  changeCustomerPassword?: Maybe<Customer>
  /** Creates Client Token for Braintree Javascript SDK initialization. */
  createBraintreeClientToken: Scalars['String']
  /** Creates a new compare list. The compare list is saved for logged in customers */
  createCompareList?: Maybe<CompareList>
  /** Create customer account */
  createCustomer?: Maybe<CustomerOutput>
  /** Create customer address */
  createCustomerAddress?: Maybe<CustomerAddress>
  /** Create customer account */
  createCustomerV2?: Maybe<CustomerOutput>
  /** Creates an empty shopping cart for a guest or logged in user */
  createEmptyCart?: Maybe<Scalars['String']>
  /** Creates a Klarna Payments Session. */
  createKlarnaPaymentsSession?: Maybe<CreateKlarnaPaymentsSessionOutput>
  createMollieTransaction?: Maybe<MollieTransactionOutput>
  /**
   * Initiates a transaction and receives a token. Use this mutation for Payflow Pro and Payments
   * Pro payment methods
   */
  createPayflowProToken?: Maybe<CreatePayflowProTokenOutput>
  /**
   * Initiates an Express Checkout transaction and receives a token. Use this mutation for Express
   * Checkout and Payments Standard payment methods.
   */
  createPaypalExpressToken?: Maybe<PaypalExpressTokenOutput>
  /** Creates a product review for the specified SKU */
  createProductReview: CreateProductReviewOutput
  /** Delete the specified compare list */
  deleteCompareList?: Maybe<DeleteCompareListOutput>
  /** Delete customer address */
  deleteCustomerAddress?: Maybe<Scalars['Boolean']>
  /** Delete a customer payment token */
  deletePaymentToken?: Maybe<DeletePaymentTokenOutput>
  /** Retrieve the customer token */
  generateCustomerToken?: Maybe<CustomerToken>
  /** Request a customer token so that an administrator can perform remote shopping assistance */
  generateCustomerTokenAsAdmin?: Maybe<GenerateCustomerTokenAsAdminOutput>
  /**
   * Handles payment response and saves payment in Quote. Use this mutations for Payflow Pro and
   * Payments Pro payment methods.
   */
  handlePayflowProResponse?: Maybe<PayflowProResponseOutput>
  /** Merges the source cart into the destination cart */
  mergeCarts: Cart
  placeOrder?: Maybe<PlaceOrderOutput>
  removeCouponFromCart?: Maybe<RemoveCouponFromCartOutput>
  removeItemFromCart?: Maybe<RemoveItemFromCartOutput>
  /** Remove products from the specified compare list */
  removeProductsFromCompareList?: Maybe<CompareList>
  /** Removes one or more products from the specified wish list */
  removeProductsFromWishlist?: Maybe<RemoveProductsFromWishlistOutput>
  /** Adds all products from a customer's previous order to the cart. */
  reorderItems?: Maybe<ReorderItemsOutput>
  /**
   * Request an email with a reset password token for the registered customer identified by the
   * specified email.
   */
  requestPasswordResetEmail?: Maybe<Scalars['Boolean']>
  /**
   * Reset a customer's password using the reset password token that the customer received in an
   * email after requesting it using requestPasswordResetEmail.
   */
  resetPassword?: Maybe<Scalars['Boolean']>
  /** Revoke the customer token */
  revokeCustomerToken?: Maybe<RevokeCustomerTokenOutput>
  /** Recommends Product by Sending Single/Multiple Email */
  sendEmailToFriend?: Maybe<SendEmailToFriendOutput>
  setBillingAddressOnCart?: Maybe<SetBillingAddressOnCartOutput>
  setGuestEmailOnCart?: Maybe<SetGuestEmailOnCartOutput>
  /** @deprecated Should use setPaymentMethodOnCart and placeOrder mutations in single request. */
  setPaymentMethodAndPlaceOrder?: Maybe<PlaceOrderOutput>
  setPaymentMethodOnCart?: Maybe<SetPaymentMethodOnCartOutput>
  setShippingAddressesOnCart?: Maybe<SetShippingAddressesOnCartOutput>
  setShippingMethodsOnCart?: Maybe<SetShippingMethodsOnCartOutput>
  /** Subscribes the specified email to a newsletter */
  subscribeEmailToNewsletter?: Maybe<SubscribeEmailToNewsletterOutput>
  updateCartItems?: Maybe<UpdateCartItemsOutput>
  /** Deprecated. Use UpdateCustomerV2 instead. */
  updateCustomer?: Maybe<CustomerOutput>
  /** Update customer address */
  updateCustomerAddress?: Maybe<CustomerAddress>
  updateCustomerEmail?: Maybe<CustomerOutput>
  /** Update the customer's personal information */
  updateCustomerV2?: Maybe<CustomerOutput>
  /** Updates one or more products in the specified wish list */
  updateProductsInWishlist?: Maybe<UpdateProductsInWishlistOutput>
}

export type MutationAddBundleProductsToCartArgs = {
  input?: Maybe<AddBundleProductsToCartInput>
}

export type MutationAddConfigurableProductsToCartArgs = {
  input?: Maybe<AddConfigurableProductsToCartInput>
}

export type MutationAddDownloadableProductsToCartArgs = {
  input?: Maybe<AddDownloadableProductsToCartInput>
}

export type MutationAddProductsToCartArgs = {
  cartId: Scalars['String']
  cartItems: Array<CartItemInput>
}

export type MutationAddProductsToCompareListArgs = {
  input?: Maybe<AddProductsToCompareListInput>
}

export type MutationAddProductsToWishlistArgs = {
  wishlistId: Scalars['ID']
  wishlistItems: Array<WishlistItemInput>
}

export type MutationAddSimpleProductsToCartArgs = {
  input?: Maybe<AddSimpleProductsToCartInput>
}

export type MutationAddVirtualProductsToCartArgs = {
  input?: Maybe<AddVirtualProductsToCartInput>
}

export type MutationApplyCouponToCartArgs = {
  input?: Maybe<ApplyCouponToCartInput>
}

export type MutationAssignCompareListToCustomerArgs = {
  uid: Scalars['ID']
}

export type MutationChangeCustomerPasswordArgs = {
  currentPassword: Scalars['String']
  newPassword: Scalars['String']
}

export type MutationCreateCompareListArgs = {
  input?: Maybe<CreateCompareListInput>
}

export type MutationCreateCustomerArgs = {
  input: CustomerInput
}

export type MutationCreateCustomerAddressArgs = {
  input: CustomerAddressInput
}

export type MutationCreateCustomerV2Args = {
  input: CustomerCreateInput
}

export type MutationCreateEmptyCartArgs = {
  input?: Maybe<CreateEmptyCartInput>
}

export type MutationCreateKlarnaPaymentsSessionArgs = {
  input?: Maybe<CreateKlarnaPaymentsSessionInput>
}

export type MutationCreateMollieTransactionArgs = {
  input?: Maybe<MollieTransactionInput>
}

export type MutationCreatePayflowProTokenArgs = {
  input: PayflowProTokenInput
}

export type MutationCreatePaypalExpressTokenArgs = {
  input: PaypalExpressTokenInput
}

export type MutationCreateProductReviewArgs = {
  input: CreateProductReviewInput
}

export type MutationDeleteCompareListArgs = {
  uid: Scalars['ID']
}

export type MutationDeleteCustomerAddressArgs = {
  id: Scalars['Int']
}

export type MutationDeletePaymentTokenArgs = {
  public_hash: Scalars['String']
}

export type MutationGenerateCustomerTokenArgs = {
  email: Scalars['String']
  password: Scalars['String']
}

export type MutationGenerateCustomerTokenAsAdminArgs = {
  input: GenerateCustomerTokenAsAdminInput
}

export type MutationHandlePayflowProResponseArgs = {
  input: PayflowProResponseInput
}

export type MutationMergeCartsArgs = {
  destination_cart_id?: Maybe<Scalars['String']>
  source_cart_id: Scalars['String']
}

export type MutationPlaceOrderArgs = {
  input?: Maybe<PlaceOrderInput>
}

export type MutationRemoveCouponFromCartArgs = {
  input?: Maybe<RemoveCouponFromCartInput>
}

export type MutationRemoveItemFromCartArgs = {
  input?: Maybe<RemoveItemFromCartInput>
}

export type MutationRemoveProductsFromCompareListArgs = {
  input?: Maybe<RemoveProductsFromCompareListInput>
}

export type MutationRemoveProductsFromWishlistArgs = {
  wishlistId: Scalars['ID']
  wishlistItemsIds: Array<Scalars['ID']>
}

export type MutationReorderItemsArgs = {
  orderNumber: Scalars['String']
}

export type MutationRequestPasswordResetEmailArgs = {
  email: Scalars['String']
}

export type MutationResetPasswordArgs = {
  email: Scalars['String']
  newPassword: Scalars['String']
  resetPasswordToken: Scalars['String']
}

export type MutationSendEmailToFriendArgs = {
  input?: Maybe<SendEmailToFriendInput>
}

export type MutationSetBillingAddressOnCartArgs = {
  input?: Maybe<SetBillingAddressOnCartInput>
}

export type MutationSetGuestEmailOnCartArgs = {
  input?: Maybe<SetGuestEmailOnCartInput>
}

export type MutationSetPaymentMethodAndPlaceOrderArgs = {
  input?: Maybe<SetPaymentMethodAndPlaceOrderInput>
}

export type MutationSetPaymentMethodOnCartArgs = {
  input?: Maybe<SetPaymentMethodOnCartInput>
}

export type MutationSetShippingAddressesOnCartArgs = {
  input?: Maybe<SetShippingAddressesOnCartInput>
}

export type MutationSetShippingMethodsOnCartArgs = {
  input?: Maybe<SetShippingMethodsOnCartInput>
}

export type MutationSubscribeEmailToNewsletterArgs = {
  email: Scalars['String']
}

export type MutationUpdateCartItemsArgs = {
  input?: Maybe<UpdateCartItemsInput>
}

export type MutationUpdateCustomerArgs = {
  input: CustomerInput
}

export type MutationUpdateCustomerAddressArgs = {
  id: Scalars['Int']
  input?: Maybe<CustomerAddressInput>
}

export type MutationUpdateCustomerEmailArgs = {
  email: Scalars['String']
  password: Scalars['String']
}

export type MutationUpdateCustomerV2Args = {
  input: CustomerUpdateInput
}

export type MutationUpdateProductsInWishlistArgs = {
  wishlistId: Scalars['ID']
  wishlistItems: Array<WishlistItemUpdateInput>
}

export type AddBundleProductsToCartInput = {
  cart_id: Scalars['String']
  cart_items: Array<Maybe<BundleProductCartItemInput>>
}

export type BundleProductCartItemInput = {
  bundle_options: Array<Maybe<BundleOptionInput>>
  customizable_options?: Maybe<Array<Maybe<CustomizableOptionInput>>>
  data: CartItemInput
}

export type BundleOptionInput = {
  id: Scalars['Int']
  quantity: Scalars['Float']
  value: Array<Maybe<Scalars['String']>>
}

export type CustomizableOptionInput = {
  /** The customizable option id of the product */
  id?: Maybe<Scalars['Int']>
  /** The string value of the option */
  value_string: Scalars['String']
}

export type CartItemInput = {
  /** An array of entered options for the base product, such as personalization text */
  entered_options?: Maybe<Array<Maybe<EnteredOptionInput>>>
  /** For child products, the SKU of its parent product */
  parent_sku?: Maybe<Scalars['String']>
  quantity: Scalars['Float']
  /**
   * The selected options for the base product, such as color or size with unique ID for a
   * `CustomizableRadioOption`, `CustomizableDropDownOption`, `ConfigurableProductOptionsValues`,
   * etc. objects
   */
  selected_options?: Maybe<Array<Maybe<Scalars['ID']>>>
  sku: Scalars['String']
}

/** Defines a customer-entered option */
export type EnteredOptionInput = {
  /**
   * The unique ID for a `CustomizableFieldOption`, `CustomizableFileOption`,
   * `CustomizableAreaOption`, etc. of `CustomizableOptionInterface` objects
   */
  uid: Scalars['ID']
  /** Text the customer entered */
  value: Scalars['String']
}

export type AddBundleProductsToCartOutput = {
  __typename?: 'AddBundleProductsToCartOutput'
  cart: Cart
}

export type AddConfigurableProductsToCartInput = {
  cart_id: Scalars['String']
  cart_items: Array<Maybe<ConfigurableProductCartItemInput>>
}

export type ConfigurableProductCartItemInput = {
  customizable_options?: Maybe<Array<Maybe<CustomizableOptionInput>>>
  data: CartItemInput
  /** Configurable product SKU. */
  parent_sku?: Maybe<Scalars['String']>
  /** Deprecated. Use CartItemInput.sku instead. */
  variant_sku?: Maybe<Scalars['String']>
}

export type AddConfigurableProductsToCartOutput = {
  __typename?: 'AddConfigurableProductsToCartOutput'
  cart: Cart
}

export type AddDownloadableProductsToCartInput = {
  cart_id: Scalars['String']
  cart_items: Array<Maybe<DownloadableProductCartItemInput>>
}

export type DownloadableProductCartItemInput = {
  customizable_options?: Maybe<Array<Maybe<CustomizableOptionInput>>>
  data: CartItemInput
  downloadable_product_links?: Maybe<Array<Maybe<DownloadableProductLinksInput>>>
}

export type DownloadableProductLinksInput = {
  link_id: Scalars['Int']
}

export type AddDownloadableProductsToCartOutput = {
  __typename?: 'AddDownloadableProductsToCartOutput'
  cart: Cart
}

export type AddProductsToCartOutput = {
  __typename?: 'AddProductsToCartOutput'
  /** The cart after products have been added */
  cart: Cart
  /** An error encountered while adding an item to the cart. */
  user_errors: Array<Maybe<CartUserInputError>>
}

/** An error encountered while adding an item to the the cart. */
export type CartUserInputError = {
  __typename?: 'CartUserInputError'
  /** Cart-specific error code */
  code: CartUserInputErrorType
  /** A localized error message */
  message: Scalars['String']
}

export type CartUserInputErrorType =
  | 'INSUFFICIENT_STOCK'
  | 'NOT_SALABLE'
  | 'PRODUCT_NOT_FOUND'
  | 'UNDEFINED'

export type AddProductsToCompareListInput = {
  /** An array of product IDs to add to the compare list */
  products: Array<Maybe<Scalars['ID']>>
  /** The unique identifier of the compare list to modify */
  uid: Scalars['ID']
}

/** Defines the items to add to a wish list */
export type WishlistItemInput = {
  /** An array of options that the customer entered */
  entered_options?: Maybe<Array<Maybe<EnteredOptionInput>>>
  /** For complex product types, the SKU of the parent product */
  parent_sku?: Maybe<Scalars['String']>
  /** The amount or number of items to add */
  quantity: Scalars['Float']
  /** An array of strings corresponding to options the customer selected */
  selected_options?: Maybe<Array<Maybe<Scalars['ID']>>>
  /** The SKU of the product to add. For complex product types, specify the child product SKU */
  sku: Scalars['String']
}

/** Contains the customer's wish list and any errors encountered */
export type AddProductsToWishlistOutput = {
  __typename?: 'AddProductsToWishlistOutput'
  /** An array of errors encountered while adding products to a wish list */
  user_errors: Array<Maybe<WishListUserInputError>>
  /** Contains the wish list with all items that were successfully added */
  wishlist: Wishlist
}

/** An error encountered while performing operations with WishList. */
export type WishListUserInputError = {
  __typename?: 'WishListUserInputError'
  /** Wishlist-specific error code */
  code: WishListUserInputErrorType
  /** A localized error message */
  message: Scalars['String']
}

export type WishListUserInputErrorType = 'PRODUCT_NOT_FOUND' | 'UNDEFINED'

export type AddSimpleProductsToCartInput = {
  cart_id: Scalars['String']
  cart_items: Array<Maybe<SimpleProductCartItemInput>>
}

export type SimpleProductCartItemInput = {
  customizable_options?: Maybe<Array<Maybe<CustomizableOptionInput>>>
  data: CartItemInput
}

export type AddSimpleProductsToCartOutput = {
  __typename?: 'AddSimpleProductsToCartOutput'
  cart: Cart
}

export type AddVirtualProductsToCartInput = {
  cart_id: Scalars['String']
  cart_items: Array<Maybe<VirtualProductCartItemInput>>
}

export type VirtualProductCartItemInput = {
  customizable_options?: Maybe<Array<Maybe<CustomizableOptionInput>>>
  data: CartItemInput
}

export type AddVirtualProductsToCartOutput = {
  __typename?: 'AddVirtualProductsToCartOutput'
  cart: Cart
}

export type ApplyCouponToCartInput = {
  cart_id: Scalars['String']
  coupon_code: Scalars['String']
}

export type ApplyCouponToCartOutput = {
  __typename?: 'ApplyCouponToCartOutput'
  cart: Cart
}

export type AssignCompareListToCustomerOutput = {
  __typename?: 'AssignCompareListToCustomerOutput'
  /** The contents of the customer's compare list */
  compare_list?: Maybe<CompareList>
  result: Scalars['Boolean']
}

export type CreateCompareListInput = {
  /** An array of product IDs to add to the compare list */
  products?: Maybe<Array<Maybe<Scalars['ID']>>>
}

export type CustomerInput = {
  /** The customer's date of birth */
  date_of_birth?: Maybe<Scalars['String']>
  /** Deprecated: Use `date_of_birth` instead */
  dob?: Maybe<Scalars['String']>
  /** The customer's email address. Required for customer creation */
  email?: Maybe<Scalars['String']>
  /** The customer's first name */
  firstname?: Maybe<Scalars['String']>
  /** The customer's gender (Male - 1, Female - 2) */
  gender?: Maybe<Scalars['Int']>
  /** Indicates whether the customer is subscribed to the company's newsletter */
  is_subscribed?: Maybe<Scalars['Boolean']>
  /** The customer's family name */
  lastname?: Maybe<Scalars['String']>
  /** The customer's middle name */
  middlename?: Maybe<Scalars['String']>
  /** The customer's password */
  password?: Maybe<Scalars['String']>
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: Maybe<Scalars['String']>
  /** A value such as Sr., Jr., or III */
  suffix?: Maybe<Scalars['String']>
  /** The customer's Tax/VAT number (for corporate customers) */
  taxvat?: Maybe<Scalars['String']>
}

export type CustomerOutput = {
  __typename?: 'CustomerOutput'
  customer: Customer
}

export type CustomerAddressInput = {
  /** The city or town */
  city?: Maybe<Scalars['String']>
  /** The customer's company */
  company?: Maybe<Scalars['String']>
  /** The customer's country */
  country_code?: Maybe<CountryCodeEnum>
  /** Deprecated: use `country_code` instead. */
  country_id?: Maybe<CountryCodeEnum>
  /** Deprecated: Custom attributes should not be put into container. */
  custom_attributes?: Maybe<Array<Maybe<CustomerAddressAttributeInput>>>
  /** Indicates whether the address is the default billing address */
  default_billing?: Maybe<Scalars['Boolean']>
  /** Indicates whether the address is the default shipping address */
  default_shipping?: Maybe<Scalars['Boolean']>
  /** The fax number */
  fax?: Maybe<Scalars['String']>
  /** The first name of the person associated with the shipping/billing address */
  firstname?: Maybe<Scalars['String']>
  /** The family name of the person associated with the shipping/billing address */
  lastname?: Maybe<Scalars['String']>
  /** The middle name of the person associated with the shipping/billing address */
  middlename?: Maybe<Scalars['String']>
  /** The customer's ZIP or postal code */
  postcode?: Maybe<Scalars['String']>
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: Maybe<Scalars['String']>
  /** An object containing the region name, region code, and region ID */
  region?: Maybe<CustomerAddressRegionInput>
  /** An array of strings that define the street number and name */
  street?: Maybe<Array<Maybe<Scalars['String']>>>
  /** A value such as Sr., Jr., or III */
  suffix?: Maybe<Scalars['String']>
  /** The telephone number */
  telephone?: Maybe<Scalars['String']>
  /** The customer's Tax/VAT number (for corporate customers) */
  vat_id?: Maybe<Scalars['String']>
}

export type CustomerAddressAttributeInput = {
  /** Attribute code */
  attribute_code: Scalars['String']
  /** Attribute value */
  value: Scalars['String']
}

/** CustomerAddressRegionInput defines the customer's state or province */
export type CustomerAddressRegionInput = {
  /** The state or province name */
  region?: Maybe<Scalars['String']>
  /** The address region code */
  region_code?: Maybe<Scalars['String']>
  /** The unique ID for a pre-defined region */
  region_id?: Maybe<Scalars['Int']>
}

export type CustomerCreateInput = {
  /** Indicates whether the customer has enabled remote shopping assistance */
  allow_remote_shopping_assistance?: Maybe<Scalars['Boolean']>
  /** The customer's date of birth */
  date_of_birth?: Maybe<Scalars['String']>
  /** Deprecated: Use `date_of_birth` instead */
  dob?: Maybe<Scalars['String']>
  /** The customer's email address. Required for customer creation */
  email: Scalars['String']
  /** The customer's first name */
  firstname: Scalars['String']
  /** The customer's gender (Male - 1, Female - 2) */
  gender?: Maybe<Scalars['Int']>
  /** Indicates whether the customer is subscribed to the company's newsletter */
  is_subscribed?: Maybe<Scalars['Boolean']>
  /** The customer's family name */
  lastname: Scalars['String']
  /** The customer's middle name */
  middlename?: Maybe<Scalars['String']>
  /** The customer's password */
  password?: Maybe<Scalars['String']>
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: Maybe<Scalars['String']>
  /** A value such as Sr., Jr., or III */
  suffix?: Maybe<Scalars['String']>
  /** The customer's Tax/VAT number (for corporate customers) */
  taxvat?: Maybe<Scalars['String']>
}

export type CreateEmptyCartInput = {
  cart_id?: Maybe<Scalars['String']>
}

export type CreateKlarnaPaymentsSessionInput = {
  cart_id: Scalars['String']
}

export type CreateKlarnaPaymentsSessionOutput = {
  __typename?: 'createKlarnaPaymentsSessionOutput'
  /** The payment method client token */
  client_token?: Maybe<Scalars['String']>
  /** The payment method categories */
  payment_method_categories?: Maybe<Array<Maybe<Categories>>>
}

export type Categories = {
  __typename?: 'Categories'
  /** The payment method assets */
  asset_urls?: Maybe<Array<Maybe<Assets>>>
  /** The payment method identifier */
  identifier: Scalars['String']
  /** The payment method name */
  name: Scalars['String']
}

export type Assets = {
  __typename?: 'Assets'
  /** The payment method logo url (descriptive) */
  descriptive?: Maybe<Scalars['String']>
  /** The payment method logo url (standard) */
  standard?: Maybe<Scalars['String']>
}

export type MollieTransactionInput = {
  issuer?: Maybe<Scalars['String']>
  payment_token: Scalars['String']
}

export type MollieTransactionOutput = {
  __typename?: 'MollieTransactionOutput'
  checkout_url?: Maybe<Scalars['String']>
}

/** Input required to fetch payment token information for Payflow Pro and Payments Pro payment methods. */
export type PayflowProTokenInput = {
  /** The unique ID that identifies the customer's cart */
  cart_id: Scalars['String']
  /** A set of relative URLs that PayPal uses for callback. */
  urls: PayflowProUrlInput
}

/**
 * A set of relative URLs that PayPal will use in response to various actions during the
 * authorization process. Magento prepends the base URL to this value to create a full URL. For
 * example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is
 * path/to/page.html. Use this input for Payflow Pro and Payment Pro payment methods.
 */
export type PayflowProUrlInput = {
  /**
   * The relative URL of the page that PayPal will redirect to when the buyer cancels the
   * transaction in order to choose a different payment method. If the full URL to this page is
   * https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html.
   */
  cancel_url: Scalars['String']
  /**
   * The relative URL of the transaction error page that PayPal will redirect to upon payment error.
   * If the full URL to this page is https://www.example.com/paypal/action/error.html, the relative
   * URL is paypal/action/error.html.
   */
  error_url: Scalars['String']
  /**
   * The relative URL of the final confirmation page that PayPal will redirect to upon payment
   * success. If the full URL to this page is https://www.example.com/paypal/action/return.html, the
   * relative URL is paypal/action/return.html.
   */
  return_url: Scalars['String']
}

/**
 * Contains the secure information used to authorize transaction. Applies to Payflow Pro and
 * Payments Pro payment methods.
 */
export type CreatePayflowProTokenOutput = {
  __typename?: 'CreatePayflowProTokenOutput'
  response_message: Scalars['String']
  result: Scalars['Int']
  result_code: Scalars['Int']
  secure_token: Scalars['String']
  secure_token_id: Scalars['String']
}

/**
 * Defines the attributes required to receive a payment token for Express Checkout and Payments
 * Standard payment methods.
 */
export type PaypalExpressTokenInput = {
  /** The unique ID that identifies the customer's cart */
  cart_id: Scalars['String']
  /** Payment method code */
  code: Scalars['String']
  /** Indicates whether the buyer selected the quick checkout button. The default value is false */
  express_button?: Maybe<Scalars['Boolean']>
  /** A set of relative URLs that PayPal uses in response to various actions during the authorization process */
  urls: PaypalExpressUrlsInput
  /** Indicates whether the buyer clicked the PayPal credit button. The default value is false */
  use_paypal_credit?: Maybe<Scalars['Boolean']>
}

/**
 * A set of relative URLs that PayPal will use in response to various actions during the
 * authorization process. Magento prepends the base URL to this value to create a full URL. For
 * example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is
 * path/to/page.html. Use this input for Express Checkout and Payments Standard payment methods.
 */
export type PaypalExpressUrlsInput = {
  /**
   * The relative URL of the page that PayPal will redirect to when the buyer cancels the
   * transaction in order to choose a different payment method. If the full URL to this page is
   * https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html.
   */
  cancel_url: Scalars['String']
  /**
   * The relative URL of the page that PayPal will redirect to when the payment has been put on hold
   * for additional review. This condition mostly applies to ACH transactions, and is not applicable
   * to most PayPal solutions. If the full URL to this page is
   * https://www.example.com/paypal/action/success_pending.html, the relative URL is
   * paypal/action/success_pending.html.
   */
  pending_url?: Maybe<Scalars['String']>
  /**
   * The relative URL of the final confirmation page that PayPal will redirect to upon payment
   * success. If the full URL to this page is https://www.example.com/paypal/action/return.html, the
   * relative URL is paypal/action/return.html.
   */
  return_url: Scalars['String']
  /**
   * The relative URL of the order confirmation page that PayPal will redirect to when the payment
   * is successful and additional confirmation is not needed. Not applicable to most PayPal
   * solutions. If the full URL to this page is https://www.example.com/paypal/action/success.html,
   * the relative URL is paypal/action/success.html.
   */
  success_url?: Maybe<Scalars['String']>
}

/**
 * Contains the token returned by PayPal and a set of URLs that allow the buyer to authorize payment
 * and adjust checkout details. Applies to Express Checkout and Payments Standard payment methods.
 */
export type PaypalExpressTokenOutput = {
  __typename?: 'PaypalExpressTokenOutput'
  /** A set of URLs that allow the buyer to authorize payment and adjust checkout details */
  paypal_urls?: Maybe<PaypalExpressUrlList>
  /** The token returned by PayPal */
  token?: Maybe<Scalars['String']>
}

/**
 * A set of URLs that allow the buyer to authorize payment and adjust checkout details for Express
 * Checkout and Payments Standard transactions.
 */
export type PaypalExpressUrlList = {
  __typename?: 'PaypalExpressUrlList'
  /** The PayPal URL that allows the buyer to edit their checkout details */
  edit?: Maybe<Scalars['String']>
  /** The URL to the PayPal login page */
  start?: Maybe<Scalars['String']>
}

export type CreateProductReviewInput = {
  /** The customer's nickname. Defaults to the customer name, if logged in */
  nickname: Scalars['String']
  /** Ratings details by category. e.g price: 5, quality: 4 etc */
  ratings: Array<Maybe<ProductReviewRatingInput>>
  /** The SKU of the reviewed product */
  sku: Scalars['String']
  /** The summary (title) of the review */
  summary: Scalars['String']
  /** The review text. */
  text: Scalars['String']
}

export type ProductReviewRatingInput = {
  /** An encoded rating ID. */
  id: Scalars['String']
  /** An encoded rating value id. */
  value_id: Scalars['String']
}

export type CreateProductReviewOutput = {
  __typename?: 'CreateProductReviewOutput'
  /** Contains the completed product review */
  review: ProductReview
}

export type DeleteCompareListOutput = {
  __typename?: 'DeleteCompareListOutput'
  /** Indicates whether the compare list was successfully deleted */
  result: Scalars['Boolean']
}

export type DeletePaymentTokenOutput = {
  __typename?: 'DeletePaymentTokenOutput'
  customerPaymentTokens?: Maybe<CustomerPaymentTokens>
  result: Scalars['Boolean']
}

export type CustomerToken = {
  __typename?: 'CustomerToken'
  createdAt?: Maybe<Scalars['String']>
  /** The customer token */
  token?: Maybe<Scalars['String']>
  valid?: Maybe<Scalars['Boolean']>
}

export type GenerateCustomerTokenAsAdminInput = {
  /** The email address of the customer requesting remote shopping assistance */
  customer_email: Scalars['String']
}

export type GenerateCustomerTokenAsAdminOutput = {
  __typename?: 'GenerateCustomerTokenAsAdminOutput'
  /** The generated customer token */
  customer_token: Scalars['String']
}

/** Input required to complete payment. Applies to Payflow Pro and Payments Pro payment methods. */
export type PayflowProResponseInput = {
  cart_id: Scalars['String']
  paypal_payload: Scalars['String']
}

export type PayflowProResponseOutput = {
  __typename?: 'PayflowProResponseOutput'
  cart: Cart
}

export type PlaceOrderInput = {
  cart_id: Scalars['String']
}

export type PlaceOrderOutput = {
  __typename?: 'PlaceOrderOutput'
  order: Order
}

export type Order = {
  __typename?: 'Order'
  mollie_payment_token?: Maybe<Scalars['String']>
  /** @deprecated The order_id field is deprecated, use order_number instead. */
  order_id?: Maybe<Scalars['String']>
  /** The unique ID for a `Order` object. */
  order_number: Scalars['String']
}

export type RemoveCouponFromCartInput = {
  cart_id: Scalars['String']
}

export type RemoveCouponFromCartOutput = {
  __typename?: 'RemoveCouponFromCartOutput'
  cart?: Maybe<Cart>
}

export type RemoveItemFromCartInput = {
  cart_id: Scalars['String']
  /** Deprecated. Use `cart_item_uid` instead. */
  cart_item_id?: Maybe<Scalars['Int']>
  /** Required field. The unique ID for a `CartItemInterface` object */
  cart_item_uid?: Maybe<Scalars['ID']>
}

export type RemoveItemFromCartOutput = {
  __typename?: 'RemoveItemFromCartOutput'
  cart: Cart
}

export type RemoveProductsFromCompareListInput = {
  /** An array of product IDs to remove from the compare list */
  products: Array<Maybe<Scalars['ID']>>
  /** The unique identifier of the compare list to modify */
  uid: Scalars['ID']
}

/** Contains the customer's wish list and any errors encountered */
export type RemoveProductsFromWishlistOutput = {
  __typename?: 'RemoveProductsFromWishlistOutput'
  /** An array of errors encountered while deleting products from a wish list */
  user_errors: Array<Maybe<WishListUserInputError>>
  /** Contains the wish list with after items were successfully deleted */
  wishlist: Wishlist
}

export type ReorderItemsOutput = {
  __typename?: 'ReorderItemsOutput'
  /** Contains detailed information about the customer's cart. */
  cart: Cart
  /** An array of reordering errors. */
  userInputErrors: Array<Maybe<CheckoutUserInputError>>
}

/** An error encountered while adding an item the the cart. */
export type CheckoutUserInputError = {
  __typename?: 'CheckoutUserInputError'
  /** Checkout-specific error code */
  code: CheckoutUserInputErrorCodes
  /** Localized error message */
  message: Scalars['String']
  /**
   * Path to the input field that caused an error. See the GraphQL specification about path errors
   * for details: http://spec.graphql.org/draft/#sec-Errors
   */
  path: Array<Maybe<Scalars['String']>>
}

export type CheckoutUserInputErrorCodes =
  | 'INSUFFICIENT_STOCK'
  | 'NOT_SALABLE'
  | 'PRODUCT_NOT_FOUND'
  | 'REORDER_NOT_AVAILABLE'
  | 'UNDEFINED'

export type RevokeCustomerTokenOutput = {
  __typename?: 'RevokeCustomerTokenOutput'
  result: Scalars['Boolean']
}

export type SendEmailToFriendInput = {
  product_id: Scalars['Int']
  recipients: Array<Maybe<SendEmailToFriendRecipientInput>>
  sender: SendEmailToFriendSenderInput
}

export type SendEmailToFriendRecipientInput = {
  email: Scalars['String']
  name: Scalars['String']
}

export type SendEmailToFriendSenderInput = {
  email: Scalars['String']
  message: Scalars['String']
  name: Scalars['String']
}

export type SendEmailToFriendOutput = {
  __typename?: 'SendEmailToFriendOutput'
  recipients?: Maybe<Array<Maybe<SendEmailToFriendRecipient>>>
  sender?: Maybe<SendEmailToFriendSender>
}

export type SendEmailToFriendRecipient = {
  __typename?: 'SendEmailToFriendRecipient'
  email: Scalars['String']
  name: Scalars['String']
}

export type SendEmailToFriendSender = {
  __typename?: 'SendEmailToFriendSender'
  email: Scalars['String']
  message: Scalars['String']
  name: Scalars['String']
}

export type SetBillingAddressOnCartInput = {
  billing_address: BillingAddressInput
  cart_id: Scalars['String']
}

export type BillingAddressInput = {
  address?: Maybe<CartAddressInput>
  customer_address_id?: Maybe<Scalars['Int']>
  /** Set billing address same as shipping */
  same_as_shipping?: Maybe<Scalars['Boolean']>
  /** Deprecated: use `same_as_shipping` field instead */
  use_for_shipping?: Maybe<Scalars['Boolean']>
}

export type CartAddressInput = {
  city: Scalars['String']
  company?: Maybe<Scalars['String']>
  country_code: Scalars['String']
  firstname: Scalars['String']
  lastname: Scalars['String']
  postcode?: Maybe<Scalars['String']>
  region?: Maybe<Scalars['String']>
  region_id?: Maybe<Scalars['Int']>
  /** Determines whether to save the address in the customer's address book. The default value is true */
  save_in_address_book?: Maybe<Scalars['Boolean']>
  street: Array<Maybe<Scalars['String']>>
  telephone: Scalars['String']
}

export type SetBillingAddressOnCartOutput = {
  __typename?: 'SetBillingAddressOnCartOutput'
  cart: Cart
}

export type SetGuestEmailOnCartInput = {
  cart_id: Scalars['String']
  email: Scalars['String']
}

export type SetGuestEmailOnCartOutput = {
  __typename?: 'SetGuestEmailOnCartOutput'
  cart: Cart
}

export type SetPaymentMethodAndPlaceOrderInput = {
  cart_id: Scalars['String']
  payment_method: PaymentMethodInput
}

export type PaymentMethodInput = {
  braintree?: Maybe<BraintreeInput>
  braintree_cc_vault?: Maybe<BraintreeCcVaultInput>
  /** Payment method code */
  code: Scalars['String']
  /** Required input for PayPal Hosted pro payments */
  hosted_pro?: Maybe<HostedProInput>
  klarna?: Maybe<KlarnaInput>
  /** Required input for Payflow Express Checkout payments */
  payflow_express?: Maybe<PayflowExpressInput>
  /** Required input for PayPal Payflow Link and Payments Advanced payments */
  payflow_link?: Maybe<PayflowLinkInput>
  /** Required input type for PayPal Payflow Pro and Payment Pro payments */
  payflowpro?: Maybe<PayflowProInput>
  /** Required input type for PayPal Payflow Pro vault payments */
  payflowpro_cc_vault?: Maybe<VaultTokenInput>
  /** Required input for Express Checkout and Payments Standard payments */
  paypal_express?: Maybe<PaypalExpressInput>
  /** Purchase order number */
  purchase_order_number?: Maybe<Scalars['String']>
}

export type BraintreeInput = {
  /**
   * Contains a fingerprint provided by Braintree JS SDK and should be sent with sale transaction
   * details to the Braintree payment gateway. Should be specified only in a case if Kount (advanced
   * fraud protection) is enabled for Braintree payment integration.
   */
  device_data?: Maybe<Scalars['String']>
  /**
   * States whether an entered by a customer credit/debit card should be tokenized for later usage.
   * Required only if Vault is enabled for Braintree payment integration.
   */
  is_active_payment_token_enabler: Scalars['Boolean']
  /**
   * The one-time payment token generated by Braintree payment gateway based on card details.
   * Required field to make sale transaction.
   */
  payment_method_nonce: Scalars['String']
}

export type BraintreeCcVaultInput = {
  device_data?: Maybe<Scalars['String']>
  public_hash: Scalars['String']
}

/**
 * A set of relative URLs that PayPal will use in response to various actions during the
 * authorization process. Magento prepends the base URL to this value to create a full URL. For
 * example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is
 * path/to/page.html. Use this input for Payments Pro Hosted Solution payment method.
 */
export type HostedProInput = {
  /**
   * The relative URL of the page that PayPal will redirect to when the buyer cancels the
   * transaction in order to choose a different payment method. If the full URL to this page is
   * https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html.
   */
  cancel_url: Scalars['String']
  /**
   * The relative URL of the final confirmation page that PayPal will redirect to upon payment
   * success. If the full URL to this page is https://www.example.com/paypal/action/return.html, the
   * relative URL is paypal/action/return.html.
   */
  return_url: Scalars['String']
}

export type KlarnaInput = {
  /** The authorization token must be provided to set any Klarna Payments method */
  authorization_token: Scalars['String']
}

/** Required input for Payflow Express Checkout payments */
export type PayflowExpressInput = {
  /** The unique ID of the PayPal user */
  payer_id: Scalars['String']
  /** The token returned by the createPaypalExpressToken mutation */
  token: Scalars['String']
}

/**
 * A set of relative URLs that PayPal will use in response to various actions during the
 * authorization process. Magento prepends the base URL to this value to create a full URL. For
 * example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is
 * path/to/page.html. Use this input for Payflow Link and Payments Advanced payment methods.
 */
export type PayflowLinkInput = {
  /**
   * The relative URL of the page that PayPal will redirect to when the buyer cancels the
   * transaction in order to choose a different payment method. If the full URL to this page is
   * https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html.
   */
  cancel_url: Scalars['String']
  /**
   * The relative URL of the transaction error page that PayPal will redirect to upon payment error.
   * If the full URL to this page is https://www.example.com/paypal/action/error.html, the relative
   * URL is paypal/action/error.html.
   */
  error_url: Scalars['String']
  /**
   * The relative URL of the order confirmation page that PayPal will redirect to when the payment
   * is successful and additional confirmation is not needed. If the full URL to this page is
   * https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html.
   */
  return_url: Scalars['String']
}

/** Required input for Payflow Pro and Payments Pro payment methods. */
export type PayflowProInput = {
  /** Required input for credit card related information */
  cc_details: CreditCardDetailsInput
  /**
   * States whether details about the customer's credit/debit card should be tokenized for later
   * usage. Required only if Vault is enabled for PayPal Payflow Pro payment integration.
   */
  is_active_payment_token_enabler?: Maybe<Scalars['Boolean']>
}

/** Required fields for Payflow Pro and Payments Pro credit card payments */
export type CreditCardDetailsInput = {
  /** Credit card expiration month */
  cc_exp_month: Scalars['Int']
  /** Credit card expiration year */
  cc_exp_year: Scalars['Int']
  /** Last 4 digits of the credit card */
  cc_last_4: Scalars['Int']
  /** Credit card type */
  cc_type: Scalars['String']
}

/** Required input for payment methods with Vault support. */
export type VaultTokenInput = {
  /** The public hash of the payment token */
  public_hash: Scalars['String']
}

/** Required input for Express Checkout and Payments Standard payments */
export type PaypalExpressInput = {
  /** The unique ID of the PayPal user */
  payer_id: Scalars['String']
  /** The token returned by the createPaypalExpressToken mutation */
  token: Scalars['String']
}

export type SetPaymentMethodOnCartInput = {
  cart_id: Scalars['String']
  payment_method: PaymentMethodInput
}

export type SetPaymentMethodOnCartOutput = {
  __typename?: 'SetPaymentMethodOnCartOutput'
  cart: Cart
}

export type SetShippingAddressesOnCartInput = {
  cart_id: Scalars['String']
  shipping_addresses: Array<Maybe<ShippingAddressInput>>
}

export type ShippingAddressInput = {
  address?: Maybe<CartAddressInput>
  customer_address_id?: Maybe<Scalars['Int']>
  customer_notes?: Maybe<Scalars['String']>
  /** The code of Pickup Location which will be used for In-Store Pickup. */
  pickup_location_code?: Maybe<Scalars['String']>
}

export type SetShippingAddressesOnCartOutput = {
  __typename?: 'SetShippingAddressesOnCartOutput'
  cart: Cart
}

export type SetShippingMethodsOnCartInput = {
  cart_id: Scalars['String']
  shipping_methods: Array<Maybe<ShippingMethodInput>>
}

export type ShippingMethodInput = {
  carrier_code: Scalars['String']
  method_code: Scalars['String']
}

export type SetShippingMethodsOnCartOutput = {
  __typename?: 'SetShippingMethodsOnCartOutput'
  cart: Cart
}

export type SubscribeEmailToNewsletterOutput = {
  __typename?: 'SubscribeEmailToNewsletterOutput'
  /** Returns the status of the subscription request */
  status?: Maybe<SubscriptionStatusesEnum>
}

export type SubscriptionStatusesEnum = 'NOT_ACTIVE' | 'SUBSCRIBED' | 'UNCONFIRMED' | 'UNSUBSCRIBED'

export type UpdateCartItemsInput = {
  cart_id: Scalars['String']
  cart_items: Array<Maybe<CartItemUpdateInput>>
}

export type CartItemUpdateInput = {
  /** Deprecated. Use `cart_item_uid` instead. */
  cart_item_id?: Maybe<Scalars['Int']>
  /** The unique ID for a `CartItemInterface` object */
  cart_item_uid?: Maybe<Scalars['ID']>
  customizable_options?: Maybe<Array<Maybe<CustomizableOptionInput>>>
  /** Gift message details for the cart item */
  gift_message?: Maybe<GiftMessageInput>
  quantity?: Maybe<Scalars['Float']>
}

/** Contains the text of a gift message, its sender, and recipient */
export type GiftMessageInput = {
  /** Sender name */
  from: Scalars['String']
  /** Gift message text */
  message: Scalars['String']
  /** Recipient name */
  to: Scalars['String']
}

export type UpdateCartItemsOutput = {
  __typename?: 'UpdateCartItemsOutput'
  cart: Cart
}

export type CustomerUpdateInput = {
  /** Indicates whether the customer has enabled remote shopping assistance */
  allow_remote_shopping_assistance?: Maybe<Scalars['Boolean']>
  /** The customer's date of birth */
  date_of_birth?: Maybe<Scalars['String']>
  /** Deprecated: Use `date_of_birth` instead */
  dob?: Maybe<Scalars['String']>
  /** The customer's first name */
  firstname?: Maybe<Scalars['String']>
  /** The customer's gender (Male - 1, Female - 2) */
  gender?: Maybe<Scalars['Int']>
  /** Indicates whether the customer is subscribed to the company's newsletter */
  is_subscribed?: Maybe<Scalars['Boolean']>
  /** The customer's family name */
  lastname?: Maybe<Scalars['String']>
  /** The customer's middle name */
  middlename?: Maybe<Scalars['String']>
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: Maybe<Scalars['String']>
  /** A value such as Sr., Jr., or III */
  suffix?: Maybe<Scalars['String']>
  /** The customer's Tax/VAT number (for corporate customers) */
  taxvat?: Maybe<Scalars['String']>
}

/** Defines updates to items in a wish list */
export type WishlistItemUpdateInput = {
  /** Customer-entered comments about the item */
  description?: Maybe<Scalars['String']>
  /** An array of options that the customer entered */
  entered_options?: Maybe<Array<Maybe<EnteredOptionInput>>>
  /** The new amount or number of this item */
  quantity?: Maybe<Scalars['Float']>
  /** An array of strings corresponding to options the customer selected */
  selected_options?: Maybe<Array<Maybe<Scalars['ID']>>>
  /** The unique ID for a `WishlistItemInterface` object */
  wishlist_item_id: Scalars['ID']
}

/** Contains the customer's wish list and any errors encountered */
export type UpdateProductsInWishlistOutput = {
  __typename?: 'UpdateProductsInWishlistOutput'
  /** An array of errors encountered while updating products in a wish list */
  user_errors: Array<Maybe<WishListUserInputError>>
  /** Contains the wish list with all items that were successfully updated */
  wishlist: Wishlist
}

/** ProductLinks is an implementation of ProductLinksInterface. */
export type ProductLinks = ProductLinksInterface & {
  __typename?: 'ProductLinks'
  /** One of related, associated, upsell, or crosssell. */
  link_type?: Maybe<Scalars['String']>
  /** The SKU of the linked product. */
  linked_product_sku?: Maybe<Scalars['String']>
  /** The type of linked product (simple, virtual, bundle, downloadable, grouped, configurable). */
  linked_product_type?: Maybe<Scalars['String']>
  /** The position within the list of product links. */
  position?: Maybe<Scalars['Int']>
  /** The identifier of the linked product. */
  sku?: Maybe<Scalars['String']>
}

/** PhysicalProductInterface contains attributes specific to tangible products. */
export type PhysicalProductInterface = {
  /** The weight of the item, in units defined by the store. */
  weight?: Maybe<Scalars['Float']>
}

/**
 * CustomizableAreaOption contains information about a text area that is defined as part of a
 * customizable option.
 */
export type CustomizableAreaOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableAreaOption'
  /**
   * Option ID.
   *
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>
  /** The Stock Keeping Unit of the base product. */
  product_sku?: Maybe<Scalars['String']>
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID']
  /** An object that defines a text area. */
  value?: Maybe<CustomizableAreaValue>
}

/**
 * The CustomizableOptionInterface contains basic information about a customizable option. It can be
 * implemented by several types of configurable options.
 */
export type CustomizableOptionInterface = {
  /**
   * Option ID.
   *
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID']
}

/** CustomizableAreaValue defines the price and sku of a product whose page contains a customized text area. */
export type CustomizableAreaValue = {
  __typename?: 'CustomizableAreaValue'
  /** The maximum number of characters that can be entered for this customizable option. */
  max_characters?: Maybe<Scalars['Int']>
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>
  /** The unique ID for a `CustomizableAreaValue` object. */
  uid: Scalars['ID']
}

/**
 * CustomizableDateOption contains information about a date picker that is defined as part of a
 * customizable option.
 */
export type CustomizableDateOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableDateOption'
  /**
   * Option ID.
   *
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>
  /** The Stock Keeping Unit of the base product. */
  product_sku?: Maybe<Scalars['String']>
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID']
  /** An object that defines a date field in a customizable option. */
  value?: Maybe<CustomizableDateValue>
}

/** CustomizableDateValue defines the price and sku of a product whose page contains a customized date picker. */
export type CustomizableDateValue = {
  __typename?: 'CustomizableDateValue'
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>
  /** The unique ID for a `CustomizableDateValue` object. */
  uid: Scalars['ID']
}

/**
 * CustomizableDropDownOption contains information about a drop down menu that is defined as part of
 * a customizable option.
 */
export type CustomizableDropDownOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableDropDownOption'
  /**
   * Option ID.
   *
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID']
  /** An array that defines the set of options for a drop down menu. */
  value?: Maybe<Array<Maybe<CustomizableDropDownValue>>>
}

/**
 * CustomizableDropDownValue defines the price and sku of a product whose page contains a customized
 * drop down menu.
 */
export type CustomizableDropDownValue = {
  __typename?: 'CustomizableDropDownValue'
  /** The ID assigned to the value. */
  option_type_id?: Maybe<Scalars['Int']>
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>
  /** The unique ID for a `CustomizableDropDownValue` object. */
  uid: Scalars['ID']
}

/**
 * CustomizableMultipleOption contains information about a multiselect that is defined as part of a
 * customizable option.
 */
export type CustomizableMultipleOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableMultipleOption'
  /**
   * Option ID.
   *
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID']
  /** An array that defines the set of options for a multiselect. */
  value?: Maybe<Array<Maybe<CustomizableMultipleValue>>>
}

/**
 * CustomizableMultipleValue defines the price and sku of a product whose page contains a customized
 * multiselect.
 */
export type CustomizableMultipleValue = {
  __typename?: 'CustomizableMultipleValue'
  /** The ID assigned to the value. */
  option_type_id?: Maybe<Scalars['Int']>
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>
  /** The unique ID for a `CustomizableMultipleValue` object. */
  uid: Scalars['ID']
}

/**
 * CustomizableFieldOption contains information about a text field that is defined as part of a
 * customizable option.
 */
export type CustomizableFieldOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableFieldOption'
  /**
   * Option ID.
   *
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>
  /** The Stock Keeping Unit of the base product. */
  product_sku?: Maybe<Scalars['String']>
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID']
  /** An object that defines a text field. */
  value?: Maybe<CustomizableFieldValue>
}

/** CustomizableFieldValue defines the price and sku of a product whose page contains a customized text field. */
export type CustomizableFieldValue = {
  __typename?: 'CustomizableFieldValue'
  /** The maximum number of characters that can be entered for this customizable option. */
  max_characters?: Maybe<Scalars['Int']>
  /** The price of the custom value. */
  price?: Maybe<Scalars['Float']>
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>
  /** The unique ID for a `CustomizableFieldValue` object. */
  uid: Scalars['ID']
}

/**
 * CustomizableFileOption contains information about a file picker that is defined as part of a
 * customizable option.
 */
export type CustomizableFileOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableFileOption'
  /**
   * Option ID.
   *
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>
  /** The Stock Keeping Unit of the base product. */
  product_sku?: Maybe<Scalars['String']>
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID']
  /** An object that defines a file value. */
  value?: Maybe<CustomizableFileValue>
}

/** CustomizableFileValue defines the price and sku of a product whose page contains a customized file picker. */
export type CustomizableFileValue = {
  __typename?: 'CustomizableFileValue'
  /** The file extension to accept. */
  file_extension?: Maybe<Scalars['String']>
  /** The maximum width of an image. */
  image_size_x?: Maybe<Scalars['Int']>
  /** The maximum height of an image. */
  image_size_y?: Maybe<Scalars['Int']>
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>
  /** The unique ID for a `CustomizableFileValue` object. */
  uid: Scalars['ID']
}

/** Contains information about a product video. */
export type ProductVideo = MediaGalleryInterface & {
  __typename?: 'ProductVideo'
  /** Whether the image is hidden from view. */
  disabled?: Maybe<Scalars['Boolean']>
  /** The label of the product image or video. */
  label?: Maybe<Scalars['String']>
  /** The media item's position after it has been sorted. */
  position?: Maybe<Scalars['Int']>
  /** The URL of the product image or video. */
  url?: Maybe<Scalars['String']>
  /** Contains a ProductMediaGalleryEntriesVideoContent object. */
  video_content?: Maybe<ProductMediaGalleryEntriesVideoContent>
}

/** CustomizableProductInterface contains information about customizable product options. */
export type CustomizableProductInterface = {
  /** An array of options for a customizable product. */
  options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>
}

/**
 * CustomizableRadioOption contains information about a set of radio buttons that are defined as
 * part of a customizable option.
 */
export type CustomizableRadioOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableRadioOption'
  /**
   * Option ID.
   *
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID']
  /** An array that defines a set of radio buttons. */
  value?: Maybe<Array<Maybe<CustomizableRadioValue>>>
}

/**
 * CustomizableRadioValue defines the price and sku of a product whose page contains a customized
 * set of radio buttons.
 */
export type CustomizableRadioValue = {
  __typename?: 'CustomizableRadioValue'
  /** The ID assigned to the value. */
  option_type_id?: Maybe<Scalars['Int']>
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>
  /** The order in which the radio button is displayed. */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>
  /** The unique ID for a `CustomizableRadioValue` object. */
  uid: Scalars['ID']
}

/**
 * CustomizableCheckbbixOption contains information about a set of checkbox values that are defined
 * as part of a customizable option.
 */
export type CustomizableCheckboxOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableCheckboxOption'
  /**
   * Option ID.
   *
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID']
  /** An array that defines a set of checkbox values. */
  value?: Maybe<Array<Maybe<CustomizableCheckboxValue>>>
}

/**
 * CustomizableCheckboxValue defines the price and sku of a product whose page contains a customized
 * set of checkbox values.
 */
export type CustomizableCheckboxValue = {
  __typename?: 'CustomizableCheckboxValue'
  /** The ID assigned to the value. */
  option_type_id?: Maybe<Scalars['Int']>
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>
  /** The order in which the checkbox value is displayed. */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>
  /** The unique ID for a `CustomizableCheckboxValue` object. */
  uid: Scalars['ID']
}

/** A virtual product is non-tangible product that does not require shipping and is not kept in inventory. */
export type VirtualProduct = CustomizableProductInterface &
  ProductInterface & {
    __typename?: 'VirtualProduct'
    activity?: Maybe<Scalars['String']>
    /**
     * The attribute set assigned to the product.
     *
     * @deprecated The field should not be used on the storefront.
     */
    attribute_set_id?: Maybe<Scalars['Int']>
    backorder_delivery_date?: Maybe<Scalars['String']>
    backorder_delivery_period?: Maybe<Scalars['Int']>
    /**
     * Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link
     * Meta Tag For Products' is enabled
     */
    canonical_url?: Maybe<Scalars['String']>
    /** The categories assigned to a product. */
    categories?: Maybe<Array<Maybe<CategoryInterface>>>
    category_gear?: Maybe<Scalars['String']>
    climate?: Maybe<Scalars['String']>
    collar?: Maybe<Scalars['String']>
    color?: Maybe<Scalars['Int']>
    /** The product's country of origin. */
    country_of_manufacture?: Maybe<Scalars['String']>
    /**
     * Timestamp indicating when the product was created.
     *
     * @deprecated The field should not be used on the storefront.
     */
    created_at?: Maybe<Scalars['String']>
    /** Crosssell Products */
    crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>
    default_configuration_json?: Maybe<Scalars['String']>
    /** Detailed information about the product. The value can include simple HTML tags. */
    description?: Maybe<ComplexTextValue>
    eco_collection?: Maybe<Scalars['Int']>
    erin_recommends?: Maybe<Scalars['Int']>
    features_bags?: Maybe<Scalars['String']>
    format?: Maybe<Scalars['Int']>
    gender?: Maybe<Scalars['String']>
    /** Indicates whether a gift message is available. */
    gift_message_available?: Maybe<Scalars['String']>
    /**
     * The ID number assigned to the product.
     *
     * @deprecated Use the `uid` field instead.
     */
    id?: Maybe<Scalars['Int']>
    /** The relative path to the main image on the product page. */
    image?: Maybe<ProductImage>
    in_stock_delivery_period?: Maybe<Scalars['Int']>
    /** A number representing the product's manufacturer. */
    manufacturer?: Maybe<Scalars['Int']>
    material?: Maybe<Scalars['String']>
    /** An array of Media Gallery objects. */
    media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>
    /**
     * An array of MediaGalleryEntry objects.
     *
     * @deprecated Use product's `media_gallery` instead
     */
    media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>
    /** A brief overview of the product for search results listings, maximum 255 characters. */
    meta_description?: Maybe<Scalars['String']>
    /** A comma-separated list of keywords that are visible only to search engines. */
    meta_keyword?: Maybe<Scalars['String']>
    /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
    meta_title?: Maybe<Scalars['String']>
    /** The product name. Customers use this name to identify the product. */
    name?: Maybe<Scalars['String']>
    new?: Maybe<Scalars['Int']>
    /**
     * The beginning date for new product listings, and determines if the product is featured as a new product.
     *
     * @deprecated The field should not be used on the storefront.
     */
    new_from_date?: Maybe<Scalars['String']>
    /**
     * The end date for new product listings.
     *
     * @deprecated The field should not be used on the storefront.
     */
    new_to_date?: Maybe<Scalars['String']>
    /** Product stock only x left count */
    only_x_left_in_stock?: Maybe<Scalars['Float']>
    /** An array of options for a customizable product. */
    options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>
    /** If the product has multiple options, determines where they appear on the product page. */
    options_container?: Maybe<Scalars['String']>
    pattern?: Maybe<Scalars['String']>
    performance_fabric?: Maybe<Scalars['Int']>
    /**
     * A ProductPrices object, indicating the price of an item.
     *
     * @deprecated Use price_range for product price information.
     */
    price?: Maybe<ProductPrices>
    /** A PriceRange object, indicating the range of prices for the product */
    price_range: PriceRange
    /** An array of TierPrice objects. */
    price_tiers?: Maybe<Array<Maybe<TierPrice>>>
    /** An array of ProductLinks objects. */
    product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>
    /** The average of all the ratings given to the product. */
    rating_summary: Scalars['Float']
    /** Related Products */
    related_products?: Maybe<Array<Maybe<ProductInterface>>>
    /** The total count of all the reviews given to the product. */
    review_count: Scalars['Int']
    /** The list of products reviews. */
    reviews: ProductReviews
    sale?: Maybe<Scalars['Int']>
    /** A short description of the product. Its use depends on the theme. */
    short_description?: Maybe<ComplexTextValue>
    size?: Maybe<Scalars['Int']>
    /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
    sku?: Maybe<Scalars['String']>
    sleeve?: Maybe<Scalars['String']>
    /** The relative path to the small image, which is used on catalog pages. */
    small_image?: Maybe<ProductImage>
    /**
     * The beginning date that a product has a special price.
     *
     * @deprecated The field should not be used on the storefront.
     */
    special_from_date?: Maybe<Scalars['String']>
    /** The discounted price of the product. */
    special_price?: Maybe<Scalars['Float']>
    /** The end date that a product has a special price. */
    special_to_date?: Maybe<Scalars['String']>
    /** Stock status of the product */
    stock_status?: Maybe<ProductStockStatus>
    strap_bags?: Maybe<Scalars['String']>
    style_bags?: Maybe<Scalars['String']>
    style_bottom?: Maybe<Scalars['String']>
    style_general?: Maybe<Scalars['String']>
    /** The file name of a swatch image */
    swatch_image?: Maybe<Scalars['String']>
    /** The relative path to the product's thumbnail image. */
    thumbnail?: Maybe<ProductImage>
    /**
     * The price when tier pricing is in effect and the items purchased threshold has been reached.
     *
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_price?: Maybe<Scalars['Float']>
    /**
     * An array of ProductTierPrices objects.
     *
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>
    /**
     * One of simple, virtual, bundle, downloadable, grouped, or configurable.
     *
     * @deprecated Use __typename instead.
     */
    type_id?: Maybe<Scalars['String']>
    /** The unique ID for a `ProductInterface` object. */
    uid: Scalars['ID']
    /**
     * Timestamp indicating when the product was updated.
     *
     * @deprecated The field should not be used on the storefront.
     */
    updated_at?: Maybe<Scalars['String']>
    /** Upsell Products */
    upsell_products?: Maybe<Array<Maybe<ProductInterface>>>
    /** The part of the URL that identifies the product */
    url_key?: Maybe<Scalars['String']>
    /** @deprecated Use product's `canonical_url` or url rewrites instead */
    url_path?: Maybe<Scalars['String']>
    /** URL rewrites list */
    url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>
    /** The part of the product URL that is appended after the url key */
    url_suffix?: Maybe<Scalars['String']>
    varying_simple_prices?: Maybe<Scalars['Int']>
    /**
     * An array of websites in which the product is available.
     *
     * @deprecated The field should not be used on the storefront.
     */
    websites?: Maybe<Array<Maybe<Website>>>
  }

/** A virtual product is non-tangible product that does not require shipping and is not kept in inventory. */
export type VirtualProductReviewsArgs = {
  currentPage?: Maybe<Scalars['Int']>
  pageSize?: Maybe<Scalars['Int']>
}

/** A simple product is tangible and are usually sold as single units or in fixed quantities. */
export type SimpleProduct = CustomizableProductInterface &
  PhysicalProductInterface &
  ProductInterface & {
    __typename?: 'SimpleProduct'
    activity?: Maybe<Scalars['String']>
    /**
     * The attribute set assigned to the product.
     *
     * @deprecated The field should not be used on the storefront.
     */
    attribute_set_id?: Maybe<Scalars['Int']>
    backorder_delivery_date?: Maybe<Scalars['String']>
    backorder_delivery_period?: Maybe<Scalars['Int']>
    /**
     * Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link
     * Meta Tag For Products' is enabled
     */
    canonical_url?: Maybe<Scalars['String']>
    /** The categories assigned to a product. */
    categories?: Maybe<Array<Maybe<CategoryInterface>>>
    category_gear?: Maybe<Scalars['String']>
    climate?: Maybe<Scalars['String']>
    collar?: Maybe<Scalars['String']>
    color?: Maybe<Scalars['Int']>
    /** The product's country of origin. */
    country_of_manufacture?: Maybe<Scalars['String']>
    /**
     * Timestamp indicating when the product was created.
     *
     * @deprecated The field should not be used on the storefront.
     */
    created_at?: Maybe<Scalars['String']>
    /** Crosssell Products */
    crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>
    default_configuration_json?: Maybe<Scalars['String']>
    /** Detailed information about the product. The value can include simple HTML tags. */
    description?: Maybe<ComplexTextValue>
    eco_collection?: Maybe<Scalars['Int']>
    erin_recommends?: Maybe<Scalars['Int']>
    features_bags?: Maybe<Scalars['String']>
    format?: Maybe<Scalars['Int']>
    gender?: Maybe<Scalars['String']>
    /** Indicates whether a gift message is available. */
    gift_message_available?: Maybe<Scalars['String']>
    /**
     * The ID number assigned to the product.
     *
     * @deprecated Use the `uid` field instead.
     */
    id?: Maybe<Scalars['Int']>
    /** The relative path to the main image on the product page. */
    image?: Maybe<ProductImage>
    in_stock_delivery_period?: Maybe<Scalars['Int']>
    /** A number representing the product's manufacturer. */
    manufacturer?: Maybe<Scalars['Int']>
    material?: Maybe<Scalars['String']>
    /** An array of Media Gallery objects. */
    media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>
    /**
     * An array of MediaGalleryEntry objects.
     *
     * @deprecated Use product's `media_gallery` instead
     */
    media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>
    /** A brief overview of the product for search results listings, maximum 255 characters. */
    meta_description?: Maybe<Scalars['String']>
    /** A comma-separated list of keywords that are visible only to search engines. */
    meta_keyword?: Maybe<Scalars['String']>
    /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
    meta_title?: Maybe<Scalars['String']>
    /** The product name. Customers use this name to identify the product. */
    name?: Maybe<Scalars['String']>
    new?: Maybe<Scalars['Int']>
    /**
     * The beginning date for new product listings, and determines if the product is featured as a new product.
     *
     * @deprecated The field should not be used on the storefront.
     */
    new_from_date?: Maybe<Scalars['String']>
    /**
     * The end date for new product listings.
     *
     * @deprecated The field should not be used on the storefront.
     */
    new_to_date?: Maybe<Scalars['String']>
    /** Product stock only x left count */
    only_x_left_in_stock?: Maybe<Scalars['Float']>
    /** An array of options for a customizable product. */
    options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>
    /** If the product has multiple options, determines where they appear on the product page. */
    options_container?: Maybe<Scalars['String']>
    pattern?: Maybe<Scalars['String']>
    performance_fabric?: Maybe<Scalars['Int']>
    /**
     * A ProductPrices object, indicating the price of an item.
     *
     * @deprecated Use price_range for product price information.
     */
    price?: Maybe<ProductPrices>
    /** A PriceRange object, indicating the range of prices for the product */
    price_range: PriceRange
    /** An array of TierPrice objects. */
    price_tiers?: Maybe<Array<Maybe<TierPrice>>>
    /** An array of ProductLinks objects. */
    product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>
    /** The average of all the ratings given to the product. */
    rating_summary: Scalars['Float']
    /** Related Products */
    related_products?: Maybe<Array<Maybe<ProductInterface>>>
    /** The total count of all the reviews given to the product. */
    review_count: Scalars['Int']
    /** The list of products reviews. */
    reviews: ProductReviews
    sale?: Maybe<Scalars['Int']>
    /** A short description of the product. Its use depends on the theme. */
    short_description?: Maybe<ComplexTextValue>
    size?: Maybe<Scalars['Int']>
    /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
    sku?: Maybe<Scalars['String']>
    sleeve?: Maybe<Scalars['String']>
    /** The relative path to the small image, which is used on catalog pages. */
    small_image?: Maybe<ProductImage>
    /**
     * The beginning date that a product has a special price.
     *
     * @deprecated The field should not be used on the storefront.
     */
    special_from_date?: Maybe<Scalars['String']>
    /** The discounted price of the product. */
    special_price?: Maybe<Scalars['Float']>
    /** The end date that a product has a special price. */
    special_to_date?: Maybe<Scalars['String']>
    /** Stock status of the product */
    stock_status?: Maybe<ProductStockStatus>
    strap_bags?: Maybe<Scalars['String']>
    style_bags?: Maybe<Scalars['String']>
    style_bottom?: Maybe<Scalars['String']>
    style_general?: Maybe<Scalars['String']>
    /** The file name of a swatch image */
    swatch_image?: Maybe<Scalars['String']>
    /** The relative path to the product's thumbnail image. */
    thumbnail?: Maybe<ProductImage>
    /**
     * The price when tier pricing is in effect and the items purchased threshold has been reached.
     *
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_price?: Maybe<Scalars['Float']>
    /**
     * An array of ProductTierPrices objects.
     *
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>
    /**
     * One of simple, virtual, bundle, downloadable, grouped, or configurable.
     *
     * @deprecated Use __typename instead.
     */
    type_id?: Maybe<Scalars['String']>
    /** The unique ID for a `ProductInterface` object. */
    uid: Scalars['ID']
    /**
     * Timestamp indicating when the product was updated.
     *
     * @deprecated The field should not be used on the storefront.
     */
    updated_at?: Maybe<Scalars['String']>
    /** Upsell Products */
    upsell_products?: Maybe<Array<Maybe<ProductInterface>>>
    /** The part of the URL that identifies the product */
    url_key?: Maybe<Scalars['String']>
    /** @deprecated Use product's `canonical_url` or url rewrites instead */
    url_path?: Maybe<Scalars['String']>
    /** URL rewrites list */
    url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>
    /** The part of the product URL that is appended after the url key */
    url_suffix?: Maybe<Scalars['String']>
    varying_simple_prices?: Maybe<Scalars['Int']>
    /**
     * An array of websites in which the product is available.
     *
     * @deprecated The field should not be used on the storefront.
     */
    websites?: Maybe<Array<Maybe<Website>>>
    /** The weight of the item, in units defined by the store. */
    weight?: Maybe<Scalars['Float']>
  }

/** A simple product is tangible and are usually sold as single units or in fixed quantities. */
export type SimpleProductReviewsArgs = {
  currentPage?: Maybe<Scalars['Int']>
  pageSize?: Maybe<Scalars['Int']>
}

/**
 * ProductFilterInput is deprecated, use @ProductAttributeFilterInput instead. ProductFilterInput
 * defines the filters to be used in the search. A filter contains at least one attribute, a
 * comparison operator, and the value that is being searched for.
 */
export type ProductFilterInput = {
  /** Category ID the product belongs to. */
  category_id?: Maybe<FilterTypeInput>
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<FilterTypeInput>
  /** Timestamp indicating when the product was created. */
  created_at?: Maybe<FilterTypeInput>
  /** The name of a custom layout. */
  custom_layout?: Maybe<FilterTypeInput>
  /** XML code that is applied as a layout update to the product page. */
  custom_layout_update?: Maybe<FilterTypeInput>
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<FilterTypeInput>
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<FilterTypeInput>
  /** Indicates whether additional attributes have been created for the product. */
  has_options?: Maybe<FilterTypeInput>
  /** The relative path to the main image on the product page. */
  image?: Maybe<FilterTypeInput>
  /** The label assigned to a product image. */
  image_label?: Maybe<FilterTypeInput>
  /** A number representing the product's manufacturer. */
  manufacturer?: Maybe<FilterTypeInput>
  /** The numeric maximal price of the product. Do not include the currency code. */
  max_price?: Maybe<FilterTypeInput>
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<FilterTypeInput>
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<FilterTypeInput>
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<FilterTypeInput>
  /** The numeric minimal price of the product. Do not include the currency code. */
  min_price?: Maybe<FilterTypeInput>
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<FilterTypeInput>
  /** The beginning date for new product listings, and determines if the product is featured as a new product. */
  news_from_date?: Maybe<FilterTypeInput>
  /** The end date for new product listings. */
  news_to_date?: Maybe<FilterTypeInput>
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<FilterTypeInput>
  /** The keyword required to perform a logical OR comparison. */
  or?: Maybe<ProductFilterInput>
  /** The price of an item. */
  price?: Maybe<FilterTypeInput>
  /** Indicates whether the product has required options. */
  required_options?: Maybe<FilterTypeInput>
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<FilterTypeInput>
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<FilterTypeInput>
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<FilterTypeInput>
  /** The label assigned to a product's small image. */
  small_image_label?: Maybe<FilterTypeInput>
  /** The beginning date that a product has a special price. */
  special_from_date?: Maybe<FilterTypeInput>
  /** The discounted price of the product. Do not include the currency code. */
  special_price?: Maybe<FilterTypeInput>
  /** The end date that a product has a special price. */
  special_to_date?: Maybe<FilterTypeInput>
  /** The file name of a swatch image */
  swatch_image?: Maybe<FilterTypeInput>
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<FilterTypeInput>
  /** The label assigned to a product's thumbnail image. */
  thumbnail_label?: Maybe<FilterTypeInput>
  /** The price when tier pricing is in effect and the items purchased threshold has been reached. */
  tier_price?: Maybe<FilterTypeInput>
  /** Timestamp indicating when the product was updated. */
  updated_at?: Maybe<FilterTypeInput>
  /** The part of the URL that identifies the product */
  url_key?: Maybe<FilterTypeInput>
  url_path?: Maybe<FilterTypeInput>
  /** The weight of the item, in units defined by the store. */
  weight?: Maybe<FilterTypeInput>
}

/**
 * ProductSortInput is deprecated, use @ProductAttributeSortInput instead. ProductSortInput
 * specifies the attribute to use for sorting search results and indicates whether the results are
 * sorted in ascending or descending order.
 */
export type ProductSortInput = {
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<SortEnum>
  /** Timestamp indicating when the product was created. */
  created_at?: Maybe<SortEnum>
  /** The name of a custom layout. */
  custom_layout?: Maybe<SortEnum>
  /** XML code that is applied as a layout update to the product page. */
  custom_layout_update?: Maybe<SortEnum>
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<SortEnum>
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<SortEnum>
  /** Indicates whether additional attributes have been created for the product. */
  has_options?: Maybe<SortEnum>
  /** The relative path to the main image on the product page. */
  image?: Maybe<SortEnum>
  /** The label assigned to a product image. */
  image_label?: Maybe<SortEnum>
  /** A number representing the product's manufacturer. */
  manufacturer?: Maybe<SortEnum>
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<SortEnum>
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<SortEnum>
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<SortEnum>
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<SortEnum>
  /** The beginning date for new product listings, and determines if the product is featured as a new product. */
  news_from_date?: Maybe<SortEnum>
  /** The end date for new product listings. */
  news_to_date?: Maybe<SortEnum>
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<SortEnum>
  /** The price of the item. */
  price?: Maybe<SortEnum>
  /** Indicates whether the product has required options. */
  required_options?: Maybe<SortEnum>
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<SortEnum>
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<SortEnum>
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<SortEnum>
  /** The label assigned to a product's small image. */
  small_image_label?: Maybe<SortEnum>
  /** The beginning date that a product has a special price. */
  special_from_date?: Maybe<SortEnum>
  /** The discounted price of the product. */
  special_price?: Maybe<SortEnum>
  /** The end date that a product has a special price. */
  special_to_date?: Maybe<SortEnum>
  /** The file name of a swatch image */
  swatch_image?: Maybe<SortEnum>
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<SortEnum>
  /** The label assigned to a product's thumbnail image. */
  thumbnail_label?: Maybe<SortEnum>
  /** The price when tier pricing is in effect and the items purchased threshold has been reached. */
  tier_price?: Maybe<SortEnum>
  /** Timestamp indicating when the product was updated. */
  updated_at?: Maybe<SortEnum>
  /** The part of the URL that identifies the product */
  url_key?: Maybe<SortEnum>
  url_path?: Maybe<SortEnum>
  /** The weight of the item, in units defined by the store. */
  weight?: Maybe<SortEnum>
}

export type LayerFilterItem = LayerFilterItemInterface & {
  __typename?: 'LayerFilterItem'
  /**
   * Count of items by filter.
   *
   * @deprecated Use AggregationOption.count instead.
   */
  items_count?: Maybe<Scalars['Int']>
  /**
   * Filter label.
   *
   * @deprecated Use AggregationOption.label instead.
   */
  label?: Maybe<Scalars['String']>
  /**
   * Value for filter request variable to be used in query.
   *
   * @deprecated Use AggregationOption.value instead.
   */
  value_string?: Maybe<Scalars['String']>
}

/** A simple product wish list Item */
export type SimpleWishlistItem = WishlistItemInterface & {
  __typename?: 'SimpleWishlistItem'
  /** The date and time the item was added to the wish list */
  added_at: Scalars['String']
  /** Custom options selected for the wish list item */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>
  /** The description of the item */
  description?: Maybe<Scalars['String']>
  /** The unique ID for a `WishlistItemInterface` object */
  id: Scalars['ID']
  /** Product details of the wish list item */
  product?: Maybe<ProductInterface>
  /** The quantity of this wish list item */
  quantity: Scalars['Float']
}

/** A virtual product wish list item */
export type VirtualWishlistItem = WishlistItemInterface & {
  __typename?: 'VirtualWishlistItem'
  /** The date and time the item was added to the wish list */
  added_at: Scalars['String']
  /** Custom options selected for the wish list item */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>
  /** The description of the item */
  description?: Maybe<Scalars['String']>
  /** The unique ID for a `WishlistItemInterface` object */
  id: Scalars['ID']
  /** Product details of the wish list item */
  product?: Maybe<ProductInterface>
  /** The quantity of this wish list item */
  quantity: Scalars['Float']
}

/** Simple Cart Item */
export type SimpleCartItem = CartItemInterface & {
  __typename?: 'SimpleCartItem'
  customizable_options: Array<Maybe<SelectedCustomizableOption>>
  /** The entered gift message for the cart item */
  gift_message?: Maybe<GiftMessage>
  /** @deprecated Use `uid` instead */
  id: Scalars['String']
  prices?: Maybe<CartItemPrices>
  product: ProductInterface
  quantity: Scalars['Float']
  /** The unique ID for a `CartItemInterface` object */
  uid: Scalars['ID']
}

/** Virtual Cart Item */
export type VirtualCartItem = CartItemInterface & {
  __typename?: 'VirtualCartItem'
  customizable_options: Array<Maybe<SelectedCustomizableOption>>
  /** @deprecated Use `uid` instead */
  id: Scalars['String']
  prices?: Maybe<CartItemPrices>
  product: ProductInterface
  quantity: Scalars['Float']
  /** The unique ID for a `CartItemInterface` object */
  uid: Scalars['ID']
}

/** Downloadable Cart Item */
export type DownloadableCartItem = CartItemInterface & {
  __typename?: 'DownloadableCartItem'
  customizable_options: Array<Maybe<SelectedCustomizableOption>>
  /** @deprecated Use `uid` instead */
  id: Scalars['String']
  /** An array containing information about the links for the added to cart downloadable product */
  links?: Maybe<Array<Maybe<DownloadableProductLinks>>>
  prices?: Maybe<CartItemPrices>
  product: ProductInterface
  quantity: Scalars['Float']
  /** DownloadableProductSamples defines characteristics of a downloadable product */
  samples?: Maybe<Array<Maybe<DownloadableProductSamples>>>
  /** The unique ID for a `CartItemInterface` object */
  uid: Scalars['ID']
}

/** DownloadableProductLinks defines characteristics of a downloadable product */
export type DownloadableProductLinks = {
  __typename?: 'DownloadableProductLinks'
  /** @deprecated This information should not be exposed on frontend */
  id?: Maybe<Scalars['Int']>
  /** @deprecated This information should not be exposed on frontend */
  is_shareable?: Maybe<Scalars['Boolean']>
  /** @deprecated  `sample_url` serves to get the downloadable sample */
  link_type?: Maybe<DownloadableFileTypeEnum>
  /** @deprecated This information should not be exposed on frontend */
  number_of_downloads?: Maybe<Scalars['Int']>
  /** The price of the downloadable product */
  price?: Maybe<Scalars['Float']>
  /** @deprecated  `sample_url` serves to get the downloadable sample */
  sample_file?: Maybe<Scalars['String']>
  /** @deprecated  `sample_url` serves to get the downloadable sample */
  sample_type?: Maybe<DownloadableFileTypeEnum>
  /** URL to the downloadable sample */
  sample_url?: Maybe<Scalars['String']>
  /** A number indicating the sort order */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name of the link */
  title?: Maybe<Scalars['String']>
  /** The unique ID for a `DownloadableProductLinks` object. */
  uid: Scalars['ID']
}

export type DownloadableFileTypeEnum = 'FILE' | 'URL'

/** DownloadableProductSamples defines characteristics of a downloadable product */
export type DownloadableProductSamples = {
  __typename?: 'DownloadableProductSamples'
  /** @deprecated This information should not be exposed on frontend */
  id?: Maybe<Scalars['Int']>
  /** @deprecated  `sample_url` serves to get the downloadable sample */
  sample_file?: Maybe<Scalars['String']>
  /** @deprecated  `sample_url` serves to get the downloadable sample */
  sample_type?: Maybe<DownloadableFileTypeEnum>
  /** URL to the downloadable sample */
  sample_url?: Maybe<Scalars['String']>
  /** A number indicating the sort order */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name of the sample */
  title?: Maybe<Scalars['String']>
}

/** DownloadableProduct defines a product that the customer downloads */
export type DownloadableProduct = CustomizableProductInterface &
  ProductInterface & {
    __typename?: 'DownloadableProduct'
    activity?: Maybe<Scalars['String']>
    /**
     * The attribute set assigned to the product.
     *
     * @deprecated The field should not be used on the storefront.
     */
    attribute_set_id?: Maybe<Scalars['Int']>
    backorder_delivery_date?: Maybe<Scalars['String']>
    backorder_delivery_period?: Maybe<Scalars['Int']>
    /**
     * Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link
     * Meta Tag For Products' is enabled
     */
    canonical_url?: Maybe<Scalars['String']>
    /** The categories assigned to a product. */
    categories?: Maybe<Array<Maybe<CategoryInterface>>>
    category_gear?: Maybe<Scalars['String']>
    climate?: Maybe<Scalars['String']>
    collar?: Maybe<Scalars['String']>
    color?: Maybe<Scalars['Int']>
    /** The product's country of origin. */
    country_of_manufacture?: Maybe<Scalars['String']>
    /**
     * Timestamp indicating when the product was created.
     *
     * @deprecated The field should not be used on the storefront.
     */
    created_at?: Maybe<Scalars['String']>
    /** Crosssell Products */
    crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>
    default_configuration_json?: Maybe<Scalars['String']>
    /** Detailed information about the product. The value can include simple HTML tags. */
    description?: Maybe<ComplexTextValue>
    /** An array containing information about the links for this downloadable product */
    downloadable_product_links?: Maybe<Array<Maybe<DownloadableProductLinks>>>
    /** An array containing information about samples of this downloadable product. */
    downloadable_product_samples?: Maybe<Array<Maybe<DownloadableProductSamples>>>
    eco_collection?: Maybe<Scalars['Int']>
    erin_recommends?: Maybe<Scalars['Int']>
    features_bags?: Maybe<Scalars['String']>
    format?: Maybe<Scalars['Int']>
    gender?: Maybe<Scalars['String']>
    /** Indicates whether a gift message is available. */
    gift_message_available?: Maybe<Scalars['String']>
    /**
     * The ID number assigned to the product.
     *
     * @deprecated Use the `uid` field instead.
     */
    id?: Maybe<Scalars['Int']>
    /** The relative path to the main image on the product page. */
    image?: Maybe<ProductImage>
    in_stock_delivery_period?: Maybe<Scalars['Int']>
    /** A value of 1 indicates that each link in the array must be purchased separately */
    links_purchased_separately?: Maybe<Scalars['Int']>
    /** The heading above the list of downloadable products */
    links_title?: Maybe<Scalars['String']>
    /** A number representing the product's manufacturer. */
    manufacturer?: Maybe<Scalars['Int']>
    material?: Maybe<Scalars['String']>
    /** An array of Media Gallery objects. */
    media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>
    /**
     * An array of MediaGalleryEntry objects.
     *
     * @deprecated Use product's `media_gallery` instead
     */
    media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>
    /** A brief overview of the product for search results listings, maximum 255 characters. */
    meta_description?: Maybe<Scalars['String']>
    /** A comma-separated list of keywords that are visible only to search engines. */
    meta_keyword?: Maybe<Scalars['String']>
    /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
    meta_title?: Maybe<Scalars['String']>
    /** The product name. Customers use this name to identify the product. */
    name?: Maybe<Scalars['String']>
    new?: Maybe<Scalars['Int']>
    /**
     * The beginning date for new product listings, and determines if the product is featured as a new product.
     *
     * @deprecated The field should not be used on the storefront.
     */
    new_from_date?: Maybe<Scalars['String']>
    /**
     * The end date for new product listings.
     *
     * @deprecated The field should not be used on the storefront.
     */
    new_to_date?: Maybe<Scalars['String']>
    /** Product stock only x left count */
    only_x_left_in_stock?: Maybe<Scalars['Float']>
    /** An array of options for a customizable product. */
    options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>
    /** If the product has multiple options, determines where they appear on the product page. */
    options_container?: Maybe<Scalars['String']>
    pattern?: Maybe<Scalars['String']>
    performance_fabric?: Maybe<Scalars['Int']>
    /**
     * A ProductPrices object, indicating the price of an item.
     *
     * @deprecated Use price_range for product price information.
     */
    price?: Maybe<ProductPrices>
    /** A PriceRange object, indicating the range of prices for the product */
    price_range: PriceRange
    /** An array of TierPrice objects. */
    price_tiers?: Maybe<Array<Maybe<TierPrice>>>
    /** An array of ProductLinks objects. */
    product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>
    /** The average of all the ratings given to the product. */
    rating_summary: Scalars['Float']
    /** Related Products */
    related_products?: Maybe<Array<Maybe<ProductInterface>>>
    /** The total count of all the reviews given to the product. */
    review_count: Scalars['Int']
    /** The list of products reviews. */
    reviews: ProductReviews
    sale?: Maybe<Scalars['Int']>
    /** A short description of the product. Its use depends on the theme. */
    short_description?: Maybe<ComplexTextValue>
    size?: Maybe<Scalars['Int']>
    /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
    sku?: Maybe<Scalars['String']>
    sleeve?: Maybe<Scalars['String']>
    /** The relative path to the small image, which is used on catalog pages. */
    small_image?: Maybe<ProductImage>
    /**
     * The beginning date that a product has a special price.
     *
     * @deprecated The field should not be used on the storefront.
     */
    special_from_date?: Maybe<Scalars['String']>
    /** The discounted price of the product. */
    special_price?: Maybe<Scalars['Float']>
    /** The end date that a product has a special price. */
    special_to_date?: Maybe<Scalars['String']>
    /** Stock status of the product */
    stock_status?: Maybe<ProductStockStatus>
    strap_bags?: Maybe<Scalars['String']>
    style_bags?: Maybe<Scalars['String']>
    style_bottom?: Maybe<Scalars['String']>
    style_general?: Maybe<Scalars['String']>
    /** The file name of a swatch image */
    swatch_image?: Maybe<Scalars['String']>
    /** The relative path to the product's thumbnail image. */
    thumbnail?: Maybe<ProductImage>
    /**
     * The price when tier pricing is in effect and the items purchased threshold has been reached.
     *
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_price?: Maybe<Scalars['Float']>
    /**
     * An array of ProductTierPrices objects.
     *
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>
    /**
     * One of simple, virtual, bundle, downloadable, grouped, or configurable.
     *
     * @deprecated Use __typename instead.
     */
    type_id?: Maybe<Scalars['String']>
    /** The unique ID for a `ProductInterface` object. */
    uid: Scalars['ID']
    /**
     * Timestamp indicating when the product was updated.
     *
     * @deprecated The field should not be used on the storefront.
     */
    updated_at?: Maybe<Scalars['String']>
    /** Upsell Products */
    upsell_products?: Maybe<Array<Maybe<ProductInterface>>>
    /** The part of the URL that identifies the product */
    url_key?: Maybe<Scalars['String']>
    /** @deprecated Use product's `canonical_url` or url rewrites instead */
    url_path?: Maybe<Scalars['String']>
    /** URL rewrites list */
    url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>
    /** The part of the product URL that is appended after the url key */
    url_suffix?: Maybe<Scalars['String']>
    varying_simple_prices?: Maybe<Scalars['Int']>
    /**
     * An array of websites in which the product is available.
     *
     * @deprecated The field should not be used on the storefront.
     */
    websites?: Maybe<Array<Maybe<Website>>>
  }

/** DownloadableProduct defines a product that the customer downloads */
export type DownloadableProductReviewsArgs = {
  currentPage?: Maybe<Scalars['Int']>
  pageSize?: Maybe<Scalars['Int']>
}

export type DownloadableOrderItem = OrderItemInterface & {
  __typename?: 'DownloadableOrderItem'
  /** The final discount information for the product */
  discounts?: Maybe<Array<Maybe<Discount>>>
  /** A list of downloadable links that are ordered from the downloadable product */
  downloadable_links?: Maybe<Array<Maybe<DownloadableItemsLinks>>>
  /** The entered option for the base product, such as a logo or image */
  entered_options?: Maybe<Array<Maybe<OrderItemOption>>>
  /** The unique ID for a `OrderItemInterface` object */
  id: Scalars['ID']
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>
  /** The sale price of the base product, including selected options */
  product_sale_price: Money
  /** The SKU of the base product */
  product_sku: Scalars['String']
  /** The type of product, such as simple, configurable, etc. */
  product_type?: Maybe<Scalars['String']>
  /** URL key of the base product */
  product_url_key?: Maybe<Scalars['String']>
  /** The number of canceled items */
  quantity_canceled?: Maybe<Scalars['Float']>
  /** The number of invoiced items */
  quantity_invoiced?: Maybe<Scalars['Float']>
  /** The number of units ordered for this item */
  quantity_ordered?: Maybe<Scalars['Float']>
  /** The number of refunded items */
  quantity_refunded?: Maybe<Scalars['Float']>
  /** The number of returned items */
  quantity_returned?: Maybe<Scalars['Float']>
  /** The number of shipped items */
  quantity_shipped?: Maybe<Scalars['Float']>
  /** The selected options for the base product, such as color or size */
  selected_options?: Maybe<Array<Maybe<OrderItemOption>>>
  /** The status of the order item */
  status?: Maybe<Scalars['String']>
}

/** DownloadableProductLinks defines characteristics of a downloadable product */
export type DownloadableItemsLinks = {
  __typename?: 'DownloadableItemsLinks'
  /** A number indicating the sort order */
  sort_order?: Maybe<Scalars['Int']>
  /** The display name of the link */
  title?: Maybe<Scalars['String']>
  /** The unique ID for a `DownloadableItemsLinks` object. */
  uid: Scalars['ID']
}

export type DownloadableInvoiceItem = InvoiceItemInterface & {
  __typename?: 'DownloadableInvoiceItem'
  /** Contains information about the final discount amount for the base product, including discounts on options */
  discounts?: Maybe<Array<Maybe<Discount>>>
  /** A list of downloadable links that are invoiced from the downloadable product */
  downloadable_links?: Maybe<Array<Maybe<DownloadableItemsLinks>>>
  /** The unique ID for a `InvoiceItemInterface` object */
  id: Scalars['ID']
  /** Contains details about an individual order item */
  order_item?: Maybe<OrderItemInterface>
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>
  /** The sale price for the base product including selected options */
  product_sale_price: Money
  /** The SKU of the base product */
  product_sku: Scalars['String']
  /** The number of invoiced items */
  quantity_invoiced?: Maybe<Scalars['Float']>
}

export type DownloadableCreditMemoItem = CreditMemoItemInterface & {
  __typename?: 'DownloadableCreditMemoItem'
  /** Contains information about the final discount amount for the base product, including discounts on options */
  discounts?: Maybe<Array<Maybe<Discount>>>
  /** A list of downloadable links that are refunded from the downloadable product */
  downloadable_links?: Maybe<Array<Maybe<DownloadableItemsLinks>>>
  /** The unique ID for a `CreditMemoItemInterface` object */
  id: Scalars['ID']
  /** The order item the credit memo is applied to */
  order_item?: Maybe<OrderItemInterface>
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>
  /** The sale price for the base product, including selected options */
  product_sale_price: Money
  /** SKU of the base product */
  product_sku: Scalars['String']
  /** The number of refunded items */
  quantity_refunded?: Maybe<Scalars['Float']>
}

/** A downloadable product wish list item */
export type DownloadableWishlistItem = WishlistItemInterface & {
  __typename?: 'DownloadableWishlistItem'
  /** The date and time the item was added to the wish list */
  added_at: Scalars['String']
  /** Custom options selected for the wish list item */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>
  /** The description of the item */
  description?: Maybe<Scalars['String']>
  /** The unique ID for a `WishlistItemInterface` object */
  id: Scalars['ID']
  /** An array containing information about the selected links */
  links_v2?: Maybe<Array<Maybe<DownloadableProductLinks>>>
  /** Product details of the wish list item */
  product?: Maybe<ProductInterface>
  /** The quantity of this wish list item */
  quantity: Scalars['Float']
  /** An array containing information about the selected samples */
  samples?: Maybe<Array<Maybe<DownloadableProductSamples>>>
}

export type BundleCartItem = CartItemInterface & {
  __typename?: 'BundleCartItem'
  bundle_options: Array<Maybe<SelectedBundleOption>>
  customizable_options: Array<Maybe<SelectedCustomizableOption>>
  /** The entered gift message for the cart item */
  gift_message?: Maybe<GiftMessage>
  /** @deprecated Use `uid` instead */
  id: Scalars['String']
  prices?: Maybe<CartItemPrices>
  product: ProductInterface
  quantity: Scalars['Float']
  /** The unique ID for a `CartItemInterface` object */
  uid: Scalars['ID']
}

export type SelectedBundleOption = {
  __typename?: 'SelectedBundleOption'
  /** @deprecated Use `uid` instead */
  id: Scalars['Int']
  label: Scalars['String']
  type: Scalars['String']
  /** The unique ID for a `SelectedBundleOption` object */
  uid: Scalars['ID']
  values: Array<Maybe<SelectedBundleOptionValue>>
}

export type SelectedBundleOptionValue = {
  __typename?: 'SelectedBundleOptionValue'
  /** Use `uid` instead */
  id: Scalars['Int']
  label: Scalars['String']
  price: Scalars['Float']
  quantity: Scalars['Float']
  /** The unique ID for a `SelectedBundleOptionValue` object */
  uid: Scalars['ID']
}

/** BundleItem defines an individual item in a bundle product. */
export type BundleItem = {
  __typename?: 'BundleItem'
  /**
   * An ID assigned to each type of item in a bundle product.
   *
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>
  /** An array of additional options for this bundle item. */
  options?: Maybe<Array<Maybe<BundleItemOption>>>
  /** He relative position of this item compared to the other bundle items. */
  position?: Maybe<Scalars['Int']>
  /** Indicates whether the item must be included in the bundle. */
  required?: Maybe<Scalars['Boolean']>
  /** The SKU of the bundle product. */
  sku?: Maybe<Scalars['String']>
  /** The display name of the item. */
  title?: Maybe<Scalars['String']>
  /** The input type that the customer uses to select the item. Examples include radio button and checkbox. */
  type?: Maybe<Scalars['String']>
  /** The unique ID for a `BundleItem` object. */
  uid?: Maybe<Scalars['ID']>
}

/** BundleItemOption defines characteristics and options for a specific bundle item. */
export type BundleItemOption = {
  __typename?: 'BundleItemOption'
  /** Indicates whether the customer can change the number of items for this option. */
  can_change_quantity?: Maybe<Scalars['Boolean']>
  /**
   * The ID assigned to the bundled item option.
   *
   * @deprecated Use `uid` instead
   */
  id?: Maybe<Scalars['Int']>
  /** Indicates whether this option is the default option. */
  is_default?: Maybe<Scalars['Boolean']>
  /** The text that identifies the bundled item option. */
  label?: Maybe<Scalars['String']>
  /**
   * When a bundle item contains multiple options, the relative position of this option compared to
   * the other options.
   */
  position?: Maybe<Scalars['Int']>
  /** The price of the selected option. */
  price?: Maybe<Scalars['Float']>
  /** One of FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>
  /** Contains details about this product option. */
  product?: Maybe<ProductInterface>
  /**
   * Indicates the quantity of this specific bundle item.
   *
   * @deprecated The `qty` is deprecated. Use `quantity` instead.
   */
  qty?: Maybe<Scalars['Float']>
  /** Indicates the quantity of this specific bundle item. */
  quantity?: Maybe<Scalars['Float']>
  /** The unique ID for a `BundleItemOption` object. */
  uid: Scalars['ID']
}

/** BundleProduct defines basic features of a bundle product and contains multiple BundleItems. */
export type BundleProduct = CustomizableProductInterface &
  PhysicalProductInterface &
  ProductInterface & {
    __typename?: 'BundleProduct'
    activity?: Maybe<Scalars['String']>
    /**
     * The attribute set assigned to the product.
     *
     * @deprecated The field should not be used on the storefront.
     */
    attribute_set_id?: Maybe<Scalars['Int']>
    backorder_delivery_date?: Maybe<Scalars['String']>
    backorder_delivery_period?: Maybe<Scalars['Int']>
    /**
     * Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link
     * Meta Tag For Products' is enabled
     */
    canonical_url?: Maybe<Scalars['String']>
    /** The categories assigned to a product. */
    categories?: Maybe<Array<Maybe<CategoryInterface>>>
    category_gear?: Maybe<Scalars['String']>
    climate?: Maybe<Scalars['String']>
    collar?: Maybe<Scalars['String']>
    color?: Maybe<Scalars['Int']>
    /** The product's country of origin. */
    country_of_manufacture?: Maybe<Scalars['String']>
    /**
     * Timestamp indicating when the product was created.
     *
     * @deprecated The field should not be used on the storefront.
     */
    created_at?: Maybe<Scalars['String']>
    /** Crosssell Products */
    crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>
    default_configuration_json?: Maybe<Scalars['String']>
    /** Detailed information about the product. The value can include simple HTML tags. */
    description?: Maybe<ComplexTextValue>
    /** Indicates whether the bundle product has a dynamic price. */
    dynamic_price?: Maybe<Scalars['Boolean']>
    /** Indicates whether the bundle product has a dynamic SK. */
    dynamic_sku?: Maybe<Scalars['Boolean']>
    /** Indicates whether the bundle product has a dynamically calculated weight. */
    dynamic_weight?: Maybe<Scalars['Boolean']>
    eco_collection?: Maybe<Scalars['Int']>
    erin_recommends?: Maybe<Scalars['Int']>
    features_bags?: Maybe<Scalars['String']>
    format?: Maybe<Scalars['Int']>
    gender?: Maybe<Scalars['String']>
    /** Indicates whether a gift message is available. */
    gift_message_available?: Maybe<Scalars['String']>
    /**
     * The ID number assigned to the product.
     *
     * @deprecated Use the `uid` field instead.
     */
    id?: Maybe<Scalars['Int']>
    /** The relative path to the main image on the product page. */
    image?: Maybe<ProductImage>
    in_stock_delivery_period?: Maybe<Scalars['Int']>
    /** An array containing information about individual bundle items. */
    items?: Maybe<Array<Maybe<BundleItem>>>
    /** A number representing the product's manufacturer. */
    manufacturer?: Maybe<Scalars['Int']>
    material?: Maybe<Scalars['String']>
    /** An array of Media Gallery objects. */
    media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>
    /**
     * An array of MediaGalleryEntry objects.
     *
     * @deprecated Use product's `media_gallery` instead
     */
    media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>
    /** A brief overview of the product for search results listings, maximum 255 characters. */
    meta_description?: Maybe<Scalars['String']>
    /** A comma-separated list of keywords that are visible only to search engines. */
    meta_keyword?: Maybe<Scalars['String']>
    /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
    meta_title?: Maybe<Scalars['String']>
    /** The product name. Customers use this name to identify the product. */
    name?: Maybe<Scalars['String']>
    new?: Maybe<Scalars['Int']>
    /**
     * The beginning date for new product listings, and determines if the product is featured as a new product.
     *
     * @deprecated The field should not be used on the storefront.
     */
    new_from_date?: Maybe<Scalars['String']>
    /**
     * The end date for new product listings.
     *
     * @deprecated The field should not be used on the storefront.
     */
    new_to_date?: Maybe<Scalars['String']>
    /** Product stock only x left count */
    only_x_left_in_stock?: Maybe<Scalars['Float']>
    /** An array of options for a customizable product. */
    options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>
    /** If the product has multiple options, determines where they appear on the product page. */
    options_container?: Maybe<Scalars['String']>
    pattern?: Maybe<Scalars['String']>
    performance_fabric?: Maybe<Scalars['Int']>
    /**
     * A ProductPrices object, indicating the price of an item.
     *
     * @deprecated Use price_range for product price information.
     */
    price?: Maybe<ProductPrices>
    /** A PriceRange object, indicating the range of prices for the product */
    price_range: PriceRange
    /** An array of TierPrice objects. */
    price_tiers?: Maybe<Array<Maybe<TierPrice>>>
    /** One of PRICE_RANGE or AS_LOW_AS. */
    price_view?: Maybe<PriceViewEnum>
    /** An array of ProductLinks objects. */
    product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>
    /** The average of all the ratings given to the product. */
    rating_summary: Scalars['Float']
    /** Related Products */
    related_products?: Maybe<Array<Maybe<ProductInterface>>>
    /** The total count of all the reviews given to the product. */
    review_count: Scalars['Int']
    /** The list of products reviews. */
    reviews: ProductReviews
    sale?: Maybe<Scalars['Int']>
    /** Indicates whether to ship bundle items together or individually. */
    ship_bundle_items?: Maybe<ShipBundleItemsEnum>
    /** A short description of the product. Its use depends on the theme. */
    short_description?: Maybe<ComplexTextValue>
    size?: Maybe<Scalars['Int']>
    /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
    sku?: Maybe<Scalars['String']>
    sleeve?: Maybe<Scalars['String']>
    /** The relative path to the small image, which is used on catalog pages. */
    small_image?: Maybe<ProductImage>
    /**
     * The beginning date that a product has a special price.
     *
     * @deprecated The field should not be used on the storefront.
     */
    special_from_date?: Maybe<Scalars['String']>
    /** The discounted price of the product. */
    special_price?: Maybe<Scalars['Float']>
    /** The end date that a product has a special price. */
    special_to_date?: Maybe<Scalars['String']>
    /** Stock status of the product */
    stock_status?: Maybe<ProductStockStatus>
    strap_bags?: Maybe<Scalars['String']>
    style_bags?: Maybe<Scalars['String']>
    style_bottom?: Maybe<Scalars['String']>
    style_general?: Maybe<Scalars['String']>
    /** The file name of a swatch image */
    swatch_image?: Maybe<Scalars['String']>
    /** The relative path to the product's thumbnail image. */
    thumbnail?: Maybe<ProductImage>
    /**
     * The price when tier pricing is in effect and the items purchased threshold has been reached.
     *
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_price?: Maybe<Scalars['Float']>
    /**
     * An array of ProductTierPrices objects.
     *
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>
    /**
     * One of simple, virtual, bundle, downloadable, grouped, or configurable.
     *
     * @deprecated Use __typename instead.
     */
    type_id?: Maybe<Scalars['String']>
    /** The unique ID for a `ProductInterface` object. */
    uid: Scalars['ID']
    /**
     * Timestamp indicating when the product was updated.
     *
     * @deprecated The field should not be used on the storefront.
     */
    updated_at?: Maybe<Scalars['String']>
    /** Upsell Products */
    upsell_products?: Maybe<Array<Maybe<ProductInterface>>>
    /** The part of the URL that identifies the product */
    url_key?: Maybe<Scalars['String']>
    /** @deprecated Use product's `canonical_url` or url rewrites instead */
    url_path?: Maybe<Scalars['String']>
    /** URL rewrites list */
    url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>
    /** The part of the product URL that is appended after the url key */
    url_suffix?: Maybe<Scalars['String']>
    varying_simple_prices?: Maybe<Scalars['Int']>
    /**
     * An array of websites in which the product is available.
     *
     * @deprecated The field should not be used on the storefront.
     */
    websites?: Maybe<Array<Maybe<Website>>>
    /** The weight of the item, in units defined by the store. */
    weight?: Maybe<Scalars['Float']>
  }

/** BundleProduct defines basic features of a bundle product and contains multiple BundleItems. */
export type BundleProductReviewsArgs = {
  currentPage?: Maybe<Scalars['Int']>
  pageSize?: Maybe<Scalars['Int']>
}

/**
 * This enumeration defines whether a bundle product's price is displayed as the lowest possible
 * value or as a range.
 */
export type PriceViewEnum = 'AS_LOW_AS' | 'PRICE_RANGE'

/** This enumeration defines whether bundle items must be shipped together. */
export type ShipBundleItemsEnum = 'SEPARATELY' | 'TOGETHER'

export type BundleOrderItem = OrderItemInterface & {
  __typename?: 'BundleOrderItem'
  /** A list of bundle options that are assigned to the bundle product */
  bundle_options?: Maybe<Array<Maybe<ItemSelectedBundleOption>>>
  /** The final discount information for the product */
  discounts?: Maybe<Array<Maybe<Discount>>>
  /** The entered option for the base product, such as a logo or image */
  entered_options?: Maybe<Array<Maybe<OrderItemOption>>>
  /** The unique ID for a `OrderItemInterface` object */
  id: Scalars['ID']
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>
  /** The sale price of the base product, including selected options */
  product_sale_price: Money
  /** The SKU of the base product */
  product_sku: Scalars['String']
  /** The type of product, such as simple, configurable, etc. */
  product_type?: Maybe<Scalars['String']>
  /** URL key of the base product */
  product_url_key?: Maybe<Scalars['String']>
  /** The number of canceled items */
  quantity_canceled?: Maybe<Scalars['Float']>
  /** The number of invoiced items */
  quantity_invoiced?: Maybe<Scalars['Float']>
  /** The number of units ordered for this item */
  quantity_ordered?: Maybe<Scalars['Float']>
  /** The number of refunded items */
  quantity_refunded?: Maybe<Scalars['Float']>
  /** The number of returned items */
  quantity_returned?: Maybe<Scalars['Float']>
  /** The number of shipped items */
  quantity_shipped?: Maybe<Scalars['Float']>
  /** The selected options for the base product, such as color or size */
  selected_options?: Maybe<Array<Maybe<OrderItemOption>>>
  /** The status of the order item */
  status?: Maybe<Scalars['String']>
}

/** A list of options of the selected bundle product */
export type ItemSelectedBundleOption = {
  __typename?: 'ItemSelectedBundleOption'
  /**
   * The unique ID for a `ItemSelectedBundleOption` object
   *
   * @deprecated Use `uid` instead
   */
  id: Scalars['ID']
  /** The label of the option */
  label: Scalars['String']
  /** The unique ID for a `ItemSelectedBundleOption` object */
  uid: Scalars['ID']
  /** A list of products that represent the values of the parent option */
  values?: Maybe<Array<Maybe<ItemSelectedBundleOptionValue>>>
}

/** A list of values for the selected bundle product */
export type ItemSelectedBundleOptionValue = {
  __typename?: 'ItemSelectedBundleOptionValue'
  /**
   * The unique ID for a `ItemSelectedBundleOptionValue` object
   *
   * @deprecated Use `uid` instead
   */
  id: Scalars['ID']
  /** The price of the child bundle product */
  price: Money
  /** The name of the child bundle product */
  product_name: Scalars['String']
  /** The SKU of the child bundle product */
  product_sku: Scalars['String']
  /** Indicates how many of this bundle product were ordered */
  quantity: Scalars['Float']
  /** The unique ID for a `ItemSelectedBundleOptionValue` object */
  uid: Scalars['ID']
}

export type BundleInvoiceItem = InvoiceItemInterface & {
  __typename?: 'BundleInvoiceItem'
  /** A list of bundle options that are assigned to the bundle product */
  bundle_options?: Maybe<Array<Maybe<ItemSelectedBundleOption>>>
  /** Contains information about the final discount amount for the base product, including discounts on options */
  discounts?: Maybe<Array<Maybe<Discount>>>
  /** The unique ID for a `InvoiceItemInterface` object */
  id: Scalars['ID']
  /** Contains details about an individual order item */
  order_item?: Maybe<OrderItemInterface>
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>
  /** The sale price for the base product including selected options */
  product_sale_price: Money
  /** The SKU of the base product */
  product_sku: Scalars['String']
  /** The number of invoiced items */
  quantity_invoiced?: Maybe<Scalars['Float']>
}

export type BundleShipmentItem = ShipmentItemInterface & {
  __typename?: 'BundleShipmentItem'
  /** A list of bundle options that are assigned to the bundle product */
  bundle_options?: Maybe<Array<Maybe<ItemSelectedBundleOption>>>
  /** The unique ID for a `ShipmentItemInterface` object */
  id: Scalars['ID']
  /** Associated order item */
  order_item?: Maybe<OrderItemInterface>
  /** Name of the base product */
  product_name?: Maybe<Scalars['String']>
  /** Sale price for the base product */
  product_sale_price: Money
  /** SKU of the base product */
  product_sku: Scalars['String']
  /** Number of shipped items */
  quantity_shipped: Scalars['Float']
}

export type BundleCreditMemoItem = CreditMemoItemInterface & {
  __typename?: 'BundleCreditMemoItem'
  /** A list of bundle options that are assigned to the bundle product */
  bundle_options?: Maybe<Array<Maybe<ItemSelectedBundleOption>>>
  /** Contains information about the final discount amount for the base product, including discounts on options */
  discounts?: Maybe<Array<Maybe<Discount>>>
  /** The unique ID for a `CreditMemoItemInterface` object */
  id: Scalars['ID']
  /** The order item the credit memo is applied to */
  order_item?: Maybe<OrderItemInterface>
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>
  /** The sale price for the base product, including selected options */
  product_sale_price: Money
  /** SKU of the base product */
  product_sku: Scalars['String']
  /** The number of refunded items */
  quantity_refunded?: Maybe<Scalars['Float']>
}

export type BundleWishlistItem = WishlistItemInterface & {
  __typename?: 'BundleWishlistItem'
  /** The date and time the item was added to the wish list */
  added_at: Scalars['String']
  /** An array containing information about the selected bundle items */
  bundle_options?: Maybe<Array<Maybe<SelectedBundleOption>>>
  /** Custom options selected for the wish list item */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>
  /** The description of the item */
  description?: Maybe<Scalars['String']>
  /** The unique ID for a `WishlistItemInterface` object */
  id: Scalars['ID']
  /** Product details of the wish list item */
  product?: Maybe<ProductInterface>
  /** The quantity of this wish list item */
  quantity: Scalars['Float']
}

export type ConfigurableCartItem = CartItemInterface & {
  __typename?: 'ConfigurableCartItem'
  configurable_options: Array<Maybe<SelectedConfigurableOption>>
  customizable_options?: Maybe<Array<Maybe<SelectedCustomizableOption>>>
  /** The entered gift message for the cart item */
  gift_message?: Maybe<GiftMessage>
  /** @deprecated Use `uid` instead */
  id: Scalars['String']
  prices?: Maybe<CartItemPrices>
  product: ProductInterface
  quantity: Scalars['Float']
  /** The unique ID for a `CartItemInterface` object */
  uid: Scalars['ID']
}

export type SelectedConfigurableOption = {
  __typename?: 'SelectedConfigurableOption'
  /** The unique ID for a `ConfigurableProductOptions` object */
  configurable_product_option_uid: Scalars['ID']
  /** The unique ID for a `ConfigurableProductOptionsValues` object */
  configurable_product_option_value_uid: Scalars['ID']
  /** @deprecated Use SelectedConfigurableOption.configurable_product_option_uid instead */
  id: Scalars['Int']
  option_label: Scalars['String']
  /** @deprecated Use SelectedConfigurableOption.configurable_product_option_value_uid instead */
  value_id: Scalars['Int']
  value_label: Scalars['String']
}

export type SalesItemInterface = {
  __typename?: 'SalesItemInterface'
  /** The entered gift message for the order item */
  gift_message?: Maybe<GiftMessage>
}

/** GroupedProduct defines a grouped product */
export type GroupedProduct = PhysicalProductInterface &
  ProductInterface & {
    __typename?: 'GroupedProduct'
    activity?: Maybe<Scalars['String']>
    /**
     * The attribute set assigned to the product.
     *
     * @deprecated The field should not be used on the storefront.
     */
    attribute_set_id?: Maybe<Scalars['Int']>
    backorder_delivery_date?: Maybe<Scalars['String']>
    backorder_delivery_period?: Maybe<Scalars['Int']>
    /**
     * Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link
     * Meta Tag For Products' is enabled
     */
    canonical_url?: Maybe<Scalars['String']>
    /** The categories assigned to a product. */
    categories?: Maybe<Array<Maybe<CategoryInterface>>>
    category_gear?: Maybe<Scalars['String']>
    climate?: Maybe<Scalars['String']>
    collar?: Maybe<Scalars['String']>
    color?: Maybe<Scalars['Int']>
    /** The product's country of origin. */
    country_of_manufacture?: Maybe<Scalars['String']>
    /**
     * Timestamp indicating when the product was created.
     *
     * @deprecated The field should not be used on the storefront.
     */
    created_at?: Maybe<Scalars['String']>
    /** Crosssell Products */
    crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>
    default_configuration_json?: Maybe<Scalars['String']>
    /** Detailed information about the product. The value can include simple HTML tags. */
    description?: Maybe<ComplexTextValue>
    eco_collection?: Maybe<Scalars['Int']>
    erin_recommends?: Maybe<Scalars['Int']>
    features_bags?: Maybe<Scalars['String']>
    format?: Maybe<Scalars['Int']>
    gender?: Maybe<Scalars['String']>
    /** Indicates whether a gift message is available. */
    gift_message_available?: Maybe<Scalars['String']>
    /**
     * The ID number assigned to the product.
     *
     * @deprecated Use the `uid` field instead.
     */
    id?: Maybe<Scalars['Int']>
    /** The relative path to the main image on the product page. */
    image?: Maybe<ProductImage>
    in_stock_delivery_period?: Maybe<Scalars['Int']>
    /** An array containing grouped product items */
    items?: Maybe<Array<Maybe<GroupedProductItem>>>
    /** A number representing the product's manufacturer. */
    manufacturer?: Maybe<Scalars['Int']>
    material?: Maybe<Scalars['String']>
    /** An array of Media Gallery objects. */
    media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>
    /**
     * An array of MediaGalleryEntry objects.
     *
     * @deprecated Use product's `media_gallery` instead
     */
    media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>
    /** A brief overview of the product for search results listings, maximum 255 characters. */
    meta_description?: Maybe<Scalars['String']>
    /** A comma-separated list of keywords that are visible only to search engines. */
    meta_keyword?: Maybe<Scalars['String']>
    /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
    meta_title?: Maybe<Scalars['String']>
    /** The product name. Customers use this name to identify the product. */
    name?: Maybe<Scalars['String']>
    new?: Maybe<Scalars['Int']>
    /**
     * The beginning date for new product listings, and determines if the product is featured as a new product.
     *
     * @deprecated The field should not be used on the storefront.
     */
    new_from_date?: Maybe<Scalars['String']>
    /**
     * The end date for new product listings.
     *
     * @deprecated The field should not be used on the storefront.
     */
    new_to_date?: Maybe<Scalars['String']>
    /** Product stock only x left count */
    only_x_left_in_stock?: Maybe<Scalars['Float']>
    /** If the product has multiple options, determines where they appear on the product page. */
    options_container?: Maybe<Scalars['String']>
    pattern?: Maybe<Scalars['String']>
    performance_fabric?: Maybe<Scalars['Int']>
    /**
     * A ProductPrices object, indicating the price of an item.
     *
     * @deprecated Use price_range for product price information.
     */
    price?: Maybe<ProductPrices>
    /** A PriceRange object, indicating the range of prices for the product */
    price_range: PriceRange
    /** An array of TierPrice objects. */
    price_tiers?: Maybe<Array<Maybe<TierPrice>>>
    /** An array of ProductLinks objects. */
    product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>
    /** The average of all the ratings given to the product. */
    rating_summary: Scalars['Float']
    /** Related Products */
    related_products?: Maybe<Array<Maybe<ProductInterface>>>
    /** The total count of all the reviews given to the product. */
    review_count: Scalars['Int']
    /** The list of products reviews. */
    reviews: ProductReviews
    sale?: Maybe<Scalars['Int']>
    /** A short description of the product. Its use depends on the theme. */
    short_description?: Maybe<ComplexTextValue>
    size?: Maybe<Scalars['Int']>
    /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
    sku?: Maybe<Scalars['String']>
    sleeve?: Maybe<Scalars['String']>
    /** The relative path to the small image, which is used on catalog pages. */
    small_image?: Maybe<ProductImage>
    /**
     * The beginning date that a product has a special price.
     *
     * @deprecated The field should not be used on the storefront.
     */
    special_from_date?: Maybe<Scalars['String']>
    /** The discounted price of the product. */
    special_price?: Maybe<Scalars['Float']>
    /** The end date that a product has a special price. */
    special_to_date?: Maybe<Scalars['String']>
    /** Stock status of the product */
    stock_status?: Maybe<ProductStockStatus>
    strap_bags?: Maybe<Scalars['String']>
    style_bags?: Maybe<Scalars['String']>
    style_bottom?: Maybe<Scalars['String']>
    style_general?: Maybe<Scalars['String']>
    /** The file name of a swatch image */
    swatch_image?: Maybe<Scalars['String']>
    /** The relative path to the product's thumbnail image. */
    thumbnail?: Maybe<ProductImage>
    /**
     * The price when tier pricing is in effect and the items purchased threshold has been reached.
     *
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_price?: Maybe<Scalars['Float']>
    /**
     * An array of ProductTierPrices objects.
     *
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>
    /**
     * One of simple, virtual, bundle, downloadable, grouped, or configurable.
     *
     * @deprecated Use __typename instead.
     */
    type_id?: Maybe<Scalars['String']>
    /** The unique ID for a `ProductInterface` object. */
    uid: Scalars['ID']
    /**
     * Timestamp indicating when the product was updated.
     *
     * @deprecated The field should not be used on the storefront.
     */
    updated_at?: Maybe<Scalars['String']>
    /** Upsell Products */
    upsell_products?: Maybe<Array<Maybe<ProductInterface>>>
    /** The part of the URL that identifies the product */
    url_key?: Maybe<Scalars['String']>
    /** @deprecated Use product's `canonical_url` or url rewrites instead */
    url_path?: Maybe<Scalars['String']>
    /** URL rewrites list */
    url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>
    /** The part of the product URL that is appended after the url key */
    url_suffix?: Maybe<Scalars['String']>
    varying_simple_prices?: Maybe<Scalars['Int']>
    /**
     * An array of websites in which the product is available.
     *
     * @deprecated The field should not be used on the storefront.
     */
    websites?: Maybe<Array<Maybe<Website>>>
    /** The weight of the item, in units defined by the store. */
    weight?: Maybe<Scalars['Float']>
  }

/** GroupedProduct defines a grouped product */
export type GroupedProductReviewsArgs = {
  currentPage?: Maybe<Scalars['Int']>
  pageSize?: Maybe<Scalars['Int']>
}

/** GroupedProductItem contains information about an individual grouped product item */
export type GroupedProductItem = {
  __typename?: 'GroupedProductItem'
  /** The relative position of this item compared to the other group items */
  position?: Maybe<Scalars['Int']>
  /** The ProductInterface object, which contains details about this product option */
  product?: Maybe<ProductInterface>
  /** The quantity of this grouped product item */
  qty?: Maybe<Scalars['Float']>
}

/** A grouped product wish list item */
export type GroupedProductWishlistItem = WishlistItemInterface & {
  __typename?: 'GroupedProductWishlistItem'
  /** The date and time the item was added to the wish list */
  added_at: Scalars['String']
  /** Custom options selected for the wish list item */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>
  /** The description of the item */
  description?: Maybe<Scalars['String']>
  /** The unique ID for a `WishlistItemInterface` object */
  id: Scalars['ID']
  /** Product details of the wish list item */
  product?: Maybe<ProductInterface>
  /** The quantity of this wish list item */
  quantity: Scalars['Float']
}

/** Deprecated: use type `PaypalExpressTokenOutput` instead */
export type PaypalExpressToken = {
  __typename?: 'PaypalExpressToken'
  /**
   * A set of URLs that allow the buyer to authorize payment and adjust checkout details
   *
   * @deprecated Use field `paypal_urls` of type `PaypalExpressTokenOutput` instead
   */
  paypal_urls?: Maybe<PaypalExpressUrlList>
  /**
   * The token returned by PayPal
   *
   * @deprecated Use field `token` of type `PaypalExpressTokenOutput` instead
   */
  token?: Maybe<Scalars['String']>
}

/**
 * Contains the secure information used to authorize transaction. Applies to Payflow Pro and
 * Payments Pro payment methods.
 */
export type PayflowProToken = {
  __typename?: 'PayflowProToken'
  response_message: Scalars['String']
  result: Scalars['Int']
  result_code: Scalars['Int']
  secure_token: Scalars['String']
  secure_token_id: Scalars['String']
}

/** ConfigurableProduct defines basic features of a configurable product and its simple product variants */
export type ConfigurableProduct = CustomizableProductInterface &
  PhysicalProductInterface &
  ProductInterface & {
    __typename?: 'ConfigurableProduct'
    activity?: Maybe<Scalars['String']>
    /**
     * The attribute set assigned to the product.
     *
     * @deprecated The field should not be used on the storefront.
     */
    attribute_set_id?: Maybe<Scalars['Int']>
    backorder_delivery_date?: Maybe<Scalars['String']>
    backorder_delivery_period?: Maybe<Scalars['Int']>
    /**
     * Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link
     * Meta Tag For Products' is enabled
     */
    canonical_url?: Maybe<Scalars['String']>
    /** The categories assigned to a product. */
    categories?: Maybe<Array<Maybe<CategoryInterface>>>
    category_gear?: Maybe<Scalars['String']>
    climate?: Maybe<Scalars['String']>
    collar?: Maybe<Scalars['String']>
    color?: Maybe<Scalars['Int']>
    /** An array of linked simple product items */
    configurable_options?: Maybe<Array<Maybe<ConfigurableProductOptions>>>
    /** Metadata for the specified configurable options selection */
    configurable_product_options_selection?: Maybe<ConfigurableProductOptionsSelection>
    /** The product's country of origin. */
    country_of_manufacture?: Maybe<Scalars['String']>
    /**
     * Timestamp indicating when the product was created.
     *
     * @deprecated The field should not be used on the storefront.
     */
    created_at?: Maybe<Scalars['String']>
    /** Crosssell Products */
    crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>
    default_configuration_json?: Maybe<Scalars['String']>
    /** Detailed information about the product. The value can include simple HTML tags. */
    description?: Maybe<ComplexTextValue>
    eco_collection?: Maybe<Scalars['Int']>
    erin_recommends?: Maybe<Scalars['Int']>
    features_bags?: Maybe<Scalars['String']>
    format?: Maybe<Scalars['Int']>
    gender?: Maybe<Scalars['String']>
    /** Indicates whether a gift message is available. */
    gift_message_available?: Maybe<Scalars['String']>
    /**
     * The ID number assigned to the product.
     *
     * @deprecated Use the `uid` field instead.
     */
    id?: Maybe<Scalars['Int']>
    /** The relative path to the main image on the product page. */
    image?: Maybe<ProductImage>
    in_stock_delivery_period?: Maybe<Scalars['Int']>
    /** A number representing the product's manufacturer. */
    manufacturer?: Maybe<Scalars['Int']>
    material?: Maybe<Scalars['String']>
    /** An array of Media Gallery objects. */
    media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>
    /**
     * An array of MediaGalleryEntry objects.
     *
     * @deprecated Use product's `media_gallery` instead
     */
    media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>
    /** A brief overview of the product for search results listings, maximum 255 characters. */
    meta_description?: Maybe<Scalars['String']>
    /** A comma-separated list of keywords that are visible only to search engines. */
    meta_keyword?: Maybe<Scalars['String']>
    /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
    meta_title?: Maybe<Scalars['String']>
    /** The product name. Customers use this name to identify the product. */
    name?: Maybe<Scalars['String']>
    new?: Maybe<Scalars['Int']>
    /**
     * The beginning date for new product listings, and determines if the product is featured as a new product.
     *
     * @deprecated The field should not be used on the storefront.
     */
    new_from_date?: Maybe<Scalars['String']>
    /**
     * The end date for new product listings.
     *
     * @deprecated The field should not be used on the storefront.
     */
    new_to_date?: Maybe<Scalars['String']>
    /** Product stock only x left count */
    only_x_left_in_stock?: Maybe<Scalars['Float']>
    /** An array of options for a customizable product. */
    options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>
    /** If the product has multiple options, determines where they appear on the product page. */
    options_container?: Maybe<Scalars['String']>
    pattern?: Maybe<Scalars['String']>
    performance_fabric?: Maybe<Scalars['Int']>
    /**
     * A ProductPrices object, indicating the price of an item.
     *
     * @deprecated Use price_range for product price information.
     */
    price?: Maybe<ProductPrices>
    /** A PriceRange object, indicating the range of prices for the product */
    price_range: PriceRange
    /** An array of TierPrice objects. */
    price_tiers?: Maybe<Array<Maybe<TierPrice>>>
    /** An array of ProductLinks objects. */
    product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>
    /** The average of all the ratings given to the product. */
    rating_summary: Scalars['Float']
    /** Related Products */
    related_products?: Maybe<Array<Maybe<ProductInterface>>>
    /** The total count of all the reviews given to the product. */
    review_count: Scalars['Int']
    /** The list of products reviews. */
    reviews: ProductReviews
    sale?: Maybe<Scalars['Int']>
    /** A short description of the product. Its use depends on the theme. */
    short_description?: Maybe<ComplexTextValue>
    size?: Maybe<Scalars['Int']>
    /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
    sku?: Maybe<Scalars['String']>
    sleeve?: Maybe<Scalars['String']>
    /** The relative path to the small image, which is used on catalog pages. */
    small_image?: Maybe<ProductImage>
    /**
     * The beginning date that a product has a special price.
     *
     * @deprecated The field should not be used on the storefront.
     */
    special_from_date?: Maybe<Scalars['String']>
    /** The discounted price of the product. */
    special_price?: Maybe<Scalars['Float']>
    /** The end date that a product has a special price. */
    special_to_date?: Maybe<Scalars['String']>
    /** Stock status of the product */
    stock_status?: Maybe<ProductStockStatus>
    strap_bags?: Maybe<Scalars['String']>
    style_bags?: Maybe<Scalars['String']>
    style_bottom?: Maybe<Scalars['String']>
    style_general?: Maybe<Scalars['String']>
    /** The file name of a swatch image */
    swatch_image?: Maybe<Scalars['String']>
    /** The relative path to the product's thumbnail image. */
    thumbnail?: Maybe<ProductImage>
    /**
     * The price when tier pricing is in effect and the items purchased threshold has been reached.
     *
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_price?: Maybe<Scalars['Float']>
    /**
     * An array of ProductTierPrices objects.
     *
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>
    /**
     * One of simple, virtual, bundle, downloadable, grouped, or configurable.
     *
     * @deprecated Use __typename instead.
     */
    type_id?: Maybe<Scalars['String']>
    /** The unique ID for a `ProductInterface` object. */
    uid: Scalars['ID']
    /**
     * Timestamp indicating when the product was updated.
     *
     * @deprecated The field should not be used on the storefront.
     */
    updated_at?: Maybe<Scalars['String']>
    /** Upsell Products */
    upsell_products?: Maybe<Array<Maybe<ProductInterface>>>
    /** The part of the URL that identifies the product */
    url_key?: Maybe<Scalars['String']>
    /** @deprecated Use product's `canonical_url` or url rewrites instead */
    url_path?: Maybe<Scalars['String']>
    /** URL rewrites list */
    url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>
    /** The part of the product URL that is appended after the url key */
    url_suffix?: Maybe<Scalars['String']>
    /** An array of variants of products */
    variants?: Maybe<Array<Maybe<ConfigurableVariant>>>
    varying_simple_prices?: Maybe<Scalars['Int']>
    /**
     * An array of websites in which the product is available.
     *
     * @deprecated The field should not be used on the storefront.
     */
    websites?: Maybe<Array<Maybe<Website>>>
    /** The weight of the item, in units defined by the store. */
    weight?: Maybe<Scalars['Float']>
  }

/** ConfigurableProduct defines basic features of a configurable product and its simple product variants */
export type ConfigurableProductConfigurable_Product_Options_SelectionArgs = {
  configurableOptionValueUids?: Maybe<Array<Scalars['ID']>>
}

/** ConfigurableProduct defines basic features of a configurable product and its simple product variants */
export type ConfigurableProductReviewsArgs = {
  currentPage?: Maybe<Scalars['Int']>
  pageSize?: Maybe<Scalars['Int']>
}

/** ConfigurableProductOptions defines configurable attributes for the specified product */
export type ConfigurableProductOptions = {
  __typename?: 'ConfigurableProductOptions'
  /** A string that identifies the attribute */
  attribute_code?: Maybe<Scalars['String']>
  /**
   * The ID assigned to the attribute
   *
   * @deprecated Use attribute_uid instead
   */
  attribute_id?: Maybe<Scalars['String']>
  /**
   * The ID assigned to the attribute
   *
   * @deprecated Use attribute_uid instead
   */
  attribute_id_v2?: Maybe<Scalars['Int']>
  /** The unique ID for a `Attribute` object */
  attribute_uid: Scalars['ID']
  /**
   * The configurable option ID number assigned by the system
   *
   * @deprecated Use uid instead
   */
  id?: Maybe<Scalars['Int']>
  /** A string that describes the configurable product option, which is displayed on the UI */
  label?: Maybe<Scalars['String']>
  /** A number that indicates the order in which the attribute is displayed */
  position?: Maybe<Scalars['Int']>
  /**
   * This is the same as a product's id field
   *
   * @deprecated  `product_id` is not needed and can be obtained from it's parent
   */
  product_id?: Maybe<Scalars['Int']>
  /** The unique ID for a `ConfigurableProductOptions` object */
  uid: Scalars['ID']
  /** Indicates whether the option is the default */
  use_default?: Maybe<Scalars['Boolean']>
  /** An array that defines the value_index codes assigned to the configurable product */
  values?: Maybe<Array<Maybe<ConfigurableProductOptionsValues>>>
}

/** ConfigurableProductOptionsValues contains the index number assigned to a configurable product option */
export type ConfigurableProductOptionsValues = {
  __typename?: 'ConfigurableProductOptionsValues'
  /** The label of the product on the default store */
  default_label?: Maybe<Scalars['String']>
  /** The label of the product */
  label?: Maybe<Scalars['String']>
  /** The label of the product on the current store */
  store_label?: Maybe<Scalars['String']>
  /** Swatch data for configurable product option */
  swatch_data?: Maybe<SwatchDataInterface>
  /** The unique ID for a `ConfigurableProductOptionsValues` object */
  uid?: Maybe<Scalars['ID']>
  /** Indicates whether to use the default_label */
  use_default_value?: Maybe<Scalars['Boolean']>
  /**
   * A unique index number assigned to the configurable product option
   *
   * @deprecated Use `uid` instead
   */
  value_index?: Maybe<Scalars['Int']>
}

export type SwatchDataInterface = {
  /** Value of swatch item (HEX color code, image link or textual value) */
  value?: Maybe<Scalars['String']>
}

/** Metadata corresponding to the configurable options selection. */
export type ConfigurableProductOptionsSelection = {
  __typename?: 'ConfigurableProductOptionsSelection'
  /** Product images and videos corresponding to the specified configurable options selection. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>
  /** Configurable options available for further selection based on current selection. */
  options_available_for_selection?: Maybe<Array<Maybe<ConfigurableOptionAvailableForSelection>>>
  /**
   * Variant represented by the specified configurable options selection. It is expected to be null,
   * until selections are made for each configurable option.
   */
  variant?: Maybe<SimpleProduct>
}

/** Configurable option available for further selection based on current selection. */
export type ConfigurableOptionAvailableForSelection = {
  __typename?: 'ConfigurableOptionAvailableForSelection'
  /** Attribute code that uniquely identifies configurable option. */
  attribute_code: Scalars['String']
  /** Configurable option values available for further selection. */
  option_value_uids: Array<Maybe<Scalars['ID']>>
}

/** An array containing all the simple product variants of a configurable product */
export type ConfigurableVariant = {
  __typename?: 'ConfigurableVariant'
  attributes?: Maybe<Array<Maybe<ConfigurableAttributeOption>>>
  product?: Maybe<SimpleProduct>
}

/**
 * ConfigurableAttributeOption contains the value_index (and other related information) assigned to
 * a configurable product option
 */
export type ConfigurableAttributeOption = {
  __typename?: 'ConfigurableAttributeOption'
  /** The ID assigned to the attribute */
  code?: Maybe<Scalars['String']>
  /** A string that describes the configurable attribute option */
  label?: Maybe<Scalars['String']>
  /** The unique ID for a `ConfigurableAttributeOption` object */
  uid: Scalars['ID']
  /** A unique index number assigned to the configurable product option */
  value_index?: Maybe<Scalars['Int']>
}

/** A configurable product wish list item */
export type ConfigurableWishlistItem = WishlistItemInterface & {
  __typename?: 'ConfigurableWishlistItem'
  /** The date and time the item was added to the wish list */
  added_at: Scalars['String']
  /** The SKU of the simple product corresponding to a set of selected configurable options */
  child_sku: Scalars['String']
  /** An array of selected configurable options */
  configurable_options?: Maybe<Array<Maybe<SelectedConfigurableOption>>>
  /** Custom options selected for the wish list item */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>
  /** The description of the item */
  description?: Maybe<Scalars['String']>
  /** The unique ID for a `WishlistItemInterface` object */
  id: Scalars['ID']
  /** Product details of the wish list item */
  product?: Maybe<ProductInterface>
  /** The quantity of this wish list item */
  quantity: Scalars['Float']
}

export type OrderItem = OrderItemInterface & {
  __typename?: 'OrderItem'
  /** The final discount information for the product */
  discounts?: Maybe<Array<Maybe<Discount>>>
  /** The entered option for the base product, such as a logo or image */
  entered_options?: Maybe<Array<Maybe<OrderItemOption>>>
  /** The unique ID for a `OrderItemInterface` object */
  id: Scalars['ID']
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>
  /** The sale price of the base product, including selected options */
  product_sale_price: Money
  /** The SKU of the base product */
  product_sku: Scalars['String']
  /** The type of product, such as simple, configurable, etc. */
  product_type?: Maybe<Scalars['String']>
  /** URL key of the base product */
  product_url_key?: Maybe<Scalars['String']>
  /** The number of canceled items */
  quantity_canceled?: Maybe<Scalars['Float']>
  /** The number of invoiced items */
  quantity_invoiced?: Maybe<Scalars['Float']>
  /** The number of units ordered for this item */
  quantity_ordered?: Maybe<Scalars['Float']>
  /** The number of refunded items */
  quantity_refunded?: Maybe<Scalars['Float']>
  /** The number of returned items */
  quantity_returned?: Maybe<Scalars['Float']>
  /** The number of shipped items */
  quantity_shipped?: Maybe<Scalars['Float']>
  /** The selected options for the base product, such as color or size */
  selected_options?: Maybe<Array<Maybe<OrderItemOption>>>
  /** The status of the order item */
  status?: Maybe<Scalars['String']>
}

export type InvoiceItem = InvoiceItemInterface & {
  __typename?: 'InvoiceItem'
  /** Contains information about the final discount amount for the base product, including discounts on options */
  discounts?: Maybe<Array<Maybe<Discount>>>
  /** The unique ID for a `InvoiceItemInterface` object */
  id: Scalars['ID']
  /** Contains details about an individual order item */
  order_item?: Maybe<OrderItemInterface>
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>
  /** The sale price for the base product including selected options */
  product_sale_price: Money
  /** The SKU of the base product */
  product_sku: Scalars['String']
  /** The number of invoiced items */
  quantity_invoiced?: Maybe<Scalars['Float']>
}

export type ShipmentItem = ShipmentItemInterface & {
  __typename?: 'ShipmentItem'
  /** The unique ID for a `ShipmentItemInterface` object */
  id: Scalars['ID']
  /** Associated order item */
  order_item?: Maybe<OrderItemInterface>
  /** Name of the base product */
  product_name?: Maybe<Scalars['String']>
  /** Sale price for the base product */
  product_sale_price: Money
  /** SKU of the base product */
  product_sku: Scalars['String']
  /** Number of shipped items */
  quantity_shipped: Scalars['Float']
}

export type CreditMemoItem = CreditMemoItemInterface & {
  __typename?: 'CreditMemoItem'
  /** Contains information about the final discount amount for the base product, including discounts on options */
  discounts?: Maybe<Array<Maybe<Discount>>>
  /** The unique ID for a `CreditMemoItemInterface` object */
  id: Scalars['ID']
  /** The order item the credit memo is applied to */
  order_item?: Maybe<OrderItemInterface>
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>
  /** The sale price for the base product, including selected options */
  product_sale_price: Money
  /** SKU of the base product */
  product_sku: Scalars['String']
  /** The number of refunded items */
  quantity_refunded?: Maybe<Scalars['Float']>
}

export type SwatchLayerFilterItemInterface = {
  /** Data required to render swatch filter item */
  swatch_data?: Maybe<SwatchData>
}

export type SwatchData = {
  __typename?: 'SwatchData'
  /** Type of swatch filter item: 1 - text, 2 - image */
  type?: Maybe<Scalars['String']>
  /** Value for swatch item (text or image link) */
  value?: Maybe<Scalars['String']>
}

export type SwatchLayerFilterItem = LayerFilterItemInterface &
  SwatchLayerFilterItemInterface & {
    __typename?: 'SwatchLayerFilterItem'
    /**
     * Count of items by filter.
     *
     * @deprecated Use AggregationOption.count instead.
     */
    items_count?: Maybe<Scalars['Int']>
    /**
     * Filter label.
     *
     * @deprecated Use AggregationOption.label instead.
     */
    label?: Maybe<Scalars['String']>
    /** Data required to render swatch filter item */
    swatch_data?: Maybe<SwatchData>
    /**
     * Value for filter request variable to be used in query.
     *
     * @deprecated Use AggregationOption.value instead.
     */
    value_string?: Maybe<Scalars['String']>
  }

export type ImageSwatchData = SwatchDataInterface & {
  __typename?: 'ImageSwatchData'
  /** Thumbnail swatch image URL */
  thumbnail?: Maybe<Scalars['String']>
  /** Value of swatch item (HEX color code, image link or textual value) */
  value?: Maybe<Scalars['String']>
}

export type TextSwatchData = SwatchDataInterface & {
  __typename?: 'TextSwatchData'
  /** Value of swatch item (HEX color code, image link or textual value) */
  value?: Maybe<Scalars['String']>
}

export type ColorSwatchData = SwatchDataInterface & {
  __typename?: 'ColorSwatchData'
  /** Value of swatch item (HEX color code, image link or textual value) */
  value?: Maybe<Scalars['String']>
}

export type Aggregate = {
  __typename?: 'Aggregate'
  count: Scalars['Int']
}

/** Asset system model */
export type Asset = Node & {
  __typename?: 'Asset'
  alt?: Maybe<Scalars['String']>
  assetPage: Array<Page>
  assetPageLink: Array<PageLink>
  assetRowHeroBanner: Array<RowHeroBanner>
  assetRowProductBackstory: Array<RowProductBackstory>
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** Get the document in other stages */
  documentInStages: Array<Asset>
  /** The file name */
  fileName: Scalars['String']
  /** The file handle */
  handle: Scalars['String']
  /** The height of the file */
  height?: Maybe<Scalars['Float']>
  /** List of Asset versions */
  history: Array<Version>
  /** The unique identifier */
  id: Scalars['ID']
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<Asset>
  /** The mime type of the file */
  mimeType?: Maybe<Scalars['String']>
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  rowSpecialBannerAsset: Array<RowSpecialBanner>
  /** The file size */
  size?: Maybe<Scalars['Float']>
  /** System stage field */
  stage: Stage
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  /** Get the url for the asset with provided transformations applied. */
  url: Scalars['String']
  /** The file width */
  width?: Maybe<Scalars['Float']>
}

/** Asset system model */
export type AssetAssetPageArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  orderBy?: Maybe<PageOrderByInput>
  skip?: Maybe<Scalars['Int']>
  where?: Maybe<PageWhereInput>
}

/** Asset system model */
export type AssetAssetPageLinkArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  orderBy?: Maybe<PageLinkOrderByInput>
  skip?: Maybe<Scalars['Int']>
  where?: Maybe<PageLinkWhereInput>
}

/** Asset system model */
export type AssetAssetRowHeroBannerArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  orderBy?: Maybe<RowHeroBannerOrderByInput>
  skip?: Maybe<Scalars['Int']>
  where?: Maybe<RowHeroBannerWhereInput>
}

/** Asset system model */
export type AssetAssetRowProductBackstoryArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  orderBy?: Maybe<RowProductBackstoryOrderByInput>
  skip?: Maybe<Scalars['Int']>
  where?: Maybe<RowProductBackstoryWhereInput>
}

/** Asset system model */
export type AssetCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

/** Asset system model */
export type AssetDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
  stages?: Array<Stage>
}

/** Asset system model */
export type AssetHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

/** Asset system model */
export type AssetLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']
  locales?: Array<Locale>
}

/** Asset system model */
export type AssetPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

/** Asset system model */
export type AssetRowSpecialBannerAssetArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  orderBy?: Maybe<RowSpecialBannerOrderByInput>
  skip?: Maybe<Scalars['Int']>
  where?: Maybe<RowSpecialBannerWhereInput>
}

/** Asset system model */
export type AssetUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

/** Asset system model */
export type AssetUrlArgs = {
  transformation?: Maybe<AssetTransformationInput>
}

export type AssetConnectInput = {
  /**
   * Allow to specify document position in list of connected documents, will default to appending at
   * end of list
   */
  position?: Maybe<ConnectPositionInput>
  /** Document to connect */
  where: AssetWhereUniqueInput
}

/** A connection to a list of items. */
export type AssetConnection = {
  __typename?: 'AssetConnection'
  aggregate: Aggregate
  /** A list of edges. */
  edges: Array<AssetEdge>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

export type AssetCreateInput = {
  /** Alt input for default locale (en) */
  alt?: Maybe<Scalars['String']>
  assetPage?: Maybe<PageCreateManyInlineInput>
  assetPageLink?: Maybe<PageLinkCreateManyInlineInput>
  assetRowHeroBanner?: Maybe<RowHeroBannerCreateManyInlineInput>
  assetRowProductBackstory?: Maybe<RowProductBackstoryCreateManyInlineInput>
  createdAt?: Maybe<Scalars['DateTime']>
  fileName: Scalars['String']
  handle: Scalars['String']
  height?: Maybe<Scalars['Float']>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<AssetCreateLocalizationsInput>
  mimeType?: Maybe<Scalars['String']>
  rowSpecialBannerAsset?: Maybe<RowSpecialBannerCreateManyInlineInput>
  size?: Maybe<Scalars['Float']>
  updatedAt?: Maybe<Scalars['DateTime']>
  width?: Maybe<Scalars['Float']>
}

export type AssetCreateLocalizationDataInput = {
  alt?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  fileName: Scalars['String']
  handle: Scalars['String']
  height?: Maybe<Scalars['Float']>
  mimeType?: Maybe<Scalars['String']>
  size?: Maybe<Scalars['Float']>
  updatedAt?: Maybe<Scalars['DateTime']>
  width?: Maybe<Scalars['Float']>
}

export type AssetCreateLocalizationInput = {
  /** Localization input */
  data: AssetCreateLocalizationDataInput
  locale: Locale
}

export type AssetCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<AssetCreateLocalizationInput>>
}

export type AssetCreateManyInlineInput = {
  /** Connect multiple existing Asset documents */
  connect?: Maybe<Array<AssetWhereUniqueInput>>
  /** Create and connect multiple existing Asset documents */
  create?: Maybe<Array<AssetCreateInput>>
}

export type AssetCreateOneInlineInput = {
  /** Connect one existing Asset document */
  connect?: Maybe<AssetWhereUniqueInput>
  /** Create and connect one Asset document */
  create?: Maybe<AssetCreateInput>
}

/** An edge in a connection. */
export type AssetEdge = {
  __typename?: 'AssetEdge'
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
  /** The item at the end of the edge. */
  node: Asset
}

/** Identifies documents */
export type AssetManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<AssetWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<AssetWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<AssetWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  assetPageLink_every?: Maybe<PageLinkWhereInput>
  assetPageLink_none?: Maybe<PageLinkWhereInput>
  assetPageLink_some?: Maybe<PageLinkWhereInput>
  assetPage_every?: Maybe<PageWhereInput>
  assetPage_none?: Maybe<PageWhereInput>
  assetPage_some?: Maybe<PageWhereInput>
  assetRowHeroBanner_every?: Maybe<RowHeroBannerWhereInput>
  assetRowHeroBanner_none?: Maybe<RowHeroBannerWhereInput>
  assetRowHeroBanner_some?: Maybe<RowHeroBannerWhereInput>
  assetRowProductBackstory_every?: Maybe<RowProductBackstoryWhereInput>
  assetRowProductBackstory_none?: Maybe<RowProductBackstoryWhereInput>
  assetRowProductBackstory_some?: Maybe<RowProductBackstoryWhereInput>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  rowSpecialBannerAsset_every?: Maybe<RowSpecialBannerWhereInput>
  rowSpecialBannerAsset_none?: Maybe<RowSpecialBannerWhereInput>
  rowSpecialBannerAsset_some?: Maybe<RowSpecialBannerWhereInput>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

export type AssetOrderByInput =
  | 'alt_ASC'
  | 'alt_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'fileName_ASC'
  | 'fileName_DESC'
  | 'handle_ASC'
  | 'handle_DESC'
  | 'height_ASC'
  | 'height_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'mimeType_ASC'
  | 'mimeType_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'size_ASC'
  | 'size_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'width_ASC'
  | 'width_DESC'

/** Transformations for Assets */
export type AssetTransformationInput = {
  document?: Maybe<DocumentTransformationInput>
  image?: Maybe<ImageTransformationInput>
  /** Pass true if you want to validate the passed transformation parameters */
  validateOptions?: Maybe<Scalars['Boolean']>
}

export type AssetUpdateInput = {
  /** Alt input for default locale (en) */
  alt?: Maybe<Scalars['String']>
  assetPage?: Maybe<PageUpdateManyInlineInput>
  assetPageLink?: Maybe<PageLinkUpdateManyInlineInput>
  assetRowHeroBanner?: Maybe<RowHeroBannerUpdateManyInlineInput>
  assetRowProductBackstory?: Maybe<RowProductBackstoryUpdateManyInlineInput>
  fileName?: Maybe<Scalars['String']>
  handle?: Maybe<Scalars['String']>
  height?: Maybe<Scalars['Float']>
  /** Manage document localizations */
  localizations?: Maybe<AssetUpdateLocalizationsInput>
  mimeType?: Maybe<Scalars['String']>
  rowSpecialBannerAsset?: Maybe<RowSpecialBannerUpdateManyInlineInput>
  size?: Maybe<Scalars['Float']>
  width?: Maybe<Scalars['Float']>
}

export type AssetUpdateLocalizationDataInput = {
  alt?: Maybe<Scalars['String']>
  fileName?: Maybe<Scalars['String']>
  handle?: Maybe<Scalars['String']>
  height?: Maybe<Scalars['Float']>
  mimeType?: Maybe<Scalars['String']>
  size?: Maybe<Scalars['Float']>
  width?: Maybe<Scalars['Float']>
}

export type AssetUpdateLocalizationInput = {
  data: AssetUpdateLocalizationDataInput
  locale: Locale
}

export type AssetUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<AssetCreateLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
  /** Localizations to update */
  update?: Maybe<Array<AssetUpdateLocalizationInput>>
  upsert?: Maybe<Array<AssetUpsertLocalizationInput>>
}

export type AssetUpdateManyInlineInput = {
  /** Connect multiple existing Asset documents */
  connect?: Maybe<Array<AssetConnectInput>>
  /** Create and connect multiple Asset documents */
  create?: Maybe<Array<AssetCreateInput>>
  /** Delete multiple Asset documents */
  delete?: Maybe<Array<AssetWhereUniqueInput>>
  /** Disconnect multiple Asset documents */
  disconnect?: Maybe<Array<AssetWhereUniqueInput>>
  /** Override currently-connected documents with multiple existing Asset documents */
  set?: Maybe<Array<AssetWhereUniqueInput>>
  /** Update multiple Asset documents */
  update?: Maybe<Array<AssetUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple Asset documents */
  upsert?: Maybe<Array<AssetUpsertWithNestedWhereUniqueInput>>
}

export type AssetUpdateManyInput = {
  /** Alt input for default locale (en) */
  alt?: Maybe<Scalars['String']>
  fileName?: Maybe<Scalars['String']>
  height?: Maybe<Scalars['Float']>
  /** Optional updates to localizations */
  localizations?: Maybe<AssetUpdateManyLocalizationsInput>
  mimeType?: Maybe<Scalars['String']>
  size?: Maybe<Scalars['Float']>
  width?: Maybe<Scalars['Float']>
}

export type AssetUpdateManyLocalizationDataInput = {
  alt?: Maybe<Scalars['String']>
  fileName?: Maybe<Scalars['String']>
  height?: Maybe<Scalars['Float']>
  mimeType?: Maybe<Scalars['String']>
  size?: Maybe<Scalars['Float']>
  width?: Maybe<Scalars['Float']>
}

export type AssetUpdateManyLocalizationInput = {
  data: AssetUpdateManyLocalizationDataInput
  locale: Locale
}

export type AssetUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<AssetUpdateManyLocalizationInput>>
}

export type AssetUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: AssetUpdateManyInput
  /** Document search */
  where: AssetWhereInput
}

export type AssetUpdateOneInlineInput = {
  /** Connect existing Asset document */
  connect?: Maybe<AssetWhereUniqueInput>
  /** Create and connect one Asset document */
  create?: Maybe<AssetCreateInput>
  /** Delete currently connected Asset document */
  delete?: Maybe<Scalars['Boolean']>
  /** Disconnect currently connected Asset document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Update single Asset document */
  update?: Maybe<AssetUpdateWithNestedWhereUniqueInput>
  /** Upsert single Asset document */
  upsert?: Maybe<AssetUpsertWithNestedWhereUniqueInput>
}

export type AssetUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: AssetUpdateInput
  /** Unique document search */
  where: AssetWhereUniqueInput
}

export type AssetUpsertInput = {
  /** Create document if it didn't exist */
  create: AssetCreateInput
  /** Update document if it exists */
  update: AssetUpdateInput
}

export type AssetUpsertLocalizationInput = {
  create: AssetCreateLocalizationDataInput
  locale: Locale
  update: AssetUpdateLocalizationDataInput
}

export type AssetUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: AssetUpsertInput
  /** Unique document search */
  where: AssetWhereUniqueInput
}

/** Identifies documents */
export type AssetWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<AssetWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<AssetWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<AssetWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  alt?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  alt_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  alt_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  alt_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  alt_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  alt_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  alt_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  alt_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  alt_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  alt_starts_with?: Maybe<Scalars['String']>
  assetPageLink_every?: Maybe<PageLinkWhereInput>
  assetPageLink_none?: Maybe<PageLinkWhereInput>
  assetPageLink_some?: Maybe<PageLinkWhereInput>
  assetPage_every?: Maybe<PageWhereInput>
  assetPage_none?: Maybe<PageWhereInput>
  assetPage_some?: Maybe<PageWhereInput>
  assetRowHeroBanner_every?: Maybe<RowHeroBannerWhereInput>
  assetRowHeroBanner_none?: Maybe<RowHeroBannerWhereInput>
  assetRowHeroBanner_some?: Maybe<RowHeroBannerWhereInput>
  assetRowProductBackstory_every?: Maybe<RowProductBackstoryWhereInput>
  assetRowProductBackstory_none?: Maybe<RowProductBackstoryWhereInput>
  assetRowProductBackstory_some?: Maybe<RowProductBackstoryWhereInput>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  fileName?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  fileName_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  fileName_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  fileName_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  fileName_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  fileName_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  fileName_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  fileName_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  fileName_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  fileName_starts_with?: Maybe<Scalars['String']>
  handle?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  handle_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  handle_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  handle_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  handle_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  handle_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  handle_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  handle_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  handle_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  handle_starts_with?: Maybe<Scalars['String']>
  height?: Maybe<Scalars['Float']>
  /** All values greater than the given value. */
  height_gt?: Maybe<Scalars['Float']>
  /** All values greater than or equal the given value. */
  height_gte?: Maybe<Scalars['Float']>
  /** All values that are contained in given list. */
  height_in?: Maybe<Array<Scalars['Float']>>
  /** All values less than the given value. */
  height_lt?: Maybe<Scalars['Float']>
  /** All values less than or equal the given value. */
  height_lte?: Maybe<Scalars['Float']>
  /** All values that are not equal to given value. */
  height_not?: Maybe<Scalars['Float']>
  /** All values that are not contained in given list. */
  height_not_in?: Maybe<Array<Scalars['Float']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  mimeType?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  mimeType_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  mimeType_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  mimeType_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  mimeType_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  mimeType_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  mimeType_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  mimeType_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  mimeType_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  mimeType_starts_with?: Maybe<Scalars['String']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  rowSpecialBannerAsset_every?: Maybe<RowSpecialBannerWhereInput>
  rowSpecialBannerAsset_none?: Maybe<RowSpecialBannerWhereInput>
  rowSpecialBannerAsset_some?: Maybe<RowSpecialBannerWhereInput>
  size?: Maybe<Scalars['Float']>
  /** All values greater than the given value. */
  size_gt?: Maybe<Scalars['Float']>
  /** All values greater than or equal the given value. */
  size_gte?: Maybe<Scalars['Float']>
  /** All values that are contained in given list. */
  size_in?: Maybe<Array<Scalars['Float']>>
  /** All values less than the given value. */
  size_lt?: Maybe<Scalars['Float']>
  /** All values less than or equal the given value. */
  size_lte?: Maybe<Scalars['Float']>
  /** All values that are not equal to given value. */
  size_not?: Maybe<Scalars['Float']>
  /** All values that are not contained in given list. */
  size_not_in?: Maybe<Array<Scalars['Float']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  width?: Maybe<Scalars['Float']>
  /** All values greater than the given value. */
  width_gt?: Maybe<Scalars['Float']>
  /** All values greater than or equal the given value. */
  width_gte?: Maybe<Scalars['Float']>
  /** All values that are contained in given list. */
  width_in?: Maybe<Array<Scalars['Float']>>
  /** All values less than the given value. */
  width_lt?: Maybe<Scalars['Float']>
  /** All values less than or equal the given value. */
  width_lte?: Maybe<Scalars['Float']>
  /** All values that are not equal to given value. */
  width_not?: Maybe<Scalars['Float']>
  /** All values that are not contained in given list. */
  width_not_in?: Maybe<Array<Scalars['Float']>>
}

/** References Asset record uniquely */
export type AssetWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

export type BatchPayload = {
  __typename?: 'BatchPayload'
  /** The number of nodes that have been affected by the Batch operation. */
  count: Scalars['Long']
}

/** Representing a color value comprising of HEX, RGBA and css color values */
export type Color = {
  __typename?: 'Color'
  css: Scalars['String']
  hex: Scalars['Hex']
  rgba: Rgba
}

/**
 * Accepts either HEX or RGBA color value. At least one of hex or rgba value should be passed. If
 * both are passed RGBA is used.
 */
export type ColorInput = {
  hex?: Maybe<Scalars['Hex']>
  rgba?: Maybe<RgbaInput>
}

export type ConnectPositionInput = {
  /** Connect document after specified document */
  after?: Maybe<Scalars['ID']>
  /** Connect document before specified document */
  before?: Maybe<Scalars['ID']>
  /** Connect document at last position */
  end?: Maybe<Scalars['Boolean']>
  /** Connect document at first position */
  start?: Maybe<Scalars['Boolean']>
}

export type DocumentFileTypes =
  | 'doc'
  | 'docx'
  | 'html'
  | 'jpg'
  | 'odp'
  | 'ods'
  | 'odt'
  | 'pdf'
  | 'png'
  | 'ppt'
  | 'pptx'
  | 'svg'
  | 'txt'
  | 'webp'
  | 'xls'
  | 'xlsx'

export type DocumentOutputInput = {
  /**
   * Transforms a document into a desired file type. See this matrix for format support:
   *
   * PDF: jpg, odp, ods, odt, png, svg, txt, and webp DOC: docx, html, jpg, odt, pdf, png, svg, txt,
   * and webp DOCX: doc, html, jpg, odt, pdf, png, svg, txt, and webp ODT: doc, docx, html, jpg,
   * pdf, png, svg, txt, and webp XLS: jpg, pdf, ods, png, svg, xlsx, and webp XLSX: jpg, pdf, ods,
   * png, svg, xls, and webp ODS: jpg, pdf, png, xls, svg, xlsx, and webp PPT: jpg, odp, pdf, png,
   * svg, pptx, and webp PPTX: jpg, odp, pdf, png, svg, ppt, and webp ODP: jpg, pdf, png, ppt, svg,
   * pptx, and webp BMP: jpg, odp, ods, odt, pdf, png, svg, and webp GIF: jpg, odp, ods, odt, pdf,
   * png, svg, and webp JPG: jpg, odp, ods, odt, pdf, png, svg, and webp PNG: jpg, odp, ods, odt,
   * pdf, png, svg, and webp WEBP: jpg, odp, ods, odt, pdf, png, svg, and webp TIFF: jpg, odp, ods,
   * odt, pdf, png, svg, and webp AI: jpg, odp, ods, odt, pdf, png, svg, and webp PSD: jpg, odp,
   * ods, odt, pdf, png, svg, and webp SVG: jpg, odp, ods, odt, pdf, png, and webp HTML: jpg, odt,
   * pdf, svg, txt, and webp TXT: jpg, html, odt, pdf, svg, and webp
   */
  format?: Maybe<DocumentFileTypes>
}

/** Transformations for Documents */
export type DocumentTransformationInput = {
  /** Changes the output for the file. */
  output?: Maybe<DocumentOutputInput>
}

export type DocumentVersion = {
  __typename?: 'DocumentVersion'
  createdAt: Scalars['DateTime']
  data?: Maybe<Scalars['Json']>
  id: Scalars['ID']
  revision: Scalars['Int']
  stage: Stage
}

export type Footer = Node & {
  __typename?: 'Footer'
  copyright?: Maybe<Scalars['String']>
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** Get the document in other stages */
  documentInStages: Array<Footer>
  /** List of Footer versions */
  history: Array<Version>
  /** The unique identifier */
  id: Scalars['ID']
  identity: Scalars['String']
  legalLinks: Array<PageLink>
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  socialLinks: Array<PageLink>
  /** System stage field */
  stage: Stage
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
}

export type FooterDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
  stages?: Array<Stage>
}

export type FooterHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type FooterLegalLinksArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  orderBy?: Maybe<PageLinkOrderByInput>
  skip?: Maybe<Scalars['Int']>
  where?: Maybe<PageLinkWhereInput>
}

export type FooterSocialLinksArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  orderBy?: Maybe<PageLinkOrderByInput>
  skip?: Maybe<Scalars['Int']>
  where?: Maybe<PageLinkWhereInput>
}

export type FooterConnectInput = {
  /**
   * Allow to specify document position in list of connected documents, will default to appending at
   * end of list
   */
  position?: Maybe<ConnectPositionInput>
  /** Document to connect */
  where: FooterWhereUniqueInput
}

/** A connection to a list of items. */
export type FooterConnection = {
  __typename?: 'FooterConnection'
  aggregate: Aggregate
  /** A list of edges. */
  edges: Array<FooterEdge>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

export type FooterCreateInput = {
  copyright?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  legalLinks?: Maybe<PageLinkCreateManyInlineInput>
  socialLinks?: Maybe<PageLinkCreateManyInlineInput>
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type FooterCreateManyInlineInput = {
  /** Connect multiple existing Footer documents */
  connect?: Maybe<Array<FooterWhereUniqueInput>>
  /** Create and connect multiple existing Footer documents */
  create?: Maybe<Array<FooterCreateInput>>
}

export type FooterCreateOneInlineInput = {
  /** Connect one existing Footer document */
  connect?: Maybe<FooterWhereUniqueInput>
  /** Create and connect one Footer document */
  create?: Maybe<FooterCreateInput>
}

/** An edge in a connection. */
export type FooterEdge = {
  __typename?: 'FooterEdge'
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
  /** The item at the end of the edge. */
  node: Footer
}

/** Identifies documents */
export type FooterManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<FooterWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<FooterWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<FooterWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  copyright?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  copyright_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  copyright_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  copyright_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  copyright_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  copyright_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  copyright_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  copyright_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  copyright_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  copyright_starts_with?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  legalLinks_every?: Maybe<PageLinkWhereInput>
  legalLinks_none?: Maybe<PageLinkWhereInput>
  legalLinks_some?: Maybe<PageLinkWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  socialLinks_every?: Maybe<PageLinkWhereInput>
  socialLinks_none?: Maybe<PageLinkWhereInput>
  socialLinks_some?: Maybe<PageLinkWhereInput>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

export type FooterOrderByInput =
  | 'copyright_ASC'
  | 'copyright_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'

export type FooterUpdateInput = {
  copyright?: Maybe<Scalars['String']>
  identity?: Maybe<Scalars['String']>
  legalLinks?: Maybe<PageLinkUpdateManyInlineInput>
  socialLinks?: Maybe<PageLinkUpdateManyInlineInput>
}

export type FooterUpdateManyInlineInput = {
  /** Connect multiple existing Footer documents */
  connect?: Maybe<Array<FooterConnectInput>>
  /** Create and connect multiple Footer documents */
  create?: Maybe<Array<FooterCreateInput>>
  /** Delete multiple Footer documents */
  delete?: Maybe<Array<FooterWhereUniqueInput>>
  /** Disconnect multiple Footer documents */
  disconnect?: Maybe<Array<FooterWhereUniqueInput>>
  /** Override currently-connected documents with multiple existing Footer documents */
  set?: Maybe<Array<FooterWhereUniqueInput>>
  /** Update multiple Footer documents */
  update?: Maybe<Array<FooterUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple Footer documents */
  upsert?: Maybe<Array<FooterUpsertWithNestedWhereUniqueInput>>
}

export type FooterUpdateManyInput = {
  copyright?: Maybe<Scalars['String']>
}

export type FooterUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: FooterUpdateManyInput
  /** Document search */
  where: FooterWhereInput
}

export type FooterUpdateOneInlineInput = {
  /** Connect existing Footer document */
  connect?: Maybe<FooterWhereUniqueInput>
  /** Create and connect one Footer document */
  create?: Maybe<FooterCreateInput>
  /** Delete currently connected Footer document */
  delete?: Maybe<Scalars['Boolean']>
  /** Disconnect currently connected Footer document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Update single Footer document */
  update?: Maybe<FooterUpdateWithNestedWhereUniqueInput>
  /** Upsert single Footer document */
  upsert?: Maybe<FooterUpsertWithNestedWhereUniqueInput>
}

export type FooterUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: FooterUpdateInput
  /** Unique document search */
  where: FooterWhereUniqueInput
}

export type FooterUpsertInput = {
  /** Create document if it didn't exist */
  create: FooterCreateInput
  /** Update document if it exists */
  update: FooterUpdateInput
}

export type FooterUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: FooterUpsertInput
  /** Unique document search */
  where: FooterWhereUniqueInput
}

/** Identifies documents */
export type FooterWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<FooterWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<FooterWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<FooterWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  copyright?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  copyright_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  copyright_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  copyright_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  copyright_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  copyright_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  copyright_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  copyright_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  copyright_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  copyright_starts_with?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  legalLinks_every?: Maybe<PageLinkWhereInput>
  legalLinks_none?: Maybe<PageLinkWhereInput>
  legalLinks_some?: Maybe<PageLinkWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  socialLinks_every?: Maybe<PageLinkWhereInput>
  socialLinks_none?: Maybe<PageLinkWhereInput>
  socialLinks_some?: Maybe<PageLinkWhereInput>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

/** References Footer record uniquely */
export type FooterWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type ImageFit =
  /**
   * Resizes the image to fit within the specified parameters without distorting, cropping, or
   * changing the aspect ratio.
   */
  | 'clip'
  /**
   * Resizes the image to fit the specified parameters exactly by removing any parts of the image
   * that don't fit within the boundaries.
   */
  | 'crop'
  /**
   * Resizes the image to fit within the parameters, but as opposed to 'fit:clip' will not scale the
   * image if the image is smaller than the output size.
   */
  | 'max'
  /**
   * Resizes the image to fit the specified parameters exactly by scaling the image to the desired
   * size. The aspect ratio of the image is not respected and the image can be distorted using this method.
   */
  | 'scale'

export type ImageResizeInput = {
  /** The default value for the fit parameter is fit:clip. */
  fit?: Maybe<ImageFit>
  /** The height in pixels to resize the image to. The value must be an integer from 1 to 10000. */
  height?: Maybe<Scalars['Int']>
  /** The width in pixels to resize the image to. The value must be an integer from 1 to 10000. */
  width?: Maybe<Scalars['Int']>
}

/** Transformations for Images */
export type ImageTransformationInput = {
  /** Resizes the image */
  resize?: Maybe<ImageResizeInput>
}

/** Locale system enumeration */
export type Locale =
  /** System locale */
  'en'

/** Representing a geolocation point with latitude and longitude */
export type Location = {
  __typename?: 'Location'
  distance: Scalars['Float']
  latitude: Scalars['Float']
  longitude: Scalars['Float']
}

/** Representing a geolocation point with latitude and longitude */
export type LocationDistanceArgs = {
  from: LocationInput
}

/** Input for a geolocation point with latitude and longitude */
export type LocationInput = {
  latitude: Scalars['Float']
  longitude: Scalars['Float']
}

export type MagentoCategory = Node & {
  __typename?: 'MagentoCategory'
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** Get the document in other stages */
  documentInStages: Array<MagentoCategory>
  /** List of MagentoCategory versions */
  history: Array<Version>
  /** The unique identifier */
  id: Scalars['ID']
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<MagentoCategory>
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  rowProductGrids: Array<RowProductGrid>
  /** System stage field */
  stage: Stage
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  url: Scalars['String']
}

export type MagentoCategoryCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type MagentoCategoryDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
  stages?: Array<Stage>
}

export type MagentoCategoryHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type MagentoCategoryLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']
  locales?: Array<Locale>
}

export type MagentoCategoryPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type MagentoCategoryRowProductGridsArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  orderBy?: Maybe<RowProductGridOrderByInput>
  skip?: Maybe<Scalars['Int']>
  where?: Maybe<RowProductGridWhereInput>
}

export type MagentoCategoryUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type MagentoCategoryConnectInput = {
  /**
   * Allow to specify document position in list of connected documents, will default to appending at
   * end of list
   */
  position?: Maybe<ConnectPositionInput>
  /** Document to connect */
  where: MagentoCategoryWhereUniqueInput
}

/** A connection to a list of items. */
export type MagentoCategoryConnection = {
  __typename?: 'MagentoCategoryConnection'
  aggregate: Aggregate
  /** A list of edges. */
  edges: Array<MagentoCategoryEdge>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

export type MagentoCategoryCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<MagentoCategoryCreateLocalizationsInput>
  rowProductGrids?: Maybe<RowProductGridCreateManyInlineInput>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** Url input for default locale (en) */
  url: Scalars['String']
}

export type MagentoCategoryCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  url: Scalars['String']
}

export type MagentoCategoryCreateLocalizationInput = {
  /** Localization input */
  data: MagentoCategoryCreateLocalizationDataInput
  locale: Locale
}

export type MagentoCategoryCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<MagentoCategoryCreateLocalizationInput>>
}

export type MagentoCategoryCreateManyInlineInput = {
  /** Connect multiple existing MagentoCategory documents */
  connect?: Maybe<Array<MagentoCategoryWhereUniqueInput>>
  /** Create and connect multiple existing MagentoCategory documents */
  create?: Maybe<Array<MagentoCategoryCreateInput>>
}

export type MagentoCategoryCreateOneInlineInput = {
  /** Connect one existing MagentoCategory document */
  connect?: Maybe<MagentoCategoryWhereUniqueInput>
  /** Create and connect one MagentoCategory document */
  create?: Maybe<MagentoCategoryCreateInput>
}

/** An edge in a connection. */
export type MagentoCategoryEdge = {
  __typename?: 'MagentoCategoryEdge'
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
  /** The item at the end of the edge. */
  node: MagentoCategory
}

/** Identifies documents */
export type MagentoCategoryManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<MagentoCategoryWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<MagentoCategoryWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<MagentoCategoryWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  rowProductGrids_every?: Maybe<RowProductGridWhereInput>
  rowProductGrids_none?: Maybe<RowProductGridWhereInput>
  rowProductGrids_some?: Maybe<RowProductGridWhereInput>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

export type MagentoCategoryOrderByInput =
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'url_ASC'
  | 'url_DESC'

export type MagentoCategoryUpdateInput = {
  /** Manage document localizations */
  localizations?: Maybe<MagentoCategoryUpdateLocalizationsInput>
  rowProductGrids?: Maybe<RowProductGridUpdateManyInlineInput>
  /** Url input for default locale (en) */
  url?: Maybe<Scalars['String']>
}

export type MagentoCategoryUpdateLocalizationDataInput = {
  url?: Maybe<Scalars['String']>
}

export type MagentoCategoryUpdateLocalizationInput = {
  data: MagentoCategoryUpdateLocalizationDataInput
  locale: Locale
}

export type MagentoCategoryUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<MagentoCategoryCreateLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
  /** Localizations to update */
  update?: Maybe<Array<MagentoCategoryUpdateLocalizationInput>>
  upsert?: Maybe<Array<MagentoCategoryUpsertLocalizationInput>>
}

export type MagentoCategoryUpdateManyInlineInput = {
  /** Connect multiple existing MagentoCategory documents */
  connect?: Maybe<Array<MagentoCategoryConnectInput>>
  /** Create and connect multiple MagentoCategory documents */
  create?: Maybe<Array<MagentoCategoryCreateInput>>
  /** Delete multiple MagentoCategory documents */
  delete?: Maybe<Array<MagentoCategoryWhereUniqueInput>>
  /** Disconnect multiple MagentoCategory documents */
  disconnect?: Maybe<Array<MagentoCategoryWhereUniqueInput>>
  /** Override currently-connected documents with multiple existing MagentoCategory documents */
  set?: Maybe<Array<MagentoCategoryWhereUniqueInput>>
  /** Update multiple MagentoCategory documents */
  update?: Maybe<Array<MagentoCategoryUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple MagentoCategory documents */
  upsert?: Maybe<Array<MagentoCategoryUpsertWithNestedWhereUniqueInput>>
}

export type MagentoCategoryUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: Maybe<Scalars['String']>
}

export type MagentoCategoryUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: MagentoCategoryUpdateManyInput
  /** Document search */
  where: MagentoCategoryWhereInput
}

export type MagentoCategoryUpdateOneInlineInput = {
  /** Connect existing MagentoCategory document */
  connect?: Maybe<MagentoCategoryWhereUniqueInput>
  /** Create and connect one MagentoCategory document */
  create?: Maybe<MagentoCategoryCreateInput>
  /** Delete currently connected MagentoCategory document */
  delete?: Maybe<Scalars['Boolean']>
  /** Disconnect currently connected MagentoCategory document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Update single MagentoCategory document */
  update?: Maybe<MagentoCategoryUpdateWithNestedWhereUniqueInput>
  /** Upsert single MagentoCategory document */
  upsert?: Maybe<MagentoCategoryUpsertWithNestedWhereUniqueInput>
}

export type MagentoCategoryUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: MagentoCategoryUpdateInput
  /** Unique document search */
  where: MagentoCategoryWhereUniqueInput
}

export type MagentoCategoryUpsertInput = {
  /** Create document if it didn't exist */
  create: MagentoCategoryCreateInput
  /** Update document if it exists */
  update: MagentoCategoryUpdateInput
}

export type MagentoCategoryUpsertLocalizationInput = {
  create: MagentoCategoryCreateLocalizationDataInput
  locale: Locale
  update: MagentoCategoryUpdateLocalizationDataInput
}

export type MagentoCategoryUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: MagentoCategoryUpsertInput
  /** Unique document search */
  where: MagentoCategoryWhereUniqueInput
}

/** Identifies documents */
export type MagentoCategoryWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<MagentoCategoryWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<MagentoCategoryWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<MagentoCategoryWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  rowProductGrids_every?: Maybe<RowProductGridWhereInput>
  rowProductGrids_none?: Maybe<RowProductGridWhereInput>
  rowProductGrids_some?: Maybe<RowProductGridWhereInput>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  url?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  url_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  url_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  url_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  url_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  url_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  url_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  url_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  url_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  url_starts_with?: Maybe<Scalars['String']>
}

/** References MagentoCategory record uniquely */
export type MagentoCategoryWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

export type MetaRobots = 'INDEX_FOLLOW' | 'INDEX_NOFOLLOW' | 'NOINDEX_FOLLOW' | 'NOINDEX_NOFOLLOW'

/** An object with an ID */
export type Node = {
  /** The id of the object. */
  id: Scalars['ID']
  /** The Stage of an object */
  stage: Stage
}

export type Page = Node & {
  __typename?: 'Page'
  /** 9:6 for general usage */
  asset?: Maybe<Asset>
  content: Array<PageContent>
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  date?: Maybe<Scalars['DateTime']>
  /** Get the document in other stages */
  documentInStages: Array<Page>
  /** List of Page versions */
  history: Array<Version>
  /** The unique identifier */
  id: Scalars['ID']
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<Page>
  metaDescription: Scalars['String']
  metaRobots: MetaRobots
  metaTitle: Scalars['String']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  rowButtonLinkLists: Array<RowButtonLinkList>
  /** System stage field */
  stage: Stage
  title?: Maybe<Scalars['String']>
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  url: Scalars['String']
}

export type PageAssetArgs = {
  locales?: Maybe<Array<Locale>>
}

export type PageContentArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  skip?: Maybe<Scalars['Int']>
}

export type PageCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type PageDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
  stages?: Array<Stage>
}

export type PageHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type PageLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']
  locales?: Array<Locale>
}

export type PagePublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type PageRowButtonLinkListsArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  orderBy?: Maybe<RowButtonLinkListOrderByInput>
  skip?: Maybe<Scalars['Int']>
  where?: Maybe<RowButtonLinkListWhereInput>
}

export type PageUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type PageConnectInput = {
  /**
   * Allow to specify document position in list of connected documents, will default to appending at
   * end of list
   */
  position?: Maybe<ConnectPositionInput>
  /** Document to connect */
  where: PageWhereUniqueInput
}

/** A connection to a list of items. */
export type PageConnection = {
  __typename?: 'PageConnection'
  aggregate: Aggregate
  /** A list of edges. */
  edges: Array<PageEdge>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

export type PageContent =
  | RowBlogContent
  | RowButtonLinkList
  | RowColumnOne
  | RowColumnThree
  | RowColumnTwo
  | RowContentLinks
  | RowHeroBanner
  | RowProductBackstory
  | RowProductGrid
  | RowQuote
  | RowServiceOptions
  | RowSpecialBanner
  | RowSwipeableGrid

export type PageContentConnectInput = {
  RowBlogContent?: Maybe<RowBlogContentConnectInput>
  RowButtonLinkList?: Maybe<RowButtonLinkListConnectInput>
  RowColumnOne?: Maybe<RowColumnOneConnectInput>
  RowColumnThree?: Maybe<RowColumnThreeConnectInput>
  RowColumnTwo?: Maybe<RowColumnTwoConnectInput>
  RowContentLinks?: Maybe<RowContentLinksConnectInput>
  RowHeroBanner?: Maybe<RowHeroBannerConnectInput>
  RowProductBackstory?: Maybe<RowProductBackstoryConnectInput>
  RowProductGrid?: Maybe<RowProductGridConnectInput>
  RowQuote?: Maybe<RowQuoteConnectInput>
  RowServiceOptions?: Maybe<RowServiceOptionsConnectInput>
  RowSpecialBanner?: Maybe<RowSpecialBannerConnectInput>
  RowSwipeableGrid?: Maybe<RowSwipeableGridConnectInput>
}

export type PageContentCreateInput = {
  RowBlogContent?: Maybe<RowBlogContentCreateInput>
  RowButtonLinkList?: Maybe<RowButtonLinkListCreateInput>
  RowColumnOne?: Maybe<RowColumnOneCreateInput>
  RowColumnThree?: Maybe<RowColumnThreeCreateInput>
  RowColumnTwo?: Maybe<RowColumnTwoCreateInput>
  RowContentLinks?: Maybe<RowContentLinksCreateInput>
  RowHeroBanner?: Maybe<RowHeroBannerCreateInput>
  RowProductBackstory?: Maybe<RowProductBackstoryCreateInput>
  RowProductGrid?: Maybe<RowProductGridCreateInput>
  RowQuote?: Maybe<RowQuoteCreateInput>
  RowServiceOptions?: Maybe<RowServiceOptionsCreateInput>
  RowSpecialBanner?: Maybe<RowSpecialBannerCreateInput>
  RowSwipeableGrid?: Maybe<RowSwipeableGridCreateInput>
}

export type PageContentCreateManyInlineInput = {
  /** Connect multiple existing PageContent documents */
  connect?: Maybe<Array<PageContentWhereUniqueInput>>
  /** Create and connect multiple existing PageContent documents */
  create?: Maybe<Array<PageContentCreateInput>>
}

export type PageContentCreateOneInlineInput = {
  /** Connect one existing PageContent document */
  connect?: Maybe<PageContentWhereUniqueInput>
  /** Create and connect one PageContent document */
  create?: Maybe<PageContentCreateInput>
}

export type PageContentUpdateInput = {
  RowBlogContent?: Maybe<RowBlogContentUpdateInput>
  RowButtonLinkList?: Maybe<RowButtonLinkListUpdateInput>
  RowColumnOne?: Maybe<RowColumnOneUpdateInput>
  RowColumnThree?: Maybe<RowColumnThreeUpdateInput>
  RowColumnTwo?: Maybe<RowColumnTwoUpdateInput>
  RowContentLinks?: Maybe<RowContentLinksUpdateInput>
  RowHeroBanner?: Maybe<RowHeroBannerUpdateInput>
  RowProductBackstory?: Maybe<RowProductBackstoryUpdateInput>
  RowProductGrid?: Maybe<RowProductGridUpdateInput>
  RowQuote?: Maybe<RowQuoteUpdateInput>
  RowServiceOptions?: Maybe<RowServiceOptionsUpdateInput>
  RowSpecialBanner?: Maybe<RowSpecialBannerUpdateInput>
  RowSwipeableGrid?: Maybe<RowSwipeableGridUpdateInput>
}

export type PageContentUpdateManyInlineInput = {
  /** Connect multiple existing PageContent documents */
  connect?: Maybe<Array<PageContentConnectInput>>
  /** Create and connect multiple PageContent documents */
  create?: Maybe<Array<PageContentCreateInput>>
  /** Delete multiple PageContent documents */
  delete?: Maybe<Array<PageContentWhereUniqueInput>>
  /** Disconnect multiple PageContent documents */
  disconnect?: Maybe<Array<PageContentWhereUniqueInput>>
  /** Override currently-connected documents with multiple existing PageContent documents */
  set?: Maybe<Array<PageContentWhereUniqueInput>>
  /** Update multiple PageContent documents */
  update?: Maybe<Array<PageContentUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple PageContent documents */
  upsert?: Maybe<Array<PageContentUpsertWithNestedWhereUniqueInput>>
}

export type PageContentUpdateManyWithNestedWhereInput = {
  RowBlogContent?: Maybe<RowBlogContentUpdateManyWithNestedWhereInput>
  RowButtonLinkList?: Maybe<RowButtonLinkListUpdateManyWithNestedWhereInput>
  RowColumnOne?: Maybe<RowColumnOneUpdateManyWithNestedWhereInput>
  RowColumnThree?: Maybe<RowColumnThreeUpdateManyWithNestedWhereInput>
  RowColumnTwo?: Maybe<RowColumnTwoUpdateManyWithNestedWhereInput>
  RowContentLinks?: Maybe<RowContentLinksUpdateManyWithNestedWhereInput>
  RowHeroBanner?: Maybe<RowHeroBannerUpdateManyWithNestedWhereInput>
  RowProductBackstory?: Maybe<RowProductBackstoryUpdateManyWithNestedWhereInput>
  RowProductGrid?: Maybe<RowProductGridUpdateManyWithNestedWhereInput>
  RowQuote?: Maybe<RowQuoteUpdateManyWithNestedWhereInput>
  RowServiceOptions?: Maybe<RowServiceOptionsUpdateManyWithNestedWhereInput>
  RowSpecialBanner?: Maybe<RowSpecialBannerUpdateManyWithNestedWhereInput>
  RowSwipeableGrid?: Maybe<RowSwipeableGridUpdateManyWithNestedWhereInput>
}

export type PageContentUpdateOneInlineInput = {
  /** Connect existing PageContent document */
  connect?: Maybe<PageContentWhereUniqueInput>
  /** Create and connect one PageContent document */
  create?: Maybe<PageContentCreateInput>
  /** Delete currently connected PageContent document */
  delete?: Maybe<Scalars['Boolean']>
  /** Disconnect currently connected PageContent document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Update single PageContent document */
  update?: Maybe<PageContentUpdateWithNestedWhereUniqueInput>
  /** Upsert single PageContent document */
  upsert?: Maybe<PageContentUpsertWithNestedWhereUniqueInput>
}

export type PageContentUpdateWithNestedWhereUniqueInput = {
  RowBlogContent?: Maybe<RowBlogContentUpdateWithNestedWhereUniqueInput>
  RowButtonLinkList?: Maybe<RowButtonLinkListUpdateWithNestedWhereUniqueInput>
  RowColumnOne?: Maybe<RowColumnOneUpdateWithNestedWhereUniqueInput>
  RowColumnThree?: Maybe<RowColumnThreeUpdateWithNestedWhereUniqueInput>
  RowColumnTwo?: Maybe<RowColumnTwoUpdateWithNestedWhereUniqueInput>
  RowContentLinks?: Maybe<RowContentLinksUpdateWithNestedWhereUniqueInput>
  RowHeroBanner?: Maybe<RowHeroBannerUpdateWithNestedWhereUniqueInput>
  RowProductBackstory?: Maybe<RowProductBackstoryUpdateWithNestedWhereUniqueInput>
  RowProductGrid?: Maybe<RowProductGridUpdateWithNestedWhereUniqueInput>
  RowQuote?: Maybe<RowQuoteUpdateWithNestedWhereUniqueInput>
  RowServiceOptions?: Maybe<RowServiceOptionsUpdateWithNestedWhereUniqueInput>
  RowSpecialBanner?: Maybe<RowSpecialBannerUpdateWithNestedWhereUniqueInput>
  RowSwipeableGrid?: Maybe<RowSwipeableGridUpdateWithNestedWhereUniqueInput>
}

export type PageContentUpsertWithNestedWhereUniqueInput = {
  RowBlogContent?: Maybe<RowBlogContentUpsertWithNestedWhereUniqueInput>
  RowButtonLinkList?: Maybe<RowButtonLinkListUpsertWithNestedWhereUniqueInput>
  RowColumnOne?: Maybe<RowColumnOneUpsertWithNestedWhereUniqueInput>
  RowColumnThree?: Maybe<RowColumnThreeUpsertWithNestedWhereUniqueInput>
  RowColumnTwo?: Maybe<RowColumnTwoUpsertWithNestedWhereUniqueInput>
  RowContentLinks?: Maybe<RowContentLinksUpsertWithNestedWhereUniqueInput>
  RowHeroBanner?: Maybe<RowHeroBannerUpsertWithNestedWhereUniqueInput>
  RowProductBackstory?: Maybe<RowProductBackstoryUpsertWithNestedWhereUniqueInput>
  RowProductGrid?: Maybe<RowProductGridUpsertWithNestedWhereUniqueInput>
  RowQuote?: Maybe<RowQuoteUpsertWithNestedWhereUniqueInput>
  RowServiceOptions?: Maybe<RowServiceOptionsUpsertWithNestedWhereUniqueInput>
  RowSpecialBanner?: Maybe<RowSpecialBannerUpsertWithNestedWhereUniqueInput>
  RowSwipeableGrid?: Maybe<RowSwipeableGridUpsertWithNestedWhereUniqueInput>
}

export type PageContentWhereInput = {
  RowBlogContent?: Maybe<RowBlogContentWhereInput>
  RowButtonLinkList?: Maybe<RowButtonLinkListWhereInput>
  RowColumnOne?: Maybe<RowColumnOneWhereInput>
  RowColumnThree?: Maybe<RowColumnThreeWhereInput>
  RowColumnTwo?: Maybe<RowColumnTwoWhereInput>
  RowContentLinks?: Maybe<RowContentLinksWhereInput>
  RowHeroBanner?: Maybe<RowHeroBannerWhereInput>
  RowProductBackstory?: Maybe<RowProductBackstoryWhereInput>
  RowProductGrid?: Maybe<RowProductGridWhereInput>
  RowQuote?: Maybe<RowQuoteWhereInput>
  RowServiceOptions?: Maybe<RowServiceOptionsWhereInput>
  RowSpecialBanner?: Maybe<RowSpecialBannerWhereInput>
  RowSwipeableGrid?: Maybe<RowSwipeableGridWhereInput>
}

export type PageContentWhereUniqueInput = {
  RowBlogContent?: Maybe<RowBlogContentWhereUniqueInput>
  RowButtonLinkList?: Maybe<RowButtonLinkListWhereUniqueInput>
  RowColumnOne?: Maybe<RowColumnOneWhereUniqueInput>
  RowColumnThree?: Maybe<RowColumnThreeWhereUniqueInput>
  RowColumnTwo?: Maybe<RowColumnTwoWhereUniqueInput>
  RowContentLinks?: Maybe<RowContentLinksWhereUniqueInput>
  RowHeroBanner?: Maybe<RowHeroBannerWhereUniqueInput>
  RowProductBackstory?: Maybe<RowProductBackstoryWhereUniqueInput>
  RowProductGrid?: Maybe<RowProductGridWhereUniqueInput>
  RowQuote?: Maybe<RowQuoteWhereUniqueInput>
  RowServiceOptions?: Maybe<RowServiceOptionsWhereUniqueInput>
  RowSpecialBanner?: Maybe<RowSpecialBannerWhereUniqueInput>
  RowSwipeableGrid?: Maybe<RowSwipeableGridWhereUniqueInput>
}

export type PageCreateInput = {
  asset?: Maybe<AssetCreateOneInlineInput>
  content?: Maybe<PageContentCreateManyInlineInput>
  createdAt?: Maybe<Scalars['DateTime']>
  date?: Maybe<Scalars['DateTime']>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<PageCreateLocalizationsInput>
  /** MetaDescription input for default locale (en) */
  metaDescription: Scalars['String']
  /** MetaRobots input for default locale (en) */
  metaRobots: MetaRobots
  /** MetaTitle input for default locale (en) */
  metaTitle: Scalars['String']
  rowButtonLinkLists?: Maybe<RowButtonLinkListCreateManyInlineInput>
  /** Title input for default locale (en) */
  title?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** Url input for default locale (en) */
  url: Scalars['String']
}

export type PageCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  metaDescription: Scalars['String']
  metaRobots: MetaRobots
  metaTitle: Scalars['String']
  title?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  url: Scalars['String']
}

export type PageCreateLocalizationInput = {
  /** Localization input */
  data: PageCreateLocalizationDataInput
  locale: Locale
}

export type PageCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<PageCreateLocalizationInput>>
}

export type PageCreateManyInlineInput = {
  /** Connect multiple existing Page documents */
  connect?: Maybe<Array<PageWhereUniqueInput>>
  /** Create and connect multiple existing Page documents */
  create?: Maybe<Array<PageCreateInput>>
}

export type PageCreateOneInlineInput = {
  /** Connect one existing Page document */
  connect?: Maybe<PageWhereUniqueInput>
  /** Create and connect one Page document */
  create?: Maybe<PageCreateInput>
}

/** An edge in a connection. */
export type PageEdge = {
  __typename?: 'PageEdge'
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
  /** The item at the end of the edge. */
  node: Page
}

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo'
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']
  /** Number of items in the current page. */
  pageSize?: Maybe<Scalars['Int']>
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>
}

export type PageLink = Node & {
  __typename?: 'PageLink'
  asset?: Maybe<Asset>
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  description?: Maybe<RichText>
  /** Get the document in other stages */
  documentInStages: Array<PageLink>
  footerLegalLinks: Array<Footer>
  footerSocialLinks: Array<Footer>
  /** List of PageLink versions */
  history: Array<Version>
  /** The unique identifier */
  id: Scalars['ID']
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<PageLink>
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  rowContentLinks?: Maybe<RowContentLinks>
  rowHeroBanners: Array<RowHeroBanner>
  rowProductGrids: Array<RowProductGrid>
  rowServiceOptionsMultiple: Array<RowServiceOptions>
  rowSpecialBanners: Array<RowSpecialBanner>
  /** System stage field */
  stage: Stage
  title: Scalars['String']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  url: Scalars['String']
  uspsMultiple: Array<Usps>
}

export type PageLinkAssetArgs = {
  locales?: Maybe<Array<Locale>>
}

export type PageLinkCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type PageLinkDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
  stages?: Array<Stage>
}

export type PageLinkFooterLegalLinksArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  orderBy?: Maybe<FooterOrderByInput>
  skip?: Maybe<Scalars['Int']>
  where?: Maybe<FooterWhereInput>
}

export type PageLinkFooterSocialLinksArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  orderBy?: Maybe<FooterOrderByInput>
  skip?: Maybe<Scalars['Int']>
  where?: Maybe<FooterWhereInput>
}

export type PageLinkHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type PageLinkLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']
  locales?: Array<Locale>
}

export type PageLinkPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type PageLinkRowContentLinksArgs = {
  locales?: Maybe<Array<Locale>>
}

export type PageLinkRowHeroBannersArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  orderBy?: Maybe<RowHeroBannerOrderByInput>
  skip?: Maybe<Scalars['Int']>
  where?: Maybe<RowHeroBannerWhereInput>
}

export type PageLinkRowProductGridsArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  orderBy?: Maybe<RowProductGridOrderByInput>
  skip?: Maybe<Scalars['Int']>
  where?: Maybe<RowProductGridWhereInput>
}

export type PageLinkRowServiceOptionsMultipleArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  orderBy?: Maybe<RowServiceOptionsOrderByInput>
  skip?: Maybe<Scalars['Int']>
  where?: Maybe<RowServiceOptionsWhereInput>
}

export type PageLinkRowSpecialBannersArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  orderBy?: Maybe<RowSpecialBannerOrderByInput>
  skip?: Maybe<Scalars['Int']>
  where?: Maybe<RowSpecialBannerWhereInput>
}

export type PageLinkUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type PageLinkUspsMultipleArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  orderBy?: Maybe<UspsOrderByInput>
  skip?: Maybe<Scalars['Int']>
  where?: Maybe<UspsWhereInput>
}

export type PageLinkConnectInput = {
  /**
   * Allow to specify document position in list of connected documents, will default to appending at
   * end of list
   */
  position?: Maybe<ConnectPositionInput>
  /** Document to connect */
  where: PageLinkWhereUniqueInput
}

/** A connection to a list of items. */
export type PageLinkConnection = {
  __typename?: 'PageLinkConnection'
  aggregate: Aggregate
  /** A list of edges. */
  edges: Array<PageLinkEdge>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

export type PageLinkCreateInput = {
  asset?: Maybe<AssetCreateOneInlineInput>
  createdAt?: Maybe<Scalars['DateTime']>
  /** Description input for default locale (en) */
  description?: Maybe<Scalars['RichTextAST']>
  footerLegalLinks?: Maybe<FooterCreateManyInlineInput>
  footerSocialLinks?: Maybe<FooterCreateManyInlineInput>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<PageLinkCreateLocalizationsInput>
  rowContentLinks?: Maybe<RowContentLinksCreateOneInlineInput>
  rowHeroBanners?: Maybe<RowHeroBannerCreateManyInlineInput>
  rowProductGrids?: Maybe<RowProductGridCreateManyInlineInput>
  rowServiceOptionsMultiple?: Maybe<RowServiceOptionsCreateManyInlineInput>
  rowSpecialBanners?: Maybe<RowSpecialBannerCreateManyInlineInput>
  /** Title input for default locale (en) */
  title: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  /** Url input for default locale (en) */
  url: Scalars['String']
  uspsMultiple?: Maybe<UspsCreateManyInlineInput>
}

export type PageLinkCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  description?: Maybe<Scalars['RichTextAST']>
  title: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  url: Scalars['String']
}

export type PageLinkCreateLocalizationInput = {
  /** Localization input */
  data: PageLinkCreateLocalizationDataInput
  locale: Locale
}

export type PageLinkCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<PageLinkCreateLocalizationInput>>
}

export type PageLinkCreateManyInlineInput = {
  /** Connect multiple existing PageLink documents */
  connect?: Maybe<Array<PageLinkWhereUniqueInput>>
  /** Create and connect multiple existing PageLink documents */
  create?: Maybe<Array<PageLinkCreateInput>>
}

export type PageLinkCreateOneInlineInput = {
  /** Connect one existing PageLink document */
  connect?: Maybe<PageLinkWhereUniqueInput>
  /** Create and connect one PageLink document */
  create?: Maybe<PageLinkCreateInput>
}

/** An edge in a connection. */
export type PageLinkEdge = {
  __typename?: 'PageLinkEdge'
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
  /** The item at the end of the edge. */
  node: PageLink
}

/** Identifies documents */
export type PageLinkManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<PageLinkWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<PageLinkWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<PageLinkWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  asset?: Maybe<AssetWhereInput>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  footerLegalLinks_every?: Maybe<FooterWhereInput>
  footerLegalLinks_none?: Maybe<FooterWhereInput>
  footerLegalLinks_some?: Maybe<FooterWhereInput>
  footerSocialLinks_every?: Maybe<FooterWhereInput>
  footerSocialLinks_none?: Maybe<FooterWhereInput>
  footerSocialLinks_some?: Maybe<FooterWhereInput>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  rowContentLinks?: Maybe<RowContentLinksWhereInput>
  rowHeroBanners_every?: Maybe<RowHeroBannerWhereInput>
  rowHeroBanners_none?: Maybe<RowHeroBannerWhereInput>
  rowHeroBanners_some?: Maybe<RowHeroBannerWhereInput>
  rowProductGrids_every?: Maybe<RowProductGridWhereInput>
  rowProductGrids_none?: Maybe<RowProductGridWhereInput>
  rowProductGrids_some?: Maybe<RowProductGridWhereInput>
  rowServiceOptionsMultiple_every?: Maybe<RowServiceOptionsWhereInput>
  rowServiceOptionsMultiple_none?: Maybe<RowServiceOptionsWhereInput>
  rowServiceOptionsMultiple_some?: Maybe<RowServiceOptionsWhereInput>
  rowSpecialBanners_every?: Maybe<RowSpecialBannerWhereInput>
  rowSpecialBanners_none?: Maybe<RowSpecialBannerWhereInput>
  rowSpecialBanners_some?: Maybe<RowSpecialBannerWhereInput>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  uspsMultiple_every?: Maybe<UspsWhereInput>
  uspsMultiple_none?: Maybe<UspsWhereInput>
  uspsMultiple_some?: Maybe<UspsWhereInput>
}

export type PageLinkOrderByInput =
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'url_ASC'
  | 'url_DESC'

export type PageLinkUpdateInput = {
  asset?: Maybe<AssetUpdateOneInlineInput>
  /** Description input for default locale (en) */
  description?: Maybe<Scalars['RichTextAST']>
  footerLegalLinks?: Maybe<FooterUpdateManyInlineInput>
  footerSocialLinks?: Maybe<FooterUpdateManyInlineInput>
  /** Manage document localizations */
  localizations?: Maybe<PageLinkUpdateLocalizationsInput>
  rowContentLinks?: Maybe<RowContentLinksUpdateOneInlineInput>
  rowHeroBanners?: Maybe<RowHeroBannerUpdateManyInlineInput>
  rowProductGrids?: Maybe<RowProductGridUpdateManyInlineInput>
  rowServiceOptionsMultiple?: Maybe<RowServiceOptionsUpdateManyInlineInput>
  rowSpecialBanners?: Maybe<RowSpecialBannerUpdateManyInlineInput>
  /** Title input for default locale (en) */
  title?: Maybe<Scalars['String']>
  /** Url input for default locale (en) */
  url?: Maybe<Scalars['String']>
  uspsMultiple?: Maybe<UspsUpdateManyInlineInput>
}

export type PageLinkUpdateLocalizationDataInput = {
  description?: Maybe<Scalars['RichTextAST']>
  title?: Maybe<Scalars['String']>
  url?: Maybe<Scalars['String']>
}

export type PageLinkUpdateLocalizationInput = {
  data: PageLinkUpdateLocalizationDataInput
  locale: Locale
}

export type PageLinkUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<PageLinkCreateLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
  /** Localizations to update */
  update?: Maybe<Array<PageLinkUpdateLocalizationInput>>
  upsert?: Maybe<Array<PageLinkUpsertLocalizationInput>>
}

export type PageLinkUpdateManyInlineInput = {
  /** Connect multiple existing PageLink documents */
  connect?: Maybe<Array<PageLinkConnectInput>>
  /** Create and connect multiple PageLink documents */
  create?: Maybe<Array<PageLinkCreateInput>>
  /** Delete multiple PageLink documents */
  delete?: Maybe<Array<PageLinkWhereUniqueInput>>
  /** Disconnect multiple PageLink documents */
  disconnect?: Maybe<Array<PageLinkWhereUniqueInput>>
  /** Override currently-connected documents with multiple existing PageLink documents */
  set?: Maybe<Array<PageLinkWhereUniqueInput>>
  /** Update multiple PageLink documents */
  update?: Maybe<Array<PageLinkUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple PageLink documents */
  upsert?: Maybe<Array<PageLinkUpsertWithNestedWhereUniqueInput>>
}

export type PageLinkUpdateManyInput = {
  /** Description input for default locale (en) */
  description?: Maybe<Scalars['RichTextAST']>
  /** Optional updates to localizations */
  localizations?: Maybe<PageLinkUpdateManyLocalizationsInput>
  /** Title input for default locale (en) */
  title?: Maybe<Scalars['String']>
  /** Url input for default locale (en) */
  url?: Maybe<Scalars['String']>
}

export type PageLinkUpdateManyLocalizationDataInput = {
  description?: Maybe<Scalars['RichTextAST']>
  title?: Maybe<Scalars['String']>
  url?: Maybe<Scalars['String']>
}

export type PageLinkUpdateManyLocalizationInput = {
  data: PageLinkUpdateManyLocalizationDataInput
  locale: Locale
}

export type PageLinkUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<PageLinkUpdateManyLocalizationInput>>
}

export type PageLinkUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: PageLinkUpdateManyInput
  /** Document search */
  where: PageLinkWhereInput
}

export type PageLinkUpdateOneInlineInput = {
  /** Connect existing PageLink document */
  connect?: Maybe<PageLinkWhereUniqueInput>
  /** Create and connect one PageLink document */
  create?: Maybe<PageLinkCreateInput>
  /** Delete currently connected PageLink document */
  delete?: Maybe<Scalars['Boolean']>
  /** Disconnect currently connected PageLink document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Update single PageLink document */
  update?: Maybe<PageLinkUpdateWithNestedWhereUniqueInput>
  /** Upsert single PageLink document */
  upsert?: Maybe<PageLinkUpsertWithNestedWhereUniqueInput>
}

export type PageLinkUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: PageLinkUpdateInput
  /** Unique document search */
  where: PageLinkWhereUniqueInput
}

export type PageLinkUpsertInput = {
  /** Create document if it didn't exist */
  create: PageLinkCreateInput
  /** Update document if it exists */
  update: PageLinkUpdateInput
}

export type PageLinkUpsertLocalizationInput = {
  create: PageLinkCreateLocalizationDataInput
  locale: Locale
  update: PageLinkUpdateLocalizationDataInput
}

export type PageLinkUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: PageLinkUpsertInput
  /** Unique document search */
  where: PageLinkWhereUniqueInput
}

/** Identifies documents */
export type PageLinkWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<PageLinkWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<PageLinkWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<PageLinkWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  asset?: Maybe<AssetWhereInput>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  footerLegalLinks_every?: Maybe<FooterWhereInput>
  footerLegalLinks_none?: Maybe<FooterWhereInput>
  footerLegalLinks_some?: Maybe<FooterWhereInput>
  footerSocialLinks_every?: Maybe<FooterWhereInput>
  footerSocialLinks_none?: Maybe<FooterWhereInput>
  footerSocialLinks_some?: Maybe<FooterWhereInput>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  rowContentLinks?: Maybe<RowContentLinksWhereInput>
  rowHeroBanners_every?: Maybe<RowHeroBannerWhereInput>
  rowHeroBanners_none?: Maybe<RowHeroBannerWhereInput>
  rowHeroBanners_some?: Maybe<RowHeroBannerWhereInput>
  rowProductGrids_every?: Maybe<RowProductGridWhereInput>
  rowProductGrids_none?: Maybe<RowProductGridWhereInput>
  rowProductGrids_some?: Maybe<RowProductGridWhereInput>
  rowServiceOptionsMultiple_every?: Maybe<RowServiceOptionsWhereInput>
  rowServiceOptionsMultiple_none?: Maybe<RowServiceOptionsWhereInput>
  rowServiceOptionsMultiple_some?: Maybe<RowServiceOptionsWhereInput>
  rowSpecialBanners_every?: Maybe<RowSpecialBannerWhereInput>
  rowSpecialBanners_none?: Maybe<RowSpecialBannerWhereInput>
  rowSpecialBanners_some?: Maybe<RowSpecialBannerWhereInput>
  title?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  title_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  title_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  title_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  title_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  title_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  title_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  title_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  title_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  title_starts_with?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  url?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  url_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  url_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  url_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  url_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  url_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  url_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  url_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  url_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  url_starts_with?: Maybe<Scalars['String']>
  uspsMultiple_every?: Maybe<UspsWhereInput>
  uspsMultiple_none?: Maybe<UspsWhereInput>
  uspsMultiple_some?: Maybe<UspsWhereInput>
}

/** References PageLink record uniquely */
export type PageLinkWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

/** Identifies documents */
export type PageManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<PageWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<PageWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<PageWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  asset?: Maybe<AssetWhereInput>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  date?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  date_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  date_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  date_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  date_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  date_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  date_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  date_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  rowButtonLinkLists_every?: Maybe<RowButtonLinkListWhereInput>
  rowButtonLinkLists_none?: Maybe<RowButtonLinkListWhereInput>
  rowButtonLinkLists_some?: Maybe<RowButtonLinkListWhereInput>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

export type PageOrderByInput =
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'date_ASC'
  | 'date_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'metaDescription_ASC'
  | 'metaDescription_DESC'
  | 'metaRobots_ASC'
  | 'metaRobots_DESC'
  | 'metaTitle_ASC'
  | 'metaTitle_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'url_ASC'
  | 'url_DESC'

export type PageUpdateInput = {
  asset?: Maybe<AssetUpdateOneInlineInput>
  content?: Maybe<PageContentUpdateManyInlineInput>
  date?: Maybe<Scalars['DateTime']>
  /** Manage document localizations */
  localizations?: Maybe<PageUpdateLocalizationsInput>
  /** MetaDescription input for default locale (en) */
  metaDescription?: Maybe<Scalars['String']>
  /** MetaRobots input for default locale (en) */
  metaRobots?: Maybe<MetaRobots>
  /** MetaTitle input for default locale (en) */
  metaTitle?: Maybe<Scalars['String']>
  rowButtonLinkLists?: Maybe<RowButtonLinkListUpdateManyInlineInput>
  /** Title input for default locale (en) */
  title?: Maybe<Scalars['String']>
  /** Url input for default locale (en) */
  url?: Maybe<Scalars['String']>
}

export type PageUpdateLocalizationDataInput = {
  metaDescription?: Maybe<Scalars['String']>
  metaRobots?: Maybe<MetaRobots>
  metaTitle?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
  url?: Maybe<Scalars['String']>
}

export type PageUpdateLocalizationInput = {
  data: PageUpdateLocalizationDataInput
  locale: Locale
}

export type PageUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<PageCreateLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
  /** Localizations to update */
  update?: Maybe<Array<PageUpdateLocalizationInput>>
  upsert?: Maybe<Array<PageUpsertLocalizationInput>>
}

export type PageUpdateManyInlineInput = {
  /** Connect multiple existing Page documents */
  connect?: Maybe<Array<PageConnectInput>>
  /** Create and connect multiple Page documents */
  create?: Maybe<Array<PageCreateInput>>
  /** Delete multiple Page documents */
  delete?: Maybe<Array<PageWhereUniqueInput>>
  /** Disconnect multiple Page documents */
  disconnect?: Maybe<Array<PageWhereUniqueInput>>
  /** Override currently-connected documents with multiple existing Page documents */
  set?: Maybe<Array<PageWhereUniqueInput>>
  /** Update multiple Page documents */
  update?: Maybe<Array<PageUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple Page documents */
  upsert?: Maybe<Array<PageUpsertWithNestedWhereUniqueInput>>
}

export type PageUpdateManyInput = {
  date?: Maybe<Scalars['DateTime']>
  /** Optional updates to localizations */
  localizations?: Maybe<PageUpdateManyLocalizationsInput>
  /** MetaDescription input for default locale (en) */
  metaDescription?: Maybe<Scalars['String']>
  /** MetaRobots input for default locale (en) */
  metaRobots?: Maybe<MetaRobots>
  /** MetaTitle input for default locale (en) */
  metaTitle?: Maybe<Scalars['String']>
  /** Title input for default locale (en) */
  title?: Maybe<Scalars['String']>
}

export type PageUpdateManyLocalizationDataInput = {
  metaDescription?: Maybe<Scalars['String']>
  metaRobots?: Maybe<MetaRobots>
  metaTitle?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
}

export type PageUpdateManyLocalizationInput = {
  data: PageUpdateManyLocalizationDataInput
  locale: Locale
}

export type PageUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<PageUpdateManyLocalizationInput>>
}

export type PageUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: PageUpdateManyInput
  /** Document search */
  where: PageWhereInput
}

export type PageUpdateOneInlineInput = {
  /** Connect existing Page document */
  connect?: Maybe<PageWhereUniqueInput>
  /** Create and connect one Page document */
  create?: Maybe<PageCreateInput>
  /** Delete currently connected Page document */
  delete?: Maybe<Scalars['Boolean']>
  /** Disconnect currently connected Page document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Update single Page document */
  update?: Maybe<PageUpdateWithNestedWhereUniqueInput>
  /** Upsert single Page document */
  upsert?: Maybe<PageUpsertWithNestedWhereUniqueInput>
}

export type PageUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: PageUpdateInput
  /** Unique document search */
  where: PageWhereUniqueInput
}

export type PageUpsertInput = {
  /** Create document if it didn't exist */
  create: PageCreateInput
  /** Update document if it exists */
  update: PageUpdateInput
}

export type PageUpsertLocalizationInput = {
  create: PageCreateLocalizationDataInput
  locale: Locale
  update: PageUpdateLocalizationDataInput
}

export type PageUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: PageUpsertInput
  /** Unique document search */
  where: PageWhereUniqueInput
}

/** Identifies documents */
export type PageWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<PageWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<PageWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<PageWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  asset?: Maybe<AssetWhereInput>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  date?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  date_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  date_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  date_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  date_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  date_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  date_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  date_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  metaDescription?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  metaDescription_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  metaDescription_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  metaDescription_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  metaDescription_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  metaDescription_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  metaDescription_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  metaDescription_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  metaDescription_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  metaDescription_starts_with?: Maybe<Scalars['String']>
  metaRobots?: Maybe<MetaRobots>
  /** All values that are contained in given list. */
  metaRobots_in?: Maybe<Array<MetaRobots>>
  /** All values that are not equal to given value. */
  metaRobots_not?: Maybe<MetaRobots>
  /** All values that are not contained in given list. */
  metaRobots_not_in?: Maybe<Array<MetaRobots>>
  metaTitle?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  metaTitle_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  metaTitle_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  metaTitle_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  metaTitle_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  metaTitle_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  metaTitle_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  metaTitle_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  metaTitle_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  metaTitle_starts_with?: Maybe<Scalars['String']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  rowButtonLinkLists_every?: Maybe<RowButtonLinkListWhereInput>
  rowButtonLinkLists_none?: Maybe<RowButtonLinkListWhereInput>
  rowButtonLinkLists_some?: Maybe<RowButtonLinkListWhereInput>
  title?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  title_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  title_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  title_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  title_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  title_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  title_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  title_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  title_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  title_starts_with?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  url?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  url_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  url_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  url_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  url_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  url_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  url_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  url_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  url_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  url_starts_with?: Maybe<Scalars['String']>
}

/** References Page record uniquely */
export type PageWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

export type Product = Node & {
  __typename?: 'Product'
  content: Array<ProductContent>
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** Get the document in other stages */
  documentInStages: Array<Product>
  /** List of Product versions */
  history: Array<Version>
  /** The unique identifier */
  id: Scalars['ID']
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<Product>
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  /** System stage field */
  stage: Stage
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  url: Scalars['String']
}

export type ProductContentArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  skip?: Maybe<Scalars['Int']>
}

export type ProductCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type ProductDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
  stages?: Array<Stage>
}

export type ProductHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type ProductLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']
  locales?: Array<Locale>
}

export type ProductPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type ProductUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type ProductConnectInput = {
  /**
   * Allow to specify document position in list of connected documents, will default to appending at
   * end of list
   */
  position?: Maybe<ConnectPositionInput>
  /** Document to connect */
  where: ProductWhereUniqueInput
}

/** A connection to a list of items. */
export type ProductConnection = {
  __typename?: 'ProductConnection'
  aggregate: Aggregate
  /** A list of edges. */
  edges: Array<ProductEdge>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

export type ProductContent =
  | RowColumnOne
  | RowColumnThree
  | RowColumnTwo
  | RowContentLinks
  | RowProductFeature
  | RowProductFeatureBoxed
  | RowProductRelated
  | RowProductReviews
  | RowProductSpecs
  | RowProductUpsells
  | RowQuote
  | RowSpecialBanner

export type ProductContentConnectInput = {
  RowColumnOne?: Maybe<RowColumnOneConnectInput>
  RowColumnThree?: Maybe<RowColumnThreeConnectInput>
  RowColumnTwo?: Maybe<RowColumnTwoConnectInput>
  RowContentLinks?: Maybe<RowContentLinksConnectInput>
  RowProductFeature?: Maybe<RowProductFeatureConnectInput>
  RowProductFeatureBoxed?: Maybe<RowProductFeatureBoxedConnectInput>
  RowProductRelated?: Maybe<RowProductRelatedConnectInput>
  RowProductReviews?: Maybe<RowProductReviewsConnectInput>
  RowProductSpecs?: Maybe<RowProductSpecsConnectInput>
  RowProductUpsells?: Maybe<RowProductUpsellsConnectInput>
  RowQuote?: Maybe<RowQuoteConnectInput>
  RowSpecialBanner?: Maybe<RowSpecialBannerConnectInput>
}

export type ProductContentCreateInput = {
  RowColumnOne?: Maybe<RowColumnOneCreateInput>
  RowColumnThree?: Maybe<RowColumnThreeCreateInput>
  RowColumnTwo?: Maybe<RowColumnTwoCreateInput>
  RowContentLinks?: Maybe<RowContentLinksCreateInput>
  RowProductFeature?: Maybe<RowProductFeatureCreateInput>
  RowProductFeatureBoxed?: Maybe<RowProductFeatureBoxedCreateInput>
  RowProductRelated?: Maybe<RowProductRelatedCreateInput>
  RowProductReviews?: Maybe<RowProductReviewsCreateInput>
  RowProductSpecs?: Maybe<RowProductSpecsCreateInput>
  RowProductUpsells?: Maybe<RowProductUpsellsCreateInput>
  RowQuote?: Maybe<RowQuoteCreateInput>
  RowSpecialBanner?: Maybe<RowSpecialBannerCreateInput>
}

export type ProductContentCreateManyInlineInput = {
  /** Connect multiple existing ProductContent documents */
  connect?: Maybe<Array<ProductContentWhereUniqueInput>>
  /** Create and connect multiple existing ProductContent documents */
  create?: Maybe<Array<ProductContentCreateInput>>
}

export type ProductContentCreateOneInlineInput = {
  /** Connect one existing ProductContent document */
  connect?: Maybe<ProductContentWhereUniqueInput>
  /** Create and connect one ProductContent document */
  create?: Maybe<ProductContentCreateInput>
}

export type ProductContentUpdateInput = {
  RowColumnOne?: Maybe<RowColumnOneUpdateInput>
  RowColumnThree?: Maybe<RowColumnThreeUpdateInput>
  RowColumnTwo?: Maybe<RowColumnTwoUpdateInput>
  RowContentLinks?: Maybe<RowContentLinksUpdateInput>
  RowProductFeature?: Maybe<RowProductFeatureUpdateInput>
  RowProductFeatureBoxed?: Maybe<RowProductFeatureBoxedUpdateInput>
  RowProductRelated?: Maybe<RowProductRelatedUpdateInput>
  RowProductReviews?: Maybe<RowProductReviewsUpdateInput>
  RowProductSpecs?: Maybe<RowProductSpecsUpdateInput>
  RowProductUpsells?: Maybe<RowProductUpsellsUpdateInput>
  RowQuote?: Maybe<RowQuoteUpdateInput>
  RowSpecialBanner?: Maybe<RowSpecialBannerUpdateInput>
}

export type ProductContentUpdateManyInlineInput = {
  /** Connect multiple existing ProductContent documents */
  connect?: Maybe<Array<ProductContentConnectInput>>
  /** Create and connect multiple ProductContent documents */
  create?: Maybe<Array<ProductContentCreateInput>>
  /** Delete multiple ProductContent documents */
  delete?: Maybe<Array<ProductContentWhereUniqueInput>>
  /** Disconnect multiple ProductContent documents */
  disconnect?: Maybe<Array<ProductContentWhereUniqueInput>>
  /** Override currently-connected documents with multiple existing ProductContent documents */
  set?: Maybe<Array<ProductContentWhereUniqueInput>>
  /** Update multiple ProductContent documents */
  update?: Maybe<Array<ProductContentUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple ProductContent documents */
  upsert?: Maybe<Array<ProductContentUpsertWithNestedWhereUniqueInput>>
}

export type ProductContentUpdateManyWithNestedWhereInput = {
  RowColumnOne?: Maybe<RowColumnOneUpdateManyWithNestedWhereInput>
  RowColumnThree?: Maybe<RowColumnThreeUpdateManyWithNestedWhereInput>
  RowColumnTwo?: Maybe<RowColumnTwoUpdateManyWithNestedWhereInput>
  RowContentLinks?: Maybe<RowContentLinksUpdateManyWithNestedWhereInput>
  RowProductFeature?: Maybe<RowProductFeatureUpdateManyWithNestedWhereInput>
  RowProductFeatureBoxed?: Maybe<RowProductFeatureBoxedUpdateManyWithNestedWhereInput>
  RowProductRelated?: Maybe<RowProductRelatedUpdateManyWithNestedWhereInput>
  RowProductReviews?: Maybe<RowProductReviewsUpdateManyWithNestedWhereInput>
  RowProductSpecs?: Maybe<RowProductSpecsUpdateManyWithNestedWhereInput>
  RowProductUpsells?: Maybe<RowProductUpsellsUpdateManyWithNestedWhereInput>
  RowQuote?: Maybe<RowQuoteUpdateManyWithNestedWhereInput>
  RowSpecialBanner?: Maybe<RowSpecialBannerUpdateManyWithNestedWhereInput>
}

export type ProductContentUpdateOneInlineInput = {
  /** Connect existing ProductContent document */
  connect?: Maybe<ProductContentWhereUniqueInput>
  /** Create and connect one ProductContent document */
  create?: Maybe<ProductContentCreateInput>
  /** Delete currently connected ProductContent document */
  delete?: Maybe<Scalars['Boolean']>
  /** Disconnect currently connected ProductContent document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Update single ProductContent document */
  update?: Maybe<ProductContentUpdateWithNestedWhereUniqueInput>
  /** Upsert single ProductContent document */
  upsert?: Maybe<ProductContentUpsertWithNestedWhereUniqueInput>
}

export type ProductContentUpdateWithNestedWhereUniqueInput = {
  RowColumnOne?: Maybe<RowColumnOneUpdateWithNestedWhereUniqueInput>
  RowColumnThree?: Maybe<RowColumnThreeUpdateWithNestedWhereUniqueInput>
  RowColumnTwo?: Maybe<RowColumnTwoUpdateWithNestedWhereUniqueInput>
  RowContentLinks?: Maybe<RowContentLinksUpdateWithNestedWhereUniqueInput>
  RowProductFeature?: Maybe<RowProductFeatureUpdateWithNestedWhereUniqueInput>
  RowProductFeatureBoxed?: Maybe<RowProductFeatureBoxedUpdateWithNestedWhereUniqueInput>
  RowProductRelated?: Maybe<RowProductRelatedUpdateWithNestedWhereUniqueInput>
  RowProductReviews?: Maybe<RowProductReviewsUpdateWithNestedWhereUniqueInput>
  RowProductSpecs?: Maybe<RowProductSpecsUpdateWithNestedWhereUniqueInput>
  RowProductUpsells?: Maybe<RowProductUpsellsUpdateWithNestedWhereUniqueInput>
  RowQuote?: Maybe<RowQuoteUpdateWithNestedWhereUniqueInput>
  RowSpecialBanner?: Maybe<RowSpecialBannerUpdateWithNestedWhereUniqueInput>
}

export type ProductContentUpsertWithNestedWhereUniqueInput = {
  RowColumnOne?: Maybe<RowColumnOneUpsertWithNestedWhereUniqueInput>
  RowColumnThree?: Maybe<RowColumnThreeUpsertWithNestedWhereUniqueInput>
  RowColumnTwo?: Maybe<RowColumnTwoUpsertWithNestedWhereUniqueInput>
  RowContentLinks?: Maybe<RowContentLinksUpsertWithNestedWhereUniqueInput>
  RowProductFeature?: Maybe<RowProductFeatureUpsertWithNestedWhereUniqueInput>
  RowProductFeatureBoxed?: Maybe<RowProductFeatureBoxedUpsertWithNestedWhereUniqueInput>
  RowProductRelated?: Maybe<RowProductRelatedUpsertWithNestedWhereUniqueInput>
  RowProductReviews?: Maybe<RowProductReviewsUpsertWithNestedWhereUniqueInput>
  RowProductSpecs?: Maybe<RowProductSpecsUpsertWithNestedWhereUniqueInput>
  RowProductUpsells?: Maybe<RowProductUpsellsUpsertWithNestedWhereUniqueInput>
  RowQuote?: Maybe<RowQuoteUpsertWithNestedWhereUniqueInput>
  RowSpecialBanner?: Maybe<RowSpecialBannerUpsertWithNestedWhereUniqueInput>
}

export type ProductContentWhereInput = {
  RowColumnOne?: Maybe<RowColumnOneWhereInput>
  RowColumnThree?: Maybe<RowColumnThreeWhereInput>
  RowColumnTwo?: Maybe<RowColumnTwoWhereInput>
  RowContentLinks?: Maybe<RowContentLinksWhereInput>
  RowProductFeature?: Maybe<RowProductFeatureWhereInput>
  RowProductFeatureBoxed?: Maybe<RowProductFeatureBoxedWhereInput>
  RowProductRelated?: Maybe<RowProductRelatedWhereInput>
  RowProductReviews?: Maybe<RowProductReviewsWhereInput>
  RowProductSpecs?: Maybe<RowProductSpecsWhereInput>
  RowProductUpsells?: Maybe<RowProductUpsellsWhereInput>
  RowQuote?: Maybe<RowQuoteWhereInput>
  RowSpecialBanner?: Maybe<RowSpecialBannerWhereInput>
}

export type ProductContentWhereUniqueInput = {
  RowColumnOne?: Maybe<RowColumnOneWhereUniqueInput>
  RowColumnThree?: Maybe<RowColumnThreeWhereUniqueInput>
  RowColumnTwo?: Maybe<RowColumnTwoWhereUniqueInput>
  RowContentLinks?: Maybe<RowContentLinksWhereUniqueInput>
  RowProductFeature?: Maybe<RowProductFeatureWhereUniqueInput>
  RowProductFeatureBoxed?: Maybe<RowProductFeatureBoxedWhereUniqueInput>
  RowProductRelated?: Maybe<RowProductRelatedWhereUniqueInput>
  RowProductReviews?: Maybe<RowProductReviewsWhereUniqueInput>
  RowProductSpecs?: Maybe<RowProductSpecsWhereUniqueInput>
  RowProductUpsells?: Maybe<RowProductUpsellsWhereUniqueInput>
  RowQuote?: Maybe<RowQuoteWhereUniqueInput>
  RowSpecialBanner?: Maybe<RowSpecialBannerWhereUniqueInput>
}

export type ProductCreateInput = {
  content?: Maybe<ProductContentCreateManyInlineInput>
  createdAt?: Maybe<Scalars['DateTime']>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<ProductCreateLocalizationsInput>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** Url input for default locale (en) */
  url: Scalars['String']
}

export type ProductCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
  url: Scalars['String']
}

export type ProductCreateLocalizationInput = {
  /** Localization input */
  data: ProductCreateLocalizationDataInput
  locale: Locale
}

export type ProductCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<ProductCreateLocalizationInput>>
}

export type ProductCreateManyInlineInput = {
  /** Connect multiple existing Product documents */
  connect?: Maybe<Array<ProductWhereUniqueInput>>
  /** Create and connect multiple existing Product documents */
  create?: Maybe<Array<ProductCreateInput>>
}

export type ProductCreateOneInlineInput = {
  /** Connect one existing Product document */
  connect?: Maybe<ProductWhereUniqueInput>
  /** Create and connect one Product document */
  create?: Maybe<ProductCreateInput>
}

/** An edge in a connection. */
export type ProductEdge = {
  __typename?: 'ProductEdge'
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
  /** The item at the end of the edge. */
  node: Product
}

/** Identifies documents */
export type ProductManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ProductWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ProductWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ProductWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

export type ProductOrderByInput =
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'url_ASC'
  | 'url_DESC'

export type ProductUpdateInput = {
  content?: Maybe<ProductContentUpdateManyInlineInput>
  /** Manage document localizations */
  localizations?: Maybe<ProductUpdateLocalizationsInput>
  /** Url input for default locale (en) */
  url?: Maybe<Scalars['String']>
}

export type ProductUpdateLocalizationDataInput = {
  url?: Maybe<Scalars['String']>
}

export type ProductUpdateLocalizationInput = {
  data: ProductUpdateLocalizationDataInput
  locale: Locale
}

export type ProductUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<ProductCreateLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
  /** Localizations to update */
  update?: Maybe<Array<ProductUpdateLocalizationInput>>
  upsert?: Maybe<Array<ProductUpsertLocalizationInput>>
}

export type ProductUpdateManyInlineInput = {
  /** Connect multiple existing Product documents */
  connect?: Maybe<Array<ProductConnectInput>>
  /** Create and connect multiple Product documents */
  create?: Maybe<Array<ProductCreateInput>>
  /** Delete multiple Product documents */
  delete?: Maybe<Array<ProductWhereUniqueInput>>
  /** Disconnect multiple Product documents */
  disconnect?: Maybe<Array<ProductWhereUniqueInput>>
  /** Override currently-connected documents with multiple existing Product documents */
  set?: Maybe<Array<ProductWhereUniqueInput>>
  /** Update multiple Product documents */
  update?: Maybe<Array<ProductUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple Product documents */
  upsert?: Maybe<Array<ProductUpsertWithNestedWhereUniqueInput>>
}

export type ProductUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: Maybe<Scalars['String']>
}

export type ProductUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ProductUpdateManyInput
  /** Document search */
  where: ProductWhereInput
}

export type ProductUpdateOneInlineInput = {
  /** Connect existing Product document */
  connect?: Maybe<ProductWhereUniqueInput>
  /** Create and connect one Product document */
  create?: Maybe<ProductCreateInput>
  /** Delete currently connected Product document */
  delete?: Maybe<Scalars['Boolean']>
  /** Disconnect currently connected Product document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Update single Product document */
  update?: Maybe<ProductUpdateWithNestedWhereUniqueInput>
  /** Upsert single Product document */
  upsert?: Maybe<ProductUpsertWithNestedWhereUniqueInput>
}

export type ProductUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ProductUpdateInput
  /** Unique document search */
  where: ProductWhereUniqueInput
}

export type ProductUpsertInput = {
  /** Create document if it didn't exist */
  create: ProductCreateInput
  /** Update document if it exists */
  update: ProductUpdateInput
}

export type ProductUpsertLocalizationInput = {
  create: ProductCreateLocalizationDataInput
  locale: Locale
  update: ProductUpdateLocalizationDataInput
}

export type ProductUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ProductUpsertInput
  /** Unique document search */
  where: ProductWhereUniqueInput
}

/** Identifies documents */
export type ProductWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ProductWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ProductWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ProductWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  url?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  url_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  url_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  url_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  url_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  url_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  url_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  url_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  url_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  url_starts_with?: Maybe<Scalars['String']>
}

/** References Product record uniquely */
export type ProductWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
}

export type PublishLocaleInput = {
  /** Locales to publish */
  locale: Locale
  /** Stages to publish selected locales to */
  stages: Array<Stage>
}

/**
 * Representing a RGBA color value:
 * https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba()
 */
export type Rgba = {
  __typename?: 'RGBA'
  a: Scalars['RGBATransparency']
  b: Scalars['RGBAHue']
  g: Scalars['RGBAHue']
  r: Scalars['RGBAHue']
}

/**
 * Input type representing a RGBA color value:
 * https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba()
 */
export type RgbaInput = {
  a: Scalars['RGBATransparency']
  b: Scalars['RGBAHue']
  g: Scalars['RGBAHue']
  r: Scalars['RGBAHue']
}

/** Custom type representing a rich text value comprising of raw rich text ast, html, markdown and text values */
export type RichText = {
  __typename?: 'RichText'
  /** Returns HTMl representation */
  html: Scalars['String']
  /** Returns Markdown representation */
  markdown: Scalars['String']
  /** Returns AST representation */
  raw: Scalars['RichTextAST']
  /** Returns plain-text contents of RichText */
  text: Scalars['String']
}

export type RowBlogContent = Node & {
  __typename?: 'RowBlogContent'
  content?: Maybe<RichText>
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** Get the document in other stages */
  documentInStages: Array<RowBlogContent>
  /** List of RowBlogContent versions */
  history: Array<Version>
  /** The unique identifier */
  id: Scalars['ID']
  identity: Scalars['String']
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowBlogContent>
  pages: Array<Page>
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  /** System stage field */
  stage: Stage
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
}

export type RowBlogContentCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowBlogContentDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
  stages?: Array<Stage>
}

export type RowBlogContentHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowBlogContentLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']
  locales?: Array<Locale>
}

export type RowBlogContentPagesArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  skip?: Maybe<Scalars['Int']>
}

export type RowBlogContentPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowBlogContentUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowBlogContentConnectInput = {
  /**
   * Allow to specify document position in list of connected documents, will default to appending at
   * end of list
   */
  position?: Maybe<ConnectPositionInput>
  /** Document to connect */
  where: RowBlogContentWhereUniqueInput
}

/** A connection to a list of items. */
export type RowBlogContentConnection = {
  __typename?: 'RowBlogContentConnection'
  aggregate: Aggregate
  /** A list of edges. */
  edges: Array<RowBlogContentEdge>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

export type RowBlogContentCreateInput = {
  /** Content input for default locale (en) */
  content?: Maybe<Scalars['RichTextAST']>
  createdAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowBlogContentCreateLocalizationsInput>
  pages?: Maybe<PageCreateManyInlineInput>
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowBlogContentCreateLocalizationDataInput = {
  content?: Maybe<Scalars['RichTextAST']>
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowBlogContentCreateLocalizationInput = {
  /** Localization input */
  data: RowBlogContentCreateLocalizationDataInput
  locale: Locale
}

export type RowBlogContentCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowBlogContentCreateLocalizationInput>>
}

export type RowBlogContentCreateManyInlineInput = {
  /** Connect multiple existing RowBlogContent documents */
  connect?: Maybe<Array<RowBlogContentWhereUniqueInput>>
  /** Create and connect multiple existing RowBlogContent documents */
  create?: Maybe<Array<RowBlogContentCreateInput>>
}

export type RowBlogContentCreateOneInlineInput = {
  /** Connect one existing RowBlogContent document */
  connect?: Maybe<RowBlogContentWhereUniqueInput>
  /** Create and connect one RowBlogContent document */
  create?: Maybe<RowBlogContentCreateInput>
}

/** An edge in a connection. */
export type RowBlogContentEdge = {
  __typename?: 'RowBlogContentEdge'
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
  /** The item at the end of the edge. */
  node: RowBlogContent
}

/** Identifies documents */
export type RowBlogContentManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowBlogContentWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowBlogContentWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowBlogContentWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  pages_every?: Maybe<PageWhereInput>
  pages_none?: Maybe<PageWhereInput>
  pages_some?: Maybe<PageWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

export type RowBlogContentOrderByInput =
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'

export type RowBlogContentUpdateInput = {
  /** Content input for default locale (en) */
  content?: Maybe<Scalars['RichTextAST']>
  identity?: Maybe<Scalars['String']>
  /** Manage document localizations */
  localizations?: Maybe<RowBlogContentUpdateLocalizationsInput>
  pages?: Maybe<PageUpdateManyInlineInput>
}

export type RowBlogContentUpdateLocalizationDataInput = {
  content?: Maybe<Scalars['RichTextAST']>
}

export type RowBlogContentUpdateLocalizationInput = {
  data: RowBlogContentUpdateLocalizationDataInput
  locale: Locale
}

export type RowBlogContentUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowBlogContentCreateLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
  /** Localizations to update */
  update?: Maybe<Array<RowBlogContentUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowBlogContentUpsertLocalizationInput>>
}

export type RowBlogContentUpdateManyInlineInput = {
  /** Connect multiple existing RowBlogContent documents */
  connect?: Maybe<Array<RowBlogContentConnectInput>>
  /** Create and connect multiple RowBlogContent documents */
  create?: Maybe<Array<RowBlogContentCreateInput>>
  /** Delete multiple RowBlogContent documents */
  delete?: Maybe<Array<RowBlogContentWhereUniqueInput>>
  /** Disconnect multiple RowBlogContent documents */
  disconnect?: Maybe<Array<RowBlogContentWhereUniqueInput>>
  /** Override currently-connected documents with multiple existing RowBlogContent documents */
  set?: Maybe<Array<RowBlogContentWhereUniqueInput>>
  /** Update multiple RowBlogContent documents */
  update?: Maybe<Array<RowBlogContentUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowBlogContent documents */
  upsert?: Maybe<Array<RowBlogContentUpsertWithNestedWhereUniqueInput>>
}

export type RowBlogContentUpdateManyInput = {
  /** Content input for default locale (en) */
  content?: Maybe<Scalars['RichTextAST']>
  /** Optional updates to localizations */
  localizations?: Maybe<RowBlogContentUpdateManyLocalizationsInput>
}

export type RowBlogContentUpdateManyLocalizationDataInput = {
  content?: Maybe<Scalars['RichTextAST']>
}

export type RowBlogContentUpdateManyLocalizationInput = {
  data: RowBlogContentUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowBlogContentUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowBlogContentUpdateManyLocalizationInput>>
}

export type RowBlogContentUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: RowBlogContentUpdateManyInput
  /** Document search */
  where: RowBlogContentWhereInput
}

export type RowBlogContentUpdateOneInlineInput = {
  /** Connect existing RowBlogContent document */
  connect?: Maybe<RowBlogContentWhereUniqueInput>
  /** Create and connect one RowBlogContent document */
  create?: Maybe<RowBlogContentCreateInput>
  /** Delete currently connected RowBlogContent document */
  delete?: Maybe<Scalars['Boolean']>
  /** Disconnect currently connected RowBlogContent document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Update single RowBlogContent document */
  update?: Maybe<RowBlogContentUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowBlogContent document */
  upsert?: Maybe<RowBlogContentUpsertWithNestedWhereUniqueInput>
}

export type RowBlogContentUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: RowBlogContentUpdateInput
  /** Unique document search */
  where: RowBlogContentWhereUniqueInput
}

export type RowBlogContentUpsertInput = {
  /** Create document if it didn't exist */
  create: RowBlogContentCreateInput
  /** Update document if it exists */
  update: RowBlogContentUpdateInput
}

export type RowBlogContentUpsertLocalizationInput = {
  create: RowBlogContentCreateLocalizationDataInput
  locale: Locale
  update: RowBlogContentUpdateLocalizationDataInput
}

export type RowBlogContentUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: RowBlogContentUpsertInput
  /** Unique document search */
  where: RowBlogContentWhereUniqueInput
}

/** Identifies documents */
export type RowBlogContentWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowBlogContentWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowBlogContentWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowBlogContentWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  pages_every?: Maybe<PageWhereInput>
  pages_none?: Maybe<PageWhereInput>
  pages_some?: Maybe<PageWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

/** References RowBlogContent record uniquely */
export type RowBlogContentWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type RowButtonLinkList = Node & {
  __typename?: 'RowButtonLinkList'
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** Get the document in other stages */
  documentInStages: Array<RowButtonLinkList>
  /** List of RowButtonLinkList versions */
  history: Array<Version>
  /** The unique identifier */
  id: Scalars['ID']
  identity: Scalars['String']
  links: Array<Page>
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowButtonLinkList>
  pages: Array<Page>
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  /** System stage field */
  stage: Stage
  title: Scalars['String']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
}

export type RowButtonLinkListCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowButtonLinkListDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
  stages?: Array<Stage>
}

export type RowButtonLinkListHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowButtonLinkListLinksArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  orderBy?: Maybe<PageOrderByInput>
  skip?: Maybe<Scalars['Int']>
  where?: Maybe<PageWhereInput>
}

export type RowButtonLinkListLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']
  locales?: Array<Locale>
}

export type RowButtonLinkListPagesArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  skip?: Maybe<Scalars['Int']>
}

export type RowButtonLinkListPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowButtonLinkListUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowButtonLinkListConnectInput = {
  /**
   * Allow to specify document position in list of connected documents, will default to appending at
   * end of list
   */
  position?: Maybe<ConnectPositionInput>
  /** Document to connect */
  where: RowButtonLinkListWhereUniqueInput
}

/** A connection to a list of items. */
export type RowButtonLinkListConnection = {
  __typename?: 'RowButtonLinkListConnection'
  aggregate: Aggregate
  /** A list of edges. */
  edges: Array<RowButtonLinkListEdge>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

export type RowButtonLinkListCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  links?: Maybe<PageCreateManyInlineInput>
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowButtonLinkListCreateLocalizationsInput>
  pages?: Maybe<PageCreateManyInlineInput>
  /** Title input for default locale (en) */
  title: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowButtonLinkListCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  title: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowButtonLinkListCreateLocalizationInput = {
  /** Localization input */
  data: RowButtonLinkListCreateLocalizationDataInput
  locale: Locale
}

export type RowButtonLinkListCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowButtonLinkListCreateLocalizationInput>>
}

export type RowButtonLinkListCreateManyInlineInput = {
  /** Connect multiple existing RowButtonLinkList documents */
  connect?: Maybe<Array<RowButtonLinkListWhereUniqueInput>>
  /** Create and connect multiple existing RowButtonLinkList documents */
  create?: Maybe<Array<RowButtonLinkListCreateInput>>
}

export type RowButtonLinkListCreateOneInlineInput = {
  /** Connect one existing RowButtonLinkList document */
  connect?: Maybe<RowButtonLinkListWhereUniqueInput>
  /** Create and connect one RowButtonLinkList document */
  create?: Maybe<RowButtonLinkListCreateInput>
}

/** An edge in a connection. */
export type RowButtonLinkListEdge = {
  __typename?: 'RowButtonLinkListEdge'
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
  /** The item at the end of the edge. */
  node: RowButtonLinkList
}

/** Identifies documents */
export type RowButtonLinkListManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowButtonLinkListWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowButtonLinkListWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowButtonLinkListWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  links_every?: Maybe<PageWhereInput>
  links_none?: Maybe<PageWhereInput>
  links_some?: Maybe<PageWhereInput>
  pages_every?: Maybe<PageWhereInput>
  pages_none?: Maybe<PageWhereInput>
  pages_some?: Maybe<PageWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

export type RowButtonLinkListOrderByInput =
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'

export type RowButtonLinkListUpdateInput = {
  identity?: Maybe<Scalars['String']>
  links?: Maybe<PageUpdateManyInlineInput>
  /** Manage document localizations */
  localizations?: Maybe<RowButtonLinkListUpdateLocalizationsInput>
  pages?: Maybe<PageUpdateManyInlineInput>
  /** Title input for default locale (en) */
  title?: Maybe<Scalars['String']>
}

export type RowButtonLinkListUpdateLocalizationDataInput = {
  title?: Maybe<Scalars['String']>
}

export type RowButtonLinkListUpdateLocalizationInput = {
  data: RowButtonLinkListUpdateLocalizationDataInput
  locale: Locale
}

export type RowButtonLinkListUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowButtonLinkListCreateLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
  /** Localizations to update */
  update?: Maybe<Array<RowButtonLinkListUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowButtonLinkListUpsertLocalizationInput>>
}

export type RowButtonLinkListUpdateManyInlineInput = {
  /** Connect multiple existing RowButtonLinkList documents */
  connect?: Maybe<Array<RowButtonLinkListConnectInput>>
  /** Create and connect multiple RowButtonLinkList documents */
  create?: Maybe<Array<RowButtonLinkListCreateInput>>
  /** Delete multiple RowButtonLinkList documents */
  delete?: Maybe<Array<RowButtonLinkListWhereUniqueInput>>
  /** Disconnect multiple RowButtonLinkList documents */
  disconnect?: Maybe<Array<RowButtonLinkListWhereUniqueInput>>
  /** Override currently-connected documents with multiple existing RowButtonLinkList documents */
  set?: Maybe<Array<RowButtonLinkListWhereUniqueInput>>
  /** Update multiple RowButtonLinkList documents */
  update?: Maybe<Array<RowButtonLinkListUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowButtonLinkList documents */
  upsert?: Maybe<Array<RowButtonLinkListUpsertWithNestedWhereUniqueInput>>
}

export type RowButtonLinkListUpdateManyInput = {
  /** Optional updates to localizations */
  localizations?: Maybe<RowButtonLinkListUpdateManyLocalizationsInput>
  /** Title input for default locale (en) */
  title?: Maybe<Scalars['String']>
}

export type RowButtonLinkListUpdateManyLocalizationDataInput = {
  title?: Maybe<Scalars['String']>
}

export type RowButtonLinkListUpdateManyLocalizationInput = {
  data: RowButtonLinkListUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowButtonLinkListUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowButtonLinkListUpdateManyLocalizationInput>>
}

export type RowButtonLinkListUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: RowButtonLinkListUpdateManyInput
  /** Document search */
  where: RowButtonLinkListWhereInput
}

export type RowButtonLinkListUpdateOneInlineInput = {
  /** Connect existing RowButtonLinkList document */
  connect?: Maybe<RowButtonLinkListWhereUniqueInput>
  /** Create and connect one RowButtonLinkList document */
  create?: Maybe<RowButtonLinkListCreateInput>
  /** Delete currently connected RowButtonLinkList document */
  delete?: Maybe<Scalars['Boolean']>
  /** Disconnect currently connected RowButtonLinkList document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Update single RowButtonLinkList document */
  update?: Maybe<RowButtonLinkListUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowButtonLinkList document */
  upsert?: Maybe<RowButtonLinkListUpsertWithNestedWhereUniqueInput>
}

export type RowButtonLinkListUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: RowButtonLinkListUpdateInput
  /** Unique document search */
  where: RowButtonLinkListWhereUniqueInput
}

export type RowButtonLinkListUpsertInput = {
  /** Create document if it didn't exist */
  create: RowButtonLinkListCreateInput
  /** Update document if it exists */
  update: RowButtonLinkListUpdateInput
}

export type RowButtonLinkListUpsertLocalizationInput = {
  create: RowButtonLinkListCreateLocalizationDataInput
  locale: Locale
  update: RowButtonLinkListUpdateLocalizationDataInput
}

export type RowButtonLinkListUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: RowButtonLinkListUpsertInput
  /** Unique document search */
  where: RowButtonLinkListWhereUniqueInput
}

/** Identifies documents */
export type RowButtonLinkListWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowButtonLinkListWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowButtonLinkListWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowButtonLinkListWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  links_every?: Maybe<PageWhereInput>
  links_none?: Maybe<PageWhereInput>
  links_some?: Maybe<PageWhereInput>
  pages_every?: Maybe<PageWhereInput>
  pages_none?: Maybe<PageWhereInput>
  pages_some?: Maybe<PageWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  title?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  title_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  title_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  title_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  title_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  title_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  title_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  title_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  title_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  title_starts_with?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

/** References RowButtonLinkList record uniquely */
export type RowButtonLinkListWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type RowColumnOne = Node & {
  __typename?: 'RowColumnOne'
  colOne: RichText
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** Get the document in other stages */
  documentInStages: Array<RowColumnOne>
  /** List of RowColumnOne versions */
  history: Array<Version>
  /** The unique identifier */
  id: Scalars['ID']
  identity: Scalars['String']
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowColumnOne>
  pages: Array<Page>
  productpages: Array<Product>
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  /** System stage field */
  stage: Stage
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
}

export type RowColumnOneCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowColumnOneDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
  stages?: Array<Stage>
}

export type RowColumnOneHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowColumnOneLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']
  locales?: Array<Locale>
}

export type RowColumnOnePagesArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  skip?: Maybe<Scalars['Int']>
}

export type RowColumnOneProductpagesArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  skip?: Maybe<Scalars['Int']>
}

export type RowColumnOnePublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowColumnOneUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowColumnOneConnectInput = {
  /**
   * Allow to specify document position in list of connected documents, will default to appending at
   * end of list
   */
  position?: Maybe<ConnectPositionInput>
  /** Document to connect */
  where: RowColumnOneWhereUniqueInput
}

/** A connection to a list of items. */
export type RowColumnOneConnection = {
  __typename?: 'RowColumnOneConnection'
  aggregate: Aggregate
  /** A list of edges. */
  edges: Array<RowColumnOneEdge>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

export type RowColumnOneCreateInput = {
  /** ColOne input for default locale (en) */
  colOne: Scalars['RichTextAST']
  createdAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowColumnOneCreateLocalizationsInput>
  pages?: Maybe<PageCreateManyInlineInput>
  productpages?: Maybe<ProductCreateManyInlineInput>
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowColumnOneCreateLocalizationDataInput = {
  colOne: Scalars['RichTextAST']
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowColumnOneCreateLocalizationInput = {
  /** Localization input */
  data: RowColumnOneCreateLocalizationDataInput
  locale: Locale
}

export type RowColumnOneCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowColumnOneCreateLocalizationInput>>
}

export type RowColumnOneCreateManyInlineInput = {
  /** Connect multiple existing RowColumnOne documents */
  connect?: Maybe<Array<RowColumnOneWhereUniqueInput>>
  /** Create and connect multiple existing RowColumnOne documents */
  create?: Maybe<Array<RowColumnOneCreateInput>>
}

export type RowColumnOneCreateOneInlineInput = {
  /** Connect one existing RowColumnOne document */
  connect?: Maybe<RowColumnOneWhereUniqueInput>
  /** Create and connect one RowColumnOne document */
  create?: Maybe<RowColumnOneCreateInput>
}

/** An edge in a connection. */
export type RowColumnOneEdge = {
  __typename?: 'RowColumnOneEdge'
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
  /** The item at the end of the edge. */
  node: RowColumnOne
}

/** Identifies documents */
export type RowColumnOneManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowColumnOneWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowColumnOneWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowColumnOneWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  pages_every?: Maybe<PageWhereInput>
  pages_none?: Maybe<PageWhereInput>
  pages_some?: Maybe<PageWhereInput>
  productpages_every?: Maybe<ProductWhereInput>
  productpages_none?: Maybe<ProductWhereInput>
  productpages_some?: Maybe<ProductWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

export type RowColumnOneOrderByInput =
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'

export type RowColumnOneUpdateInput = {
  /** ColOne input for default locale (en) */
  colOne?: Maybe<Scalars['RichTextAST']>
  identity?: Maybe<Scalars['String']>
  /** Manage document localizations */
  localizations?: Maybe<RowColumnOneUpdateLocalizationsInput>
  pages?: Maybe<PageUpdateManyInlineInput>
  productpages?: Maybe<ProductUpdateManyInlineInput>
}

export type RowColumnOneUpdateLocalizationDataInput = {
  colOne?: Maybe<Scalars['RichTextAST']>
}

export type RowColumnOneUpdateLocalizationInput = {
  data: RowColumnOneUpdateLocalizationDataInput
  locale: Locale
}

export type RowColumnOneUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowColumnOneCreateLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
  /** Localizations to update */
  update?: Maybe<Array<RowColumnOneUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowColumnOneUpsertLocalizationInput>>
}

export type RowColumnOneUpdateManyInlineInput = {
  /** Connect multiple existing RowColumnOne documents */
  connect?: Maybe<Array<RowColumnOneConnectInput>>
  /** Create and connect multiple RowColumnOne documents */
  create?: Maybe<Array<RowColumnOneCreateInput>>
  /** Delete multiple RowColumnOne documents */
  delete?: Maybe<Array<RowColumnOneWhereUniqueInput>>
  /** Disconnect multiple RowColumnOne documents */
  disconnect?: Maybe<Array<RowColumnOneWhereUniqueInput>>
  /** Override currently-connected documents with multiple existing RowColumnOne documents */
  set?: Maybe<Array<RowColumnOneWhereUniqueInput>>
  /** Update multiple RowColumnOne documents */
  update?: Maybe<Array<RowColumnOneUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowColumnOne documents */
  upsert?: Maybe<Array<RowColumnOneUpsertWithNestedWhereUniqueInput>>
}

export type RowColumnOneUpdateManyInput = {
  /** ColOne input for default locale (en) */
  colOne?: Maybe<Scalars['RichTextAST']>
  /** Optional updates to localizations */
  localizations?: Maybe<RowColumnOneUpdateManyLocalizationsInput>
}

export type RowColumnOneUpdateManyLocalizationDataInput = {
  colOne?: Maybe<Scalars['RichTextAST']>
}

export type RowColumnOneUpdateManyLocalizationInput = {
  data: RowColumnOneUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowColumnOneUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowColumnOneUpdateManyLocalizationInput>>
}

export type RowColumnOneUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: RowColumnOneUpdateManyInput
  /** Document search */
  where: RowColumnOneWhereInput
}

export type RowColumnOneUpdateOneInlineInput = {
  /** Connect existing RowColumnOne document */
  connect?: Maybe<RowColumnOneWhereUniqueInput>
  /** Create and connect one RowColumnOne document */
  create?: Maybe<RowColumnOneCreateInput>
  /** Delete currently connected RowColumnOne document */
  delete?: Maybe<Scalars['Boolean']>
  /** Disconnect currently connected RowColumnOne document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Update single RowColumnOne document */
  update?: Maybe<RowColumnOneUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowColumnOne document */
  upsert?: Maybe<RowColumnOneUpsertWithNestedWhereUniqueInput>
}

export type RowColumnOneUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: RowColumnOneUpdateInput
  /** Unique document search */
  where: RowColumnOneWhereUniqueInput
}

export type RowColumnOneUpsertInput = {
  /** Create document if it didn't exist */
  create: RowColumnOneCreateInput
  /** Update document if it exists */
  update: RowColumnOneUpdateInput
}

export type RowColumnOneUpsertLocalizationInput = {
  create: RowColumnOneCreateLocalizationDataInput
  locale: Locale
  update: RowColumnOneUpdateLocalizationDataInput
}

export type RowColumnOneUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: RowColumnOneUpsertInput
  /** Unique document search */
  where: RowColumnOneWhereUniqueInput
}

/** Identifies documents */
export type RowColumnOneWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowColumnOneWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowColumnOneWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowColumnOneWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  pages_every?: Maybe<PageWhereInput>
  pages_none?: Maybe<PageWhereInput>
  pages_some?: Maybe<PageWhereInput>
  productpages_every?: Maybe<ProductWhereInput>
  productpages_none?: Maybe<ProductWhereInput>
  productpages_some?: Maybe<ProductWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

/** References RowColumnOne record uniquely */
export type RowColumnOneWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type RowColumnThree = Node & {
  __typename?: 'RowColumnThree'
  colOne: RichText
  colThree: RichText
  colTwo: RichText
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** Get the document in other stages */
  documentInStages: Array<RowColumnThree>
  /** List of RowColumnThree versions */
  history: Array<Version>
  /** The unique identifier */
  id: Scalars['ID']
  identity: Scalars['String']
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowColumnThree>
  pages: Array<Page>
  productpages: Array<Product>
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  /** System stage field */
  stage: Stage
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
}

export type RowColumnThreeCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowColumnThreeDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
  stages?: Array<Stage>
}

export type RowColumnThreeHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowColumnThreeLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']
  locales?: Array<Locale>
}

export type RowColumnThreePagesArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  skip?: Maybe<Scalars['Int']>
}

export type RowColumnThreeProductpagesArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  skip?: Maybe<Scalars['Int']>
}

export type RowColumnThreePublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowColumnThreeUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowColumnThreeConnectInput = {
  /**
   * Allow to specify document position in list of connected documents, will default to appending at
   * end of list
   */
  position?: Maybe<ConnectPositionInput>
  /** Document to connect */
  where: RowColumnThreeWhereUniqueInput
}

/** A connection to a list of items. */
export type RowColumnThreeConnection = {
  __typename?: 'RowColumnThreeConnection'
  aggregate: Aggregate
  /** A list of edges. */
  edges: Array<RowColumnThreeEdge>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

export type RowColumnThreeCreateInput = {
  /** ColOne input for default locale (en) */
  colOne: Scalars['RichTextAST']
  /** ColThree input for default locale (en) */
  colThree: Scalars['RichTextAST']
  /** ColTwo input for default locale (en) */
  colTwo: Scalars['RichTextAST']
  createdAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowColumnThreeCreateLocalizationsInput>
  pages?: Maybe<PageCreateManyInlineInput>
  productpages?: Maybe<ProductCreateManyInlineInput>
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowColumnThreeCreateLocalizationDataInput = {
  colOne: Scalars['RichTextAST']
  colThree: Scalars['RichTextAST']
  colTwo: Scalars['RichTextAST']
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowColumnThreeCreateLocalizationInput = {
  /** Localization input */
  data: RowColumnThreeCreateLocalizationDataInput
  locale: Locale
}

export type RowColumnThreeCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowColumnThreeCreateLocalizationInput>>
}

export type RowColumnThreeCreateManyInlineInput = {
  /** Connect multiple existing RowColumnThree documents */
  connect?: Maybe<Array<RowColumnThreeWhereUniqueInput>>
  /** Create and connect multiple existing RowColumnThree documents */
  create?: Maybe<Array<RowColumnThreeCreateInput>>
}

export type RowColumnThreeCreateOneInlineInput = {
  /** Connect one existing RowColumnThree document */
  connect?: Maybe<RowColumnThreeWhereUniqueInput>
  /** Create and connect one RowColumnThree document */
  create?: Maybe<RowColumnThreeCreateInput>
}

/** An edge in a connection. */
export type RowColumnThreeEdge = {
  __typename?: 'RowColumnThreeEdge'
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
  /** The item at the end of the edge. */
  node: RowColumnThree
}

/** Identifies documents */
export type RowColumnThreeManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowColumnThreeWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowColumnThreeWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowColumnThreeWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  pages_every?: Maybe<PageWhereInput>
  pages_none?: Maybe<PageWhereInput>
  pages_some?: Maybe<PageWhereInput>
  productpages_every?: Maybe<ProductWhereInput>
  productpages_none?: Maybe<ProductWhereInput>
  productpages_some?: Maybe<ProductWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

export type RowColumnThreeOrderByInput =
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'

export type RowColumnThreeUpdateInput = {
  /** ColOne input for default locale (en) */
  colOne?: Maybe<Scalars['RichTextAST']>
  /** ColThree input for default locale (en) */
  colThree?: Maybe<Scalars['RichTextAST']>
  /** ColTwo input for default locale (en) */
  colTwo?: Maybe<Scalars['RichTextAST']>
  identity?: Maybe<Scalars['String']>
  /** Manage document localizations */
  localizations?: Maybe<RowColumnThreeUpdateLocalizationsInput>
  pages?: Maybe<PageUpdateManyInlineInput>
  productpages?: Maybe<ProductUpdateManyInlineInput>
}

export type RowColumnThreeUpdateLocalizationDataInput = {
  colOne?: Maybe<Scalars['RichTextAST']>
  colThree?: Maybe<Scalars['RichTextAST']>
  colTwo?: Maybe<Scalars['RichTextAST']>
}

export type RowColumnThreeUpdateLocalizationInput = {
  data: RowColumnThreeUpdateLocalizationDataInput
  locale: Locale
}

export type RowColumnThreeUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowColumnThreeCreateLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
  /** Localizations to update */
  update?: Maybe<Array<RowColumnThreeUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowColumnThreeUpsertLocalizationInput>>
}

export type RowColumnThreeUpdateManyInlineInput = {
  /** Connect multiple existing RowColumnThree documents */
  connect?: Maybe<Array<RowColumnThreeConnectInput>>
  /** Create and connect multiple RowColumnThree documents */
  create?: Maybe<Array<RowColumnThreeCreateInput>>
  /** Delete multiple RowColumnThree documents */
  delete?: Maybe<Array<RowColumnThreeWhereUniqueInput>>
  /** Disconnect multiple RowColumnThree documents */
  disconnect?: Maybe<Array<RowColumnThreeWhereUniqueInput>>
  /** Override currently-connected documents with multiple existing RowColumnThree documents */
  set?: Maybe<Array<RowColumnThreeWhereUniqueInput>>
  /** Update multiple RowColumnThree documents */
  update?: Maybe<Array<RowColumnThreeUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowColumnThree documents */
  upsert?: Maybe<Array<RowColumnThreeUpsertWithNestedWhereUniqueInput>>
}

export type RowColumnThreeUpdateManyInput = {
  /** ColOne input for default locale (en) */
  colOne?: Maybe<Scalars['RichTextAST']>
  /** ColThree input for default locale (en) */
  colThree?: Maybe<Scalars['RichTextAST']>
  /** ColTwo input for default locale (en) */
  colTwo?: Maybe<Scalars['RichTextAST']>
  /** Optional updates to localizations */
  localizations?: Maybe<RowColumnThreeUpdateManyLocalizationsInput>
}

export type RowColumnThreeUpdateManyLocalizationDataInput = {
  colOne?: Maybe<Scalars['RichTextAST']>
  colThree?: Maybe<Scalars['RichTextAST']>
  colTwo?: Maybe<Scalars['RichTextAST']>
}

export type RowColumnThreeUpdateManyLocalizationInput = {
  data: RowColumnThreeUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowColumnThreeUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowColumnThreeUpdateManyLocalizationInput>>
}

export type RowColumnThreeUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: RowColumnThreeUpdateManyInput
  /** Document search */
  where: RowColumnThreeWhereInput
}

export type RowColumnThreeUpdateOneInlineInput = {
  /** Connect existing RowColumnThree document */
  connect?: Maybe<RowColumnThreeWhereUniqueInput>
  /** Create and connect one RowColumnThree document */
  create?: Maybe<RowColumnThreeCreateInput>
  /** Delete currently connected RowColumnThree document */
  delete?: Maybe<Scalars['Boolean']>
  /** Disconnect currently connected RowColumnThree document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Update single RowColumnThree document */
  update?: Maybe<RowColumnThreeUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowColumnThree document */
  upsert?: Maybe<RowColumnThreeUpsertWithNestedWhereUniqueInput>
}

export type RowColumnThreeUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: RowColumnThreeUpdateInput
  /** Unique document search */
  where: RowColumnThreeWhereUniqueInput
}

export type RowColumnThreeUpsertInput = {
  /** Create document if it didn't exist */
  create: RowColumnThreeCreateInput
  /** Update document if it exists */
  update: RowColumnThreeUpdateInput
}

export type RowColumnThreeUpsertLocalizationInput = {
  create: RowColumnThreeCreateLocalizationDataInput
  locale: Locale
  update: RowColumnThreeUpdateLocalizationDataInput
}

export type RowColumnThreeUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: RowColumnThreeUpsertInput
  /** Unique document search */
  where: RowColumnThreeWhereUniqueInput
}

/** Identifies documents */
export type RowColumnThreeWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowColumnThreeWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowColumnThreeWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowColumnThreeWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  pages_every?: Maybe<PageWhereInput>
  pages_none?: Maybe<PageWhereInput>
  pages_some?: Maybe<PageWhereInput>
  productpages_every?: Maybe<ProductWhereInput>
  productpages_none?: Maybe<ProductWhereInput>
  productpages_some?: Maybe<ProductWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

/** References RowColumnThree record uniquely */
export type RowColumnThreeWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type RowColumnTwo = Node & {
  __typename?: 'RowColumnTwo'
  colOne: RichText
  colTwo: RichText
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** Get the document in other stages */
  documentInStages: Array<RowColumnTwo>
  /** List of RowColumnTwo versions */
  history: Array<Version>
  /** The unique identifier */
  id: Scalars['ID']
  identity: Scalars['String']
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowColumnTwo>
  pages: Array<Page>
  productpages: Array<Product>
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  /** System stage field */
  stage: Stage
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
}

export type RowColumnTwoCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowColumnTwoDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
  stages?: Array<Stage>
}

export type RowColumnTwoHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowColumnTwoLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']
  locales?: Array<Locale>
}

export type RowColumnTwoPagesArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  skip?: Maybe<Scalars['Int']>
}

export type RowColumnTwoProductpagesArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  skip?: Maybe<Scalars['Int']>
}

export type RowColumnTwoPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowColumnTwoUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowColumnTwoConnectInput = {
  /**
   * Allow to specify document position in list of connected documents, will default to appending at
   * end of list
   */
  position?: Maybe<ConnectPositionInput>
  /** Document to connect */
  where: RowColumnTwoWhereUniqueInput
}

/** A connection to a list of items. */
export type RowColumnTwoConnection = {
  __typename?: 'RowColumnTwoConnection'
  aggregate: Aggregate
  /** A list of edges. */
  edges: Array<RowColumnTwoEdge>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

export type RowColumnTwoCreateInput = {
  /** ColOne input for default locale (en) */
  colOne: Scalars['RichTextAST']
  /** ColTwo input for default locale (en) */
  colTwo: Scalars['RichTextAST']
  createdAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowColumnTwoCreateLocalizationsInput>
  pages?: Maybe<PageCreateManyInlineInput>
  productpages?: Maybe<ProductCreateManyInlineInput>
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowColumnTwoCreateLocalizationDataInput = {
  colOne: Scalars['RichTextAST']
  colTwo: Scalars['RichTextAST']
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowColumnTwoCreateLocalizationInput = {
  /** Localization input */
  data: RowColumnTwoCreateLocalizationDataInput
  locale: Locale
}

export type RowColumnTwoCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowColumnTwoCreateLocalizationInput>>
}

export type RowColumnTwoCreateManyInlineInput = {
  /** Connect multiple existing RowColumnTwo documents */
  connect?: Maybe<Array<RowColumnTwoWhereUniqueInput>>
  /** Create and connect multiple existing RowColumnTwo documents */
  create?: Maybe<Array<RowColumnTwoCreateInput>>
}

export type RowColumnTwoCreateOneInlineInput = {
  /** Connect one existing RowColumnTwo document */
  connect?: Maybe<RowColumnTwoWhereUniqueInput>
  /** Create and connect one RowColumnTwo document */
  create?: Maybe<RowColumnTwoCreateInput>
}

/** An edge in a connection. */
export type RowColumnTwoEdge = {
  __typename?: 'RowColumnTwoEdge'
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
  /** The item at the end of the edge. */
  node: RowColumnTwo
}

/** Identifies documents */
export type RowColumnTwoManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowColumnTwoWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowColumnTwoWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowColumnTwoWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  pages_every?: Maybe<PageWhereInput>
  pages_none?: Maybe<PageWhereInput>
  pages_some?: Maybe<PageWhereInput>
  productpages_every?: Maybe<ProductWhereInput>
  productpages_none?: Maybe<ProductWhereInput>
  productpages_some?: Maybe<ProductWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

export type RowColumnTwoOrderByInput =
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'

export type RowColumnTwoUpdateInput = {
  /** ColOne input for default locale (en) */
  colOne?: Maybe<Scalars['RichTextAST']>
  /** ColTwo input for default locale (en) */
  colTwo?: Maybe<Scalars['RichTextAST']>
  identity?: Maybe<Scalars['String']>
  /** Manage document localizations */
  localizations?: Maybe<RowColumnTwoUpdateLocalizationsInput>
  pages?: Maybe<PageUpdateManyInlineInput>
  productpages?: Maybe<ProductUpdateManyInlineInput>
}

export type RowColumnTwoUpdateLocalizationDataInput = {
  colOne?: Maybe<Scalars['RichTextAST']>
  colTwo?: Maybe<Scalars['RichTextAST']>
}

export type RowColumnTwoUpdateLocalizationInput = {
  data: RowColumnTwoUpdateLocalizationDataInput
  locale: Locale
}

export type RowColumnTwoUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowColumnTwoCreateLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
  /** Localizations to update */
  update?: Maybe<Array<RowColumnTwoUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowColumnTwoUpsertLocalizationInput>>
}

export type RowColumnTwoUpdateManyInlineInput = {
  /** Connect multiple existing RowColumnTwo documents */
  connect?: Maybe<Array<RowColumnTwoConnectInput>>
  /** Create and connect multiple RowColumnTwo documents */
  create?: Maybe<Array<RowColumnTwoCreateInput>>
  /** Delete multiple RowColumnTwo documents */
  delete?: Maybe<Array<RowColumnTwoWhereUniqueInput>>
  /** Disconnect multiple RowColumnTwo documents */
  disconnect?: Maybe<Array<RowColumnTwoWhereUniqueInput>>
  /** Override currently-connected documents with multiple existing RowColumnTwo documents */
  set?: Maybe<Array<RowColumnTwoWhereUniqueInput>>
  /** Update multiple RowColumnTwo documents */
  update?: Maybe<Array<RowColumnTwoUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowColumnTwo documents */
  upsert?: Maybe<Array<RowColumnTwoUpsertWithNestedWhereUniqueInput>>
}

export type RowColumnTwoUpdateManyInput = {
  /** ColOne input for default locale (en) */
  colOne?: Maybe<Scalars['RichTextAST']>
  /** ColTwo input for default locale (en) */
  colTwo?: Maybe<Scalars['RichTextAST']>
  /** Optional updates to localizations */
  localizations?: Maybe<RowColumnTwoUpdateManyLocalizationsInput>
}

export type RowColumnTwoUpdateManyLocalizationDataInput = {
  colOne?: Maybe<Scalars['RichTextAST']>
  colTwo?: Maybe<Scalars['RichTextAST']>
}

export type RowColumnTwoUpdateManyLocalizationInput = {
  data: RowColumnTwoUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowColumnTwoUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowColumnTwoUpdateManyLocalizationInput>>
}

export type RowColumnTwoUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: RowColumnTwoUpdateManyInput
  /** Document search */
  where: RowColumnTwoWhereInput
}

export type RowColumnTwoUpdateOneInlineInput = {
  /** Connect existing RowColumnTwo document */
  connect?: Maybe<RowColumnTwoWhereUniqueInput>
  /** Create and connect one RowColumnTwo document */
  create?: Maybe<RowColumnTwoCreateInput>
  /** Delete currently connected RowColumnTwo document */
  delete?: Maybe<Scalars['Boolean']>
  /** Disconnect currently connected RowColumnTwo document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Update single RowColumnTwo document */
  update?: Maybe<RowColumnTwoUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowColumnTwo document */
  upsert?: Maybe<RowColumnTwoUpsertWithNestedWhereUniqueInput>
}

export type RowColumnTwoUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: RowColumnTwoUpdateInput
  /** Unique document search */
  where: RowColumnTwoWhereUniqueInput
}

export type RowColumnTwoUpsertInput = {
  /** Create document if it didn't exist */
  create: RowColumnTwoCreateInput
  /** Update document if it exists */
  update: RowColumnTwoUpdateInput
}

export type RowColumnTwoUpsertLocalizationInput = {
  create: RowColumnTwoCreateLocalizationDataInput
  locale: Locale
  update: RowColumnTwoUpdateLocalizationDataInput
}

export type RowColumnTwoUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: RowColumnTwoUpsertInput
  /** Unique document search */
  where: RowColumnTwoWhereUniqueInput
}

/** Identifies documents */
export type RowColumnTwoWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowColumnTwoWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowColumnTwoWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowColumnTwoWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  pages_every?: Maybe<PageWhereInput>
  pages_none?: Maybe<PageWhereInput>
  pages_some?: Maybe<PageWhereInput>
  productpages_every?: Maybe<ProductWhereInput>
  productpages_none?: Maybe<ProductWhereInput>
  productpages_some?: Maybe<ProductWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

/** References RowColumnTwo record uniquely */
export type RowColumnTwoWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type RowContentLinks = Node & {
  __typename?: 'RowContentLinks'
  contentLinks: Array<PageLink>
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** Get the document in other stages */
  documentInStages: Array<RowContentLinks>
  /** List of RowContentLinks versions */
  history: Array<Version>
  /** The unique identifier */
  id: Scalars['ID']
  identity: Scalars['String']
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowContentLinks>
  pages: Array<Page>
  productpages: Array<Product>
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  /** System stage field */
  stage: Stage
  title: Scalars['String']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
}

export type RowContentLinksContentLinksArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  orderBy?: Maybe<PageLinkOrderByInput>
  skip?: Maybe<Scalars['Int']>
  where?: Maybe<PageLinkWhereInput>
}

export type RowContentLinksCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowContentLinksDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
  stages?: Array<Stage>
}

export type RowContentLinksHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowContentLinksLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']
  locales?: Array<Locale>
}

export type RowContentLinksPagesArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  skip?: Maybe<Scalars['Int']>
}

export type RowContentLinksProductpagesArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  skip?: Maybe<Scalars['Int']>
}

export type RowContentLinksPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowContentLinksUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowContentLinksConnectInput = {
  /**
   * Allow to specify document position in list of connected documents, will default to appending at
   * end of list
   */
  position?: Maybe<ConnectPositionInput>
  /** Document to connect */
  where: RowContentLinksWhereUniqueInput
}

/** A connection to a list of items. */
export type RowContentLinksConnection = {
  __typename?: 'RowContentLinksConnection'
  aggregate: Aggregate
  /** A list of edges. */
  edges: Array<RowContentLinksEdge>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

export type RowContentLinksCreateInput = {
  contentLinks?: Maybe<PageLinkCreateManyInlineInput>
  createdAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowContentLinksCreateLocalizationsInput>
  pages?: Maybe<PageCreateManyInlineInput>
  productpages?: Maybe<ProductCreateManyInlineInput>
  /** Title input for default locale (en) */
  title: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowContentLinksCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  title: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowContentLinksCreateLocalizationInput = {
  /** Localization input */
  data: RowContentLinksCreateLocalizationDataInput
  locale: Locale
}

export type RowContentLinksCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowContentLinksCreateLocalizationInput>>
}

export type RowContentLinksCreateManyInlineInput = {
  /** Connect multiple existing RowContentLinks documents */
  connect?: Maybe<Array<RowContentLinksWhereUniqueInput>>
  /** Create and connect multiple existing RowContentLinks documents */
  create?: Maybe<Array<RowContentLinksCreateInput>>
}

export type RowContentLinksCreateOneInlineInput = {
  /** Connect one existing RowContentLinks document */
  connect?: Maybe<RowContentLinksWhereUniqueInput>
  /** Create and connect one RowContentLinks document */
  create?: Maybe<RowContentLinksCreateInput>
}

/** An edge in a connection. */
export type RowContentLinksEdge = {
  __typename?: 'RowContentLinksEdge'
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
  /** The item at the end of the edge. */
  node: RowContentLinks
}

/** Identifies documents */
export type RowContentLinksManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowContentLinksWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowContentLinksWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowContentLinksWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  contentLinks_every?: Maybe<PageLinkWhereInput>
  contentLinks_none?: Maybe<PageLinkWhereInput>
  contentLinks_some?: Maybe<PageLinkWhereInput>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  pages_every?: Maybe<PageWhereInput>
  pages_none?: Maybe<PageWhereInput>
  pages_some?: Maybe<PageWhereInput>
  productpages_every?: Maybe<ProductWhereInput>
  productpages_none?: Maybe<ProductWhereInput>
  productpages_some?: Maybe<ProductWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

export type RowContentLinksOrderByInput =
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'

export type RowContentLinksUpdateInput = {
  contentLinks?: Maybe<PageLinkUpdateManyInlineInput>
  identity?: Maybe<Scalars['String']>
  /** Manage document localizations */
  localizations?: Maybe<RowContentLinksUpdateLocalizationsInput>
  pages?: Maybe<PageUpdateManyInlineInput>
  productpages?: Maybe<ProductUpdateManyInlineInput>
  /** Title input for default locale (en) */
  title?: Maybe<Scalars['String']>
}

export type RowContentLinksUpdateLocalizationDataInput = {
  title?: Maybe<Scalars['String']>
}

export type RowContentLinksUpdateLocalizationInput = {
  data: RowContentLinksUpdateLocalizationDataInput
  locale: Locale
}

export type RowContentLinksUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowContentLinksCreateLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
  /** Localizations to update */
  update?: Maybe<Array<RowContentLinksUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowContentLinksUpsertLocalizationInput>>
}

export type RowContentLinksUpdateManyInlineInput = {
  /** Connect multiple existing RowContentLinks documents */
  connect?: Maybe<Array<RowContentLinksConnectInput>>
  /** Create and connect multiple RowContentLinks documents */
  create?: Maybe<Array<RowContentLinksCreateInput>>
  /** Delete multiple RowContentLinks documents */
  delete?: Maybe<Array<RowContentLinksWhereUniqueInput>>
  /** Disconnect multiple RowContentLinks documents */
  disconnect?: Maybe<Array<RowContentLinksWhereUniqueInput>>
  /** Override currently-connected documents with multiple existing RowContentLinks documents */
  set?: Maybe<Array<RowContentLinksWhereUniqueInput>>
  /** Update multiple RowContentLinks documents */
  update?: Maybe<Array<RowContentLinksUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowContentLinks documents */
  upsert?: Maybe<Array<RowContentLinksUpsertWithNestedWhereUniqueInput>>
}

export type RowContentLinksUpdateManyInput = {
  /** Optional updates to localizations */
  localizations?: Maybe<RowContentLinksUpdateManyLocalizationsInput>
  /** Title input for default locale (en) */
  title?: Maybe<Scalars['String']>
}

export type RowContentLinksUpdateManyLocalizationDataInput = {
  title?: Maybe<Scalars['String']>
}

export type RowContentLinksUpdateManyLocalizationInput = {
  data: RowContentLinksUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowContentLinksUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowContentLinksUpdateManyLocalizationInput>>
}

export type RowContentLinksUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: RowContentLinksUpdateManyInput
  /** Document search */
  where: RowContentLinksWhereInput
}

export type RowContentLinksUpdateOneInlineInput = {
  /** Connect existing RowContentLinks document */
  connect?: Maybe<RowContentLinksWhereUniqueInput>
  /** Create and connect one RowContentLinks document */
  create?: Maybe<RowContentLinksCreateInput>
  /** Delete currently connected RowContentLinks document */
  delete?: Maybe<Scalars['Boolean']>
  /** Disconnect currently connected RowContentLinks document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Update single RowContentLinks document */
  update?: Maybe<RowContentLinksUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowContentLinks document */
  upsert?: Maybe<RowContentLinksUpsertWithNestedWhereUniqueInput>
}

export type RowContentLinksUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: RowContentLinksUpdateInput
  /** Unique document search */
  where: RowContentLinksWhereUniqueInput
}

export type RowContentLinksUpsertInput = {
  /** Create document if it didn't exist */
  create: RowContentLinksCreateInput
  /** Update document if it exists */
  update: RowContentLinksUpdateInput
}

export type RowContentLinksUpsertLocalizationInput = {
  create: RowContentLinksCreateLocalizationDataInput
  locale: Locale
  update: RowContentLinksUpdateLocalizationDataInput
}

export type RowContentLinksUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: RowContentLinksUpsertInput
  /** Unique document search */
  where: RowContentLinksWhereUniqueInput
}

/** Identifies documents */
export type RowContentLinksWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowContentLinksWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowContentLinksWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowContentLinksWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  contentLinks_every?: Maybe<PageLinkWhereInput>
  contentLinks_none?: Maybe<PageLinkWhereInput>
  contentLinks_some?: Maybe<PageLinkWhereInput>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  pages_every?: Maybe<PageWhereInput>
  pages_none?: Maybe<PageWhereInput>
  pages_some?: Maybe<PageWhereInput>
  productpages_every?: Maybe<ProductWhereInput>
  productpages_none?: Maybe<ProductWhereInput>
  productpages_some?: Maybe<ProductWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  title?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  title_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  title_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  title_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  title_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  title_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  title_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  title_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  title_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  title_starts_with?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

/** References RowContentLinks record uniquely */
export type RowContentLinksWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type RowHeroBanner = Node & {
  __typename?: 'RowHeroBanner'
  /** Video, landscape */
  asset: Asset
  copy: RichText
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** Get the document in other stages */
  documentInStages: Array<RowHeroBanner>
  /** List of RowHeroBanner versions */
  history: Array<Version>
  /** The unique identifier */
  id: Scalars['ID']
  identity: Scalars['String']
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowHeroBanner>
  pageLinks: Array<PageLink>
  pages: Array<Page>
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  /** System stage field */
  stage: Stage
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
}

export type RowHeroBannerAssetArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowHeroBannerCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowHeroBannerDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
  stages?: Array<Stage>
}

export type RowHeroBannerHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowHeroBannerLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']
  locales?: Array<Locale>
}

export type RowHeroBannerPageLinksArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  orderBy?: Maybe<PageLinkOrderByInput>
  skip?: Maybe<Scalars['Int']>
  where?: Maybe<PageLinkWhereInput>
}

export type RowHeroBannerPagesArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  skip?: Maybe<Scalars['Int']>
}

export type RowHeroBannerPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowHeroBannerUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowHeroBannerConnectInput = {
  /**
   * Allow to specify document position in list of connected documents, will default to appending at
   * end of list
   */
  position?: Maybe<ConnectPositionInput>
  /** Document to connect */
  where: RowHeroBannerWhereUniqueInput
}

/** A connection to a list of items. */
export type RowHeroBannerConnection = {
  __typename?: 'RowHeroBannerConnection'
  aggregate: Aggregate
  /** A list of edges. */
  edges: Array<RowHeroBannerEdge>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

export type RowHeroBannerCreateInput = {
  asset: AssetCreateOneInlineInput
  /** Copy input for default locale (en) */
  copy: Scalars['RichTextAST']
  createdAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowHeroBannerCreateLocalizationsInput>
  pageLinks?: Maybe<PageLinkCreateManyInlineInput>
  pages?: Maybe<PageCreateManyInlineInput>
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowHeroBannerCreateLocalizationDataInput = {
  copy: Scalars['RichTextAST']
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowHeroBannerCreateLocalizationInput = {
  /** Localization input */
  data: RowHeroBannerCreateLocalizationDataInput
  locale: Locale
}

export type RowHeroBannerCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowHeroBannerCreateLocalizationInput>>
}

export type RowHeroBannerCreateManyInlineInput = {
  /** Connect multiple existing RowHeroBanner documents */
  connect?: Maybe<Array<RowHeroBannerWhereUniqueInput>>
  /** Create and connect multiple existing RowHeroBanner documents */
  create?: Maybe<Array<RowHeroBannerCreateInput>>
}

export type RowHeroBannerCreateOneInlineInput = {
  /** Connect one existing RowHeroBanner document */
  connect?: Maybe<RowHeroBannerWhereUniqueInput>
  /** Create and connect one RowHeroBanner document */
  create?: Maybe<RowHeroBannerCreateInput>
}

/** An edge in a connection. */
export type RowHeroBannerEdge = {
  __typename?: 'RowHeroBannerEdge'
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
  /** The item at the end of the edge. */
  node: RowHeroBanner
}

/** Identifies documents */
export type RowHeroBannerManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowHeroBannerWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowHeroBannerWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowHeroBannerWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  asset?: Maybe<AssetWhereInput>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  pageLinks_every?: Maybe<PageLinkWhereInput>
  pageLinks_none?: Maybe<PageLinkWhereInput>
  pageLinks_some?: Maybe<PageLinkWhereInput>
  pages_every?: Maybe<PageWhereInput>
  pages_none?: Maybe<PageWhereInput>
  pages_some?: Maybe<PageWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

export type RowHeroBannerOrderByInput =
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'

export type RowHeroBannerUpdateInput = {
  asset?: Maybe<AssetUpdateOneInlineInput>
  /** Copy input for default locale (en) */
  copy?: Maybe<Scalars['RichTextAST']>
  identity?: Maybe<Scalars['String']>
  /** Manage document localizations */
  localizations?: Maybe<RowHeroBannerUpdateLocalizationsInput>
  pageLinks?: Maybe<PageLinkUpdateManyInlineInput>
  pages?: Maybe<PageUpdateManyInlineInput>
}

export type RowHeroBannerUpdateLocalizationDataInput = {
  copy?: Maybe<Scalars['RichTextAST']>
}

export type RowHeroBannerUpdateLocalizationInput = {
  data: RowHeroBannerUpdateLocalizationDataInput
  locale: Locale
}

export type RowHeroBannerUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowHeroBannerCreateLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
  /** Localizations to update */
  update?: Maybe<Array<RowHeroBannerUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowHeroBannerUpsertLocalizationInput>>
}

export type RowHeroBannerUpdateManyInlineInput = {
  /** Connect multiple existing RowHeroBanner documents */
  connect?: Maybe<Array<RowHeroBannerConnectInput>>
  /** Create and connect multiple RowHeroBanner documents */
  create?: Maybe<Array<RowHeroBannerCreateInput>>
  /** Delete multiple RowHeroBanner documents */
  delete?: Maybe<Array<RowHeroBannerWhereUniqueInput>>
  /** Disconnect multiple RowHeroBanner documents */
  disconnect?: Maybe<Array<RowHeroBannerWhereUniqueInput>>
  /** Override currently-connected documents with multiple existing RowHeroBanner documents */
  set?: Maybe<Array<RowHeroBannerWhereUniqueInput>>
  /** Update multiple RowHeroBanner documents */
  update?: Maybe<Array<RowHeroBannerUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowHeroBanner documents */
  upsert?: Maybe<Array<RowHeroBannerUpsertWithNestedWhereUniqueInput>>
}

export type RowHeroBannerUpdateManyInput = {
  /** Copy input for default locale (en) */
  copy?: Maybe<Scalars['RichTextAST']>
  /** Optional updates to localizations */
  localizations?: Maybe<RowHeroBannerUpdateManyLocalizationsInput>
}

export type RowHeroBannerUpdateManyLocalizationDataInput = {
  copy?: Maybe<Scalars['RichTextAST']>
}

export type RowHeroBannerUpdateManyLocalizationInput = {
  data: RowHeroBannerUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowHeroBannerUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowHeroBannerUpdateManyLocalizationInput>>
}

export type RowHeroBannerUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: RowHeroBannerUpdateManyInput
  /** Document search */
  where: RowHeroBannerWhereInput
}

export type RowHeroBannerUpdateOneInlineInput = {
  /** Connect existing RowHeroBanner document */
  connect?: Maybe<RowHeroBannerWhereUniqueInput>
  /** Create and connect one RowHeroBanner document */
  create?: Maybe<RowHeroBannerCreateInput>
  /** Delete currently connected RowHeroBanner document */
  delete?: Maybe<Scalars['Boolean']>
  /** Disconnect currently connected RowHeroBanner document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Update single RowHeroBanner document */
  update?: Maybe<RowHeroBannerUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowHeroBanner document */
  upsert?: Maybe<RowHeroBannerUpsertWithNestedWhereUniqueInput>
}

export type RowHeroBannerUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: RowHeroBannerUpdateInput
  /** Unique document search */
  where: RowHeroBannerWhereUniqueInput
}

export type RowHeroBannerUpsertInput = {
  /** Create document if it didn't exist */
  create: RowHeroBannerCreateInput
  /** Update document if it exists */
  update: RowHeroBannerUpdateInput
}

export type RowHeroBannerUpsertLocalizationInput = {
  create: RowHeroBannerCreateLocalizationDataInput
  locale: Locale
  update: RowHeroBannerUpdateLocalizationDataInput
}

export type RowHeroBannerUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: RowHeroBannerUpsertInput
  /** Unique document search */
  where: RowHeroBannerWhereUniqueInput
}

/** Identifies documents */
export type RowHeroBannerWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowHeroBannerWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowHeroBannerWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowHeroBannerWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  asset?: Maybe<AssetWhereInput>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  pageLinks_every?: Maybe<PageLinkWhereInput>
  pageLinks_none?: Maybe<PageLinkWhereInput>
  pageLinks_some?: Maybe<PageLinkWhereInput>
  pages_every?: Maybe<PageWhereInput>
  pages_none?: Maybe<PageWhereInput>
  pages_some?: Maybe<PageWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

/** References RowHeroBanner record uniquely */
export type RowHeroBannerWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type RowProductBackstory = Node & {
  __typename?: 'RowProductBackstory'
  /** Image, portrait (8:6) */
  asset: Asset
  copy: RichText
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** Get the document in other stages */
  documentInStages: Array<RowProductBackstory>
  /** List of RowProductBackstory versions */
  history: Array<Version>
  /** The unique identifier */
  id: Scalars['ID']
  identity: Scalars['String']
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowProductBackstory>
  pages: Array<Page>
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  /** System stage field */
  stage: Stage
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
}

export type RowProductBackstoryAssetArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowProductBackstoryCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowProductBackstoryDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
  stages?: Array<Stage>
}

export type RowProductBackstoryHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowProductBackstoryLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']
  locales?: Array<Locale>
}

export type RowProductBackstoryPagesArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  skip?: Maybe<Scalars['Int']>
}

export type RowProductBackstoryPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowProductBackstoryUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowProductBackstoryConnectInput = {
  /**
   * Allow to specify document position in list of connected documents, will default to appending at
   * end of list
   */
  position?: Maybe<ConnectPositionInput>
  /** Document to connect */
  where: RowProductBackstoryWhereUniqueInput
}

/** A connection to a list of items. */
export type RowProductBackstoryConnection = {
  __typename?: 'RowProductBackstoryConnection'
  aggregate: Aggregate
  /** A list of edges. */
  edges: Array<RowProductBackstoryEdge>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

export type RowProductBackstoryCreateInput = {
  asset: AssetCreateOneInlineInput
  /** Copy input for default locale (en) */
  copy: Scalars['RichTextAST']
  createdAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowProductBackstoryCreateLocalizationsInput>
  pages?: Maybe<PageCreateManyInlineInput>
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowProductBackstoryCreateLocalizationDataInput = {
  copy: Scalars['RichTextAST']
  createdAt?: Maybe<Scalars['DateTime']>
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowProductBackstoryCreateLocalizationInput = {
  /** Localization input */
  data: RowProductBackstoryCreateLocalizationDataInput
  locale: Locale
}

export type RowProductBackstoryCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowProductBackstoryCreateLocalizationInput>>
}

export type RowProductBackstoryCreateManyInlineInput = {
  /** Connect multiple existing RowProductBackstory documents */
  connect?: Maybe<Array<RowProductBackstoryWhereUniqueInput>>
  /** Create and connect multiple existing RowProductBackstory documents */
  create?: Maybe<Array<RowProductBackstoryCreateInput>>
}

export type RowProductBackstoryCreateOneInlineInput = {
  /** Connect one existing RowProductBackstory document */
  connect?: Maybe<RowProductBackstoryWhereUniqueInput>
  /** Create and connect one RowProductBackstory document */
  create?: Maybe<RowProductBackstoryCreateInput>
}

/** An edge in a connection. */
export type RowProductBackstoryEdge = {
  __typename?: 'RowProductBackstoryEdge'
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
  /** The item at the end of the edge. */
  node: RowProductBackstory
}

/** Identifies documents */
export type RowProductBackstoryManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowProductBackstoryWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowProductBackstoryWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowProductBackstoryWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  asset?: Maybe<AssetWhereInput>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  pages_every?: Maybe<PageWhereInput>
  pages_none?: Maybe<PageWhereInput>
  pages_some?: Maybe<PageWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

export type RowProductBackstoryOrderByInput =
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'

export type RowProductBackstoryUpdateInput = {
  asset?: Maybe<AssetUpdateOneInlineInput>
  /** Copy input for default locale (en) */
  copy?: Maybe<Scalars['RichTextAST']>
  identity?: Maybe<Scalars['String']>
  /** Manage document localizations */
  localizations?: Maybe<RowProductBackstoryUpdateLocalizationsInput>
  pages?: Maybe<PageUpdateManyInlineInput>
}

export type RowProductBackstoryUpdateLocalizationDataInput = {
  copy?: Maybe<Scalars['RichTextAST']>
}

export type RowProductBackstoryUpdateLocalizationInput = {
  data: RowProductBackstoryUpdateLocalizationDataInput
  locale: Locale
}

export type RowProductBackstoryUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowProductBackstoryCreateLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
  /** Localizations to update */
  update?: Maybe<Array<RowProductBackstoryUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowProductBackstoryUpsertLocalizationInput>>
}

export type RowProductBackstoryUpdateManyInlineInput = {
  /** Connect multiple existing RowProductBackstory documents */
  connect?: Maybe<Array<RowProductBackstoryConnectInput>>
  /** Create and connect multiple RowProductBackstory documents */
  create?: Maybe<Array<RowProductBackstoryCreateInput>>
  /** Delete multiple RowProductBackstory documents */
  delete?: Maybe<Array<RowProductBackstoryWhereUniqueInput>>
  /** Disconnect multiple RowProductBackstory documents */
  disconnect?: Maybe<Array<RowProductBackstoryWhereUniqueInput>>
  /** Override currently-connected documents with multiple existing RowProductBackstory documents */
  set?: Maybe<Array<RowProductBackstoryWhereUniqueInput>>
  /** Update multiple RowProductBackstory documents */
  update?: Maybe<Array<RowProductBackstoryUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowProductBackstory documents */
  upsert?: Maybe<Array<RowProductBackstoryUpsertWithNestedWhereUniqueInput>>
}

export type RowProductBackstoryUpdateManyInput = {
  /** Copy input for default locale (en) */
  copy?: Maybe<Scalars['RichTextAST']>
  /** Optional updates to localizations */
  localizations?: Maybe<RowProductBackstoryUpdateManyLocalizationsInput>
}

export type RowProductBackstoryUpdateManyLocalizationDataInput = {
  copy?: Maybe<Scalars['RichTextAST']>
}

export type RowProductBackstoryUpdateManyLocalizationInput = {
  data: RowProductBackstoryUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowProductBackstoryUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowProductBackstoryUpdateManyLocalizationInput>>
}

export type RowProductBackstoryUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: RowProductBackstoryUpdateManyInput
  /** Document search */
  where: RowProductBackstoryWhereInput
}

export type RowProductBackstoryUpdateOneInlineInput = {
  /** Connect existing RowProductBackstory document */
  connect?: Maybe<RowProductBackstoryWhereUniqueInput>
  /** Create and connect one RowProductBackstory document */
  create?: Maybe<RowProductBackstoryCreateInput>
  /** Delete currently connected RowProductBackstory document */
  delete?: Maybe<Scalars['Boolean']>
  /** Disconnect currently connected RowProductBackstory document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Update single RowProductBackstory document */
  update?: Maybe<RowProductBackstoryUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowProductBackstory document */
  upsert?: Maybe<RowProductBackstoryUpsertWithNestedWhereUniqueInput>
}

export type RowProductBackstoryUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: RowProductBackstoryUpdateInput
  /** Unique document search */
  where: RowProductBackstoryWhereUniqueInput
}

export type RowProductBackstoryUpsertInput = {
  /** Create document if it didn't exist */
  create: RowProductBackstoryCreateInput
  /** Update document if it exists */
  update: RowProductBackstoryUpdateInput
}

export type RowProductBackstoryUpsertLocalizationInput = {
  create: RowProductBackstoryCreateLocalizationDataInput
  locale: Locale
  update: RowProductBackstoryUpdateLocalizationDataInput
}

export type RowProductBackstoryUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: RowProductBackstoryUpsertInput
  /** Unique document search */
  where: RowProductBackstoryWhereUniqueInput
}

/** Identifies documents */
export type RowProductBackstoryWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowProductBackstoryWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowProductBackstoryWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowProductBackstoryWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  asset?: Maybe<AssetWhereInput>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  pages_every?: Maybe<PageWhereInput>
  pages_none?: Maybe<PageWhereInput>
  pages_some?: Maybe<PageWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

/** References RowProductBackstory record uniquely */
export type RowProductBackstoryWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type RowProductFeature = Node & {
  __typename?: 'RowProductFeature'
  copy: RichText
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** Get the document in other stages */
  documentInStages: Array<RowProductFeature>
  /** List of RowProductFeature versions */
  history: Array<Version>
  /** The unique identifier */
  id: Scalars['ID']
  identity: Scalars['String']
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowProductFeature>
  productpages: Array<Product>
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  /** System stage field */
  stage: Stage
  topic?: Maybe<Scalars['String']>
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
}

export type RowProductFeatureCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowProductFeatureDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
  stages?: Array<Stage>
}

export type RowProductFeatureHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowProductFeatureLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']
  locales?: Array<Locale>
}

export type RowProductFeatureProductpagesArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  skip?: Maybe<Scalars['Int']>
}

export type RowProductFeaturePublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowProductFeatureUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowProductFeatureBoxed = Node & {
  __typename?: 'RowProductFeatureBoxed'
  copy: RichText
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** Get the document in other stages */
  documentInStages: Array<RowProductFeatureBoxed>
  /** List of RowProductFeatureBoxed versions */
  history: Array<Version>
  /** The unique identifier */
  id: Scalars['ID']
  identity: Scalars['String']
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowProductFeatureBoxed>
  productpages: Array<Product>
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  /** System stage field */
  stage: Stage
  topic?: Maybe<Scalars['String']>
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
}

export type RowProductFeatureBoxedCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowProductFeatureBoxedDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
  stages?: Array<Stage>
}

export type RowProductFeatureBoxedHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowProductFeatureBoxedLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']
  locales?: Array<Locale>
}

export type RowProductFeatureBoxedProductpagesArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  skip?: Maybe<Scalars['Int']>
}

export type RowProductFeatureBoxedPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowProductFeatureBoxedUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowProductFeatureBoxedConnectInput = {
  /**
   * Allow to specify document position in list of connected documents, will default to appending at
   * end of list
   */
  position?: Maybe<ConnectPositionInput>
  /** Document to connect */
  where: RowProductFeatureBoxedWhereUniqueInput
}

/** A connection to a list of items. */
export type RowProductFeatureBoxedConnection = {
  __typename?: 'RowProductFeatureBoxedConnection'
  aggregate: Aggregate
  /** A list of edges. */
  edges: Array<RowProductFeatureBoxedEdge>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

export type RowProductFeatureBoxedCreateInput = {
  /** Copy input for default locale (en) */
  copy: Scalars['RichTextAST']
  createdAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowProductFeatureBoxedCreateLocalizationsInput>
  productpages?: Maybe<ProductCreateManyInlineInput>
  /** Topic input for default locale (en) */
  topic?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowProductFeatureBoxedCreateLocalizationDataInput = {
  copy: Scalars['RichTextAST']
  createdAt?: Maybe<Scalars['DateTime']>
  topic?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowProductFeatureBoxedCreateLocalizationInput = {
  /** Localization input */
  data: RowProductFeatureBoxedCreateLocalizationDataInput
  locale: Locale
}

export type RowProductFeatureBoxedCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowProductFeatureBoxedCreateLocalizationInput>>
}

export type RowProductFeatureBoxedCreateManyInlineInput = {
  /** Connect multiple existing RowProductFeatureBoxed documents */
  connect?: Maybe<Array<RowProductFeatureBoxedWhereUniqueInput>>
  /** Create and connect multiple existing RowProductFeatureBoxed documents */
  create?: Maybe<Array<RowProductFeatureBoxedCreateInput>>
}

export type RowProductFeatureBoxedCreateOneInlineInput = {
  /** Connect one existing RowProductFeatureBoxed document */
  connect?: Maybe<RowProductFeatureBoxedWhereUniqueInput>
  /** Create and connect one RowProductFeatureBoxed document */
  create?: Maybe<RowProductFeatureBoxedCreateInput>
}

/** An edge in a connection. */
export type RowProductFeatureBoxedEdge = {
  __typename?: 'RowProductFeatureBoxedEdge'
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
  /** The item at the end of the edge. */
  node: RowProductFeatureBoxed
}

/** Identifies documents */
export type RowProductFeatureBoxedManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowProductFeatureBoxedWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowProductFeatureBoxedWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowProductFeatureBoxedWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  productpages_every?: Maybe<ProductWhereInput>
  productpages_none?: Maybe<ProductWhereInput>
  productpages_some?: Maybe<ProductWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

export type RowProductFeatureBoxedOrderByInput =
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'topic_ASC'
  | 'topic_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'

export type RowProductFeatureBoxedUpdateInput = {
  /** Copy input for default locale (en) */
  copy?: Maybe<Scalars['RichTextAST']>
  identity?: Maybe<Scalars['String']>
  /** Manage document localizations */
  localizations?: Maybe<RowProductFeatureBoxedUpdateLocalizationsInput>
  productpages?: Maybe<ProductUpdateManyInlineInput>
  /** Topic input for default locale (en) */
  topic?: Maybe<Scalars['String']>
}

export type RowProductFeatureBoxedUpdateLocalizationDataInput = {
  copy?: Maybe<Scalars['RichTextAST']>
  topic?: Maybe<Scalars['String']>
}

export type RowProductFeatureBoxedUpdateLocalizationInput = {
  data: RowProductFeatureBoxedUpdateLocalizationDataInput
  locale: Locale
}

export type RowProductFeatureBoxedUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowProductFeatureBoxedCreateLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
  /** Localizations to update */
  update?: Maybe<Array<RowProductFeatureBoxedUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowProductFeatureBoxedUpsertLocalizationInput>>
}

export type RowProductFeatureBoxedUpdateManyInlineInput = {
  /** Connect multiple existing RowProductFeatureBoxed documents */
  connect?: Maybe<Array<RowProductFeatureBoxedConnectInput>>
  /** Create and connect multiple RowProductFeatureBoxed documents */
  create?: Maybe<Array<RowProductFeatureBoxedCreateInput>>
  /** Delete multiple RowProductFeatureBoxed documents */
  delete?: Maybe<Array<RowProductFeatureBoxedWhereUniqueInput>>
  /** Disconnect multiple RowProductFeatureBoxed documents */
  disconnect?: Maybe<Array<RowProductFeatureBoxedWhereUniqueInput>>
  /** Override currently-connected documents with multiple existing RowProductFeatureBoxed documents */
  set?: Maybe<Array<RowProductFeatureBoxedWhereUniqueInput>>
  /** Update multiple RowProductFeatureBoxed documents */
  update?: Maybe<Array<RowProductFeatureBoxedUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowProductFeatureBoxed documents */
  upsert?: Maybe<Array<RowProductFeatureBoxedUpsertWithNestedWhereUniqueInput>>
}

export type RowProductFeatureBoxedUpdateManyInput = {
  /** Copy input for default locale (en) */
  copy?: Maybe<Scalars['RichTextAST']>
  /** Optional updates to localizations */
  localizations?: Maybe<RowProductFeatureBoxedUpdateManyLocalizationsInput>
  /** Topic input for default locale (en) */
  topic?: Maybe<Scalars['String']>
}

export type RowProductFeatureBoxedUpdateManyLocalizationDataInput = {
  copy?: Maybe<Scalars['RichTextAST']>
  topic?: Maybe<Scalars['String']>
}

export type RowProductFeatureBoxedUpdateManyLocalizationInput = {
  data: RowProductFeatureBoxedUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowProductFeatureBoxedUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowProductFeatureBoxedUpdateManyLocalizationInput>>
}

export type RowProductFeatureBoxedUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: RowProductFeatureBoxedUpdateManyInput
  /** Document search */
  where: RowProductFeatureBoxedWhereInput
}

export type RowProductFeatureBoxedUpdateOneInlineInput = {
  /** Connect existing RowProductFeatureBoxed document */
  connect?: Maybe<RowProductFeatureBoxedWhereUniqueInput>
  /** Create and connect one RowProductFeatureBoxed document */
  create?: Maybe<RowProductFeatureBoxedCreateInput>
  /** Delete currently connected RowProductFeatureBoxed document */
  delete?: Maybe<Scalars['Boolean']>
  /** Disconnect currently connected RowProductFeatureBoxed document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Update single RowProductFeatureBoxed document */
  update?: Maybe<RowProductFeatureBoxedUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowProductFeatureBoxed document */
  upsert?: Maybe<RowProductFeatureBoxedUpsertWithNestedWhereUniqueInput>
}

export type RowProductFeatureBoxedUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: RowProductFeatureBoxedUpdateInput
  /** Unique document search */
  where: RowProductFeatureBoxedWhereUniqueInput
}

export type RowProductFeatureBoxedUpsertInput = {
  /** Create document if it didn't exist */
  create: RowProductFeatureBoxedCreateInput
  /** Update document if it exists */
  update: RowProductFeatureBoxedUpdateInput
}

export type RowProductFeatureBoxedUpsertLocalizationInput = {
  create: RowProductFeatureBoxedCreateLocalizationDataInput
  locale: Locale
  update: RowProductFeatureBoxedUpdateLocalizationDataInput
}

export type RowProductFeatureBoxedUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: RowProductFeatureBoxedUpsertInput
  /** Unique document search */
  where: RowProductFeatureBoxedWhereUniqueInput
}

/** Identifies documents */
export type RowProductFeatureBoxedWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowProductFeatureBoxedWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowProductFeatureBoxedWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowProductFeatureBoxedWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  productpages_every?: Maybe<ProductWhereInput>
  productpages_none?: Maybe<ProductWhereInput>
  productpages_some?: Maybe<ProductWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  topic?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  topic_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  topic_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  topic_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  topic_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  topic_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  topic_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  topic_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  topic_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  topic_starts_with?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

/** References RowProductFeatureBoxed record uniquely */
export type RowProductFeatureBoxedWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type RowProductFeatureConnectInput = {
  /**
   * Allow to specify document position in list of connected documents, will default to appending at
   * end of list
   */
  position?: Maybe<ConnectPositionInput>
  /** Document to connect */
  where: RowProductFeatureWhereUniqueInput
}

/** A connection to a list of items. */
export type RowProductFeatureConnection = {
  __typename?: 'RowProductFeatureConnection'
  aggregate: Aggregate
  /** A list of edges. */
  edges: Array<RowProductFeatureEdge>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

export type RowProductFeatureCreateInput = {
  /** Copy input for default locale (en) */
  copy: Scalars['RichTextAST']
  createdAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowProductFeatureCreateLocalizationsInput>
  productpages?: Maybe<ProductCreateManyInlineInput>
  /** Topic input for default locale (en) */
  topic?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowProductFeatureCreateLocalizationDataInput = {
  copy: Scalars['RichTextAST']
  createdAt?: Maybe<Scalars['DateTime']>
  topic?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowProductFeatureCreateLocalizationInput = {
  /** Localization input */
  data: RowProductFeatureCreateLocalizationDataInput
  locale: Locale
}

export type RowProductFeatureCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowProductFeatureCreateLocalizationInput>>
}

export type RowProductFeatureCreateManyInlineInput = {
  /** Connect multiple existing RowProductFeature documents */
  connect?: Maybe<Array<RowProductFeatureWhereUniqueInput>>
  /** Create and connect multiple existing RowProductFeature documents */
  create?: Maybe<Array<RowProductFeatureCreateInput>>
}

export type RowProductFeatureCreateOneInlineInput = {
  /** Connect one existing RowProductFeature document */
  connect?: Maybe<RowProductFeatureWhereUniqueInput>
  /** Create and connect one RowProductFeature document */
  create?: Maybe<RowProductFeatureCreateInput>
}

/** An edge in a connection. */
export type RowProductFeatureEdge = {
  __typename?: 'RowProductFeatureEdge'
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
  /** The item at the end of the edge. */
  node: RowProductFeature
}

/** Identifies documents */
export type RowProductFeatureManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowProductFeatureWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowProductFeatureWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowProductFeatureWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  productpages_every?: Maybe<ProductWhereInput>
  productpages_none?: Maybe<ProductWhereInput>
  productpages_some?: Maybe<ProductWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

export type RowProductFeatureOrderByInput =
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'topic_ASC'
  | 'topic_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'

export type RowProductFeatureUpdateInput = {
  /** Copy input for default locale (en) */
  copy?: Maybe<Scalars['RichTextAST']>
  identity?: Maybe<Scalars['String']>
  /** Manage document localizations */
  localizations?: Maybe<RowProductFeatureUpdateLocalizationsInput>
  productpages?: Maybe<ProductUpdateManyInlineInput>
  /** Topic input for default locale (en) */
  topic?: Maybe<Scalars['String']>
}

export type RowProductFeatureUpdateLocalizationDataInput = {
  copy?: Maybe<Scalars['RichTextAST']>
  topic?: Maybe<Scalars['String']>
}

export type RowProductFeatureUpdateLocalizationInput = {
  data: RowProductFeatureUpdateLocalizationDataInput
  locale: Locale
}

export type RowProductFeatureUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowProductFeatureCreateLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
  /** Localizations to update */
  update?: Maybe<Array<RowProductFeatureUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowProductFeatureUpsertLocalizationInput>>
}

export type RowProductFeatureUpdateManyInlineInput = {
  /** Connect multiple existing RowProductFeature documents */
  connect?: Maybe<Array<RowProductFeatureConnectInput>>
  /** Create and connect multiple RowProductFeature documents */
  create?: Maybe<Array<RowProductFeatureCreateInput>>
  /** Delete multiple RowProductFeature documents */
  delete?: Maybe<Array<RowProductFeatureWhereUniqueInput>>
  /** Disconnect multiple RowProductFeature documents */
  disconnect?: Maybe<Array<RowProductFeatureWhereUniqueInput>>
  /** Override currently-connected documents with multiple existing RowProductFeature documents */
  set?: Maybe<Array<RowProductFeatureWhereUniqueInput>>
  /** Update multiple RowProductFeature documents */
  update?: Maybe<Array<RowProductFeatureUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowProductFeature documents */
  upsert?: Maybe<Array<RowProductFeatureUpsertWithNestedWhereUniqueInput>>
}

export type RowProductFeatureUpdateManyInput = {
  /** Copy input for default locale (en) */
  copy?: Maybe<Scalars['RichTextAST']>
  /** Optional updates to localizations */
  localizations?: Maybe<RowProductFeatureUpdateManyLocalizationsInput>
  /** Topic input for default locale (en) */
  topic?: Maybe<Scalars['String']>
}

export type RowProductFeatureUpdateManyLocalizationDataInput = {
  copy?: Maybe<Scalars['RichTextAST']>
  topic?: Maybe<Scalars['String']>
}

export type RowProductFeatureUpdateManyLocalizationInput = {
  data: RowProductFeatureUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowProductFeatureUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowProductFeatureUpdateManyLocalizationInput>>
}

export type RowProductFeatureUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: RowProductFeatureUpdateManyInput
  /** Document search */
  where: RowProductFeatureWhereInput
}

export type RowProductFeatureUpdateOneInlineInput = {
  /** Connect existing RowProductFeature document */
  connect?: Maybe<RowProductFeatureWhereUniqueInput>
  /** Create and connect one RowProductFeature document */
  create?: Maybe<RowProductFeatureCreateInput>
  /** Delete currently connected RowProductFeature document */
  delete?: Maybe<Scalars['Boolean']>
  /** Disconnect currently connected RowProductFeature document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Update single RowProductFeature document */
  update?: Maybe<RowProductFeatureUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowProductFeature document */
  upsert?: Maybe<RowProductFeatureUpsertWithNestedWhereUniqueInput>
}

export type RowProductFeatureUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: RowProductFeatureUpdateInput
  /** Unique document search */
  where: RowProductFeatureWhereUniqueInput
}

export type RowProductFeatureUpsertInput = {
  /** Create document if it didn't exist */
  create: RowProductFeatureCreateInput
  /** Update document if it exists */
  update: RowProductFeatureUpdateInput
}

export type RowProductFeatureUpsertLocalizationInput = {
  create: RowProductFeatureCreateLocalizationDataInput
  locale: Locale
  update: RowProductFeatureUpdateLocalizationDataInput
}

export type RowProductFeatureUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: RowProductFeatureUpsertInput
  /** Unique document search */
  where: RowProductFeatureWhereUniqueInput
}

/** Identifies documents */
export type RowProductFeatureWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowProductFeatureWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowProductFeatureWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowProductFeatureWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  productpages_every?: Maybe<ProductWhereInput>
  productpages_none?: Maybe<ProductWhereInput>
  productpages_some?: Maybe<ProductWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  topic?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  topic_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  topic_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  topic_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  topic_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  topic_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  topic_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  topic_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  topic_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  topic_starts_with?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

/** References RowProductFeature record uniquely */
export type RowProductFeatureWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type RowProductGrid = Node & {
  __typename?: 'RowProductGrid'
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** Get the document in other stages */
  documentInStages: Array<RowProductGrid>
  /** List of RowProductGrid versions */
  history: Array<Version>
  /** The unique identifier */
  id: Scalars['ID']
  identity: Scalars['String']
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowProductGrid>
  magentoCategory?: Maybe<MagentoCategory>
  pageLinks: Array<PageLink>
  pages: Array<Page>
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  /** System stage field */
  stage: Stage
  title: Scalars['String']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
}

export type RowProductGridCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowProductGridDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
  stages?: Array<Stage>
}

export type RowProductGridHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowProductGridLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']
  locales?: Array<Locale>
}

export type RowProductGridMagentoCategoryArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowProductGridPageLinksArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  orderBy?: Maybe<PageLinkOrderByInput>
  skip?: Maybe<Scalars['Int']>
  where?: Maybe<PageLinkWhereInput>
}

export type RowProductGridPagesArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  skip?: Maybe<Scalars['Int']>
}

export type RowProductGridPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowProductGridUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowProductGridConnectInput = {
  /**
   * Allow to specify document position in list of connected documents, will default to appending at
   * end of list
   */
  position?: Maybe<ConnectPositionInput>
  /** Document to connect */
  where: RowProductGridWhereUniqueInput
}

/** A connection to a list of items. */
export type RowProductGridConnection = {
  __typename?: 'RowProductGridConnection'
  aggregate: Aggregate
  /** A list of edges. */
  edges: Array<RowProductGridEdge>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

export type RowProductGridCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowProductGridCreateLocalizationsInput>
  magentoCategory?: Maybe<MagentoCategoryCreateOneInlineInput>
  pageLinks?: Maybe<PageLinkCreateManyInlineInput>
  pages?: Maybe<PageCreateManyInlineInput>
  /** Title input for default locale (en) */
  title: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowProductGridCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  title: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowProductGridCreateLocalizationInput = {
  /** Localization input */
  data: RowProductGridCreateLocalizationDataInput
  locale: Locale
}

export type RowProductGridCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowProductGridCreateLocalizationInput>>
}

export type RowProductGridCreateManyInlineInput = {
  /** Connect multiple existing RowProductGrid documents */
  connect?: Maybe<Array<RowProductGridWhereUniqueInput>>
  /** Create and connect multiple existing RowProductGrid documents */
  create?: Maybe<Array<RowProductGridCreateInput>>
}

export type RowProductGridCreateOneInlineInput = {
  /** Connect one existing RowProductGrid document */
  connect?: Maybe<RowProductGridWhereUniqueInput>
  /** Create and connect one RowProductGrid document */
  create?: Maybe<RowProductGridCreateInput>
}

/** An edge in a connection. */
export type RowProductGridEdge = {
  __typename?: 'RowProductGridEdge'
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
  /** The item at the end of the edge. */
  node: RowProductGrid
}

/** Identifies documents */
export type RowProductGridManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowProductGridWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowProductGridWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowProductGridWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  magentoCategory?: Maybe<MagentoCategoryWhereInput>
  pageLinks_every?: Maybe<PageLinkWhereInput>
  pageLinks_none?: Maybe<PageLinkWhereInput>
  pageLinks_some?: Maybe<PageLinkWhereInput>
  pages_every?: Maybe<PageWhereInput>
  pages_none?: Maybe<PageWhereInput>
  pages_some?: Maybe<PageWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

export type RowProductGridOrderByInput =
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'

export type RowProductGridUpdateInput = {
  identity?: Maybe<Scalars['String']>
  /** Manage document localizations */
  localizations?: Maybe<RowProductGridUpdateLocalizationsInput>
  magentoCategory?: Maybe<MagentoCategoryUpdateOneInlineInput>
  pageLinks?: Maybe<PageLinkUpdateManyInlineInput>
  pages?: Maybe<PageUpdateManyInlineInput>
  /** Title input for default locale (en) */
  title?: Maybe<Scalars['String']>
}

export type RowProductGridUpdateLocalizationDataInput = {
  title?: Maybe<Scalars['String']>
}

export type RowProductGridUpdateLocalizationInput = {
  data: RowProductGridUpdateLocalizationDataInput
  locale: Locale
}

export type RowProductGridUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowProductGridCreateLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
  /** Localizations to update */
  update?: Maybe<Array<RowProductGridUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowProductGridUpsertLocalizationInput>>
}

export type RowProductGridUpdateManyInlineInput = {
  /** Connect multiple existing RowProductGrid documents */
  connect?: Maybe<Array<RowProductGridConnectInput>>
  /** Create and connect multiple RowProductGrid documents */
  create?: Maybe<Array<RowProductGridCreateInput>>
  /** Delete multiple RowProductGrid documents */
  delete?: Maybe<Array<RowProductGridWhereUniqueInput>>
  /** Disconnect multiple RowProductGrid documents */
  disconnect?: Maybe<Array<RowProductGridWhereUniqueInput>>
  /** Override currently-connected documents with multiple existing RowProductGrid documents */
  set?: Maybe<Array<RowProductGridWhereUniqueInput>>
  /** Update multiple RowProductGrid documents */
  update?: Maybe<Array<RowProductGridUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowProductGrid documents */
  upsert?: Maybe<Array<RowProductGridUpsertWithNestedWhereUniqueInput>>
}

export type RowProductGridUpdateManyInput = {
  /** Optional updates to localizations */
  localizations?: Maybe<RowProductGridUpdateManyLocalizationsInput>
  /** Title input for default locale (en) */
  title?: Maybe<Scalars['String']>
}

export type RowProductGridUpdateManyLocalizationDataInput = {
  title?: Maybe<Scalars['String']>
}

export type RowProductGridUpdateManyLocalizationInput = {
  data: RowProductGridUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowProductGridUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowProductGridUpdateManyLocalizationInput>>
}

export type RowProductGridUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: RowProductGridUpdateManyInput
  /** Document search */
  where: RowProductGridWhereInput
}

export type RowProductGridUpdateOneInlineInput = {
  /** Connect existing RowProductGrid document */
  connect?: Maybe<RowProductGridWhereUniqueInput>
  /** Create and connect one RowProductGrid document */
  create?: Maybe<RowProductGridCreateInput>
  /** Delete currently connected RowProductGrid document */
  delete?: Maybe<Scalars['Boolean']>
  /** Disconnect currently connected RowProductGrid document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Update single RowProductGrid document */
  update?: Maybe<RowProductGridUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowProductGrid document */
  upsert?: Maybe<RowProductGridUpsertWithNestedWhereUniqueInput>
}

export type RowProductGridUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: RowProductGridUpdateInput
  /** Unique document search */
  where: RowProductGridWhereUniqueInput
}

export type RowProductGridUpsertInput = {
  /** Create document if it didn't exist */
  create: RowProductGridCreateInput
  /** Update document if it exists */
  update: RowProductGridUpdateInput
}

export type RowProductGridUpsertLocalizationInput = {
  create: RowProductGridCreateLocalizationDataInput
  locale: Locale
  update: RowProductGridUpdateLocalizationDataInput
}

export type RowProductGridUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: RowProductGridUpsertInput
  /** Unique document search */
  where: RowProductGridWhereUniqueInput
}

/** Identifies documents */
export type RowProductGridWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowProductGridWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowProductGridWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowProductGridWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  magentoCategory?: Maybe<MagentoCategoryWhereInput>
  pageLinks_every?: Maybe<PageLinkWhereInput>
  pageLinks_none?: Maybe<PageLinkWhereInput>
  pageLinks_some?: Maybe<PageLinkWhereInput>
  pages_every?: Maybe<PageWhereInput>
  pages_none?: Maybe<PageWhereInput>
  pages_some?: Maybe<PageWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  title?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  title_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  title_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  title_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  title_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  title_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  title_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  title_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  title_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  title_starts_with?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

/** References RowProductGrid record uniquely */
export type RowProductGridWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type RowProductRelated = Node & {
  __typename?: 'RowProductRelated'
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** Get the document in other stages */
  documentInStages: Array<RowProductRelated>
  /** List of RowProductRelated versions */
  history: Array<Version>
  /** The unique identifier */
  id: Scalars['ID']
  identity: Scalars['String']
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowProductRelated>
  productpages: Array<Product>
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  /** System stage field */
  stage: Stage
  title: Scalars['String']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
}

export type RowProductRelatedCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowProductRelatedDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
  stages?: Array<Stage>
}

export type RowProductRelatedHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowProductRelatedLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']
  locales?: Array<Locale>
}

export type RowProductRelatedProductpagesArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  skip?: Maybe<Scalars['Int']>
}

export type RowProductRelatedPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowProductRelatedUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowProductRelatedConnectInput = {
  /**
   * Allow to specify document position in list of connected documents, will default to appending at
   * end of list
   */
  position?: Maybe<ConnectPositionInput>
  /** Document to connect */
  where: RowProductRelatedWhereUniqueInput
}

/** A connection to a list of items. */
export type RowProductRelatedConnection = {
  __typename?: 'RowProductRelatedConnection'
  aggregate: Aggregate
  /** A list of edges. */
  edges: Array<RowProductRelatedEdge>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

export type RowProductRelatedCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowProductRelatedCreateLocalizationsInput>
  productpages?: Maybe<ProductCreateManyInlineInput>
  /** Title input for default locale (en) */
  title: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowProductRelatedCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  title: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowProductRelatedCreateLocalizationInput = {
  /** Localization input */
  data: RowProductRelatedCreateLocalizationDataInput
  locale: Locale
}

export type RowProductRelatedCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowProductRelatedCreateLocalizationInput>>
}

export type RowProductRelatedCreateManyInlineInput = {
  /** Connect multiple existing RowProductRelated documents */
  connect?: Maybe<Array<RowProductRelatedWhereUniqueInput>>
  /** Create and connect multiple existing RowProductRelated documents */
  create?: Maybe<Array<RowProductRelatedCreateInput>>
}

export type RowProductRelatedCreateOneInlineInput = {
  /** Connect one existing RowProductRelated document */
  connect?: Maybe<RowProductRelatedWhereUniqueInput>
  /** Create and connect one RowProductRelated document */
  create?: Maybe<RowProductRelatedCreateInput>
}

/** An edge in a connection. */
export type RowProductRelatedEdge = {
  __typename?: 'RowProductRelatedEdge'
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
  /** The item at the end of the edge. */
  node: RowProductRelated
}

/** Identifies documents */
export type RowProductRelatedManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowProductRelatedWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowProductRelatedWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowProductRelatedWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  productpages_every?: Maybe<ProductWhereInput>
  productpages_none?: Maybe<ProductWhereInput>
  productpages_some?: Maybe<ProductWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

export type RowProductRelatedOrderByInput =
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'

export type RowProductRelatedUpdateInput = {
  identity?: Maybe<Scalars['String']>
  /** Manage document localizations */
  localizations?: Maybe<RowProductRelatedUpdateLocalizationsInput>
  productpages?: Maybe<ProductUpdateManyInlineInput>
  /** Title input for default locale (en) */
  title?: Maybe<Scalars['String']>
}

export type RowProductRelatedUpdateLocalizationDataInput = {
  title?: Maybe<Scalars['String']>
}

export type RowProductRelatedUpdateLocalizationInput = {
  data: RowProductRelatedUpdateLocalizationDataInput
  locale: Locale
}

export type RowProductRelatedUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowProductRelatedCreateLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
  /** Localizations to update */
  update?: Maybe<Array<RowProductRelatedUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowProductRelatedUpsertLocalizationInput>>
}

export type RowProductRelatedUpdateManyInlineInput = {
  /** Connect multiple existing RowProductRelated documents */
  connect?: Maybe<Array<RowProductRelatedConnectInput>>
  /** Create and connect multiple RowProductRelated documents */
  create?: Maybe<Array<RowProductRelatedCreateInput>>
  /** Delete multiple RowProductRelated documents */
  delete?: Maybe<Array<RowProductRelatedWhereUniqueInput>>
  /** Disconnect multiple RowProductRelated documents */
  disconnect?: Maybe<Array<RowProductRelatedWhereUniqueInput>>
  /** Override currently-connected documents with multiple existing RowProductRelated documents */
  set?: Maybe<Array<RowProductRelatedWhereUniqueInput>>
  /** Update multiple RowProductRelated documents */
  update?: Maybe<Array<RowProductRelatedUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowProductRelated documents */
  upsert?: Maybe<Array<RowProductRelatedUpsertWithNestedWhereUniqueInput>>
}

export type RowProductRelatedUpdateManyInput = {
  /** Optional updates to localizations */
  localizations?: Maybe<RowProductRelatedUpdateManyLocalizationsInput>
  /** Title input for default locale (en) */
  title?: Maybe<Scalars['String']>
}

export type RowProductRelatedUpdateManyLocalizationDataInput = {
  title?: Maybe<Scalars['String']>
}

export type RowProductRelatedUpdateManyLocalizationInput = {
  data: RowProductRelatedUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowProductRelatedUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowProductRelatedUpdateManyLocalizationInput>>
}

export type RowProductRelatedUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: RowProductRelatedUpdateManyInput
  /** Document search */
  where: RowProductRelatedWhereInput
}

export type RowProductRelatedUpdateOneInlineInput = {
  /** Connect existing RowProductRelated document */
  connect?: Maybe<RowProductRelatedWhereUniqueInput>
  /** Create and connect one RowProductRelated document */
  create?: Maybe<RowProductRelatedCreateInput>
  /** Delete currently connected RowProductRelated document */
  delete?: Maybe<Scalars['Boolean']>
  /** Disconnect currently connected RowProductRelated document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Update single RowProductRelated document */
  update?: Maybe<RowProductRelatedUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowProductRelated document */
  upsert?: Maybe<RowProductRelatedUpsertWithNestedWhereUniqueInput>
}

export type RowProductRelatedUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: RowProductRelatedUpdateInput
  /** Unique document search */
  where: RowProductRelatedWhereUniqueInput
}

export type RowProductRelatedUpsertInput = {
  /** Create document if it didn't exist */
  create: RowProductRelatedCreateInput
  /** Update document if it exists */
  update: RowProductRelatedUpdateInput
}

export type RowProductRelatedUpsertLocalizationInput = {
  create: RowProductRelatedCreateLocalizationDataInput
  locale: Locale
  update: RowProductRelatedUpdateLocalizationDataInput
}

export type RowProductRelatedUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: RowProductRelatedUpsertInput
  /** Unique document search */
  where: RowProductRelatedWhereUniqueInput
}

/** Identifies documents */
export type RowProductRelatedWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowProductRelatedWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowProductRelatedWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowProductRelatedWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  productpages_every?: Maybe<ProductWhereInput>
  productpages_none?: Maybe<ProductWhereInput>
  productpages_some?: Maybe<ProductWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  title?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  title_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  title_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  title_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  title_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  title_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  title_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  title_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  title_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  title_starts_with?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

/** References RowProductRelated record uniquely */
export type RowProductRelatedWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type RowProductReviews = Node & {
  __typename?: 'RowProductReviews'
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** Get the document in other stages */
  documentInStages: Array<RowProductReviews>
  /** List of RowProductReviews versions */
  history: Array<Version>
  /** The unique identifier */
  id: Scalars['ID']
  identity: Scalars['String']
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowProductReviews>
  productpages: Array<Product>
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  /** System stage field */
  stage: Stage
  title: Scalars['String']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
}

export type RowProductReviewsCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowProductReviewsDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
  stages?: Array<Stage>
}

export type RowProductReviewsHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowProductReviewsLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']
  locales?: Array<Locale>
}

export type RowProductReviewsProductpagesArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  skip?: Maybe<Scalars['Int']>
}

export type RowProductReviewsPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowProductReviewsUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowProductReviewsConnectInput = {
  /**
   * Allow to specify document position in list of connected documents, will default to appending at
   * end of list
   */
  position?: Maybe<ConnectPositionInput>
  /** Document to connect */
  where: RowProductReviewsWhereUniqueInput
}

/** A connection to a list of items. */
export type RowProductReviewsConnection = {
  __typename?: 'RowProductReviewsConnection'
  aggregate: Aggregate
  /** A list of edges. */
  edges: Array<RowProductReviewsEdge>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

export type RowProductReviewsCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowProductReviewsCreateLocalizationsInput>
  productpages?: Maybe<ProductCreateManyInlineInput>
  /** Title input for default locale (en) */
  title: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowProductReviewsCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  title: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowProductReviewsCreateLocalizationInput = {
  /** Localization input */
  data: RowProductReviewsCreateLocalizationDataInput
  locale: Locale
}

export type RowProductReviewsCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowProductReviewsCreateLocalizationInput>>
}

export type RowProductReviewsCreateManyInlineInput = {
  /** Connect multiple existing RowProductReviews documents */
  connect?: Maybe<Array<RowProductReviewsWhereUniqueInput>>
  /** Create and connect multiple existing RowProductReviews documents */
  create?: Maybe<Array<RowProductReviewsCreateInput>>
}

export type RowProductReviewsCreateOneInlineInput = {
  /** Connect one existing RowProductReviews document */
  connect?: Maybe<RowProductReviewsWhereUniqueInput>
  /** Create and connect one RowProductReviews document */
  create?: Maybe<RowProductReviewsCreateInput>
}

/** An edge in a connection. */
export type RowProductReviewsEdge = {
  __typename?: 'RowProductReviewsEdge'
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
  /** The item at the end of the edge. */
  node: RowProductReviews
}

/** Identifies documents */
export type RowProductReviewsManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowProductReviewsWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowProductReviewsWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowProductReviewsWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  productpages_every?: Maybe<ProductWhereInput>
  productpages_none?: Maybe<ProductWhereInput>
  productpages_some?: Maybe<ProductWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

export type RowProductReviewsOrderByInput =
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'

export type RowProductReviewsUpdateInput = {
  identity?: Maybe<Scalars['String']>
  /** Manage document localizations */
  localizations?: Maybe<RowProductReviewsUpdateLocalizationsInput>
  productpages?: Maybe<ProductUpdateManyInlineInput>
  /** Title input for default locale (en) */
  title?: Maybe<Scalars['String']>
}

export type RowProductReviewsUpdateLocalizationDataInput = {
  title?: Maybe<Scalars['String']>
}

export type RowProductReviewsUpdateLocalizationInput = {
  data: RowProductReviewsUpdateLocalizationDataInput
  locale: Locale
}

export type RowProductReviewsUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowProductReviewsCreateLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
  /** Localizations to update */
  update?: Maybe<Array<RowProductReviewsUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowProductReviewsUpsertLocalizationInput>>
}

export type RowProductReviewsUpdateManyInlineInput = {
  /** Connect multiple existing RowProductReviews documents */
  connect?: Maybe<Array<RowProductReviewsConnectInput>>
  /** Create and connect multiple RowProductReviews documents */
  create?: Maybe<Array<RowProductReviewsCreateInput>>
  /** Delete multiple RowProductReviews documents */
  delete?: Maybe<Array<RowProductReviewsWhereUniqueInput>>
  /** Disconnect multiple RowProductReviews documents */
  disconnect?: Maybe<Array<RowProductReviewsWhereUniqueInput>>
  /** Override currently-connected documents with multiple existing RowProductReviews documents */
  set?: Maybe<Array<RowProductReviewsWhereUniqueInput>>
  /** Update multiple RowProductReviews documents */
  update?: Maybe<Array<RowProductReviewsUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowProductReviews documents */
  upsert?: Maybe<Array<RowProductReviewsUpsertWithNestedWhereUniqueInput>>
}

export type RowProductReviewsUpdateManyInput = {
  /** Optional updates to localizations */
  localizations?: Maybe<RowProductReviewsUpdateManyLocalizationsInput>
  /** Title input for default locale (en) */
  title?: Maybe<Scalars['String']>
}

export type RowProductReviewsUpdateManyLocalizationDataInput = {
  title?: Maybe<Scalars['String']>
}

export type RowProductReviewsUpdateManyLocalizationInput = {
  data: RowProductReviewsUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowProductReviewsUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowProductReviewsUpdateManyLocalizationInput>>
}

export type RowProductReviewsUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: RowProductReviewsUpdateManyInput
  /** Document search */
  where: RowProductReviewsWhereInput
}

export type RowProductReviewsUpdateOneInlineInput = {
  /** Connect existing RowProductReviews document */
  connect?: Maybe<RowProductReviewsWhereUniqueInput>
  /** Create and connect one RowProductReviews document */
  create?: Maybe<RowProductReviewsCreateInput>
  /** Delete currently connected RowProductReviews document */
  delete?: Maybe<Scalars['Boolean']>
  /** Disconnect currently connected RowProductReviews document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Update single RowProductReviews document */
  update?: Maybe<RowProductReviewsUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowProductReviews document */
  upsert?: Maybe<RowProductReviewsUpsertWithNestedWhereUniqueInput>
}

export type RowProductReviewsUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: RowProductReviewsUpdateInput
  /** Unique document search */
  where: RowProductReviewsWhereUniqueInput
}

export type RowProductReviewsUpsertInput = {
  /** Create document if it didn't exist */
  create: RowProductReviewsCreateInput
  /** Update document if it exists */
  update: RowProductReviewsUpdateInput
}

export type RowProductReviewsUpsertLocalizationInput = {
  create: RowProductReviewsCreateLocalizationDataInput
  locale: Locale
  update: RowProductReviewsUpdateLocalizationDataInput
}

export type RowProductReviewsUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: RowProductReviewsUpsertInput
  /** Unique document search */
  where: RowProductReviewsWhereUniqueInput
}

/** Identifies documents */
export type RowProductReviewsWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowProductReviewsWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowProductReviewsWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowProductReviewsWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  productpages_every?: Maybe<ProductWhereInput>
  productpages_none?: Maybe<ProductWhereInput>
  productpages_some?: Maybe<ProductWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  title?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  title_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  title_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  title_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  title_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  title_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  title_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  title_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  title_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  title_starts_with?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

/** References RowProductReviews record uniquely */
export type RowProductReviewsWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type RowProductSpecs = Node & {
  __typename?: 'RowProductSpecs'
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** Get the document in other stages */
  documentInStages: Array<RowProductSpecs>
  /** List of RowProductSpecs versions */
  history: Array<Version>
  /** The unique identifier */
  id: Scalars['ID']
  identity: Scalars['String']
  productpages: Array<Product>
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  /** System stage field */
  stage: Stage
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
}

export type RowProductSpecsDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
  stages?: Array<Stage>
}

export type RowProductSpecsHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowProductSpecsProductpagesArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  skip?: Maybe<Scalars['Int']>
}

export type RowProductSpecsConnectInput = {
  /**
   * Allow to specify document position in list of connected documents, will default to appending at
   * end of list
   */
  position?: Maybe<ConnectPositionInput>
  /** Document to connect */
  where: RowProductSpecsWhereUniqueInput
}

/** A connection to a list of items. */
export type RowProductSpecsConnection = {
  __typename?: 'RowProductSpecsConnection'
  aggregate: Aggregate
  /** A list of edges. */
  edges: Array<RowProductSpecsEdge>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

export type RowProductSpecsCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  productpages?: Maybe<ProductCreateManyInlineInput>
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowProductSpecsCreateManyInlineInput = {
  /** Connect multiple existing RowProductSpecs documents */
  connect?: Maybe<Array<RowProductSpecsWhereUniqueInput>>
  /** Create and connect multiple existing RowProductSpecs documents */
  create?: Maybe<Array<RowProductSpecsCreateInput>>
}

export type RowProductSpecsCreateOneInlineInput = {
  /** Connect one existing RowProductSpecs document */
  connect?: Maybe<RowProductSpecsWhereUniqueInput>
  /** Create and connect one RowProductSpecs document */
  create?: Maybe<RowProductSpecsCreateInput>
}

/** An edge in a connection. */
export type RowProductSpecsEdge = {
  __typename?: 'RowProductSpecsEdge'
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
  /** The item at the end of the edge. */
  node: RowProductSpecs
}

/** Identifies documents */
export type RowProductSpecsManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowProductSpecsWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowProductSpecsWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowProductSpecsWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  productpages_every?: Maybe<ProductWhereInput>
  productpages_none?: Maybe<ProductWhereInput>
  productpages_some?: Maybe<ProductWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

export type RowProductSpecsOrderByInput =
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'

export type RowProductSpecsUpdateInput = {
  identity?: Maybe<Scalars['String']>
  productpages?: Maybe<ProductUpdateManyInlineInput>
}

export type RowProductSpecsUpdateManyInlineInput = {
  /** Connect multiple existing RowProductSpecs documents */
  connect?: Maybe<Array<RowProductSpecsConnectInput>>
  /** Create and connect multiple RowProductSpecs documents */
  create?: Maybe<Array<RowProductSpecsCreateInput>>
  /** Delete multiple RowProductSpecs documents */
  delete?: Maybe<Array<RowProductSpecsWhereUniqueInput>>
  /** Disconnect multiple RowProductSpecs documents */
  disconnect?: Maybe<Array<RowProductSpecsWhereUniqueInput>>
  /** Override currently-connected documents with multiple existing RowProductSpecs documents */
  set?: Maybe<Array<RowProductSpecsWhereUniqueInput>>
  /** Update multiple RowProductSpecs documents */
  update?: Maybe<Array<RowProductSpecsUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowProductSpecs documents */
  upsert?: Maybe<Array<RowProductSpecsUpsertWithNestedWhereUniqueInput>>
}

export type RowProductSpecsUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: Maybe<Scalars['String']>
}

export type RowProductSpecsUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: RowProductSpecsUpdateManyInput
  /** Document search */
  where: RowProductSpecsWhereInput
}

export type RowProductSpecsUpdateOneInlineInput = {
  /** Connect existing RowProductSpecs document */
  connect?: Maybe<RowProductSpecsWhereUniqueInput>
  /** Create and connect one RowProductSpecs document */
  create?: Maybe<RowProductSpecsCreateInput>
  /** Delete currently connected RowProductSpecs document */
  delete?: Maybe<Scalars['Boolean']>
  /** Disconnect currently connected RowProductSpecs document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Update single RowProductSpecs document */
  update?: Maybe<RowProductSpecsUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowProductSpecs document */
  upsert?: Maybe<RowProductSpecsUpsertWithNestedWhereUniqueInput>
}

export type RowProductSpecsUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: RowProductSpecsUpdateInput
  /** Unique document search */
  where: RowProductSpecsWhereUniqueInput
}

export type RowProductSpecsUpsertInput = {
  /** Create document if it didn't exist */
  create: RowProductSpecsCreateInput
  /** Update document if it exists */
  update: RowProductSpecsUpdateInput
}

export type RowProductSpecsUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: RowProductSpecsUpsertInput
  /** Unique document search */
  where: RowProductSpecsWhereUniqueInput
}

/** Identifies documents */
export type RowProductSpecsWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowProductSpecsWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowProductSpecsWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowProductSpecsWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  productpages_every?: Maybe<ProductWhereInput>
  productpages_none?: Maybe<ProductWhereInput>
  productpages_some?: Maybe<ProductWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

/** References RowProductSpecs record uniquely */
export type RowProductSpecsWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type RowProductUpsells = Node & {
  __typename?: 'RowProductUpsells'
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** Get the document in other stages */
  documentInStages: Array<RowProductUpsells>
  /** List of RowProductUpsells versions */
  history: Array<Version>
  /** The unique identifier */
  id: Scalars['ID']
  identity: Scalars['String']
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowProductUpsells>
  productpages: Array<Product>
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  /** System stage field */
  stage: Stage
  title: Scalars['String']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
}

export type RowProductUpsellsCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowProductUpsellsDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
  stages?: Array<Stage>
}

export type RowProductUpsellsHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowProductUpsellsLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']
  locales?: Array<Locale>
}

export type RowProductUpsellsProductpagesArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  skip?: Maybe<Scalars['Int']>
}

export type RowProductUpsellsPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowProductUpsellsUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowProductUpsellsConnectInput = {
  /**
   * Allow to specify document position in list of connected documents, will default to appending at
   * end of list
   */
  position?: Maybe<ConnectPositionInput>
  /** Document to connect */
  where: RowProductUpsellsWhereUniqueInput
}

/** A connection to a list of items. */
export type RowProductUpsellsConnection = {
  __typename?: 'RowProductUpsellsConnection'
  aggregate: Aggregate
  /** A list of edges. */
  edges: Array<RowProductUpsellsEdge>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

export type RowProductUpsellsCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowProductUpsellsCreateLocalizationsInput>
  productpages?: Maybe<ProductCreateManyInlineInput>
  /** Title input for default locale (en) */
  title: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowProductUpsellsCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  title: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowProductUpsellsCreateLocalizationInput = {
  /** Localization input */
  data: RowProductUpsellsCreateLocalizationDataInput
  locale: Locale
}

export type RowProductUpsellsCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowProductUpsellsCreateLocalizationInput>>
}

export type RowProductUpsellsCreateManyInlineInput = {
  /** Connect multiple existing RowProductUpsells documents */
  connect?: Maybe<Array<RowProductUpsellsWhereUniqueInput>>
  /** Create and connect multiple existing RowProductUpsells documents */
  create?: Maybe<Array<RowProductUpsellsCreateInput>>
}

export type RowProductUpsellsCreateOneInlineInput = {
  /** Connect one existing RowProductUpsells document */
  connect?: Maybe<RowProductUpsellsWhereUniqueInput>
  /** Create and connect one RowProductUpsells document */
  create?: Maybe<RowProductUpsellsCreateInput>
}

/** An edge in a connection. */
export type RowProductUpsellsEdge = {
  __typename?: 'RowProductUpsellsEdge'
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
  /** The item at the end of the edge. */
  node: RowProductUpsells
}

/** Identifies documents */
export type RowProductUpsellsManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowProductUpsellsWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowProductUpsellsWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowProductUpsellsWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  productpages_every?: Maybe<ProductWhereInput>
  productpages_none?: Maybe<ProductWhereInput>
  productpages_some?: Maybe<ProductWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

export type RowProductUpsellsOrderByInput =
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'

export type RowProductUpsellsUpdateInput = {
  identity?: Maybe<Scalars['String']>
  /** Manage document localizations */
  localizations?: Maybe<RowProductUpsellsUpdateLocalizationsInput>
  productpages?: Maybe<ProductUpdateManyInlineInput>
  /** Title input for default locale (en) */
  title?: Maybe<Scalars['String']>
}

export type RowProductUpsellsUpdateLocalizationDataInput = {
  title?: Maybe<Scalars['String']>
}

export type RowProductUpsellsUpdateLocalizationInput = {
  data: RowProductUpsellsUpdateLocalizationDataInput
  locale: Locale
}

export type RowProductUpsellsUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowProductUpsellsCreateLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
  /** Localizations to update */
  update?: Maybe<Array<RowProductUpsellsUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowProductUpsellsUpsertLocalizationInput>>
}

export type RowProductUpsellsUpdateManyInlineInput = {
  /** Connect multiple existing RowProductUpsells documents */
  connect?: Maybe<Array<RowProductUpsellsConnectInput>>
  /** Create and connect multiple RowProductUpsells documents */
  create?: Maybe<Array<RowProductUpsellsCreateInput>>
  /** Delete multiple RowProductUpsells documents */
  delete?: Maybe<Array<RowProductUpsellsWhereUniqueInput>>
  /** Disconnect multiple RowProductUpsells documents */
  disconnect?: Maybe<Array<RowProductUpsellsWhereUniqueInput>>
  /** Override currently-connected documents with multiple existing RowProductUpsells documents */
  set?: Maybe<Array<RowProductUpsellsWhereUniqueInput>>
  /** Update multiple RowProductUpsells documents */
  update?: Maybe<Array<RowProductUpsellsUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowProductUpsells documents */
  upsert?: Maybe<Array<RowProductUpsellsUpsertWithNestedWhereUniqueInput>>
}

export type RowProductUpsellsUpdateManyInput = {
  /** Optional updates to localizations */
  localizations?: Maybe<RowProductUpsellsUpdateManyLocalizationsInput>
  /** Title input for default locale (en) */
  title?: Maybe<Scalars['String']>
}

export type RowProductUpsellsUpdateManyLocalizationDataInput = {
  title?: Maybe<Scalars['String']>
}

export type RowProductUpsellsUpdateManyLocalizationInput = {
  data: RowProductUpsellsUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowProductUpsellsUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowProductUpsellsUpdateManyLocalizationInput>>
}

export type RowProductUpsellsUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: RowProductUpsellsUpdateManyInput
  /** Document search */
  where: RowProductUpsellsWhereInput
}

export type RowProductUpsellsUpdateOneInlineInput = {
  /** Connect existing RowProductUpsells document */
  connect?: Maybe<RowProductUpsellsWhereUniqueInput>
  /** Create and connect one RowProductUpsells document */
  create?: Maybe<RowProductUpsellsCreateInput>
  /** Delete currently connected RowProductUpsells document */
  delete?: Maybe<Scalars['Boolean']>
  /** Disconnect currently connected RowProductUpsells document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Update single RowProductUpsells document */
  update?: Maybe<RowProductUpsellsUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowProductUpsells document */
  upsert?: Maybe<RowProductUpsellsUpsertWithNestedWhereUniqueInput>
}

export type RowProductUpsellsUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: RowProductUpsellsUpdateInput
  /** Unique document search */
  where: RowProductUpsellsWhereUniqueInput
}

export type RowProductUpsellsUpsertInput = {
  /** Create document if it didn't exist */
  create: RowProductUpsellsCreateInput
  /** Update document if it exists */
  update: RowProductUpsellsUpdateInput
}

export type RowProductUpsellsUpsertLocalizationInput = {
  create: RowProductUpsellsCreateLocalizationDataInput
  locale: Locale
  update: RowProductUpsellsUpdateLocalizationDataInput
}

export type RowProductUpsellsUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: RowProductUpsellsUpsertInput
  /** Unique document search */
  where: RowProductUpsellsWhereUniqueInput
}

/** Identifies documents */
export type RowProductUpsellsWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowProductUpsellsWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowProductUpsellsWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowProductUpsellsWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  productpages_every?: Maybe<ProductWhereInput>
  productpages_none?: Maybe<ProductWhereInput>
  productpages_some?: Maybe<ProductWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  title?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  title_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  title_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  title_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  title_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  title_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  title_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  title_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  title_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  title_starts_with?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

/** References RowProductUpsells record uniquely */
export type RowProductUpsellsWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type RowQuote = Node & {
  __typename?: 'RowQuote'
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** Get the document in other stages */
  documentInStages: Array<RowQuote>
  /** List of RowQuote versions */
  history: Array<Version>
  /** The unique identifier */
  id: Scalars['ID']
  identity: Scalars['String']
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowQuote>
  pages: Array<Page>
  productpages: Array<Product>
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  quote: RichText
  /** System stage field */
  stage: Stage
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
}

export type RowQuoteCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowQuoteDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
  stages?: Array<Stage>
}

export type RowQuoteHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowQuoteLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']
  locales?: Array<Locale>
}

export type RowQuotePagesArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  skip?: Maybe<Scalars['Int']>
}

export type RowQuoteProductpagesArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  skip?: Maybe<Scalars['Int']>
}

export type RowQuotePublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowQuoteUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowQuoteConnectInput = {
  /**
   * Allow to specify document position in list of connected documents, will default to appending at
   * end of list
   */
  position?: Maybe<ConnectPositionInput>
  /** Document to connect */
  where: RowQuoteWhereUniqueInput
}

/** A connection to a list of items. */
export type RowQuoteConnection = {
  __typename?: 'RowQuoteConnection'
  aggregate: Aggregate
  /** A list of edges. */
  edges: Array<RowQuoteEdge>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

export type RowQuoteCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowQuoteCreateLocalizationsInput>
  pages?: Maybe<PageCreateManyInlineInput>
  productpages?: Maybe<ProductCreateManyInlineInput>
  /** Quote input for default locale (en) */
  quote: Scalars['RichTextAST']
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowQuoteCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  quote: Scalars['RichTextAST']
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowQuoteCreateLocalizationInput = {
  /** Localization input */
  data: RowQuoteCreateLocalizationDataInput
  locale: Locale
}

export type RowQuoteCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowQuoteCreateLocalizationInput>>
}

export type RowQuoteCreateManyInlineInput = {
  /** Connect multiple existing RowQuote documents */
  connect?: Maybe<Array<RowQuoteWhereUniqueInput>>
  /** Create and connect multiple existing RowQuote documents */
  create?: Maybe<Array<RowQuoteCreateInput>>
}

export type RowQuoteCreateOneInlineInput = {
  /** Connect one existing RowQuote document */
  connect?: Maybe<RowQuoteWhereUniqueInput>
  /** Create and connect one RowQuote document */
  create?: Maybe<RowQuoteCreateInput>
}

/** An edge in a connection. */
export type RowQuoteEdge = {
  __typename?: 'RowQuoteEdge'
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
  /** The item at the end of the edge. */
  node: RowQuote
}

/** Identifies documents */
export type RowQuoteManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowQuoteWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowQuoteWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowQuoteWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  pages_every?: Maybe<PageWhereInput>
  pages_none?: Maybe<PageWhereInput>
  pages_some?: Maybe<PageWhereInput>
  productpages_every?: Maybe<ProductWhereInput>
  productpages_none?: Maybe<ProductWhereInput>
  productpages_some?: Maybe<ProductWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

export type RowQuoteOrderByInput =
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'

export type RowQuoteUpdateInput = {
  identity?: Maybe<Scalars['String']>
  /** Manage document localizations */
  localizations?: Maybe<RowQuoteUpdateLocalizationsInput>
  pages?: Maybe<PageUpdateManyInlineInput>
  productpages?: Maybe<ProductUpdateManyInlineInput>
  /** Quote input for default locale (en) */
  quote?: Maybe<Scalars['RichTextAST']>
}

export type RowQuoteUpdateLocalizationDataInput = {
  quote?: Maybe<Scalars['RichTextAST']>
}

export type RowQuoteUpdateLocalizationInput = {
  data: RowQuoteUpdateLocalizationDataInput
  locale: Locale
}

export type RowQuoteUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowQuoteCreateLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
  /** Localizations to update */
  update?: Maybe<Array<RowQuoteUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowQuoteUpsertLocalizationInput>>
}

export type RowQuoteUpdateManyInlineInput = {
  /** Connect multiple existing RowQuote documents */
  connect?: Maybe<Array<RowQuoteConnectInput>>
  /** Create and connect multiple RowQuote documents */
  create?: Maybe<Array<RowQuoteCreateInput>>
  /** Delete multiple RowQuote documents */
  delete?: Maybe<Array<RowQuoteWhereUniqueInput>>
  /** Disconnect multiple RowQuote documents */
  disconnect?: Maybe<Array<RowQuoteWhereUniqueInput>>
  /** Override currently-connected documents with multiple existing RowQuote documents */
  set?: Maybe<Array<RowQuoteWhereUniqueInput>>
  /** Update multiple RowQuote documents */
  update?: Maybe<Array<RowQuoteUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowQuote documents */
  upsert?: Maybe<Array<RowQuoteUpsertWithNestedWhereUniqueInput>>
}

export type RowQuoteUpdateManyInput = {
  /** Optional updates to localizations */
  localizations?: Maybe<RowQuoteUpdateManyLocalizationsInput>
  /** Quote input for default locale (en) */
  quote?: Maybe<Scalars['RichTextAST']>
}

export type RowQuoteUpdateManyLocalizationDataInput = {
  quote?: Maybe<Scalars['RichTextAST']>
}

export type RowQuoteUpdateManyLocalizationInput = {
  data: RowQuoteUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowQuoteUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowQuoteUpdateManyLocalizationInput>>
}

export type RowQuoteUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: RowQuoteUpdateManyInput
  /** Document search */
  where: RowQuoteWhereInput
}

export type RowQuoteUpdateOneInlineInput = {
  /** Connect existing RowQuote document */
  connect?: Maybe<RowQuoteWhereUniqueInput>
  /** Create and connect one RowQuote document */
  create?: Maybe<RowQuoteCreateInput>
  /** Delete currently connected RowQuote document */
  delete?: Maybe<Scalars['Boolean']>
  /** Disconnect currently connected RowQuote document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Update single RowQuote document */
  update?: Maybe<RowQuoteUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowQuote document */
  upsert?: Maybe<RowQuoteUpsertWithNestedWhereUniqueInput>
}

export type RowQuoteUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: RowQuoteUpdateInput
  /** Unique document search */
  where: RowQuoteWhereUniqueInput
}

export type RowQuoteUpsertInput = {
  /** Create document if it didn't exist */
  create: RowQuoteCreateInput
  /** Update document if it exists */
  update: RowQuoteUpdateInput
}

export type RowQuoteUpsertLocalizationInput = {
  create: RowQuoteCreateLocalizationDataInput
  locale: Locale
  update: RowQuoteUpdateLocalizationDataInput
}

export type RowQuoteUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: RowQuoteUpsertInput
  /** Unique document search */
  where: RowQuoteWhereUniqueInput
}

/** Identifies documents */
export type RowQuoteWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowQuoteWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowQuoteWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowQuoteWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  pages_every?: Maybe<PageWhereInput>
  pages_none?: Maybe<PageWhereInput>
  pages_some?: Maybe<PageWhereInput>
  productpages_every?: Maybe<ProductWhereInput>
  productpages_none?: Maybe<ProductWhereInput>
  productpages_some?: Maybe<ProductWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

/** References RowQuote record uniquely */
export type RowQuoteWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type RowServiceOptions = Node & {
  __typename?: 'RowServiceOptions'
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** Get the document in other stages */
  documentInStages: Array<RowServiceOptions>
  /** List of RowServiceOptions versions */
  history: Array<Version>
  /** The unique identifier */
  id: Scalars['ID']
  identity: Scalars['String']
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowServiceOptions>
  pages: Array<Page>
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  serviceOptions: Array<PageLink>
  /** System stage field */
  stage: Stage
  title: Scalars['String']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
}

export type RowServiceOptionsCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowServiceOptionsDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
  stages?: Array<Stage>
}

export type RowServiceOptionsHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowServiceOptionsLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']
  locales?: Array<Locale>
}

export type RowServiceOptionsPagesArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  skip?: Maybe<Scalars['Int']>
}

export type RowServiceOptionsPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowServiceOptionsServiceOptionsArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  orderBy?: Maybe<PageLinkOrderByInput>
  skip?: Maybe<Scalars['Int']>
  where?: Maybe<PageLinkWhereInput>
}

export type RowServiceOptionsUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowServiceOptionsConnectInput = {
  /**
   * Allow to specify document position in list of connected documents, will default to appending at
   * end of list
   */
  position?: Maybe<ConnectPositionInput>
  /** Document to connect */
  where: RowServiceOptionsWhereUniqueInput
}

/** A connection to a list of items. */
export type RowServiceOptionsConnection = {
  __typename?: 'RowServiceOptionsConnection'
  aggregate: Aggregate
  /** A list of edges. */
  edges: Array<RowServiceOptionsEdge>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

export type RowServiceOptionsCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowServiceOptionsCreateLocalizationsInput>
  pages?: Maybe<PageCreateManyInlineInput>
  serviceOptions?: Maybe<PageLinkCreateManyInlineInput>
  /** Title input for default locale (en) */
  title: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowServiceOptionsCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  title: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowServiceOptionsCreateLocalizationInput = {
  /** Localization input */
  data: RowServiceOptionsCreateLocalizationDataInput
  locale: Locale
}

export type RowServiceOptionsCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowServiceOptionsCreateLocalizationInput>>
}

export type RowServiceOptionsCreateManyInlineInput = {
  /** Connect multiple existing RowServiceOptions documents */
  connect?: Maybe<Array<RowServiceOptionsWhereUniqueInput>>
  /** Create and connect multiple existing RowServiceOptions documents */
  create?: Maybe<Array<RowServiceOptionsCreateInput>>
}

export type RowServiceOptionsCreateOneInlineInput = {
  /** Connect one existing RowServiceOptions document */
  connect?: Maybe<RowServiceOptionsWhereUniqueInput>
  /** Create and connect one RowServiceOptions document */
  create?: Maybe<RowServiceOptionsCreateInput>
}

/** An edge in a connection. */
export type RowServiceOptionsEdge = {
  __typename?: 'RowServiceOptionsEdge'
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
  /** The item at the end of the edge. */
  node: RowServiceOptions
}

/** Identifies documents */
export type RowServiceOptionsManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowServiceOptionsWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowServiceOptionsWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowServiceOptionsWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  pages_every?: Maybe<PageWhereInput>
  pages_none?: Maybe<PageWhereInput>
  pages_some?: Maybe<PageWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  serviceOptions_every?: Maybe<PageLinkWhereInput>
  serviceOptions_none?: Maybe<PageLinkWhereInput>
  serviceOptions_some?: Maybe<PageLinkWhereInput>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

export type RowServiceOptionsOrderByInput =
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'

export type RowServiceOptionsUpdateInput = {
  identity?: Maybe<Scalars['String']>
  /** Manage document localizations */
  localizations?: Maybe<RowServiceOptionsUpdateLocalizationsInput>
  pages?: Maybe<PageUpdateManyInlineInput>
  serviceOptions?: Maybe<PageLinkUpdateManyInlineInput>
  /** Title input for default locale (en) */
  title?: Maybe<Scalars['String']>
}

export type RowServiceOptionsUpdateLocalizationDataInput = {
  title?: Maybe<Scalars['String']>
}

export type RowServiceOptionsUpdateLocalizationInput = {
  data: RowServiceOptionsUpdateLocalizationDataInput
  locale: Locale
}

export type RowServiceOptionsUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowServiceOptionsCreateLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
  /** Localizations to update */
  update?: Maybe<Array<RowServiceOptionsUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowServiceOptionsUpsertLocalizationInput>>
}

export type RowServiceOptionsUpdateManyInlineInput = {
  /** Connect multiple existing RowServiceOptions documents */
  connect?: Maybe<Array<RowServiceOptionsConnectInput>>
  /** Create and connect multiple RowServiceOptions documents */
  create?: Maybe<Array<RowServiceOptionsCreateInput>>
  /** Delete multiple RowServiceOptions documents */
  delete?: Maybe<Array<RowServiceOptionsWhereUniqueInput>>
  /** Disconnect multiple RowServiceOptions documents */
  disconnect?: Maybe<Array<RowServiceOptionsWhereUniqueInput>>
  /** Override currently-connected documents with multiple existing RowServiceOptions documents */
  set?: Maybe<Array<RowServiceOptionsWhereUniqueInput>>
  /** Update multiple RowServiceOptions documents */
  update?: Maybe<Array<RowServiceOptionsUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowServiceOptions documents */
  upsert?: Maybe<Array<RowServiceOptionsUpsertWithNestedWhereUniqueInput>>
}

export type RowServiceOptionsUpdateManyInput = {
  /** Optional updates to localizations */
  localizations?: Maybe<RowServiceOptionsUpdateManyLocalizationsInput>
  /** Title input for default locale (en) */
  title?: Maybe<Scalars['String']>
}

export type RowServiceOptionsUpdateManyLocalizationDataInput = {
  title?: Maybe<Scalars['String']>
}

export type RowServiceOptionsUpdateManyLocalizationInput = {
  data: RowServiceOptionsUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowServiceOptionsUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowServiceOptionsUpdateManyLocalizationInput>>
}

export type RowServiceOptionsUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: RowServiceOptionsUpdateManyInput
  /** Document search */
  where: RowServiceOptionsWhereInput
}

export type RowServiceOptionsUpdateOneInlineInput = {
  /** Connect existing RowServiceOptions document */
  connect?: Maybe<RowServiceOptionsWhereUniqueInput>
  /** Create and connect one RowServiceOptions document */
  create?: Maybe<RowServiceOptionsCreateInput>
  /** Delete currently connected RowServiceOptions document */
  delete?: Maybe<Scalars['Boolean']>
  /** Disconnect currently connected RowServiceOptions document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Update single RowServiceOptions document */
  update?: Maybe<RowServiceOptionsUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowServiceOptions document */
  upsert?: Maybe<RowServiceOptionsUpsertWithNestedWhereUniqueInput>
}

export type RowServiceOptionsUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: RowServiceOptionsUpdateInput
  /** Unique document search */
  where: RowServiceOptionsWhereUniqueInput
}

export type RowServiceOptionsUpsertInput = {
  /** Create document if it didn't exist */
  create: RowServiceOptionsCreateInput
  /** Update document if it exists */
  update: RowServiceOptionsUpdateInput
}

export type RowServiceOptionsUpsertLocalizationInput = {
  create: RowServiceOptionsCreateLocalizationDataInput
  locale: Locale
  update: RowServiceOptionsUpdateLocalizationDataInput
}

export type RowServiceOptionsUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: RowServiceOptionsUpsertInput
  /** Unique document search */
  where: RowServiceOptionsWhereUniqueInput
}

/** Identifies documents */
export type RowServiceOptionsWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowServiceOptionsWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowServiceOptionsWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowServiceOptionsWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  pages_every?: Maybe<PageWhereInput>
  pages_none?: Maybe<PageWhereInput>
  pages_some?: Maybe<PageWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  serviceOptions_every?: Maybe<PageLinkWhereInput>
  serviceOptions_none?: Maybe<PageLinkWhereInput>
  serviceOptions_some?: Maybe<PageLinkWhereInput>
  title?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  title_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  title_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  title_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  title_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  title_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  title_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  title_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  title_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  title_starts_with?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

/** References RowServiceOptions record uniquely */
export type RowServiceOptionsWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type RowSpecialBanner = Node & {
  __typename?: 'RowSpecialBanner'
  asset: Asset
  copy: RichText
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** Get the document in other stages */
  documentInStages: Array<RowSpecialBanner>
  /** List of RowSpecialBanner versions */
  history: Array<Version>
  /** The unique identifier */
  id: Scalars['ID']
  identity: Scalars['String']
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowSpecialBanner>
  pageLinks: Array<PageLink>
  pages: Array<Page>
  productpages: Array<Product>
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  /** System stage field */
  stage: Stage
  topic?: Maybe<Scalars['String']>
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
}

export type RowSpecialBannerAssetArgs = {
  locales?: Maybe<Array<Locale>>
}

export type RowSpecialBannerCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowSpecialBannerDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
  stages?: Array<Stage>
}

export type RowSpecialBannerHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowSpecialBannerLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']
  locales?: Array<Locale>
}

export type RowSpecialBannerPageLinksArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  orderBy?: Maybe<PageLinkOrderByInput>
  skip?: Maybe<Scalars['Int']>
  where?: Maybe<PageLinkWhereInput>
}

export type RowSpecialBannerPagesArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  skip?: Maybe<Scalars['Int']>
}

export type RowSpecialBannerProductpagesArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  skip?: Maybe<Scalars['Int']>
}

export type RowSpecialBannerPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowSpecialBannerUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowSpecialBannerConnectInput = {
  /**
   * Allow to specify document position in list of connected documents, will default to appending at
   * end of list
   */
  position?: Maybe<ConnectPositionInput>
  /** Document to connect */
  where: RowSpecialBannerWhereUniqueInput
}

/** A connection to a list of items. */
export type RowSpecialBannerConnection = {
  __typename?: 'RowSpecialBannerConnection'
  aggregate: Aggregate
  /** A list of edges. */
  edges: Array<RowSpecialBannerEdge>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

export type RowSpecialBannerCreateInput = {
  asset: AssetCreateOneInlineInput
  /** Copy input for default locale (en) */
  copy: Scalars['RichTextAST']
  createdAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowSpecialBannerCreateLocalizationsInput>
  pageLinks?: Maybe<PageLinkCreateManyInlineInput>
  pages?: Maybe<PageCreateManyInlineInput>
  productpages?: Maybe<ProductCreateManyInlineInput>
  /** Topic input for default locale (en) */
  topic?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowSpecialBannerCreateLocalizationDataInput = {
  copy: Scalars['RichTextAST']
  createdAt?: Maybe<Scalars['DateTime']>
  topic?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowSpecialBannerCreateLocalizationInput = {
  /** Localization input */
  data: RowSpecialBannerCreateLocalizationDataInput
  locale: Locale
}

export type RowSpecialBannerCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowSpecialBannerCreateLocalizationInput>>
}

export type RowSpecialBannerCreateManyInlineInput = {
  /** Connect multiple existing RowSpecialBanner documents */
  connect?: Maybe<Array<RowSpecialBannerWhereUniqueInput>>
  /** Create and connect multiple existing RowSpecialBanner documents */
  create?: Maybe<Array<RowSpecialBannerCreateInput>>
}

export type RowSpecialBannerCreateOneInlineInput = {
  /** Connect one existing RowSpecialBanner document */
  connect?: Maybe<RowSpecialBannerWhereUniqueInput>
  /** Create and connect one RowSpecialBanner document */
  create?: Maybe<RowSpecialBannerCreateInput>
}

/** An edge in a connection. */
export type RowSpecialBannerEdge = {
  __typename?: 'RowSpecialBannerEdge'
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
  /** The item at the end of the edge. */
  node: RowSpecialBanner
}

/** Identifies documents */
export type RowSpecialBannerManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowSpecialBannerWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowSpecialBannerWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowSpecialBannerWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  asset?: Maybe<AssetWhereInput>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  pageLinks_every?: Maybe<PageLinkWhereInput>
  pageLinks_none?: Maybe<PageLinkWhereInput>
  pageLinks_some?: Maybe<PageLinkWhereInput>
  pages_every?: Maybe<PageWhereInput>
  pages_none?: Maybe<PageWhereInput>
  pages_some?: Maybe<PageWhereInput>
  productpages_every?: Maybe<ProductWhereInput>
  productpages_none?: Maybe<ProductWhereInput>
  productpages_some?: Maybe<ProductWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

export type RowSpecialBannerOrderByInput =
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'topic_ASC'
  | 'topic_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'

export type RowSpecialBannerUpdateInput = {
  asset?: Maybe<AssetUpdateOneInlineInput>
  /** Copy input for default locale (en) */
  copy?: Maybe<Scalars['RichTextAST']>
  identity?: Maybe<Scalars['String']>
  /** Manage document localizations */
  localizations?: Maybe<RowSpecialBannerUpdateLocalizationsInput>
  pageLinks?: Maybe<PageLinkUpdateManyInlineInput>
  pages?: Maybe<PageUpdateManyInlineInput>
  productpages?: Maybe<ProductUpdateManyInlineInput>
  /** Topic input for default locale (en) */
  topic?: Maybe<Scalars['String']>
}

export type RowSpecialBannerUpdateLocalizationDataInput = {
  copy?: Maybe<Scalars['RichTextAST']>
  topic?: Maybe<Scalars['String']>
}

export type RowSpecialBannerUpdateLocalizationInput = {
  data: RowSpecialBannerUpdateLocalizationDataInput
  locale: Locale
}

export type RowSpecialBannerUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowSpecialBannerCreateLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
  /** Localizations to update */
  update?: Maybe<Array<RowSpecialBannerUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowSpecialBannerUpsertLocalizationInput>>
}

export type RowSpecialBannerUpdateManyInlineInput = {
  /** Connect multiple existing RowSpecialBanner documents */
  connect?: Maybe<Array<RowSpecialBannerConnectInput>>
  /** Create and connect multiple RowSpecialBanner documents */
  create?: Maybe<Array<RowSpecialBannerCreateInput>>
  /** Delete multiple RowSpecialBanner documents */
  delete?: Maybe<Array<RowSpecialBannerWhereUniqueInput>>
  /** Disconnect multiple RowSpecialBanner documents */
  disconnect?: Maybe<Array<RowSpecialBannerWhereUniqueInput>>
  /** Override currently-connected documents with multiple existing RowSpecialBanner documents */
  set?: Maybe<Array<RowSpecialBannerWhereUniqueInput>>
  /** Update multiple RowSpecialBanner documents */
  update?: Maybe<Array<RowSpecialBannerUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowSpecialBanner documents */
  upsert?: Maybe<Array<RowSpecialBannerUpsertWithNestedWhereUniqueInput>>
}

export type RowSpecialBannerUpdateManyInput = {
  /** Copy input for default locale (en) */
  copy?: Maybe<Scalars['RichTextAST']>
  /** Optional updates to localizations */
  localizations?: Maybe<RowSpecialBannerUpdateManyLocalizationsInput>
  /** Topic input for default locale (en) */
  topic?: Maybe<Scalars['String']>
}

export type RowSpecialBannerUpdateManyLocalizationDataInput = {
  copy?: Maybe<Scalars['RichTextAST']>
  topic?: Maybe<Scalars['String']>
}

export type RowSpecialBannerUpdateManyLocalizationInput = {
  data: RowSpecialBannerUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowSpecialBannerUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowSpecialBannerUpdateManyLocalizationInput>>
}

export type RowSpecialBannerUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: RowSpecialBannerUpdateManyInput
  /** Document search */
  where: RowSpecialBannerWhereInput
}

export type RowSpecialBannerUpdateOneInlineInput = {
  /** Connect existing RowSpecialBanner document */
  connect?: Maybe<RowSpecialBannerWhereUniqueInput>
  /** Create and connect one RowSpecialBanner document */
  create?: Maybe<RowSpecialBannerCreateInput>
  /** Delete currently connected RowSpecialBanner document */
  delete?: Maybe<Scalars['Boolean']>
  /** Disconnect currently connected RowSpecialBanner document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Update single RowSpecialBanner document */
  update?: Maybe<RowSpecialBannerUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowSpecialBanner document */
  upsert?: Maybe<RowSpecialBannerUpsertWithNestedWhereUniqueInput>
}

export type RowSpecialBannerUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: RowSpecialBannerUpdateInput
  /** Unique document search */
  where: RowSpecialBannerWhereUniqueInput
}

export type RowSpecialBannerUpsertInput = {
  /** Create document if it didn't exist */
  create: RowSpecialBannerCreateInput
  /** Update document if it exists */
  update: RowSpecialBannerUpdateInput
}

export type RowSpecialBannerUpsertLocalizationInput = {
  create: RowSpecialBannerCreateLocalizationDataInput
  locale: Locale
  update: RowSpecialBannerUpdateLocalizationDataInput
}

export type RowSpecialBannerUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: RowSpecialBannerUpsertInput
  /** Unique document search */
  where: RowSpecialBannerWhereUniqueInput
}

/** Identifies documents */
export type RowSpecialBannerWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowSpecialBannerWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowSpecialBannerWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowSpecialBannerWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  asset?: Maybe<AssetWhereInput>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  pageLinks_every?: Maybe<PageLinkWhereInput>
  pageLinks_none?: Maybe<PageLinkWhereInput>
  pageLinks_some?: Maybe<PageLinkWhereInput>
  pages_every?: Maybe<PageWhereInput>
  pages_none?: Maybe<PageWhereInput>
  pages_some?: Maybe<PageWhereInput>
  productpages_every?: Maybe<ProductWhereInput>
  productpages_none?: Maybe<ProductWhereInput>
  productpages_some?: Maybe<ProductWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  topic?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  topic_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  topic_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  topic_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  topic_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  topic_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  topic_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  topic_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  topic_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  topic_starts_with?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

/** References RowSpecialBanner record uniquely */
export type RowSpecialBannerWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type RowSwipeableGrid = Node & {
  __typename?: 'RowSwipeableGrid'
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** Get the document in other stages */
  documentInStages: Array<RowSwipeableGrid>
  /** List of RowSwipeableGrid versions */
  history: Array<Version>
  /** The unique identifier */
  id: Scalars['ID']
  identity: Scalars['String']
  /** System Locale field */
  locale: Locale
  /** Get the other localizations for this document */
  localizations: Array<RowSwipeableGrid>
  pages: Array<Page>
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  /** System stage field */
  stage: Stage
  title: Scalars['String']
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
}

export type RowSwipeableGridCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowSwipeableGridDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
  stages?: Array<Stage>
}

export type RowSwipeableGridHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type RowSwipeableGridLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean']
  locales?: Array<Locale>
}

export type RowSwipeableGridPagesArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  skip?: Maybe<Scalars['Int']>
}

export type RowSwipeableGridPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowSwipeableGridUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation
}

export type RowSwipeableGridConnectInput = {
  /**
   * Allow to specify document position in list of connected documents, will default to appending at
   * end of list
   */
  position?: Maybe<ConnectPositionInput>
  /** Document to connect */
  where: RowSwipeableGridWhereUniqueInput
}

/** A connection to a list of items. */
export type RowSwipeableGridConnection = {
  __typename?: 'RowSwipeableGridConnection'
  aggregate: Aggregate
  /** A list of edges. */
  edges: Array<RowSwipeableGridEdge>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

export type RowSwipeableGridCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: Maybe<RowSwipeableGridCreateLocalizationsInput>
  pages?: Maybe<PageCreateManyInlineInput>
  /** Title input for default locale (en) */
  title: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowSwipeableGridCreateLocalizationDataInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  title: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
}

export type RowSwipeableGridCreateLocalizationInput = {
  /** Localization input */
  data: RowSwipeableGridCreateLocalizationDataInput
  locale: Locale
}

export type RowSwipeableGridCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: Maybe<Array<RowSwipeableGridCreateLocalizationInput>>
}

export type RowSwipeableGridCreateManyInlineInput = {
  /** Connect multiple existing RowSwipeableGrid documents */
  connect?: Maybe<Array<RowSwipeableGridWhereUniqueInput>>
  /** Create and connect multiple existing RowSwipeableGrid documents */
  create?: Maybe<Array<RowSwipeableGridCreateInput>>
}

export type RowSwipeableGridCreateOneInlineInput = {
  /** Connect one existing RowSwipeableGrid document */
  connect?: Maybe<RowSwipeableGridWhereUniqueInput>
  /** Create and connect one RowSwipeableGrid document */
  create?: Maybe<RowSwipeableGridCreateInput>
}

/** An edge in a connection. */
export type RowSwipeableGridEdge = {
  __typename?: 'RowSwipeableGridEdge'
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
  /** The item at the end of the edge. */
  node: RowSwipeableGrid
}

/** Identifies documents */
export type RowSwipeableGridManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowSwipeableGridWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowSwipeableGridWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowSwipeableGridWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  pages_every?: Maybe<PageWhereInput>
  pages_none?: Maybe<PageWhereInput>
  pages_some?: Maybe<PageWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

export type RowSwipeableGridOrderByInput =
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'

export type RowSwipeableGridUpdateInput = {
  identity?: Maybe<Scalars['String']>
  /** Manage document localizations */
  localizations?: Maybe<RowSwipeableGridUpdateLocalizationsInput>
  pages?: Maybe<PageUpdateManyInlineInput>
  /** Title input for default locale (en) */
  title?: Maybe<Scalars['String']>
}

export type RowSwipeableGridUpdateLocalizationDataInput = {
  title?: Maybe<Scalars['String']>
}

export type RowSwipeableGridUpdateLocalizationInput = {
  data: RowSwipeableGridUpdateLocalizationDataInput
  locale: Locale
}

export type RowSwipeableGridUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: Maybe<Array<RowSwipeableGridCreateLocalizationInput>>
  /** Localizations to delete */
  delete?: Maybe<Array<Locale>>
  /** Localizations to update */
  update?: Maybe<Array<RowSwipeableGridUpdateLocalizationInput>>
  upsert?: Maybe<Array<RowSwipeableGridUpsertLocalizationInput>>
}

export type RowSwipeableGridUpdateManyInlineInput = {
  /** Connect multiple existing RowSwipeableGrid documents */
  connect?: Maybe<Array<RowSwipeableGridConnectInput>>
  /** Create and connect multiple RowSwipeableGrid documents */
  create?: Maybe<Array<RowSwipeableGridCreateInput>>
  /** Delete multiple RowSwipeableGrid documents */
  delete?: Maybe<Array<RowSwipeableGridWhereUniqueInput>>
  /** Disconnect multiple RowSwipeableGrid documents */
  disconnect?: Maybe<Array<RowSwipeableGridWhereUniqueInput>>
  /** Override currently-connected documents with multiple existing RowSwipeableGrid documents */
  set?: Maybe<Array<RowSwipeableGridWhereUniqueInput>>
  /** Update multiple RowSwipeableGrid documents */
  update?: Maybe<Array<RowSwipeableGridUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple RowSwipeableGrid documents */
  upsert?: Maybe<Array<RowSwipeableGridUpsertWithNestedWhereUniqueInput>>
}

export type RowSwipeableGridUpdateManyInput = {
  /** Optional updates to localizations */
  localizations?: Maybe<RowSwipeableGridUpdateManyLocalizationsInput>
  /** Title input for default locale (en) */
  title?: Maybe<Scalars['String']>
}

export type RowSwipeableGridUpdateManyLocalizationDataInput = {
  title?: Maybe<Scalars['String']>
}

export type RowSwipeableGridUpdateManyLocalizationInput = {
  data: RowSwipeableGridUpdateManyLocalizationDataInput
  locale: Locale
}

export type RowSwipeableGridUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: Maybe<Array<RowSwipeableGridUpdateManyLocalizationInput>>
}

export type RowSwipeableGridUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: RowSwipeableGridUpdateManyInput
  /** Document search */
  where: RowSwipeableGridWhereInput
}

export type RowSwipeableGridUpdateOneInlineInput = {
  /** Connect existing RowSwipeableGrid document */
  connect?: Maybe<RowSwipeableGridWhereUniqueInput>
  /** Create and connect one RowSwipeableGrid document */
  create?: Maybe<RowSwipeableGridCreateInput>
  /** Delete currently connected RowSwipeableGrid document */
  delete?: Maybe<Scalars['Boolean']>
  /** Disconnect currently connected RowSwipeableGrid document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Update single RowSwipeableGrid document */
  update?: Maybe<RowSwipeableGridUpdateWithNestedWhereUniqueInput>
  /** Upsert single RowSwipeableGrid document */
  upsert?: Maybe<RowSwipeableGridUpsertWithNestedWhereUniqueInput>
}

export type RowSwipeableGridUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: RowSwipeableGridUpdateInput
  /** Unique document search */
  where: RowSwipeableGridWhereUniqueInput
}

export type RowSwipeableGridUpsertInput = {
  /** Create document if it didn't exist */
  create: RowSwipeableGridCreateInput
  /** Update document if it exists */
  update: RowSwipeableGridUpdateInput
}

export type RowSwipeableGridUpsertLocalizationInput = {
  create: RowSwipeableGridCreateLocalizationDataInput
  locale: Locale
  update: RowSwipeableGridUpdateLocalizationDataInput
}

export type RowSwipeableGridUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: RowSwipeableGridUpsertInput
  /** Unique document search */
  where: RowSwipeableGridWhereUniqueInput
}

/** Identifies documents */
export type RowSwipeableGridWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RowSwipeableGridWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RowSwipeableGridWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RowSwipeableGridWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  pages_every?: Maybe<PageWhereInput>
  pages_none?: Maybe<PageWhereInput>
  pages_some?: Maybe<PageWhereInput>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  title?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  title_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  title_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  title_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  title_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  title_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  title_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  title_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  title_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  title_starts_with?: Maybe<Scalars['String']>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
}

/** References RowSwipeableGrid record uniquely */
export type RowSwipeableGridWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

/** Stage system enumeration */
export type Stage =
  /** The Draft is the default stage for all your content. */
  | 'DRAFT'
  /** The Published stage is where you can publish your content to. */
  | 'PUBLISHED'

export type SystemDateTimeFieldVariation = 'BASE' | 'COMBINED' | 'LOCALIZATION'

export type UnpublishLocaleInput = {
  /** Locales to unpublish */
  locale: Locale
  /** Stages to unpublish selected locales from */
  stages: Array<Stage>
}

/** System User Kind */
export type UserKind = 'MEMBER' | 'PAT' | 'PUBLIC' | 'WEBHOOK'

export type Usps = Node & {
  __typename?: 'Usps'
  /** The time the document was created */
  createdAt: Scalars['DateTime']
  /** Get the document in other stages */
  documentInStages: Array<Usps>
  /** List of Usps versions */
  history: Array<Version>
  /** The unique identifier */
  id: Scalars['ID']
  identity: Scalars['String']
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>
  /** System stage field */
  stage: Stage
  /** The time the document was updated */
  updatedAt: Scalars['DateTime']
  uspsMultiple: Array<PageLink>
}

export type UspsDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean']
  inheritLocale?: Scalars['Boolean']
  stages?: Array<Stage>
}

export type UspsHistoryArgs = {
  limit?: Scalars['Int']
  skip?: Scalars['Int']
  stageOverride?: Maybe<Stage>
}

export type UspsUspsMultipleArgs = {
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  first?: Maybe<Scalars['Int']>
  last?: Maybe<Scalars['Int']>
  locales?: Maybe<Array<Locale>>
  orderBy?: Maybe<PageLinkOrderByInput>
  skip?: Maybe<Scalars['Int']>
  where?: Maybe<PageLinkWhereInput>
}

export type UspsConnectInput = {
  /**
   * Allow to specify document position in list of connected documents, will default to appending at
   * end of list
   */
  position?: Maybe<ConnectPositionInput>
  /** Document to connect */
  where: UspsWhereUniqueInput
}

/** A connection to a list of items. */
export type UspsConnection = {
  __typename?: 'UspsConnection'
  aggregate: Aggregate
  /** A list of edges. */
  edges: Array<UspsEdge>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

export type UspsCreateInput = {
  createdAt?: Maybe<Scalars['DateTime']>
  identity: Scalars['String']
  updatedAt?: Maybe<Scalars['DateTime']>
  uspsMultiple?: Maybe<PageLinkCreateManyInlineInput>
}

export type UspsCreateManyInlineInput = {
  /** Connect multiple existing Usps documents */
  connect?: Maybe<Array<UspsWhereUniqueInput>>
  /** Create and connect multiple existing Usps documents */
  create?: Maybe<Array<UspsCreateInput>>
}

export type UspsCreateOneInlineInput = {
  /** Connect one existing Usps document */
  connect?: Maybe<UspsWhereUniqueInput>
  /** Create and connect one Usps document */
  create?: Maybe<UspsCreateInput>
}

/** An edge in a connection. */
export type UspsEdge = {
  __typename?: 'UspsEdge'
  /** A cursor for use in pagination. */
  cursor: Scalars['String']
  /** The item at the end of the edge. */
  node: Usps
}

/** Identifies documents */
export type UspsManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<UspsWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<UspsWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<UspsWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  uspsMultiple_every?: Maybe<PageLinkWhereInput>
  uspsMultiple_none?: Maybe<PageLinkWhereInput>
  uspsMultiple_some?: Maybe<PageLinkWhereInput>
}

export type UspsOrderByInput =
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'id_ASC'
  | 'id_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'

export type UspsUpdateInput = {
  identity?: Maybe<Scalars['String']>
  uspsMultiple?: Maybe<PageLinkUpdateManyInlineInput>
}

export type UspsUpdateManyInlineInput = {
  /** Connect multiple existing Usps documents */
  connect?: Maybe<Array<UspsConnectInput>>
  /** Create and connect multiple Usps documents */
  create?: Maybe<Array<UspsCreateInput>>
  /** Delete multiple Usps documents */
  delete?: Maybe<Array<UspsWhereUniqueInput>>
  /** Disconnect multiple Usps documents */
  disconnect?: Maybe<Array<UspsWhereUniqueInput>>
  /** Override currently-connected documents with multiple existing Usps documents */
  set?: Maybe<Array<UspsWhereUniqueInput>>
  /** Update multiple Usps documents */
  update?: Maybe<Array<UspsUpdateWithNestedWhereUniqueInput>>
  /** Upsert multiple Usps documents */
  upsert?: Maybe<Array<UspsUpsertWithNestedWhereUniqueInput>>
}

export type UspsUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: Maybe<Scalars['String']>
}

export type UspsUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: UspsUpdateManyInput
  /** Document search */
  where: UspsWhereInput
}

export type UspsUpdateOneInlineInput = {
  /** Connect existing Usps document */
  connect?: Maybe<UspsWhereUniqueInput>
  /** Create and connect one Usps document */
  create?: Maybe<UspsCreateInput>
  /** Delete currently connected Usps document */
  delete?: Maybe<Scalars['Boolean']>
  /** Disconnect currently connected Usps document */
  disconnect?: Maybe<Scalars['Boolean']>
  /** Update single Usps document */
  update?: Maybe<UspsUpdateWithNestedWhereUniqueInput>
  /** Upsert single Usps document */
  upsert?: Maybe<UspsUpsertWithNestedWhereUniqueInput>
}

export type UspsUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: UspsUpdateInput
  /** Unique document search */
  where: UspsWhereUniqueInput
}

export type UspsUpsertInput = {
  /** Create document if it didn't exist */
  create: UspsCreateInput
  /** Update document if it exists */
  update: UspsUpdateInput
}

export type UspsUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: UspsUpsertInput
  /** Unique document search */
  where: UspsWhereUniqueInput
}

/** Identifies documents */
export type UspsWhereInput = {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<UspsWhereInput>>
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<UspsWhereInput>>
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<UspsWhereInput>>
  /** Contains search across all appropriate fields. */
  _search?: Maybe<Scalars['String']>
  createdAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  id?: Maybe<Scalars['ID']>
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>
  /** All values not ending with the given string */
  id_not_ends_with?: Maybe<Scalars['ID']>
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
  /** All values containing the given string. */
  identity_contains?: Maybe<Scalars['String']>
  /** All values ending with the given string. */
  identity_ends_with?: Maybe<Scalars['String']>
  /** All values that are contained in given list. */
  identity_in?: Maybe<Array<Scalars['String']>>
  /** All values that are not equal to given value. */
  identity_not?: Maybe<Scalars['String']>
  /** All values not containing the given string. */
  identity_not_contains?: Maybe<Scalars['String']>
  /** All values not ending with the given string */
  identity_not_ends_with?: Maybe<Scalars['String']>
  /** All values that are not contained in given list. */
  identity_not_in?: Maybe<Array<Scalars['String']>>
  /** All values not starting with the given string. */
  identity_not_starts_with?: Maybe<Scalars['String']>
  /** All values starting with the given string. */
  identity_starts_with?: Maybe<Scalars['String']>
  publishedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  publishedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  publishedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  publishedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  publishedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  publishedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  publishedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  updatedAt?: Maybe<Scalars['DateTime']>
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>
  uspsMultiple_every?: Maybe<PageLinkWhereInput>
  uspsMultiple_none?: Maybe<PageLinkWhereInput>
  uspsMultiple_some?: Maybe<PageLinkWhereInput>
}

/** References Usps record uniquely */
export type UspsWhereUniqueInput = {
  id?: Maybe<Scalars['ID']>
  identity?: Maybe<Scalars['String']>
}

export type Version = {
  __typename?: 'Version'
  createdAt: Scalars['DateTime']
  id: Scalars['ID']
  revision: Scalars['Int']
  stage: Stage
}

export type VersionWhereInput = {
  id: Scalars['ID']
  revision: Scalars['Int']
  stage: Stage
}

export type _FilterKind =
  | 'AND'
  | 'NOT'
  | 'OR'
  | 'contains'
  | 'contains_all'
  | 'contains_none'
  | 'contains_some'
  | 'ends_with'
  | 'eq'
  | 'eq_not'
  | 'gt'
  | 'gte'
  | 'in'
  | 'lt'
  | 'lte'
  | 'not_contains'
  | 'not_ends_with'
  | 'not_in'
  | 'not_starts_with'
  | 'relational_every'
  | 'relational_none'
  | 'relational_single'
  | 'relational_some'
  | 'search'
  | 'starts_with'

export type _MutationInputFieldKind =
  | 'enum'
  | 'relation'
  | 'richText'
  | 'richTextWithEmbeds'
  | 'scalar'
  | 'union'
  | 'virtual'

export type _MutationKind =
  | 'create'
  | 'delete'
  | 'deleteMany'
  | 'publish'
  | 'publishMany'
  | 'unpublish'
  | 'unpublishMany'
  | 'update'
  | 'updateMany'
  | 'upsert'

export type _OrderDirection = 'asc' | 'desc'

export type _RelationInputCardinality = 'many' | 'one'

export type _RelationInputKind = 'create' | 'update'

export type _RelationKind = 'regular' | 'union'

export type _SystemDateTimeFieldVariation = 'base' | 'combined' | 'localization'

export type HistoryStatePage = {
  __typename?: 'HistoryStatePage'
  as: Scalars['String']
  href: Scalars['String']
  title: Scalars['String']
  x: Scalars['Int']
  y: Scalars['Int']
}

export type Direction = 'BACK' | 'FORWARD'

export type Phase = 'FINISHED' | 'LOADING' | 'LOCATION_CHANGED' | 'REGISTERED'

export type HistoryState = {
  __typename?: 'HistoryState'
  direction: Direction
  idx: Scalars['Int']
  pages: Array<HistoryStatePage>
  phase: Phase
}
